{"meta":{"title":"jinux","subtitle":null,"description":"前端 学习 javascript","author":"jinux","url":""},"pages":[{"title":"categories","date":"2018-08-20T08:19:43.000Z","updated":"2018-10-12T02:42:30.655Z","comments":true,"path":"categories/index.html","permalink":"/categories/index.html","excerpt":"","text":"javascriptnodejscss计算机原理少儿编程"},{"title":"tags-test","date":"2018-08-20T08:18:58.000Z","updated":"2018-08-27T06:24:35.212Z","comments":true,"path":"tags/index.html","permalink":"/tags/index.html","excerpt":"","text":"tag-jquery"}],"posts":[{"title":"zepto源码","slug":"zepto源码","date":"2018-11-16T08:30:56.000Z","updated":"2018-11-16T08:32:03.385Z","comments":true,"path":"2018/11/16/zepto源码/","link":"","permalink":"/2018/11/16/zepto源码/","excerpt":"zepto源码","text":"zepto源码 zepto源码epto v1.2.0 - zepto event ajax form ie - zeptojs.com/license */(function(global, factory) &#123; if (typeof define === 'function' &amp;&amp; define.amd) define(function() &#123; return factory(global) &#125;) else factory(global)&#125;(this, function(window) &#123; var Zepto = (function() &#123; var undefined, key, $, classList, emptyArray = [], concat = emptyArray.concat, filter = emptyArray.filter, slice = emptyArray.slice, document = window.document, elementDisplay = &#123;&#125;, classCache = &#123;&#125;, cssNumber = &#123; 'column-count': 1, 'columns': 1, 'font-weight': 1, 'line-height': 1,'opacity': 1, 'z-index': 1, 'zoom': 1 &#125;, fragmentRE = /^\\s*&lt;(\\w+|!)[^&gt;]*&gt;/, singleTagRE = /^&lt;(\\w+)\\s*\\/?&gt;(?:&lt;\\/\\1&gt;|)$/, tagExpanderRE = /&lt;(?!area|br|col|embed|hr|img|input|link|meta|param)(([\\w:]+)[^&gt;]*)\\/&gt;/ig, rootNodeRE = /^(?:body|html)$/i, capitalRE = /([A-Z])/g, // special attributes that should be get/set via method calls methodAttributes = ['val', 'css', 'html', 'text', 'data', 'width', 'height', 'offset'], adjacencyOperators = [ 'after', 'prepend', 'before', 'append' ], table = document.createElement('table'), tableRow = document.createElement('tr'), containers = &#123; 'tr': document.createElement('tbody'), 'tbody': table, 'thead': table, 'tfoot': table, 'td': tableRow, 'th': tableRow, '*': document.createElement('div') &#125;, readyRE = /complete|loaded|interactive/, simpleSelectorRE = /^[\\w-]*$/, class2type = &#123;&#125;, toString = class2type.toString, zepto = &#123;&#125;, camelize, uniq, tempParent = document.createElement('div'), propMap = &#123; 'tabindex': 'tabIndex', 'readonly': 'readOnly', 'for': 'htmlFor', 'class': 'className', 'maxlength': 'maxLength', 'cellspacing': 'cellSpacing', 'cellpadding': 'cellPadding', 'rowspan': 'rowSpan', 'colspan': 'colSpan', 'usemap': 'useMap', 'frameborder': 'frameBorder', 'contenteditable': 'contentEditable' &#125;, isArray = Array.isArray || function(object)&#123; return object instanceof Array &#125; // 判断节点是否包含选择器 zepto.matches = function(element, selector) &#123; if (!selector || !element || element.nodeType !== 1) return false var matchesSelector = element.matches || element.webkitMatchesSelector || element.mozMatchesSelector || element.oMatchesSelector || element.matchesSelector if (matchesSelector) return matchesSelector.call(element, selector) // fall back to performing a selector: var match, parent = element.parentNode, temp = !parent if (temp) (parent = tempParent).appendChild(element) match = ~zepto.qsa(parent, selector).indexOf(element) temp &amp;&amp; tempParent.removeChild(element) return match &#125; function type(obj) &#123; return obj == null ? String(obj) : class2type[toString.call(obj)] || \"object\" &#125; function isFunction(value) &#123; return type(value) == \"function\" &#125; function isWindow(obj) &#123; return obj != null &amp;&amp; obj == obj.window &#125; function isDocument(obj) &#123; return obj != null &amp;&amp; obj.nodeType == obj.DOCUMENT_NODE &#125; function isObject(obj) &#123; return type(obj) == \"object\" &#125; // 判断是不是纯对象，如 &#123;&#125;,prototype没有添加的 function isPlainObject(obj) &#123; return isObject(obj) &amp;&amp; !isWindow(obj) &amp;&amp; Object.getPrototypeOf(obj) == Object.prototype &#125; function likeArray(obj) &#123; var length = !!obj &amp;&amp; 'length' in obj &amp;&amp; obj.length, type = $.type(obj) // 判断是不是类数组对象 return 'function' != type &amp;&amp; !isWindow(obj) &amp;&amp; ( 'array' == type || length === 0 || (typeof length == 'number' &amp;&amp; length &gt; 0 &amp;&amp; (length - 1) in obj) ) &#125; // 压缩精简数组 function compact(array) &#123; return filter.call(array, function(item)&#123; return item != null &#125;) &#125; function flatten(array) &#123; return array.length &gt; 0 ? $.fn.concat.apply([], array) : array &#125; camelize = function(str)&#123; return str.replace(/-+(.)?/g, function(match, chr)&#123; return chr ? chr.toUpperCase() : '' &#125;) &#125; function dasherize(str) &#123; return str.replace(/::/g, '/') .replace(/([A-Z]+)([A-Z][a-z])/g, '$1_$2') .replace(/([a-z\\d])([A-Z])/g, '$1_$2') .replace(/_/g, '-') .toLowerCase() &#125; // 删除数组中重复的元素，这个方法好牛逼 uniq = function(array)&#123; return filter.call(array, function(item, idx)&#123; return array.indexOf(item) == idx &#125;) &#125; function classRE(name) &#123; return name in classCache ? classCache[name] : (classCache[name] = new RegExp('(^|\\\\s)' + name + '(\\\\s|$)')) &#125; function maybeAddPx(name, value) &#123; return (typeof value == \"number\" &amp;&amp; !cssNumber[dasherize(name)]) ? value + \"px\" : value &#125; function defaultDisplay(nodeName) &#123; var element, display if (!elementDisplay[nodeName]) &#123; element = document.createElement(nodeName) document.body.appendChild(element) display = getComputedStyle(element, '').getPropertyValue(\"display\") element.parentNode.removeChild(element) display == \"none\" &amp;&amp; (display = \"block\") elementDisplay[nodeName] = display &#125; return elementDisplay[nodeName] &#125; function children(element) &#123; return 'children' in element ? slice.call(element.children) : $.map(element.childNodes, function(node)&#123; if (node.nodeType == 1) return node &#125;) &#125; function Z(dom, selector) &#123; var i, len = dom ? dom.length : 0 for (i = 0; i &lt; len; i++) this[i] = dom[i] this.length = len this.selector = selector || '' &#125; // `$.zepto.fragment` takes a html string and an optional tag name // to generate DOM nodes from the given html string. // The generated DOM nodes are returned as an array. // This function can be overridden in plugins for example to make // it compatible with browsers that don't support the DOM fully. zepto.fragment = function(html, name, properties) &#123; var dom, nodes, container // A special case optimization for a single tag if (singleTagRE.test(html)) dom = $(document.createElement(RegExp.$1)) if (!dom) &#123; if (html.replace) html = html.replace(tagExpanderRE, \"&lt;$1&gt;&lt;/$2&gt;\") if (name === undefined) name = fragmentRE.test(html) &amp;&amp; RegExp.$1 if (!(name in containers)) name = '*' container = containers[name] container.innerHTML = '' + html dom = $.each(slice.call(container.childNodes), function()&#123; container.removeChild(this) &#125;) &#125; if (isPlainObject(properties)) &#123; nodes = $(dom) $.each(properties, function(key, value) &#123; if (methodAttributes.indexOf(key) &gt; -1) nodes[key](value) else nodes.attr(key, value) &#125;) &#125; return dom &#125; // `$.zepto.Z` swaps out the prototype of the given `dom` array // of nodes with `$.fn` and thus supplying all the Zepto functions // to the array. This method can be overridden in plugins. zepto.Z = function(dom, selector) &#123; return new Z(dom, selector) &#125; // `$.zepto.isZ` should return `true` if the given object is a Zepto // collection. This method can be overridden in plugins. zepto.isZ = function(object) &#123; return object instanceof zepto.Z &#125; // `$.zepto.init` is Zepto's counterpart to jQuery's `$.fn.init` and // takes a CSS selector and an optional context (and handles various // special cases). // This method can be overridden in plugins. zepto.init = function(selector, context) &#123; var dom // If nothing given, return an empty Zepto collection if (!selector) return zepto.Z() // Optimize for string selectors else if (typeof selector == 'string') &#123; selector = selector.trim() // If it's a html fragment, create nodes from it // Note: In both Chrome 21 and Firefox 15, DOM error 12 // is thrown if the fragment doesn't begin with &lt; if (selector[0] == '&lt;' &amp;&amp; fragmentRE.test(selector)) dom = zepto.fragment(selector, RegExp.$1, context), selector = null // If there's a context, create a collection on that context first, and select // nodes from there else if (context !== undefined) return $(context).find(selector) // If it's a CSS selector, use it to select nodes. else dom = zepto.qsa(document, selector) &#125; // If a function is given, call it when the DOM is ready else if (isFunction(selector)) return $(document).ready(selector) // If a Zepto collection is given, just return it else if (zepto.isZ(selector)) return selector else &#123; // normalize array if an array of nodes is given if (isArray(selector)) dom = compact(selector) // Wrap DOM nodes. else if (isObject(selector)) dom = [selector], selector = null // If it's a html fragment, create nodes from it else if (fragmentRE.test(selector)) dom = zepto.fragment(selector.trim(), RegExp.$1, context), selector = null // If there's a context, create a collection on that context first, and select // nodes from there else if (context !== undefined) return $(context).find(selector) // And last but no least, if it's a CSS selector, use it to select nodes. else dom = zepto.qsa(document, selector) &#125; // create a new Zepto collection from the nodes found return zepto.Z(dom, selector) &#125; // `$` will be the base `Zepto` object. When calling this // function just call `$.zepto.init, which makes the implementation // details of selecting nodes and creating Zepto collections // patchable in plugins. $ = function(selector, context)&#123; return zepto.init(selector, context) &#125; function extend(target, source, deep) &#123; for (key in source) if (deep &amp;&amp; (isPlainObject(source[key]) || isArray(source[key]))) &#123; if (isPlainObject(source[key]) &amp;&amp; !isPlainObject(target[key])) target[key] = &#123;&#125; if (isArray(source[key]) &amp;&amp; !isArray(target[key])) target[key] = [] extend(target[key], source[key], deep) &#125; else if (source[key] !== undefined) target[key] = source[key] &#125; // Copy all but undefined properties from one or more // objects to the `target` object. $.extend = function(target)&#123; var deep, args = slice.call(arguments, 1) if (typeof target == 'boolean') &#123; deep = target target = args.shift() &#125; args.forEach(function(arg)&#123; extend(target, arg, deep) &#125;) return target &#125; // `$.zepto.qsa` is Zepto's CSS selector implementation which // uses `document.querySelectorAll` and optimizes for some special cases, like `#id`. // This method can be overridden in plugins. zepto.qsa = function(element, selector)&#123; var found, maybeID = selector[0] == '#', maybeClass = !maybeID &amp;&amp; selector[0] == '.', nameOnly = maybeID || maybeClass ? selector.slice(1) : selector, // Ensure that a 1 char tag name still gets checked isSimple = simpleSelectorRE.test(nameOnly) return (element.getElementById &amp;&amp; isSimple &amp;&amp; maybeID) ? // Safari DocumentFragment doesn't have getElementById ( (found = element.getElementById(nameOnly)) ? [found] : [] ) : (element.nodeType !== 1 &amp;&amp; element.nodeType !== 9 &amp;&amp; element.nodeType !== 11) ? [] : slice.call( isSimple &amp;&amp; !maybeID &amp;&amp; element.getElementsByClassName ? // DocumentFragment doesn't have getElementsByClassName/TagName maybeClass ? element.getElementsByClassName(nameOnly) : // If it's simple, it could be a class element.getElementsByTagName(selector) : // Or a tag element.querySelectorAll(selector) // Or it's not simple, and we need to query all ) &#125; function filtered(nodes, selector) &#123; return selector == null ? $(nodes) : $(nodes).filter(selector) &#125; $.contains = document.documentElement.contains ? function(parent, node) &#123; return parent !== node &amp;&amp; parent.contains(node) &#125; : function(parent, node) &#123; while (node &amp;&amp; (node = node.parentNode)) if (node === parent) return true return false &#125; function funcArg(context, arg, idx, payload) &#123; return isFunction(arg) ? arg.call(context, idx, payload) : arg &#125; function setAttribute(node, name, value) &#123; value == null ? node.removeAttribute(name) : node.setAttribute(name, value) &#125; // access className property while respecting SVGAnimatedString function className(node, value)&#123; var klass = node.className || '', svg = klass &amp;&amp; klass.baseVal !== undefined if (value === undefined) return svg ? klass.baseVal : klass svg ? (klass.baseVal = value) : (node.className = value) &#125; // \"true\" =&gt; true // \"false\" =&gt; false // \"null\" =&gt; null // \"42\" =&gt; 42 // \"42.5\" =&gt; 42.5 // \"08\" =&gt; \"08\" // JSON =&gt; parse if valid // String =&gt; self function deserializeValue(value) &#123; try &#123; return value ? value == \"true\" || ( value == \"false\" ? false : value == \"null\" ? null : +value + \"\" == value ? +value : /^[\\[\\&#123;]/.test(value) ? $.parseJSON(value) : value ) : value &#125; catch(e) &#123; return value &#125; &#125; $.type = type $.isFunction = isFunction $.isWindow = isWindow $.isArray = isArray $.isPlainObject = isPlainObject $.isEmptyObject = function(obj) &#123; var name for (name in obj) return false return true &#125; $.isNumeric = function(val) &#123; var num = Number(val), type = typeof val return val != null &amp;&amp; type != 'boolean' &amp;&amp; (type != 'string' || val.length) &amp;&amp; !isNaN(num) &amp;&amp; isFinite(num) || false &#125; $.inArray = function(elem, array, i)&#123; return emptyArray.indexOf.call(array, elem, i) &#125; $.camelCase = camelize $.trim = function(str) &#123; return str == null ? \"\" : String.prototype.trim.call(str) &#125; // plugin compatibility $.uuid = 0 $.support = &#123; &#125; $.expr = &#123; &#125; $.noop = function() &#123;&#125; $.map = function(elements, callback)&#123; var value, values = [], i, key if (likeArray(elements)) for (i = 0; i &lt; elements.length; i++) &#123; value = callback(elements[i], i) if (value != null) values.push(value) &#125; else for (key in elements) &#123; value = callback(elements[key], key) if (value != null) values.push(value) &#125; return flatten(values) &#125; $.each = function(elements, callback)&#123; var i, key if (likeArray(elements)) &#123; for (i = 0; i &lt; elements.length; i++) if (callback.call(elements[i], i, elements[i]) === false) return elements &#125; else &#123; for (key in elements) if (callback.call(elements[key], key, elements[key]) === false) return elements &#125; return elements &#125; $.grep = function(elements, callback)&#123; return filter.call(elements, callback) &#125; if (window.JSON) $.parseJSON = JSON.parse // Populate the class2type map $.each(\"Boolean Number String Function Array Date RegExp Object Error\".split(\" \"), function(i, name) &#123; class2type[ \"[object \" + name + \"]\" ] = name.toLowerCase() &#125;) // Define methods that will be available on all // Zepto collections $.fn = &#123; constructor: zepto.Z, length: 0, // Because a collection acts like an array // copy over these useful array functions. forEach: emptyArray.forEach, reduce: emptyArray.reduce, push: emptyArray.push, sort: emptyArray.sort, splice: emptyArray.splice, indexOf: emptyArray.indexOf, concat: function()&#123; var i, value, args = [] for (i = 0; i &lt; arguments.length; i++) &#123; value = arguments[i] args[i] = zepto.isZ(value) ? value.toArray() : value &#125; return concat.apply(zepto.isZ(this) ? this.toArray() : this, args) &#125;, // `map` and `slice` in the jQuery API work differently // from their array counterparts map: function(fn)&#123; return $($.map(this, function(el, i)&#123; return fn.call(el, i, el) &#125;)) &#125;, slice: function()&#123; return $(slice.apply(this, arguments)) &#125;, ready: function(callback)&#123; // need to check if document.body exists for IE as that browser reports // document ready when it hasn't yet created the body element if (readyRE.test(document.readyState) &amp;&amp; document.body) callback($) else document.addEventListener('DOMContentLoaded', function()&#123; callback($) &#125;, false) return this &#125;, get: function(idx)&#123; return idx === undefined ? slice.call(this) : this[idx &gt;= 0 ? idx : idx + this.length] &#125;, toArray: function()&#123; return this.get() &#125;, size: function()&#123; return this.length &#125;, remove: function()&#123; return this.each(function()&#123; if (this.parentNode != null) this.parentNode.removeChild(this) &#125;) &#125;, each: function(callback)&#123; emptyArray.every.call(this, function(el, idx)&#123; return callback.call(el, idx, el) !== false &#125;) return this &#125;, filter: function(selector)&#123; if (isFunction(selector)) return this.not(this.not(selector)) return $(filter.call(this, function(element)&#123; return zepto.matches(element, selector) &#125;)) &#125;, add: function(selector,context)&#123; return $(uniq(this.concat($(selector,context)))) &#125;, is: function(selector)&#123; return this.length &gt; 0 &amp;&amp; zepto.matches(this[0], selector) &#125;, not: function(selector)&#123; var nodes=[] if (isFunction(selector) &amp;&amp; selector.call !== undefined) this.each(function(idx)&#123; if (!selector.call(this,idx)) nodes.push(this) &#125;) else &#123; var excludes = typeof selector == 'string' ? this.filter(selector) : (likeArray(selector) &amp;&amp; isFunction(selector.item)) ? slice.call(selector) : $(selector) this.forEach(function(el)&#123; if (excludes.indexOf(el) &lt; 0) nodes.push(el) &#125;) &#125; return $(nodes) &#125;, has: function(selector)&#123; return this.filter(function()&#123; return isObject(selector) ? $.contains(this, selector) : $(this).find(selector).size() &#125;) &#125;, eq: function(idx)&#123; return idx === -1 ? this.slice(idx) : this.slice(idx, + idx + 1) &#125;, first: function()&#123; var el = this[0] return el &amp;&amp; !isObject(el) ? el : $(el) &#125;, last: function()&#123; var el = this[this.length - 1] return el &amp;&amp; !isObject(el) ? el : $(el) &#125;, find: function(selector)&#123; var result, $this = this if (!selector) result = $() else if (typeof selector == 'object') result = $(selector).filter(function()&#123; var node = this return emptyArray.some.call($this, function(parent)&#123; return $.contains(parent, node) &#125;) &#125;) else if (this.length == 1) result = $(zepto.qsa(this[0], selector)) else result = this.map(function()&#123; return zepto.qsa(this, selector) &#125;) return result &#125;, closest: function(selector, context)&#123; var nodes = [], collection = typeof selector == 'object' &amp;&amp; $(selector) this.each(function(_, node)&#123; while (node &amp;&amp; !(collection ? collection.indexOf(node) &gt;= 0 : zepto.matches(node, selector))) node = node !== context &amp;&amp; !isDocument(node) &amp;&amp; node.parentNode if (node &amp;&amp; nodes.indexOf(node) &lt; 0) nodes.push(node) &#125;) return $(nodes) &#125;, parents: function(selector)&#123; var ancestors = [], nodes = this while (nodes.length &gt; 0) nodes = $.map(nodes, function(node)&#123; if ((node = node.parentNode) &amp;&amp; !isDocument(node) &amp;&amp; ancestors.indexOf(node) &lt; 0) &#123; ancestors.push(node) return node &#125; &#125;) return filtered(ancestors, selector) &#125;, parent: function(selector)&#123; return filtered(uniq(this.pluck('parentNode')), selector) &#125;, children: function(selector)&#123; return filtered(this.map(function()&#123; return children(this) &#125;), selector) &#125;, contents: function() &#123; return this.map(function() &#123; return this.contentDocument || slice.call(this.childNodes) &#125;) &#125;, siblings: function(selector)&#123; return filtered(this.map(function(i, el)&#123; return filter.call(children(el.parentNode), function(child)&#123; return child!==el &#125;) &#125;), selector) &#125;, empty: function()&#123; return this.each(function()&#123; this.innerHTML = '' &#125;) &#125;, // `pluck` is borrowed from Prototype.js pluck: function(property)&#123; return $.map(this, function(el)&#123; return el[property] &#125;) &#125;, show: function()&#123; return this.each(function()&#123; this.style.display == \"none\" &amp;&amp; (this.style.display = '') if (getComputedStyle(this, '').getPropertyValue(\"display\") == \"none\") this.style.display = defaultDisplay(this.nodeName) &#125;) &#125;, replaceWith: function(newContent)&#123; return this.before(newContent).remove() &#125;, wrap: function(structure)&#123; var func = isFunction(structure) if (this[0] &amp;&amp; !func) var dom = $(structure).get(0), clone = dom.parentNode || this.length &gt; 1 return this.each(function(index)&#123; $(this).wrapAll( func ? structure.call(this, index) : clone ? dom.cloneNode(true) : dom ) &#125;) &#125;, wrapAll: function(structure)&#123; if (this[0]) &#123; $(this[0]).before(structure = $(structure)) var children // drill down to the inmost element while ((children = structure.children()).length) structure = children.first() $(structure).append(this) &#125; return this &#125;, wrapInner: function(structure)&#123; var func = isFunction(structure) return this.each(function(index)&#123; var self = $(this), contents = self.contents(), dom = func ? structure.call(this, index) : structure contents.length ? contents.wrapAll(dom) : self.append(dom) &#125;) &#125;, unwrap: function()&#123; this.parent().each(function()&#123; $(this).replaceWith($(this).children()) &#125;) return this &#125;, clone: function()&#123; return this.map(function()&#123; return this.cloneNode(true) &#125;) &#125;, hide: function()&#123; return this.css(\"display\", \"none\") &#125;, toggle: function(setting)&#123; return this.each(function()&#123; var el = $(this) ;(setting === undefined ? el.css(\"display\") == \"none\" : setting) ? el.show() : el.hide() &#125;) &#125;, prev: function(selector)&#123; return $(this.pluck('previousElementSibling')).filter(selector || '*') &#125;, next: function(selector)&#123; return $(this.pluck('nextElementSibling')).filter(selector || '*') &#125;, html: function(html)&#123; return 0 in arguments ? this.each(function(idx)&#123; var originHtml = this.innerHTML $(this).empty().append( funcArg(this, html, idx, originHtml) ) &#125;) : (0 in this ? this[0].innerHTML : null) &#125;, text: function(text)&#123; return 0 in arguments ? this.each(function(idx)&#123; var newText = funcArg(this, text, idx, this.textContent) this.textContent = newText == null ? '' : ''+newText &#125;) : (0 in this ? this.pluck('textContent').join(\"\") : null) &#125;, attr: function(name, value)&#123; var result return (typeof name == 'string' &amp;&amp; !(1 in arguments)) ? (0 in this &amp;&amp; this[0].nodeType == 1 &amp;&amp; (result = this[0].getAttribute(name)) != null ? result : undefined) : this.each(function(idx)&#123; if (this.nodeType !== 1) return if (isObject(name)) for (key in name) setAttribute(this, key, name[key]) else setAttribute(this, name, funcArg(this, value, idx, this.getAttribute(name))) &#125;) &#125;, removeAttr: function(name)&#123; return this.each(function()&#123; this.nodeType === 1 &amp;&amp; name.split(' ').forEach(function(attribute)&#123; setAttribute(this, attribute) &#125;, this)&#125;) &#125;, prop: function(name, value)&#123; name = propMap[name] || name return (1 in arguments) ? this.each(function(idx)&#123; this[name] = funcArg(this, value, idx, this[name]) &#125;) : (this[0] &amp;&amp; this[0][name]) &#125;, removeProp: function(name)&#123; name = propMap[name] || name return this.each(function()&#123; delete this[name] &#125;) &#125;, data: function(name, value)&#123; var attrName = 'data-' + name.replace(capitalRE, '-$1').toLowerCase() var data = (1 in arguments) ? this.attr(attrName, value) : this.attr(attrName) return data !== null ? deserializeValue(data) : undefined &#125;, val: function(value)&#123; if (0 in arguments) &#123; if (value == null) value = \"\" return this.each(function(idx)&#123; this.value = funcArg(this, value, idx, this.value) &#125;) &#125; else &#123; return this[0] &amp;&amp; (this[0].multiple ? $(this[0]).find('option').filter(function()&#123; return this.selected &#125;).pluck('value') : this[0].value) &#125; &#125;, offset: function(coordinates)&#123; if (coordinates) return this.each(function(index)&#123; var $this = $(this), coords = funcArg(this, coordinates, index, $this.offset()), parentOffset = $this.offsetParent().offset(), props = &#123; top: coords.top - parentOffset.top, left: coords.left - parentOffset.left &#125; if ($this.css('position') == 'static') props['position'] = 'relative' $this.css(props) &#125;) if (!this.length) return null if (document.documentElement !== this[0] &amp;&amp; !$.contains(document.documentElement, this[0])) return &#123;top: 0, left: 0&#125; var obj = this[0].getBoundingClientRect() return &#123; left: obj.left + window.pageXOffset, top: obj.top + window.pageYOffset, width: Math.round(obj.width), height: Math.round(obj.height) &#125; &#125;, css: function(property, value)&#123; if (arguments.length &lt; 2) &#123; var element = this[0] if (typeof property == 'string') &#123; if (!element) return return element.style[camelize(property)] || getComputedStyle(element, '').getPropertyValue(property) &#125; else if (isArray(property)) &#123; if (!element) return var props = &#123;&#125; var computedStyle = getComputedStyle(element, '') $.each(property, function(_, prop)&#123; props[prop] = (element.style[camelize(prop)] || computedStyle.getPropertyValue(prop)) &#125;) return props &#125; &#125; var css = '' if (type(property) == 'string') &#123; if (!value &amp;&amp; value !== 0) this.each(function()&#123; this.style.removeProperty(dasherize(property)) &#125;) else css = dasherize(property) + \":\" + maybeAddPx(property, value) &#125; else &#123; for (key in property) if (!property[key] &amp;&amp; property[key] !== 0) this.each(function()&#123; this.style.removeProperty(dasherize(key)) &#125;) else css += dasherize(key) + ':' + maybeAddPx(key, property[key]) + ';' &#125; return this.each(function()&#123; this.style.cssText += ';' + css &#125;) &#125;, index: function(element)&#123; return element ? this.indexOf($(element)[0]) : this.parent().children().indexOf(this[0]) &#125;, hasClass: function(name)&#123; if (!name) return false return emptyArray.some.call(this, function(el)&#123; return this.test(className(el)) &#125;, classRE(name)) &#125;, addClass: function(name)&#123; if (!name) return this return this.each(function(idx)&#123; if (!('className' in this)) return classList = [] var cls = className(this), newName = funcArg(this, name, idx, cls) newName.split(/\\s+/g).forEach(function(klass)&#123; if (!$(this).hasClass(klass)) classList.push(klass) &#125;, this) classList.length &amp;&amp; className(this, cls + (cls ? \" \" : \"\") + classList.join(\" \")) &#125;) &#125;, removeClass: function(name)&#123; return this.each(function(idx)&#123; if (!('className' in this)) return if (name === undefined) return className(this, '') classList = className(this) funcArg(this, name, idx, classList).split(/\\s+/g).forEach(function(klass)&#123; classList = classList.replace(classRE(klass), \" \") &#125;) className(this, classList.trim()) &#125;) &#125;, toggleClass: function(name, when)&#123; if (!name) return this return this.each(function(idx)&#123; var $this = $(this), names = funcArg(this, name, idx, className(this)) names.split(/\\s+/g).forEach(function(klass)&#123; (when === undefined ? !$this.hasClass(klass) : when) ? $this.addClass(klass) : $this.removeClass(klass) &#125;) &#125;) &#125;, scrollTop: function(value)&#123; if (!this.length) return var hasScrollTop = 'scrollTop' in this[0] if (value === undefined) return hasScrollTop ? this[0].scrollTop : this[0].pageYOffset return this.each(hasScrollTop ? function()&#123; this.scrollTop = value &#125; : function()&#123; this.scrollTo(this.scrollX, value) &#125;) &#125;, scrollLeft: function(value)&#123; if (!this.length) return var hasScrollLeft = 'scrollLeft' in this[0] if (value === undefined) return hasScrollLeft ? this[0].scrollLeft : this[0].pageXOffset return this.each(hasScrollLeft ? function()&#123; this.scrollLeft = value &#125; : function()&#123; this.scrollTo(value, this.scrollY) &#125;) &#125;, position: function() &#123; if (!this.length) return var elem = this[0], // Get *real* offsetParent offsetParent = this.offsetParent(), // Get correct offsets offset = this.offset(), parentOffset = rootNodeRE.test(offsetParent[0].nodeName) ? &#123; top: 0, left: 0 &#125; : offsetParent.offset() // Subtract element margins // note: when an element has margin: auto the offsetLeft and marginLeft // are the same in Safari causing offset.left to incorrectly be 0 offset.top -= parseFloat( $(elem).css('margin-top') ) || 0 offset.left -= parseFloat( $(elem).css('margin-left') ) || 0 // Add offsetParent borders parentOffset.top += parseFloat( $(offsetParent[0]).css('border-top-width') ) || 0 parentOffset.left += parseFloat( $(offsetParent[0]).css('border-left-width') ) || 0 // Subtract the two offsets return &#123; top: offset.top - parentOffset.top, left: offset.left - parentOffset.left &#125; &#125;, offsetParent: function() &#123; return this.map(function()&#123; var parent = this.offsetParent || document.body while (parent &amp;&amp; !rootNodeRE.test(parent.nodeName) &amp;&amp; $(parent).css(\"position\") == \"static\") parent = parent.offsetParent return parent &#125;) &#125; &#125; // for now $.fn.detach = $.fn.remove // Generate the `width` and `height` functions ;['width', 'height'].forEach(function(dimension)&#123; var dimensionProperty = dimension.replace(/./, function(m)&#123; return m[0].toUpperCase() &#125;) $.fn[dimension] = function(value)&#123; var offset, el = this[0] if (value === undefined) return isWindow(el) ? el['inner' + dimensionProperty] : isDocument(el) ? el.documentElement['scroll' + dimensionProperty] : (offset = this.offset()) &amp;&amp; offset[dimension] else return this.each(function(idx)&#123; el = $(this) el.css(dimension, funcArg(this, value, idx, el[dimension]())) &#125;) &#125; &#125;) function traverseNode(node, fun) &#123; fun(node) for (var i = 0, len = node.childNodes.length; i &lt; len; i++) traverseNode(node.childNodes[i], fun) &#125; // Generate the `after`, `prepend`, `before`, `append`, // `insertAfter`, `insertBefore`, `appendTo`, and `prependTo` methods. adjacencyOperators.forEach(function(operator, operatorIndex) &#123; var inside = operatorIndex % 2 //=&gt; prepend, append $.fn[operator] = function()&#123; // arguments can be nodes, arrays of nodes, Zepto objects and HTML strings var argType, nodes = $.map(arguments, function(arg) &#123; var arr = [] argType = type(arg) if (argType == \"array\") &#123; arg.forEach(function(el) &#123; if (el.nodeType !== undefined) return arr.push(el) else if ($.zepto.isZ(el)) return arr = arr.concat(el.get()) arr = arr.concat(zepto.fragment(el)) &#125;) return arr &#125; return argType == \"object\" || arg == null ? arg : zepto.fragment(arg) &#125;), parent, copyByClone = this.length &gt; 1 if (nodes.length &lt; 1) return this return this.each(function(_, target)&#123; parent = inside ? target : target.parentNode // convert all methods to a \"before\" operation target = operatorIndex == 0 ? target.nextSibling : operatorIndex == 1 ? target.firstChild : operatorIndex == 2 ? target : null var parentInDocument = $.contains(document.documentElement, parent) nodes.forEach(function(node)&#123; if (copyByClone) node = node.cloneNode(true) else if (!parent) return $(node).remove() parent.insertBefore(node, target) if (parentInDocument) traverseNode(node, function(el)&#123; if (el.nodeName != null &amp;&amp; el.nodeName.toUpperCase() === 'SCRIPT' &amp;&amp; (!el.type || el.type === 'text/javascript') &amp;&amp; !el.src)&#123; var target = el.ownerDocument ? el.ownerDocument.defaultView : window target['eval'].call(target, el.innerHTML) &#125; &#125;) &#125;) &#125;) &#125; // after =&gt; insertAfter // prepend =&gt; prependTo // before =&gt; insertBefore // append =&gt; appendTo $.fn[inside ? operator+'To' : 'insert'+(operatorIndex ? 'Before' : 'After')] = function(html)&#123; $(html)[operator](this) return this &#125; &#125;) zepto.Z.prototype = Z.prototype = $.fn // Export internal API functions in the `$.zepto` namespace zepto.uniq = uniq zepto.deserializeValue = deserializeValue $.zepto = zepto return $&#125;)()window.Zepto = Zeptowindow.$ === undefined &amp;&amp; (window.$ = Zepto);(function($)&#123; var _zid = 1, undefined, slice = Array.prototype.slice, isFunction = $.isFunction, isString = function(obj)&#123; return typeof obj == 'string' &#125;, handlers = &#123;&#125;, specialEvents=&#123;&#125;, focusinSupported = 'onfocusin' in window, focus = &#123; focus: 'focusin', blur: 'focusout' &#125;, hover = &#123; mouseenter: 'mouseover', mouseleave: 'mouseout' &#125; specialEvents.click = specialEvents.mousedown = specialEvents.mouseup = specialEvents.mousemove = 'MouseEvents' function zid(element) &#123; return element._zid || (element._zid = _zid++) &#125; function findHandlers(element, event, fn, selector) &#123; event = parse(event) if (event.ns) var matcher = matcherFor(event.ns) return (handlers[zid(element)] || []).filter(function(handler) &#123; return handler &amp;&amp; (!event.e || handler.e == event.e) &amp;&amp; (!event.ns || matcher.test(handler.ns)) &amp;&amp; (!fn || zid(handler.fn) === zid(fn)) &amp;&amp; (!selector || handler.sel == selector) &#125;) &#125; function parse(event) &#123; var parts = ('' + event).split('.') return &#123;e: parts[0], ns: parts.slice(1).sort().join(' ')&#125; &#125; function matcherFor(ns) &#123; return new RegExp('(?:^| )' + ns.replace(' ', ' .* ?') + '(?: |$)') &#125; function eventCapture(handler, captureSetting) &#123; return handler.del &amp;&amp; (!focusinSupported &amp;&amp; (handler.e in focus)) || !!captureSetting &#125; function realEvent(type) &#123; return hover[type] || (focusinSupported &amp;&amp; focus[type]) || type &#125; function add(element, events, fn, data, selector, delegator, capture)&#123; var id = zid(element), set = (handlers[id] || (handlers[id] = [])) events.split(/\\s/).forEach(function(event)&#123; if (event == 'ready') return $(document).ready(fn) var handler = parse(event) handler.fn = fn handler.sel = selector // emulate mouseenter, mouseleave if (handler.e in hover) fn = function(e)&#123; var related = e.relatedTarget if (!related || (related !== this &amp;&amp; !$.contains(this, related))) return handler.fn.apply(this, arguments) &#125; handler.del = delegator var callback = delegator || fn handler.proxy = function(e)&#123; e = compatible(e) if (e.isImmediatePropagationStopped()) return e.data = data var result = callback.apply(element, e._args == undefined ? [e] : [e].concat(e._args)) if (result === false) e.preventDefault(), e.stopPropagation() return result &#125; handler.i = set.length set.push(handler) if ('addEventListener' in element) element.addEventListener(realEvent(handler.e), handler.proxy, eventCapture(handler, capture)) &#125;) &#125; function remove(element, events, fn, selector, capture)&#123; var id = zid(element) ;(events || '').split(/\\s/).forEach(function(event)&#123; findHandlers(element, event, fn, selector).forEach(function(handler)&#123; delete handlers[id][handler.i] if ('removeEventListener' in element) element.removeEventListener(realEvent(handler.e), handler.proxy, eventCapture(handler, capture)) &#125;) &#125;) &#125; $.event = &#123; add: add, remove: remove &#125; $.proxy = function(fn, context) &#123; var args = (2 in arguments) &amp;&amp; slice.call(arguments, 2) if (isFunction(fn)) &#123; var proxyFn = function()&#123; return fn.apply(context, args ? args.concat(slice.call(arguments)) : arguments) &#125; proxyFn._zid = zid(fn) return proxyFn &#125; else if (isString(context)) &#123; if (args) &#123; args.unshift(fn[context], fn) return $.proxy.apply(null, args) &#125; else &#123; return $.proxy(fn[context], fn) &#125; &#125; else &#123; throw new TypeError(\"expected function\") &#125; &#125; $.fn.bind = function(event, data, callback)&#123; return this.on(event, data, callback) &#125; $.fn.unbind = function(event, callback)&#123; return this.off(event, callback) &#125; $.fn.one = function(event, selector, data, callback)&#123; return this.on(event, selector, data, callback, 1) &#125; var returnTrue = function()&#123;return true&#125;, returnFalse = function()&#123;return false&#125;, ignoreProperties = /^([A-Z]|returnValue$|layer[XY]$|webkitMovement[XY]$)/, eventMethods = &#123; preventDefault: 'isDefaultPrevented', stopImmediatePropagation: 'isImmediatePropagationStopped', stopPropagation: 'isPropagationStopped' &#125; function compatible(event, source) &#123; if (source || !event.isDefaultPrevented) &#123; source || (source = event) $.each(eventMethods, function(name, predicate) &#123; var sourceMethod = source[name] event[name] = function()&#123; this[predicate] = returnTrue return sourceMethod &amp;&amp; sourceMethod.apply(source, arguments) &#125; event[predicate] = returnFalse &#125;) event.timeStamp || (event.timeStamp = Date.now()) if (source.defaultPrevented !== undefined ? source.defaultPrevented : 'returnValue' in source ? source.returnValue === false : source.getPreventDefault &amp;&amp; source.getPreventDefault()) event.isDefaultPrevented = returnTrue &#125; return event &#125; function createProxy(event) &#123; var key, proxy = &#123; originalEvent: event &#125; for (key in event) if (!ignoreProperties.test(key) &amp;&amp; event[key] !== undefined) proxy[key] = event[key] return compatible(proxy, event) &#125; $.fn.delegate = function(selector, event, callback)&#123; return this.on(event, selector, callback) &#125; $.fn.undelegate = function(selector, event, callback)&#123; return this.off(event, selector, callback) &#125; $.fn.live = function(event, callback)&#123; $(document.body).delegate(this.selector, event, callback) return this &#125; $.fn.die = function(event, callback)&#123; $(document.body).undelegate(this.selector, event, callback) return this &#125; $.fn.on = function(event, selector, data, callback, one)&#123; var autoRemove, delegator, $this = this if (event &amp;&amp; !isString(event)) &#123; $.each(event, function(type, fn)&#123; $this.on(type, selector, data, fn, one) &#125;) return $this &#125; if (!isString(selector) &amp;&amp; !isFunction(callback) &amp;&amp; callback !== false) callback = data, data = selector, selector = undefined if (callback === undefined || data === false) callback = data, data = undefined if (callback === false) callback = returnFalse return $this.each(function(_, element)&#123; if (one) autoRemove = function(e)&#123; remove(element, e.type, callback) return callback.apply(this, arguments) &#125; if (selector) delegator = function(e)&#123; var evt, match = $(e.target).closest(selector, element).get(0) if (match &amp;&amp; match !== element) &#123; evt = $.extend(createProxy(e), &#123;currentTarget: match, liveFired: element&#125;) return (autoRemove || callback).apply(match, [evt].concat(slice.call(arguments, 1))) &#125; &#125; add(element, event, callback, data, selector, delegator || autoRemove) &#125;) &#125; $.fn.off = function(event, selector, callback)&#123; var $this = this if (event &amp;&amp; !isString(event)) &#123; $.each(event, function(type, fn)&#123; $this.off(type, selector, fn) &#125;) return $this &#125; if (!isString(selector) &amp;&amp; !isFunction(callback) &amp;&amp; callback !== false) callback = selector, selector = undefined if (callback === false) callback = returnFalse return $this.each(function()&#123; remove(this, event, callback, selector) &#125;) &#125; $.fn.trigger = function(event, args)&#123; event = (isString(event) || $.isPlainObject(event)) ? $.Event(event) : compatible(event) event._args = args return this.each(function()&#123; // handle focus(), blur() by calling them directly if (event.type in focus &amp;&amp; typeof this[event.type] == \"function\") this[event.type]() // items in the collection might not be DOM elements else if ('dispatchEvent' in this) this.dispatchEvent(event) else $(this).triggerHandler(event, args) &#125;) &#125; // triggers event handlers on current element just as if an event occurred, // doesn't trigger an actual event, doesn't bubble $.fn.triggerHandler = function(event, args)&#123; var e, result this.each(function(i, element)&#123; e = createProxy(isString(event) ? $.Event(event) : event) e._args = args e.target = element $.each(findHandlers(element, event.type || event), function(i, handler)&#123; result = handler.proxy(e) if (e.isImmediatePropagationStopped()) return false &#125;) &#125;) return result &#125; // shortcut methods for `.bind(event, fn)` for each event type ;('focusin focusout focus blur load resize scroll unload click dblclick '+ 'mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave '+ 'change select keydown keypress keyup error').split(' ').forEach(function(event) &#123; $.fn[event] = function(callback) &#123; return (0 in arguments) ? this.bind(event, callback) : this.trigger(event) &#125; &#125;) $.Event = function(type, props) &#123; if (!isString(type)) props = type, type = props.type var event = document.createEvent(specialEvents[type] || 'Events'), bubbles = true if (props) for (var name in props) (name == 'bubbles') ? (bubbles = !!props[name]) : (event[name] = props[name]) event.initEvent(type, bubbles, true) return compatible(event) &#125;&#125;)(Zepto);(function($)&#123; var jsonpID = +new Date(), document = window.document, key, name, rscript = /&lt;script\\b[^&lt;]*(?:(?!&lt;\\/script&gt;)&lt;[^&lt;]*)*&lt;\\/script&gt;/gi, scriptTypeRE = /^(?:text|application)\\/javascript/i, xmlTypeRE = /^(?:text|application)\\/xml/i, jsonType = 'application/json', htmlType = 'text/html', blankRE = /^\\s*$/, originAnchor = document.createElement('a') originAnchor.href = window.location.href // trigger a custom event and return false if it was cancelled function triggerAndReturn(context, eventName, data) &#123; var event = $.Event(eventName) $(context).trigger(event, data) return !event.isDefaultPrevented() &#125; // trigger an Ajax \"global\" event function triggerGlobal(settings, context, eventName, data) &#123; if (settings.global) return triggerAndReturn(context || document, eventName, data) &#125; // Number of active Ajax requests $.active = 0 function ajaxStart(settings) &#123; if (settings.global &amp;&amp; $.active++ === 0) triggerGlobal(settings, null, 'ajaxStart') &#125; function ajaxStop(settings) &#123; if (settings.global &amp;&amp; !(--$.active)) triggerGlobal(settings, null, 'ajaxStop') &#125; // triggers an extra global event \"ajaxBeforeSend\" that's like \"ajaxSend\" but cancelable function ajaxBeforeSend(xhr, settings) &#123; var context = settings.context if (settings.beforeSend.call(context, xhr, settings) === false || triggerGlobal(settings, context, 'ajaxBeforeSend', [xhr, settings]) === false) return false triggerGlobal(settings, context, 'ajaxSend', [xhr, settings]) &#125; function ajaxSuccess(data, xhr, settings, deferred) &#123; var context = settings.context, status = 'success' settings.success.call(context, data, status, xhr) if (deferred) deferred.resolveWith(context, [data, status, xhr]) triggerGlobal(settings, context, 'ajaxSuccess', [xhr, settings, data]) ajaxComplete(status, xhr, settings) &#125; // type: \"timeout\", \"error\", \"abort\", \"parsererror\" function ajaxError(error, type, xhr, settings, deferred) &#123; var context = settings.context settings.error.call(context, xhr, type, error) if (deferred) deferred.rejectWith(context, [xhr, type, error]) triggerGlobal(settings, context, 'ajaxError', [xhr, settings, error || type]) ajaxComplete(type, xhr, settings) &#125; // status: \"success\", \"notmodified\", \"error\", \"timeout\", \"abort\", \"parsererror\" function ajaxComplete(status, xhr, settings) &#123; var context = settings.context settings.complete.call(context, xhr, status) triggerGlobal(settings, context, 'ajaxComplete', [xhr, settings]) ajaxStop(settings) &#125; function ajaxDataFilter(data, type, settings) &#123; if (settings.dataFilter == empty) return data var context = settings.context return settings.dataFilter.call(context, data, type) &#125; // Empty function, used as default callback function empty() &#123;&#125; $.ajaxJSONP = function(options, deferred)&#123; if (!('type' in options)) return $.ajax(options) var _callbackName = options.jsonpCallback, callbackName = ($.isFunction(_callbackName) ? _callbackName() : _callbackName) || ('Zepto' + (jsonpID++)), script = document.createElement('script'), originalCallback = window[callbackName], responseData, abort = function(errorType) &#123; $(script).triggerHandler('error', errorType || 'abort') &#125;, xhr = &#123; abort: abort &#125;, abortTimeout if (deferred) deferred.promise(xhr) $(script).on('load error', function(e, errorType)&#123; clearTimeout(abortTimeout) $(script).off().remove() if (e.type == 'error' || !responseData) &#123; ajaxError(null, errorType || 'error', xhr, options, deferred) &#125; else &#123; ajaxSuccess(responseData[0], xhr, options, deferred) &#125; window[callbackName] = originalCallback if (responseData &amp;&amp; $.isFunction(originalCallback)) originalCallback(responseData[0]) originalCallback = responseData = undefined &#125;) if (ajaxBeforeSend(xhr, options) === false) &#123; abort('abort') return xhr &#125; window[callbackName] = function()&#123; responseData = arguments &#125; script.src = options.url.replace(/\\?(.+)=\\?/, '?$1=' + callbackName) document.head.appendChild(script) if (options.timeout &gt; 0) abortTimeout = setTimeout(function()&#123; abort('timeout') &#125;, options.timeout) return xhr &#125; $.ajaxSettings = &#123; // Default type of request type: 'GET', // Callback that is executed before request beforeSend: empty, // Callback that is executed if the request succeeds success: empty, // Callback that is executed the the server drops error error: empty, // Callback that is executed on request complete (both: error and success) complete: empty, // The context for the callbacks context: null, // Whether to trigger \"global\" Ajax events global: true, // Transport xhr: function () &#123; return new window.XMLHttpRequest() &#125;, // MIME types mapping // IIS returns Javascript as \"application/x-javascript\" accepts: &#123; script: 'text/javascript, application/javascript, application/x-javascript', json: jsonType, xml: 'application/xml, text/xml', html: htmlType, text: 'text/plain' &#125;, // Whether the request is to another domain crossDomain: false, // Default timeout timeout: 0, // Whether data should be serialized to string processData: true, // Whether the browser should be allowed to cache GET responses cache: true, //Used to handle the raw response data of XMLHttpRequest. //This is a pre-filtering function to sanitize the response. //The sanitized response should be returned dataFilter: empty &#125; function mimeToDataType(mime) &#123; if (mime) mime = mime.split(';', 2)[0] return mime &amp;&amp; ( mime == htmlType ? 'html' : mime == jsonType ? 'json' : scriptTypeRE.test(mime) ? 'script' : xmlTypeRE.test(mime) &amp;&amp; 'xml' ) || 'text' &#125; function appendQuery(url, query) &#123; if (query == '') return url return (url + '&amp;' + query).replace(/[&amp;?]&#123;1,2&#125;/, '?') &#125; // serialize payload and append it to the URL for GET requests function serializeData(options) &#123; if (options.processData &amp;&amp; options.data &amp;&amp; $.type(options.data) != \"string\") options.data = $.param(options.data, options.traditional) if (options.data &amp;&amp; (!options.type || options.type.toUpperCase() == 'GET' || 'jsonp' == options.dataType)) options.url = appendQuery(options.url, options.data), options.data = undefined &#125; $.ajax = function(options)&#123; var settings = $.extend(&#123;&#125;, options || &#123;&#125;), deferred = $.Deferred &amp;&amp; $.Deferred(), urlAnchor, hashIndex for (key in $.ajaxSettings) if (settings[key] === undefined) settings[key] = $.ajaxSettings[key] ajaxStart(settings) if (!settings.crossDomain) &#123; urlAnchor = document.createElement('a') urlAnchor.href = settings.url // cleans up URL for .href (IE only), see https://github.com/madrobby/zepto/pull/1049 urlAnchor.href = urlAnchor.href settings.crossDomain = (originAnchor.protocol + '//' + originAnchor.host) !== (urlAnchor.protocol + '//' + urlAnchor.host) &#125; if (!settings.url) settings.url = window.location.toString() if ((hashIndex = settings.url.indexOf('#')) &gt; -1) settings.url = settings.url.slice(0, hashIndex) serializeData(settings) var dataType = settings.dataType, hasPlaceholder = /\\?.+=\\?/.test(settings.url) if (hasPlaceholder) dataType = 'jsonp' if (settings.cache === false || ( (!options || options.cache !== true) &amp;&amp; ('script' == dataType || 'jsonp' == dataType) )) settings.url = appendQuery(settings.url, '_=' + Date.now()) if ('jsonp' == dataType) &#123; if (!hasPlaceholder) settings.url = appendQuery(settings.url, settings.jsonp ? (settings.jsonp + '=?') : settings.jsonp === false ? '' : 'callback=?') return $.ajaxJSONP(settings, deferred) &#125; var mime = settings.accepts[dataType], headers = &#123; &#125;, setHeader = function(name, value) &#123; headers[name.toLowerCase()] = [name, value] &#125;, protocol = /^([\\w-]+:)\\/\\//.test(settings.url) ? RegExp.$1 : window.location.protocol, xhr = settings.xhr(), nativeSetHeader = xhr.setRequestHeader, abortTimeout if (deferred) deferred.promise(xhr) if (!settings.crossDomain) setHeader('X-Requested-With', 'XMLHttpRequest') setHeader('Accept', mime || '*/*') if (mime = settings.mimeType || mime) &#123; if (mime.indexOf(',') &gt; -1) mime = mime.split(',', 2)[0] xhr.overrideMimeType &amp;&amp; xhr.overrideMimeType(mime) &#125; if (settings.contentType || (settings.contentType !== false &amp;&amp; settings.data &amp;&amp; settings.type.toUpperCase() != 'GET')) setHeader('Content-Type', settings.contentType || 'application/x-www-form-urlencoded') if (settings.headers) for (name in settings.headers) setHeader(name, settings.headers[name]) xhr.setRequestHeader = setHeader xhr.onreadystatechange = function()&#123; if (xhr.readyState == 4) &#123; xhr.onreadystatechange = empty clearTimeout(abortTimeout) var result, error = false if ((xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300) || xhr.status == 304 || (xhr.status == 0 &amp;&amp; protocol == 'file:')) &#123; dataType = dataType || mimeToDataType(settings.mimeType || xhr.getResponseHeader('content-type')) if (xhr.responseType == 'arraybuffer' || xhr.responseType == 'blob') result = xhr.response else &#123; result = xhr.responseText try &#123; // http://perfectionkills.com/global-eval-what-are-the-options/ // sanitize response accordingly if data filter callback provided result = ajaxDataFilter(result, dataType, settings) if (dataType == 'script') (1,eval)(result) else if (dataType == 'xml') result = xhr.responseXML else if (dataType == 'json') result = blankRE.test(result) ? null : $.parseJSON(result) &#125; catch (e) &#123; error = e &#125; if (error) return ajaxError(error, 'parsererror', xhr, settings, deferred) &#125; ajaxSuccess(result, xhr, settings, deferred) &#125; else &#123; ajaxError(xhr.statusText || null, xhr.status ? 'error' : 'abort', xhr, settings, deferred) &#125; &#125; &#125; if (ajaxBeforeSend(xhr, settings) === false) &#123; xhr.abort() ajaxError(null, 'abort', xhr, settings, deferred) return xhr &#125; var async = 'async' in settings ? settings.async : true xhr.open(settings.type, settings.url, async, settings.username, settings.password) if (settings.xhrFields) for (name in settings.xhrFields) xhr[name] = settings.xhrFields[name] for (name in headers) nativeSetHeader.apply(xhr, headers[name]) if (settings.timeout &gt; 0) abortTimeout = setTimeout(function()&#123; xhr.onreadystatechange = empty xhr.abort() ajaxError(null, 'timeout', xhr, settings, deferred) &#125;, settings.timeout) // avoid sending empty string (#319) xhr.send(settings.data ? settings.data : null) return xhr &#125; // handle optional data/success arguments function parseArguments(url, data, success, dataType) &#123; if ($.isFunction(data)) dataType = success, success = data, data = undefined if (!$.isFunction(success)) dataType = success, success = undefined return &#123; url: url , data: data , success: success , dataType: dataType &#125; &#125; $.get = function(/* url, data, success, dataType */)&#123; return $.ajax(parseArguments.apply(null, arguments)) &#125; $.post = function(/* url, data, success, dataType */)&#123; var options = parseArguments.apply(null, arguments) options.type = 'POST' return $.ajax(options) &#125; $.getJSON = function(/* url, data, success */)&#123; var options = parseArguments.apply(null, arguments) options.dataType = 'json' return $.ajax(options) &#125; $.fn.load = function(url, data, success)&#123; if (!this.length) return this var self = this, parts = url.split(/\\s/), selector, options = parseArguments(url, data, success), callback = options.success if (parts.length &gt; 1) options.url = parts[0], selector = parts[1] options.success = function(response)&#123; self.html(selector ? $('&lt;div&gt;').html(response.replace(rscript, \"\")).find(selector) : response) callback &amp;&amp; callback.apply(self, arguments) &#125; $.ajax(options) return this &#125; var escape = encodeURIComponent function serialize(params, obj, traditional, scope)&#123; var type, array = $.isArray(obj), hash = $.isPlainObject(obj) $.each(obj, function(key, value) &#123; type = $.type(value) if (scope) key = traditional ? scope : scope + '[' + (hash || type == 'object' || type == 'array' ? key : '') + ']' // handle data in serializeArray() format if (!scope &amp;&amp; array) params.add(value.name, value.value) // recurse into nested objects else if (type == \"array\" || (!traditional &amp;&amp; type == \"object\")) serialize(params, value, traditional, key) else params.add(key, value) &#125;) &#125; $.param = function(obj, traditional)&#123; var params = [] params.add = function(key, value) &#123; if ($.isFunction(value)) value = value() if (value == null) value = \"\" this.push(escape(key) + '=' + escape(value)) &#125; serialize(params, obj, traditional) return params.join('&amp;').replace(/%20/g, '+') &#125;&#125;)(Zepto);(function($)&#123; $.fn.serializeArray = function() &#123; var name, type, result = [], add = function(value) &#123; if (value.forEach) return value.forEach(add) result.push(&#123; name: name, value: value &#125;) &#125; if (this[0]) $.each(this[0].elements, function(_, field)&#123; type = field.type, name = field.name if (name &amp;&amp; field.nodeName.toLowerCase() != 'fieldset' &amp;&amp; !field.disabled &amp;&amp; type != 'submit' &amp;&amp; type != 'reset' &amp;&amp; type != 'button' &amp;&amp; type != 'file' &amp;&amp; ((type != 'radio' &amp;&amp; type != 'checkbox') || field.checked)) add($(field).val()) &#125;) return result &#125; $.fn.serialize = function()&#123; var result = [] this.serializeArray().forEach(function(elm)&#123; result.push(encodeURIComponent(elm.name) + '=' + encodeURIComponent(elm.value)) &#125;) return result.join('&amp;') &#125; $.fn.submit = function(callback) &#123; if (0 in arguments) this.bind('submit', callback) else if (this.length) &#123; var event = $.Event('submit') this.eq(0).trigger(event) if (!event.isDefaultPrevented()) this.get(0).submit() &#125; return this &#125;&#125;)(Zepto);(function()&#123; // getComputedStyle shouldn't freak out when called // without a valid element as argument try &#123; getComputedStyle(undefined) &#125; catch(e) &#123; var nativeGetComputedStyle = getComputedStyle window.getComputedStyle = function(element, pseudoElement)&#123; try &#123; return nativeGetComputedStyle(element, pseudoElement) &#125; catch(e) &#123; return null &#125; &#125; &#125;&#125;)() return Zepto&#125;))","categories":[{"name":"javascript","slug":"javascript","permalink":"/categories/javascript/"}],"tags":[{"name":"jquery","slug":"jquery","permalink":"/tags/jquery/"}]},{"title":"javascript获取数据类型","slug":"javascript获取数据类型","date":"2018-11-14T02:45:29.000Z","updated":"2018-11-14T03:15:29.408Z","comments":true,"path":"2018/11/14/javascript获取数据类型/","link":"","permalink":"/2018/11/14/javascript获取数据类型/","excerpt":"判断js的数据类型，如：Boolean Number String等","text":"判断js的数据类型，如：Boolean Number String等 javascript获取数据类型平时在工作中，偶尔会用到判断一下这个数据是什么类型，是数组的？string的？function的？我一般都直接按照代码的需求，只写了需要判断的类型，用完就丢到一边，最近在看jquery源码，人家大牛写的真不错，改一改，封装一下，自己用哈。话不多说，直接贴出代码，其实很简单的：1234567891011121314151617function toType( obj ) &#123; var class2type = &#123;&#125;; \"Boolean Number String Function Array Date RegExp Object Error Symbol\" .split( \" \" ) .forEach(function( name ) &#123; class2type[ \"[object \" + name + \"]\" ] = name.toLowerCase(); &#125;); if ( obj == null ) &#123; return obj + \"\"; &#125; return typeof obj === \"object\" || typeof obj === \"function\" ? class2type[ toString.call( obj ) ] || \"object\" : typeof obj; &#125; 代码一共没有几行，接下来看看管不管用12345678910111213// 测试一下console.log('对象的类型-&gt;',toType(&#123;&#125;));console.log('函数的类型-&gt;',toType(function()&#123;&#125;));console.log('null的类型-&gt;',toType(null));console.log('undefined的类型-&gt;',toType(undefined));console.log('boolean的类型-&gt;',toType(true));console.log('number的类型-&gt;',toType(555));console.log('string的类型-&gt;',toType('abc'));console.log('array的类型-&gt;',toType([]));console.log('date的类型-&gt;',toType(new Date()));console.log('正则的类型-&gt;',toType(/abc/g));console.log('symbol-&gt;',toType(Symbol()));console.log('Error的类型-&gt;',toType(new Error())); 基本上的类型都判断出来了，不错吧。","categories":[{"name":"javascript","slug":"javascript","permalink":"/categories/javascript/"}],"tags":[{"name":"jquery","slug":"jquery","permalink":"/tags/jquery/"}]},{"title":"tcp三次握手和四次挥手","slug":"tcp三次握手和四次挥手","date":"2018-11-07T06:34:14.000Z","updated":"2018-11-07T06:58:56.835Z","comments":true,"path":"2018/11/07/tcp三次握手和四次挥手/","link":"","permalink":"/2018/11/07/tcp三次握手和四次挥手/","excerpt":"我的tcp三次握手和四次挥手简洁理解。","text":"我的tcp三次握手和四次挥手简洁理解。 tcp三次握手和四次挥手tcp三次握手和四次挥手，这是一个很基础的计算机网络层面的基础问题，让我回答我也说不出来具体的东西，所以，为了加强记忆，按照自己的理解，把它记下来。 三次握手我们用打电话的生活场景来模拟三次握手：123client: 你好，能听到我说话吗？server：能听到，你能听到我说话吗？client：是的，我也能听到你说话。 像上面这样，来回通过3次对话，确认了双方都可以接收到相互的信息。 四次挥手我们还用打电话的生活场景来模拟四次挥手：1234client: 我有事，不跟你聊了哈。server：知道了。server：最后说一句，明天把书给我带来。client：好的，知道了。 好了，四次挥手也模拟完了。我这只是模拟了这两个过程而已，如果想学习真正的原理，请参考这里","categories":[{"name":"计算机原理","slug":"计算机原理","permalink":"/categories/计算机原理/"}],"tags":[{"name":"基础知识","slug":"基础知识","permalink":"/tags/基础知识/"}]},{"title":"js抽象语法树AST","slug":"js抽象语法树AST","date":"2018-11-06T07:48:54.000Z","updated":"2018-11-06T09:02:14.113Z","comments":true,"path":"2018/11/06/js抽象语法树AST/","link":"","permalink":"/2018/11/06/js抽象语法树AST/","excerpt":"通过javascript parser将代码转化成抽象语法树，这棵树定义了代码本身，通过操作这颗树，可以精准的定位到赋值语句、声明语句和运算语句。","text":"通过javascript parser将代码转化成抽象语法树，这棵树定义了代码本身，通过操作这颗树，可以精准的定位到赋值语句、声明语句和运算语句。 js抽象语法树AST最近在研究webpack，想研究一下它是如何打包的，不过，刚刚入门，就有一个知识点把我难住了，那就是AST抽象语法树。于是乎，上网查了查，原理就是把代码解析，解析成一个有各种属性状态的json树，便于对代码进行操作，具体的解析代码当然是很难的，像我们这种菜鸟只需要了解一下用法就可以了。babel是现在几乎每个项目中必备的一个东西，但是其工作原理避不开对js的解析在生成的过程，babel有引擎babylon，早期fork了项目acron，了解这个之前我们先来看看这种引擎解析出来是什么东西。不光是babel还有webpack等。 什么是抽象语法树见下面例子：12var a = 1;var b = a + 1; 之后我们通过这个网站，他是一个esprima引擎的网站，十分好用.画成流程图如下：而他的json对象格式是这样的：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950&#123; \"type\": \"Program\", \"body\": [ &#123; \"type\": \"VariableDeclaration\", \"declarations\": [ &#123; \"type\": \"VariableDeclarator\", \"id\": &#123; \"type\": \"Identifier\", \"name\": \"a\" &#125;, \"init\": &#123; \"type\": \"Literal\", \"value\": 1, \"raw\": \"1\" &#125; &#125; ], \"kind\": \"var\" &#125;, &#123; \"type\": \"VariableDeclaration\", \"declarations\": [ &#123; \"type\": \"VariableDeclarator\", \"id\": &#123; \"type\": \"Identifier\", \"name\": \"b\" &#125;, \"init\": &#123; \"type\": \"BinaryExpression\", \"operator\": \"+\", \"left\": &#123; \"type\": \"Identifier\", \"name\": \"a\" &#125;, \"right\": &#123; \"type\": \"Literal\", \"value\": 1, \"raw\": \"1\" &#125; &#125; &#125; ], \"kind\": \"var\" &#125; ], \"sourceType\": \"script\"&#125; 众多AST解析引擎chrome有v8，firefix有spidermonkey.还有一些常用的引擎有： esprima acron Traceur UglifyJS2 shift AST的学习三板斧 通过esprima生成AST 通过estraverse遍历和更新AST 通过escodegen将AST重新生成源码 来一个简单例子，看看用法：1.先新建一个test的工程目录2.在test工程下安装esprima、estraverse、escodegen的npm模块1npm i esprima estraverse escodegen --save 3.在目录下面新建一个test.js文件,载入以下代码：1234const esprima = require('esprima');let code = 'const a = 1';const ast = esprima.parseScript(code);console.log(ast); 你将会看到输出结果：12345678Script &#123; type: 'Program', body: [ VariableDeclaration &#123; type: 'VariableDeclaration', declarations: [Array], kind: 'const' &#125; ], sourceType: 'script' &#125; 4.再在test文件中，载入以下代码：12345678const estraverse = require('estraverse');estraverse.traverse(ast, &#123; enter: function (node) &#123; node.kind = \"var\"; &#125;&#125;);console.log(ast); 输出的结果：12345678Script &#123; type: 'Program', body: [ VariableDeclaration &#123; type: 'VariableDeclaration', declarations: [Array], kind: 'var' &#125; ], sourceType: 'script' &#125; 5.最后在test文件中，加入以下代码：123const escodegen = require(\"escodegen\");const transformCode = escodegen.generate(ast)console.log(transformCode); 输出的结果：1var a = 1; 通过这三步，我们将const a = 1转化成了var a = 1 虽然，具体的解析原理我们并不知道，但是，通过这三个模块包，是不是有种自己搞出一个babel的赶脚。","categories":[{"name":"javascript","slug":"javascript","permalink":"/categories/javascript/"}],"tags":[{"name":"webpack","slug":"webpack","permalink":"/tags/webpack/"},{"name":"基础知识","slug":"基础知识","permalink":"/tags/基础知识/"}]},{"title":"对象链式取值(如loadsh的_.get()方法)在项目中的应用","slug":"对象链式取值-如loadsh的-get-方法-在项目中的应用","date":"2018-11-05T05:27:11.000Z","updated":"2018-11-05T06:15:20.933Z","comments":true,"path":"2018/11/05/对象链式取值-如loadsh的-get-方法-在项目中的应用/","link":"","permalink":"/2018/11/05/对象链式取值-如loadsh的-get-方法-在项目中的应用/","excerpt":"对象的链式取值在项目中的应用场景。","text":"对象的链式取值在项目中的应用场景。 对象链式取值(如loadsh的_.get()方法)在项目中的应用相信大家在从后端获取数据的时候，像这样res.data.rows.count来获取数据的情况很多，如果后台返回的格式不对了，或则data是个null，那么很容易报Uncaught TypeError: Cannot read property ‘goods’ of undefined这样的错。我们一般会这样写：123if(res &amp;&amp; res.data &amp;&amp; res.data.rows &amp;&amp; res.data.count) &#123; ...&#125; 不过这么写实在是有些麻烦，我一般的做法是直接catch住error，然后定位到具体错误在哪，在改正。不过，最近在网上看到一篇专门写关于对象的链式取值的文章，里边写了大概4种解决方法，这里我只记录学习了其中一种，也是兼容性最好的一种，就想使用loadsh的_.get方法，先看看loadsh是怎么用的，见下边1234567var object = &#123; 'a': [&#123; 'b': &#123; 'c': 3 &#125; &#125;] &#125;;_.get(object, 'a[0].b.c');// =&gt; 3_.get(object, ['a', '0', 'b', 'c']);// =&gt; 3_.get(object, 'a.b.c', 'default');// =&gt; 'default' 使用方法一目了然，第一个参数：对象，第二个参数：链式字符串，第三个参数是，如果按照这个链式字符串在对象中取不到值，返回这个默认值。这样写的话，就像上边即使后台同事更改了数据结构，不会报错，而是返回默认值。（不过这种写法我觉得也有不好的地方，那就是不容易发现错误，后台返回的数据结构都变了，而我们前台并没有出现异常，而是返回来初始写的默认值，是不是有点。。。）不过，这种写法在其它场合我想一定会有用武之地。我现在的项目中并没有用到loadsh这个库，但是还想用咋办呢？自己写一个喽，还好，写法简单，容易理解，注意，下边给出的代码交通过函数解析字符串方式来处理的。1234567891011121314151617181920212223242526272829function get (obj, props, def) &#123; if((obj == null) || obj == null || typeof props !== 'string') return def; const temp = props.split('.'); const fieldArr = [].concat(temp); temp.forEach((e, i) =&gt; &#123; if(/^(\\w+)\\[(\\w+)\\]$/.test(e)) &#123; const matchs = e.match(/^(\\w+)\\[(\\w+)\\]$/); const field1 = matchs[1]; const field2 = matchs[2]; const index = fieldArr.indexOf(e); fieldArr.splice(index, 1, field1, field2); &#125; &#125;) return fieldArr.reduce((pre, cur) =&gt; &#123; const target = pre[cur] || def; if(target instanceof Array) &#123; return [].concat(target); &#125; if(target instanceof Object) &#123; return Object.assign(&#123;&#125;, target) &#125; return target; &#125;, obj)&#125;var c = &#123;a: &#123;b : [1,2,3] &#125;&#125;get(c ,'a.b') // [1,2,3]get(c, 'a.b[1]') // 2get(c, 'a.d', 12) // 12 其实，在项目无论如何使用都没什么问题，即使什么都不做，最后项目完成时，也一定会因为出现报错而改正过来，最多就是不够健壮。我觉得这个函数解析字符串的方式很好，值得举一反三，值得学习。","categories":[{"name":"javascript","slug":"javascript","permalink":"/categories/javascript/"}],"tags":[{"name":"基础知识","slug":"基础知识","permalink":"/tags/基础知识/"}]},{"title":"webpack打包bundle.js文件代码分析","slug":"webpack打包bundle-js文件代码分析","date":"2018-11-01T06:16:54.000Z","updated":"2018-11-01T08:31:47.325Z","comments":true,"path":"2018/11/01/webpack打包bundle-js文件代码分析/","link":"","permalink":"/2018/11/01/webpack打包bundle-js文件代码分析/","excerpt":"webpack这个打包工具，现在可以说很火，前一段时间为了优化公司项目，搞了一个月的gulp，说实在的，gulp的功能我感觉很强大了，而且用起来很灵活，最关键是简单，需要什么的时候直接弄个gulp任务，但是，使用场景很少了，由于之前的项目是php的，现在一般都用vue，react等，都已经集成了webpack，虽然说不用太多配置，但是需要配置的时候还是有的，所以，webpack研究一下也是有必要的，今天，复杂的先不说，只说说bundle.js这个文件里的代码都是干吗用的。","text":"webpack这个打包工具，现在可以说很火，前一段时间为了优化公司项目，搞了一个月的gulp，说实在的，gulp的功能我感觉很强大了，而且用起来很灵活，最关键是简单，需要什么的时候直接弄个gulp任务，但是，使用场景很少了，由于之前的项目是php的，现在一般都用vue，react等，都已经集成了webpack，虽然说不用太多配置，但是需要配置的时候还是有的，所以，webpack研究一下也是有必要的，今天，复杂的先不说，只说说bundle.js这个文件里的代码都是干吗用的。 webpack打包bundle.js文件代码分析一个入口，一个文件首先，webpack.config.js配置文件是这样滴：123456module.exports = &#123; entry:'./index.js', output:&#123; filename:'bundle.js' &#125;&#125;; index.js内容是这样滴：1console.log('index'); 最后再看看打完包后的bundle.js内容123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051// bundle.js/******/ (function(modules) &#123; // webpackBootstrap/******/ // The module cache/******/ var installedModules = &#123;&#125;;/******/ // The require function/******/ function __webpack_require__(moduleId) &#123;/******/ // Check if module is in cache/******/ if(installedModules[moduleId])/******/ return installedModules[moduleId].exports;/******/ // Create a new module (and put it into the cache)/******/ var module = installedModules[moduleId] = &#123;/******/ exports: &#123;&#125;,/******/ id: moduleId,/******/ loaded: false/******/ &#125;;/******/ // Execute the module function/******/ modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);/******/ // Flag the module as loaded/******/ module.loaded = true;/******/ // Return the exports of the module/******/ return module.exports;/******/ &#125;/******/ // expose the modules object (__webpack_modules__)/******/ __webpack_require__.m = modules;/******/ // expose the module cache/******/ __webpack_require__.c = installedModules;/******/ // __webpack_public_path__/******/ __webpack_require__.p = \"\";/******/ // Load entry module and return exports/******/ return __webpack_require__(0);/******/ &#125;)/************************************************************************//******/ ([/* 0 *//***/ function(module, exports) &#123; console.log('index');/***/ &#125;/******/ ]); 我们来分析一下bundle.js这个文件 1.整个内容是一个自执行函数，自执行函数传的参数是一个数组，数组里的元素是function函数，这个函数体的内容就是index.js文件的内容。 2.在这个闭包函数中，__webpack_require_是模块加载函数，接收模块id（对，webpack中每个模块都会有一个独一无二的id，其实也就是在IIFE传参数组中的索引值（0，1，2…..）。 3.真正执行module index里面语句的是个调用12// Execute the module functionmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__); 我们再来看一个例子 一个入口，两个文件，A依赖B先贴出文件内容：123456// a.jsvar b = require('./b.js');console.log('a');b.b1(); 12345678// b.jsexports.b1 = function () &#123; console.log('b1')&#125;;exports.b2 = function () &#123; console.log('b2')&#125;; 1234567891011121314151617181920212223242526272829303132// bundle.js/******/ (function(modules) &#123; // webpackBootstrap// 省略一大段.........../******/ // Load entry module and return exports/******/ return __webpack_require__(0);/******/ &#125;)/************************************************************************//******/ ([/* 0 *//***/ function(module, exports, __webpack_require__) &#123; var b = __webpack_require__(1); console.log('a'); b.b1();/***/ &#125;,/* 1 *//***/ function(module, exports) &#123; exports.b1 = function () &#123; console.log('b1') &#125;; exports.b2 = function () &#123; console.log('b2') &#125;;/***/ &#125;/******/ ]); 我们再来分析一下上面的代码。 1.由于有两个文件，所以IIFE得参数为长度是2的数组，并按照require的顺序排列。 2.IIFE函数体部分是一模一样的，也就是说再复杂的，多个依赖的文件，函数体部分也不变滴。 3.module a发生了变化，因为a依赖b，所以在a中调用webpack加载模块的函数 12// 1是模块b的idvar b = __webpack_require__(1); 4.我们再来分析一下modules[moduleId].call(module.exports, module, module.exports, webpack_require);使用call是因为为了确保每个module中的this指向的是module本身。然后给它传__webpack_require函数是想让module有加载其他module的能力。 其它情况其它的情况，比如多入口，多出口情况这里就不做过多分析，我也没搞明白，接下来准备手写一个简单的仿webpack打包工具。","categories":[{"name":"javascript","slug":"javascript","permalink":"/categories/javascript/"}],"tags":[{"name":"webpack","slug":"webpack","permalink":"/tags/webpack/"}]},{"title":"移动端webview模板","slug":"移动端webview模板","date":"2018-10-30T02:29:58.000Z","updated":"2018-11-06T01:28:03.539Z","comments":true,"path":"2018/10/30/移动端webview模板/","link":"","permalink":"/2018/10/30/移动端webview模板/","excerpt":"移动端的页面平时偶尔会有需求需要做，特别是webview嵌入的页面居多，由于是有时候做，有时候不做，所以，需求来的时候从新写页面还是有点麻烦，所以把之前写的记录一下，下次直接copy就好了。","text":"移动端的页面平时偶尔会有需求需要做，特别是webview嵌入的页面居多，由于是有时候做，有时候不做，所以，需求来的时候从新写页面还是有点麻烦，所以把之前写的记录一下，下次直接copy就好了。 移动端webview模板css一些css初始化的内容123456789101112131415161718192021222324252627@charset \"utf-8\";/* CSS Document */body,ul,ol,p,h1,h2,h3,h4,h5,dl,dd,form,input,textarea,td,th,button,strong,em,select,video,canvas&#123;margin:0;padding:0;&#125;h1,h2,h3,h4,h5,h6&#123; font-weight:normal;&#125;li&#123;list-style:none;vertical-align:top;&#125;table&#123; border-collapse:collapse;&#125;textarea&#123;resize:none;overflow:auto;&#125;img&#123; border:none; vertical-align:middle; width:100%;&#125;em,i&#123; font-style:normal;&#125;a&#123; text-decoration:none;&#125;a,input&#123; -webkit-appearance: none;/*屏蔽阴影*/ -webkit-tap-highlight-color:rgba(0,0,0,0); /*ios android去除自带阴影的样式*/&#125;a, img &#123; /* 禁止长按链接与图片弹出菜单 */ -webkit-touch-callout: none;&#125;html, body &#123; /* 禁止选中文本(如无文本选中需求,此为必选项) */ -webkit-user-select: none; user-select: none; background:#f5f5f5; overflow-x:hidden;&#125; js来控制rem大小代码js来修改html的font-size大小123456789101112(function (doc, win) &#123; var docEl = doc.documentElement, resizeEvt = 'orientationchange' in window ? 'orientationchange' : 'resize', recalc = function () &#123; var clientWidth = docEl.clientWidth; if (!clientWidth) return; docEl.style.fontSize = clientWidth/20 + 'px'; &#125;; if (!doc.addEventListener) return; win.addEventListener(resizeEvt, recalc, false); doc.addEventListener('DOMContentLoaded', recalc, false);&#125;)(document, window); html页面内容12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=\"utf-8\"&gt;&lt;title&gt;&lt;/title&gt;&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0\" /&gt;&lt;meta name=\"format-detection\" content=\"telephone=no\" /&gt;&lt;meta content=\"email=no\" name=\"format-detection\" /&gt;&lt;meta name=\"apple-mobile-web-app-capable\" content=\"yes\" /&gt;&lt;meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black\" /&gt;&lt;script src=\"../js/jquery.min.js\"&gt;&lt;/script&gt;&lt;script src=\"../js/config.js\"&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=\"content\"&gt; &lt;/div&gt;&lt;/body&gt;&lt;script&gt; // 判断ios android var u = navigator.userAgent; var isAndroid = u.indexOf('Android') &gt; -1 || u.indexOf('Adr') &gt; -1; //android终端 var isiOS = !!u.match(/\\(i[^;]+;( U;)? CPU.+Mac OS X/); //ios终端 var goodsId = window.location.search.split('=')[1] var reqUrl = BASEURL +'/goods/shopProduct/findSpuDescsBySpuId/' + goodsId; $.ajax(&#123; method: 'POST', url: reqUrl, headers: &#123; 'client-token': 'eyJhbGciOiJIUzUxMiJ9.eyJ1aWQiOiIxMjMiLCJjZXJ0Tm8iOiI0NTYifQ.xTR4SG0z3Nuf-siW34XtVgqNPr9PRpPb8XFKY6Hrj_Qg8kl9C0AeVFcQ8NnguQ-SrlHHcv5M16SkjVYX3PKweg' &#125;, data: &#123;goodsId: goodsId&#125;, dataType: 'json', success: function(res)&#123; if(res.code === '0000') &#123; var innerContent = res.data; var bodyContent = $.parseHTML(innerContent); $('.content').append(bodyContent); if(isiOS) &#123; var imgNum = $('img').size(), loadCount=0; $('img').on('load', function(ev) &#123; loadCount++; if(loadCount === imgNum)&#123; // 获取到页面高度返给ios端 var bodyHeight = $('body').height() + 25; // 调取ios注入的方法 window.webkit.messageHandlers.jsCallNative.postMessage(&#123;height: bodyHeight&#125;); &#125; &#125;); &#125; &#125; &#125;, error: function() &#123;&#125;, &#125;);&lt;/script&gt;&lt;/html&gt; 这个webview页面相对麻烦些，需求是在ios页面的固定位置显示webview内容，并不是新开一个新页面来整个显示webview内容，这样ios需要获取h5页面的高，而页面的内容又是h5页面通过ajax获取回来的，所以，ajax请求成功后，将内容插入到页面中，如果有图片的话，等待图片全部加载之后再计算页面的高，返给ios。这时，ios提供了一个函数注入到h5页面里了，我们直接调用就可以，代码中就是这个函数window.webkit.messageHandlers.jsCallNative.postMessage();","categories":[{"name":"javascript","slug":"javascript","permalink":"/categories/javascript/"}],"tags":[{"name":"基础知识","slug":"基础知识","permalink":"/tags/基础知识/"}]},{"title":"js基础知识思维导图","slug":"js基础知识思维导图","date":"2018-10-29T05:50:50.000Z","updated":"2018-10-29T07:38:50.287Z","comments":true,"path":"2018/10/29/js基础知识思维导图/","link":"","permalink":"/2018/10/29/js基础知识思维导图/","excerpt":"在网上无意间发现了一套js基础的思维导图，赶紧收为己用，呵呵。","text":"在网上无意间发现了一套js基础的思维导图，赶紧收为己用，呵呵。 js基础知识思维导图1.变量 2.数组 3.运算符 4.流程语句 5.函数基础 6.字符串函数 7.基本dom操作 8.浏览器Bom对象 9.正则表达式","categories":[{"name":"javascript","slug":"javascript","permalink":"/categories/javascript/"}],"tags":[{"name":"基础知识","slug":"基础知识","permalink":"/tags/基础知识/"}]},{"title":"js类的继承(ES5写法)","slug":"js类的继承-ES5写法","date":"2018-10-23T01:30:30.000Z","updated":"2018-10-26T01:10:55.777Z","comments":true,"path":"2018/10/23/js类的继承-ES5写法/","link":"","permalink":"/2018/10/23/js类的继承-ES5写法/","excerpt":"js继承之终极继承寄生组合式继承","text":"js继承之终极继承寄生组合式继承 js类的继承(ES5写法)js的继承方式有很多，大致的罗列一下： 构造继承 原型链继承 组合继承 原型式继承 寄生式继承 寄生组合式继承这里只是列举了一些，还有很多其它方法，就不一一写出。在这些方法中，寄生组合式继承被认为是最好的，所以，只要记住这一种写法不就可以了吗。寄生组合式继承代码如下：123456789101112131415function inheritPrototype(Super,Sub)&#123; var superProtoClone = Object.Create(Super.prototype); superProtoClone.constructor = Sub; Sub.prototype = superProtoClone;&#125;function Super(name, age) &#123; this.name = name; this.age = age;&#125;function Sub(name, age, job)&#123; Super.call(this, name, age); Sub.job = job;&#125;inheritPrototype(Super,Sub);var s = new Sub('mike', 20); 这里用到了Object.Create方法，如果浏览器不兼容的话，顺便把兼容写法写出来：12345678910111213141516171819202122232425262728293031323334353637383940414243if (typeof Object.create != 'function') &#123; // Production steps of ECMA-262, Edition 5, 15.2.3.5 // Reference: http://es5.github.io/#x15.2.3.5 Object.create = (function() &#123; // To save on memory, use a shared constructor function Temp() &#123;&#125; // make a safe reference to Object.prototype.hasOwnProperty var hasOwn = Object.prototype.hasOwnProperty; return function (O) &#123; // 1. If Type(O) is not Object or Null throw a TypeError exception. if (typeof O != 'object') &#123; throw TypeError('Object prototype may only be an Object or null'); &#125; // 2. Let obj be the result of creating a new object as if by the // expression new Object() where Object is the standard built-in // constructor with that name // 3. Set the [[Prototype]] internal property of obj to O. Temp.prototype = O; var obj = new Temp(); Temp.prototype = null; // Let's not keep a stray reference to O... // 4. If the argument Properties is present and not undefined, add // own properties to obj as if by calling the standard built-in // function Object.defineProperties with arguments obj and // Properties. if (arguments.length &gt; 1) &#123; // Object.defineProperties does ToObject on its first argument. var Properties = Object(arguments[1]); for (var prop in Properties) &#123; if (hasOwn.call(Properties, prop)) &#123; obj[prop] = Properties[prop]; &#125; &#125; &#125; // 5. Return obj return obj; &#125;; &#125;)();&#125;","categories":[{"name":"javascript","slug":"javascript","permalink":"/categories/javascript/"}],"tags":[{"name":"基础知识","slug":"基础知识","permalink":"/tags/基础知识/"}]},{"title":"实现call函数","slug":"实现call函数","date":"2018-10-19T02:00:15.000Z","updated":"2018-10-19T06:03:10.245Z","comments":true,"path":"2018/10/19/实现call函数/","link":"","permalink":"/2018/10/19/实现call函数/","excerpt":"自己实现call函数","text":"自己实现call函数 实现call函数实现代码很简单，直接贴出来123456789101112131415161718Function.prototype.myCall = function(context) &#123; context.fn = this; var args = arguments, str=''; for(var i=1; i&lt;args.length; i++) &#123; str += (args[i]+','); &#125; var newStr = str.slice(0,(str.length-1)); eval('context.fn('+newStr+')');&#125;function abc(a,b) &#123; console.log(this.name+a+b);&#125;abc.myCall(&#123; name: 'join'&#125;,1,2);abc.myCall(&#123; name: 'mike'&#125;,3,4);","categories":[{"name":"javascript","slug":"javascript","permalink":"/categories/javascript/"}],"tags":[{"name":"基础知识","slug":"基础知识","permalink":"/tags/基础知识/"}]},{"title":"ajax跨域请求自定义header字段问题","slug":"ajax跨域请求自定义header字段问题","date":"2018-10-16T03:14:48.000Z","updated":"2018-10-16T03:31:27.520Z","comments":true,"path":"2018/10/16/ajax跨域请求自定义header字段问题/","link":"","permalink":"/2018/10/16/ajax跨域请求自定义header字段问题/","excerpt":"Access-Control-Allow-Headers 列表中不存在请求标头 XXXXXX的处理办法","text":"Access-Control-Allow-Headers 列表中不存在请求标头 XXXXXX的处理办法 ajax跨域请求自定义header字段问题首先，在后端允许跨域请求的情况下，前端加上自定义的请求字段，如下123456789101112$.ajax(&#123; method: 'POST', url: reqUrl, headers: &#123; 'client-token': '123456' &#125;, data: &#123;goodsId: goodsId&#125;, dataType: 'json', success: function(res)&#123; &#125;, error: function() &#123;&#125;, &#125;); 客户端 按照上面的写，你需要处理的是 服务端 响应头的设置 1.第一步设置响应头123header('Access-Control-Allow-Origin:*'); //支持全域名访问，不安全，部署后需要固定限制为客户端网址header('Access-Control-Allow-Methods:POST,GET,OPTIONS,DELETE'); //支持的http 动作header('Access-Control-Allow-Headers:x-requested-with,content-type'); //响应头 请按照自己需求添加。 2.第二步了解IE chrome 等浏览器 对于 跨域请求并要求设置Headers自定义参数的时候的 “预请求” 就是如果遇到 跨域并设置headers的请求，所有请求需要两步完成！A 第一步：发送预请求 OPTIONS 请求。此时 服务器端需要对于OPTIONS请求作出响应 一般使用202响应即可 不用返回任何内容信息。（能看到这份手稿的人，本人不相信你后台处理不了一个options请求）B 第二步：服务器accepted 第一步请求后 浏览器自动执行第二步 发送真正的请求。此时 大多数人 会发现请求成功了，但是 有那么几个人会发现 请求成功了但是没有任何信息返回 why？因为你自定义的请求头在服务器响应中不存在！查看console输出 会发现一个问题：“Access-Control-Allow-Headers 列表中不存在请求标头 XXXXXX”【IE】，request header field xxxxxx is not allowed by Access-Control-Allow-Header【chrome】这是因为 你的XXXX请求头 没有在服务器端被允许哦~遇到这个问题 只有通过修改服务器端来完成，举例：需要设置 client-token这么一个自定义头，那么 你需要在 服务端里面 将header(‘Access-Control-Allow-Headers:x-requested-with,content-type，client-token’); 同学们自行体会吧 这种语法就是根据“,”分割 自己需要设置什么头，必须要在 服务端请求的响应头里面设置好，不然客户端永远永远提交不上去！至此 JavaScript/ajax 跨域+ 修改httpheader 任务完美实现。“人们都一直在抱怨 JavaScript同源策略限制了web前端的发展！然而是服务端做的不够细致！”","categories":[{"name":"javascript","slug":"javascript","permalink":"/categories/javascript/"}],"tags":[{"name":"ajax","slug":"ajax","permalink":"/tags/ajax/"}]},{"title":"scratch介绍","slug":"scratch介绍","date":"2018-10-11T10:44:55.000Z","updated":"2018-10-12T05:10:36.869Z","comments":true,"path":"2018/10/11/scratch介绍/","link":"","permalink":"/2018/10/11/scratch介绍/","excerpt":"少儿编程神器scratch简单介绍","text":"少儿编程神器scratch简单介绍 scratch介绍scratch是一款儿童学习编程的软件，把具体的一些控制语句以图形的形式表现出来，可以用鼠标来拖动，很生动，简单，不理解编程的孩子们容易学习，本人也是刚刚接触学习scratch，跟孩子们一样需要重头来学习，因为我想做一名少儿编程启蒙老师。先把scratch的网址贴出来：scratch官网 安装scratch在线免安装首页点击try it out就进入在线页面玩耍了。 离线安装首页的footer位置，support下有Offline Editor连接，也可以点这里之后见下图位置可以下载安装了","categories":[{"name":"少儿编程","slug":"少儿编程","permalink":"/categories/少儿编程/"}],"tags":[{"name":"scratch","slug":"scratch","permalink":"/tags/scratch/"}]},{"title":"编译与解释","slug":"编译与解释","date":"2018-10-10T05:11:48.000Z","updated":"2018-10-10T06:09:09.952Z","comments":true,"path":"2018/10/10/编译与解释/","link":"","permalink":"/2018/10/10/编译与解释/","excerpt":"编译与解释的介绍","text":"编译与解释的介绍 编译与解释什么是编译器编译器是一种计算机程序，负责把一种编程语言编写的源码转换成另外一种计算机代码，后者往往是以二进制的形式被称为目标代码(object code)。这个转换的过程通常的目的是生成可执行的程序。编译器的产出是「另外一种代码」，然后这些代码等着被别人拿来执行，如果还不能直接被执行，那么还需要再编译或解释一遍，再交由计算机硬件执行。编译器，往往是在「执行」之前完成，产出是一种可执行或需要再编译或者解释的「代码」。 什么是解释器在计算机科学中，解释器是一种计算机程序，它直接执行由编程语言或脚本语言编写的代码，并不会把源代码预编译成机器码。一个解释器，通常会用以下的姿势来执行程序代码：1.分析源代码，并且直接执行。2.把源代码翻译成相对更加高效率的中间码，然后立即执行它。3.执行由解释器内部的编译器预编译后保存的代码可以把解释器看成一个黑盒子，我们输入源码，它就会实时返回结果。不同类型的解释器，黑盒子里面的构造不一样，有些还会集成编译器，缓存编译结果，用来提高执行效率（例如 Chrome V8 也是这么做的）。解释器通常是工作在「运行时」，并且对于我们输入的源码，是一行一行的解释然后执行，然后返回结果。 分两个维度比较一下表现 Behavior 编译器把源代码转换成其他的更低级的代码(例如二进制码、机器码)，但是不会执行它。 解释器会读取源代码，并且直接生成指令让计算机硬件执行，不会输出另外一种代码。 性能 Performance 编译器会事先用比较多的时间把整个程序的源代码编译成另外一种代码，后者往往较前者更加接近机器码，所以执行的效率会更加高。时间是消耗在预编译的过程中。 解释器会一行一行的读取源代码，解释，然后立即执行。这中间往往使用相对简单的词法分析、语法分析，压缩解释的时间，最后生成机器码，交由硬件执行。解释器适合比较低级的语言。但是相对于预编译好的代码，效率往往会更低。如何减少解释的次数和复杂性，是提高解释器效率的难题。 关于代码，需要知道的几个概念在看了不少不多关于「编译和解释」的文章之后，我发现下面的词汇是大量出现的。知道这些词汇代表的意思，以及对应的层次，能够更好地看懂别人所要表达的意思。 高级语言代码 High-Level Code高级语言代码，自然是指由高级编程语言编写代码，对计算机的细节有更高层次的抽象。相对于低级编程语言（low-level programming language）更接近自然语言（人类的语言）。集成一系列的自动工具（垃圾回收，内存管理等），会让程序员延长寿命，更快乐的编写出更简洁，更易读的程序代码。 低级语言代码 Low-Level Code低级语言代码，指由低级编程语言编写的代码，相对高级语言，少了更多的抽象概念，更加接近于汇编或者机器指令。但是这也意味着代码的可移植性很差。在我看来，高与低，只是一组相对词而已。越高级的语言，性能、自由度越不及低级语言。但是在抽象、可读可写性、可移植性越比低级语言优秀。在以前的年代，C/C++语言相对汇编语言，机器指令来说，肯定是高级语言。而到了今天，我们更多人对C语言偏向认知为「低级语言」。或许未来世界的开发者，看我们现在所熟悉的Java、PHP、Python、ECMAScript等等，都是「low」到爆的语言。 汇编语言 Assembly Language汇编语言作为一门低级语言，对应于计算机或者其他可编程的硬件。它和计算机的体系结构以及机器指令是强关联的。换句话说，就是不同的汇编语言代码对应特定的硬件，所以不用谈可移植性了。相对于需要编译和解释的高级语言代码来说，汇编代码只需要翻译成机器码就可以执行了。所以汇编语言也往往被称作象征性机器码(symbolic machine code) 字节码 Byte Code字节码严格来说不算是编程语言，而是高级编程语言为了种种需求（可移植性、可传输性、预编译等）而产生的中间码（Intermediate Code）。它是由一堆指令集组成的代码，例如在javac编译过后的java源码产生的就是字节码。源码在编译的过程中，是需要进行「词法分析 → 语法分析 → 生成目标代码」等过程的，在预编译的过程中，就完成这部分工作，生成字节码。然后在后面交由解释器（这里通常指编程语言的虚拟机）解释执行，省去前面预编译的开销。 机器码 Machine Code机器码是一组可以直接被CPU执行的指令集，每一条指令都代表一个特定的任务，或者是加载，或者是跳转，亦或是计算操作等等。所有可以直接被CPU执行的程序，都是由这么一系列的指令组成的。机器码可是看作是编译过程中，最低级的代码，因外再往下就是交由硬件来执行了。当然机器码也是可以被编辑的，但是以人类难以看懂的姿势存在，可读性非常差。 从熟悉的编程语言的角度来看看从左往右看，1.以 Java 为例，我们在文本编译器写好了 Java 代码，交由「编译器」编译成 Java Bytecode。然后 Bytecode 交由 JVM 来执行，这时候 JVM 充当了「解释器」的角色，在解释 Bytecode 成 Machine Code 的同时执行它，返回结果。2.以 BASIC 语言（早期的可以由计算机直译的语言） 为例，通过文本编译器编写好，不用经历「编译」的过程，就可以直接交由操作系统内部来进行「解释」然后执行。3.以 C 语言为例，我们在文本编译器编写好源代码，然后运行 gcc hello.c 编译出 hello.out 文件，该文件由一系列的机器指令组成的机器码，可以直接交由硬件来执行。 抽象看本质：人与计算机之间的鸿沟无论是最近在看《暗时间》的作者刘未鹏，还是前一段时间听《以产品思维写文章》讲座的阿禅，还是其他的很多聪明的人。他们都强调「抽象看本质」的能力，能从事物本身抽象出共通属性，看待本质。这也是很多人所说的「跳出这个框框再看」的思维方式。 无论是「编译 Compile」还是「解释 Interpret」。本质还是「人与计算机的交流形式」，人的语言最终转换成机器语言。一句 「Hello World」，经过一些列的「编译」和「解释」，最终转换成一系列包含机器指令的那些0和1，机器傻傻执行完之后，告诉你结果。 就这么一个过程，我们就需要很多的翻译官。有些翻译官可以做到同声传译（解释），有些翻译官却只能把我们的意图记下来再全部翻译（编译）给计算机。而往往一个翻译官能力有限，也只能把你的语言，翻译成另外一种低级点的语言，再由另外懂这个语言的翻译官来翻译更接近计算机能读得懂的语言。 最后用一张图来展示一下编译与解释","categories":[{"name":"计算机原理","slug":"计算机原理","permalink":"/categories/计算机原理/"}],"tags":[{"name":"基础知识","slug":"基础知识","permalink":"/tags/基础知识/"}]},{"title":"vue不同路由使用同一个组件重新加载这个组件","slug":"vue不同路由使用同一个组件重新加载这个组件","date":"2018-10-08T02:26:49.000Z","updated":"2018-10-08T05:26:06.679Z","comments":true,"path":"2018/10/08/vue不同路由使用同一个组件重新加载这个组件/","link":"","permalink":"/2018/10/08/vue不同路由使用同一个组件重新加载这个组件/","excerpt":"vue不同路由使用同一个组件重新加载这个组件","text":"vue不同路由使用同一个组件重新加载这个组件 vue不同路由使用同一个组件重新加载这个组件vue,react,angular都会有一个共同点，那就是如果两个路由用的是一个组件的话，在切换路由的时候组件的生命周期函数并没有被调用，比如有一些想在组件渲染之后调用的钩子函数并不会执行，这是为了性能的考虑。我之前用angular的时候有相应的解决办法，react也有，这里不做探讨，这里只说vue，昨天看到了一个这方面的解决方法，感觉很好，记录下来。有两种解决方案： 第一种监听$route的变化来初始化数据，如下：1234567891011121314151617181920212223data() &#123; return &#123; loading: false, error: null, post: null &#125;&#125;,watch: &#123; '$route': &#123; handler: 'resetData', immediate: true &#125;&#125;,methods: &#123; resetData() &#123; this.loading = false this.error = null this.post = null this.getPost(this.$route.params.id) &#125;, getPost(id)&#123; &#125;&#125; 第二种给router-view添加一个unique的key，这样即使是公用组件，只要url变化了，就一定会重新创建这个组件，将key直接设置为路由的完整路径。1&lt;router-view :key=\"$route.fullpath\"&gt;&lt;/router-view&gt; 组件代码就可以正常的书写了，如下：123456789101112131415data() &#123; return &#123; loading: false, error: null, post: null &#125;&#125;,created () &#123; this.getPost(this.$route.params.id)&#125;,methods () &#123; getPost(postId) &#123; // ... &#125;&#125;","categories":[{"name":"javascript","slug":"javascript","permalink":"/categories/javascript/"}],"tags":[{"name":"vue","slug":"vue","permalink":"/tags/vue/"}]},{"title":"图片类型转换(image base64 file canvas)","slug":"图片类型转换-image-base64-file-canvas","date":"2018-09-29T03:32:57.000Z","updated":"2018-09-29T05:22:22.078Z","comments":true,"path":"2018/09/29/图片类型转换-image-base64-file-canvas/","link":"","permalink":"/2018/09/29/图片类型转换-image-base64-file-canvas/","excerpt":"图片的各种类型相互间的转换。","text":"图片的各种类型相互间的转换。 图片类型转换(image base64 file canvas)dom中的img标签来显示图片，在src上给一个图片的连接即可，但是如果想把这个图片放在canvas上，或者ipput上传的图片想显示出来，或者canvas剪裁的图片想保存为Blob格式用ajax上传等等一系列操作，如果不缕清楚的话真是迷糊，所以做一下小小的总结。 url连接urltoImage(url,fn) 会通过一个url加载所需要的图片对象，其中 url 参数传入图片的 url , fn 为回调方法,包含一个Image对象的参数，代码如下：1234567function urltoImage (url,fn)&#123; var img = new Image(); img.src = url; img.onload = function()&#123; fn(img); &#125;&#125;; canvas画图片imagetoCanvas(image) 会将一个 Image 对象转变为一个 Canvas 类型对象，其中 image 参数传入一个Image对象，代码如下：12345678function imagetoCanvas(image)&#123; var cvs = document.createElement(\"canvas\"); var ctx = cvs.getContext('2d'); cvs.width = image.width; cvs.height = image.height; ctx.drawImage(image, 0, 0, cvs.width, cvs.height); return cvs ;&#125;; canvas图片转Blob canvasResizetoFile(canvas,quality,fn) 会将一个 Canvas 对象压缩转变为一个 Blob 类型对象；其中 canvas 参数传入一个 Canvas 对象; quality 参数传入一个0-1的 number 类型，表示图片压缩质量; fn 为回调方法，包含一个 Blob 对象的参数;代码如下： 12345function canvasResizetoFile(canvas,quality,fn)&#123; canvas.toBlob(function(blob) &#123; fn(blob); &#125;,'image/jpeg',quality);&#125;; 这里的 Blob 对象表示不可变的类似文件对象的原始数据。 Blob 表示不一定是 JavaScript 原生形式的数据。 File 接口基于 Blob ，继承了 Blob 的功能并将其扩展使其支持用户系统上的文件。我们可以把它当做File类型对待，其他更具体的用法可以参考MDN文档 canvas转dataURL canvasResizetoDataURL(canvas,quality) 会将一个 Canvas 对象压缩转变为一个 dataURL 字符串,其中 canvas 参数传入一个 Canvas 对象; quality 参数传入一个0-1的 number 类型，表示图片压缩质量;代码如下：123methods.canvasResizetoDataURL = function(canvas,quality)&#123; return canvas.toDataURL('image/jpeg',quality);&#125;; 其中的 toDataURL API可以参考MDN文档 File(Blob)转dataURL filetoDataURL(file,fn) 会将 File （ Blob ）类型文件转变为 dataURL 字符串,其中 file 参数传入一个 File （ Blob ）类型文件; fn 为回调方法，包含一个 dataURL 字符串的参数;代码如下： 1234567function filetoDataURL(file,fn)&#123; var reader = new FileReader(); reader.onloadend = function(e)&#123; fn(e.target.result); &#125;; reader.readAsDataURL(file);&#125;; dataURL转为Image类型文件 dataURLtoImage(dataurl,fn) 会将一串 dataURL 字符串转变为 Image 类型文件,其中 dataurl 参数传入一个 dataURL 字符串, fn 为回调方法，包含一个 Image 类型文件的参数，代码如下： 1234567function dataURLtoImage(dataurl,fn)&#123; var img = new Image(); img.onload = function() &#123; fn(img); &#125;; img.src = dataurl;&#125;; dataURL转为Blob类型dataURLtoFile(dataurl) 会将一串 dataURL 字符串转变为 Blob 类型对象，其中 dataurl 参数传入一个 dataURL 字符串,代码如下：12345678function dataURLtoFile(dataurl) &#123; var arr = dataurl.split(','), mime = arr[0].match(/:(.*?);/)[1], bstr = atob(arr[1]), n = bstr.length, u8arr = new Uint8Array(n); while(n--)&#123; u8arr[n] = bstr.charCodeAt(n); &#125; return new Blob([u8arr], &#123;type:mime&#125;);&#125;; 实际应用demo对于常用的将一个 File 对象压缩之后再变为 File 对象,我们可以将上面的方法再封装一下，参考如下代码：1234567function fileResizetoFile(file,quality,fn)&#123; filetoDataURL (file,function(dataurl)&#123; dataURLtoImage(dataurl,function(image)&#123; canvasResizetoFile(imagetoCanvas(image),quality,fn); &#125;) &#125;)&#125; 其中， file 参数传入一个 File （ Blob ）类型文件； quality 参数传入一个 0-1 的 number 类型，表示图片压缩质量； fn 为回调方法，包含一个 Blob 类型文件的参数。它使用起来就像下面这样：12345var file = document.getElementById('demo').files[0];fileResizetoFile(file,0.6,function(res)&#123; console.log(res); //拿到res，做出你要上传的操作；&#125;) 再来一个图片等比压缩的demo1234567891011121314151617181920212223242526272829function proDownImage(path,imgObj) &#123; // 等比压缩图片工具 //var proMaxHeight = 185; var proMaxHeight=300; var proMaxWidth = 175; var size = new Object(); var image = new Image(); image.src = path; image.attachEvent(\"onreadystatechange\", function() &#123; // 当加载状态改变时执行此方法,因为img的加载有延迟 if (image.readyState == \"complete\") &#123; // 当加载状态为完全结束时进入 if (image.width &gt; 0 &amp;&amp; image.height &gt; 0) &#123; var ww = proMaxWidth / image.width; var hh = proMaxHeight / image.height; var rate = (ww &lt; hh) ? ww: hh; if (rate &lt;= 1) &#123; alert(\"imgage width*rate is:\" + image.width * rate); size.width = image.width * rate; size.height = image.height * rate; &#125; else &#123; alert(\"imgage width is:\" + image.width); size.width = image.width; size.height = image.height; &#125; &#125; &#125; imgObj.attr(\"width\",size.width); imgObj.attr(\"height\",size.height); &#125;);&#125;","categories":[{"name":"javascript","slug":"javascript","permalink":"/categories/javascript/"}],"tags":[{"name":"图片处理","slug":"图片处理","permalink":"/tags/图片处理/"}]},{"title":"一些好的文章收集","slug":"一些好的文章收集","date":"2018-09-28T02:19:50.000Z","updated":"2018-09-29T03:34:56.966Z","comments":true,"path":"2018/09/28/一些好的文章收集/","link":"","permalink":"/2018/09/28/一些好的文章收集/","excerpt":"网上看到的好文章，总结收集。","text":"网上看到的好文章，总结收集。 一些好的文章收集自己写博客文章真的是一件耗时的事儿，写文章需要把各个方面的知识都整理好，有时候我都是在网上看到一篇不错的文章，想记录下来，就照猫画虎的copy，但是，copy下拉也需要时间啊，没办法，现在我只能把连接记录下来，等有时间再好好地记录一下。 页面渲染优化 高频dom操作和页面性能优化探索","categories":[{"name":"javascript","slug":"javascript","permalink":"/categories/javascript/"}],"tags":[{"name":"文章收集","slug":"文章收集","permalink":"/tags/文章收集/"}]},{"title":"hexo中使用hexo-asset-image插件来加载本地图片","slug":"hexo中使用hexo-asset-image插件来加载本地图片","date":"2018-09-21T02:55:52.000Z","updated":"2018-09-21T03:34:34.812Z","comments":true,"path":"2018/09/21/hexo中使用hexo-asset-image插件来加载本地图片/","link":"","permalink":"/2018/09/21/hexo中使用hexo-asset-image插件来加载本地图片/","excerpt":"hexo中使用hexo-asset-image插件来加载本地图片,因为版本兼容问题不显示图片的解决办法。","text":"hexo中使用hexo-asset-image插件来加载本地图片,因为版本兼容问题不显示图片的解决办法。 hexo中使用hexo-asset-image插件来加载本地图片在使用hexo时，在md文件里加载图片一般都会用到网络上的图片，但是如果有些图片不允许使用，怎么办？当然可以用七牛云这种图床网站，如果想使用本地的图片怎么办呢？那就用到了hexo-asset-image这个插件，但是这个插件写的很早，与现在新版本的hexo不兼容，于是乎就有一些大牛进行了修改，这里贴出这位大牛的github地址，兼容新版本hexo的hexo-asset-image插件。使用方法就是替换掉npm安装的hexo-asset-image插件中的文件,代码如下12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061'use strict';var cheerio = require('cheerio');// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-stringfunction getPosition(str, m, i) &#123; return str.split(m, i).join(m).length;&#125;var version = String(hexo.version).split('.');hexo.extend.filter.register('after_post_render', function(data)&#123; var config = hexo.config; if(config.post_asset_folder)&#123; var link = data.permalink; if(version.length &gt; 0 &amp;&amp; Number(version[0]) == 3) var beginPos = getPosition(link, '/', 1) + 1; else var beginPos = getPosition(link, '/', 3) + 1; // In hexo 3.1.1, the permalink of \"about\" page is like \".../about/index.html\". var endPos = link.lastIndexOf('/') + 1; link = link.substring(beginPos, endPos); var toprocess = ['excerpt', 'more', 'content']; for(var i = 0; i &lt; toprocess.length; i++)&#123; var key = toprocess[i]; var $ = cheerio.load(data[key], &#123; ignoreWhitespace: false, xmlMode: false, lowerCaseTags: false, decodeEntities: false &#125;); $('img').each(function()&#123; if ($(this).attr('src'))&#123; // For windows style path, we replace '\\' to '/'. var src = $(this).attr('src').replace('\\\\', '/'); if(!/http[s]*.*|\\/\\/.*/.test(src) &amp;&amp; !/^\\s*\\//.test(src)) &#123; // For \"about\" page, the first part of \"src\" can't be removed. // In addition, to support multi-level local directory. var linkArray = link.split('/').filter(function(elem)&#123; return elem != ''; &#125;); var srcArray = src.split('/').filter(function(elem)&#123; return elem != '' &amp;&amp; elem != '.'; &#125;); if(srcArray.length &gt; 1) srcArray.shift(); src = srcArray.join('/'); $(this).attr('src', config.root + link + src); console.info&amp;&amp;console.info(\"update link as:--&gt;\"+config.root + link + src); &#125; &#125;else&#123; console.info&amp;&amp;console.info(\"no src attr, skipped...\"); console.info&amp;&amp;console.info($(this)); &#125; &#125;); data[key] = $.html(); &#125; &#125;&#125;); 图片具体的引入方式：12345678MacGesture2-Publish├── apppicker.jpg├── logo.jpg└── rules.jpgMacGesture2-Publish.mdMake sure post_asset_folder: true in your _config.yml.Just use ![logo](logo.jpg) to insert logo.jpg.","categories":[{"name":"javascript","slug":"javascript","permalink":"/categories/javascript/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"/tags/hexo/"}]},{"title":"HTTP缓存机制及原理","slug":"HTTP缓存机制及原理","date":"2018-09-19T02:14:58.000Z","updated":"2018-09-21T03:32:01.666Z","comments":true,"path":"2018/09/19/HTTP缓存机制及原理/","link":"","permalink":"/2018/09/19/HTTP缓存机制及原理/","excerpt":"HTTP缓存机制及原理的一些小总结","text":"HTTP缓存机制及原理的一些小总结 HTTP缓存机制及原理前言Http 缓存机制作为 web 性能优化的重要手段，对于从事 Web 开发的同学们来说，应该是知识体系库中的一个基础环节，同时对于有志成为前端架构师的同学来说是必备的知识技能。但是对于很多前端同学来说，仅仅只是知道浏览器会对请求的静态文件进行缓存，但是为什么被缓存，缓存是怎样生效的，却并不是很清楚。在此，我会尝试用简单明了的文字，像大家系统的介绍HTTP缓存机制，期望对各位正确的理解前端缓存有所帮助。 在介绍HTTP缓存之前，作为知识铺垫，先简单介绍一下HTTP报文HTTP报文就是浏览器和服务器间通信时发送及响应的数据块。浏览器向服务器请求数据，发送请求(request)报文；服务器向浏览器返回数据，返回响应(response)报文。报文信息主要分为两部分1.包含属性的首部(header)————————–附加信息（cookie，缓存信息等）与缓存相关的规则信息，均包含在header中2.包含数据的主体部分(body)———————–HTTP请求真正想要传输的部分 缓存规则解析为方便大家理解，我们认为浏览器存在一个缓存数据库,用于存储缓存信息。在客户端第一次请求数据时，此时缓存数据库中没有对应的缓存数据，需要请求服务器，服务器返回后，将数据存储至缓存数据库中。HTTP缓存有多种规则，根据是否需要重新向服务器发起请求来分类，我将其分为两大类(强制缓存，对比缓存)在详细介绍这两种规则之前，先通过时序图的方式，让大家对这两种规则有个简单了解。已存在缓存数据时，仅基于强制缓存，请求数据的流程如下已存在缓存数据时，仅基于对比缓存，请求数据的流程如对缓存机制不太了解的同学可能会问，基于对比缓存的流程下，不管是否使用缓存，都需要向服务器发送请求，那么还用缓存干什么？这个问题，我们暂且放下，后文在详细介绍每种缓存规则的时候，会带给大家答案。我们可以看到两类缓存规则的不同，强制缓存如果生效，不需要再和服务器发生交互，而对比缓存不管是否生效，都需要与服务端发生交互。两类缓存规则可以同时存在，强制缓存优先级高于对比缓存，也就是说，当执行强制缓存的规则时，如果缓存生效，直接使用缓存，不再执行对比缓存规则。 强制缓存从上文我们得知，强制缓存，在缓存数据未失效的情况下，可以直接使用缓存数据，那么浏览器是如何判断缓存数据是否失效呢？我们知道，在没有缓存数据的时候，浏览器向服务器请求数据时，服务器会将数据和缓存规则一并返回，缓存规则信息包含在响应header中。对于强制缓存来说，响应header中会有两个字段来标明失效规则（Expires/Cache-Control）使用chrome的开发者工具，可以很明显的看到对于强制缓存生效时，网络请求的情况 ExpiresExpires的值为服务端返回的到期时间，即下一次请求时，请求时间小于服务端返回的到期时间，直接使用缓存数据。不过Expires 是HTTP 1.0的东西，现在默认浏览器均默认使用HTTP 1.1，所以它的作用基本忽略。另一个问题是，到期时间是由服务端生成的，但是客户端时间可能跟服务端时间有误差，这就会导致缓存命中的误差。所以HTTP 1.1 的版本，使用Cache-Control替代。 Cache-ControlCache-Control 是最重要的规则。常见的取值有private、public、no-cache、max-age，no-store，默认为private。private: 客户端可以缓存public: 客户端和代理服务器都可缓存（前端的同学，可以认为public和private是一样的）max-age=xxx: 缓存的内容将在 xxx 秒后失效no-cache: 需要使用对比缓存来验证缓存数据（后面介绍）no-store: 所有内容都不会缓存，强制缓存，对比缓存都不会触发（对于前端开发来说，缓存越多越好，so…基本上和它说886）图中Cache-Control仅指定了max-age，所以默认为private，缓存时间为31536000秒（365天）也就是说，在365天内再次请求这条数据，都会直接获取缓存数据库中的数据，直接使用。 对比缓存对比缓存，顾名思义，需要进行比较判断是否可以使用缓存。浏览器第一次请求数据时，服务器会将缓存标识与数据一起返回给客户端，客户端将二者备份至缓存数据库中。再次请求数据时，客户端将备份的缓存标识发送给服务器，服务器根据缓存标识进行判断，判断成功后，返回304状态码，通知客户端比较成功，可以使用缓存数据。第一次访问：再次访问：通过两图的对比，我们可以很清楚的发现，在对比缓存生效时，状态码为304，并且报文大小和请求时间大大减少。原因是，服务端在进行标识比较后，只返回header部分，通过状态码通知客户端使用缓存，不再需要将报文主体部分返回给客户端。对于对比缓存来说，缓存标识的传递是我们着重需要理解的，它在请求header和响应header间进行传递，一共分为两种标识传递，接下来，我们分开介绍。 Last-Modified / If-Modified-SinceLast-Modified：服务器在响应请求时，告诉浏览器资源的最后修改时间。 If-Modified-Since：再次请求服务器时，通过此字段通知服务器上次请求时，服务器返回的资源最后修改时间。服务器收到请求后发现有头If-Modified-Since 则与被请求资源的最后修改时间进行比对。若资源的最后修改时间大于If-Modified-Since，说明资源又被改动过，则响应整片资源内容，返回状态码200；若资源的最后修改时间小于或等于If-Modified-Since，说明资源无新修改，则响应HTTP 304，告知浏览器继续使用所保存的cache。 Etag / If-None-Match（优先级高于Last-Modified / If-Modified-Since）Etag：服务器响应请求时，告诉浏览器当前资源在服务器的唯一标识（生成规则由服务器决定）。 If-None-Match：再次请求服务器时，通过此字段通知服务器客户段缓存数据的唯一标识。服务器收到请求后发现有头If-None-Match 则与被请求资源的唯一标识进行比对，不同，说明资源又被改动过，则响应整片资源内容，返回状态码200；相同，说明资源无新修改，则响应HTTP 304，告知浏览器继续使用所保存的cache。 总结对于强制缓存，服务器通知浏览器一个缓存时间，在缓存时间内，下次请求，直接用缓存，不在时间内，执行比较缓存策略。对于比较缓存，将缓存信息中的Etag和Last-Modified通过请求发送给服务器，由服务器校验，返回304状态码时，浏览器直接使用缓存。浏览器第一次请求：浏览器再次请求时：","categories":[{"name":"javascript","slug":"javascript","permalink":"/categories/javascript/"}],"tags":[{"name":"网络基础","slug":"网络基础","permalink":"/tags/网络基础/"},{"name":"面试题","slug":"面试题","permalink":"/tags/面试题/"}]},{"title":"css省略号","slug":"css省略号","date":"2018-09-14T07:39:45.000Z","updated":"2018-09-14T08:09:22.697Z","comments":true,"path":"2018/09/14/css省略号/","link":"","permalink":"/2018/09/14/css省略号/","excerpt":"页面中文字溢出的省略号","text":"页面中文字溢出的省略号 css文本溢出省略号单行文本省略号1234overflow: hidden;text-overflow: ellipsis;white-space: nowrap;// 有些浏览器需要加上width 多行文本溢出省略号在WebKit浏览器或移动端（绝大部分是WebKit内核的浏览器）的页面实现比较简单，可以直接使用WebKit的CSS扩展属性(WebKit是私有属性)-webkit-line-clamp ；注意：这是一个 不规范的属性（unsupported WebKit property），它没有出现在 CSS 规范草案中。-webkit-line-clamp用来限制在一个块元素显示的文本的行数。 为了实现该效果，它需要组合其他的WebKit属性。常见结合属性： display: -webkit-box; 必须结合的属性 ，将对象作为弹性伸缩盒子模型显示 。 -webkit-box-orient 必须结合的属性 ，设置或检索伸缩盒对象的子元素的排列方式 。 text-overflow: ellipsis;，可以用来多行文本的情况下，用省略号“…”隐藏超出范围的文本 。12345overflow : hidden;text-overflow: ellipsis;display: -webkit-box;-webkit-line-clamp: 2;-webkit-box-orient: vertical; 兼容其它浏览器的写法html:1&lt;p&gt;WebKit Browsers will clamp the number of lines in this paragraph to 2. Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.&lt;/p&gt; css:12345678910111213141516p &#123; position:relative; line-height:1.4em; /* 3 times the line-height to show 3 lines */ height:4.2em; overflow:hidden;&#125;p::after &#123; content:\"...\"; font-weight:bold; position:absolute; bottom:0; right:0; padding:0 20px 1px 45px; background:url(http://css88.b0.upaiyun.com/css88/2014/09/ellipsis_bg.png) repeat-y;&#125; 这里注意几点： height高度真好是line-height的3倍； 结束的省略好用了半透明的png做了减淡的效果，或者设置背景颜色； IE6-7不显示content内容，所以要兼容IE6-7可以是在内容中加入一个标签，比如用…去模拟； 要支持IE8，需要将::after替换成:after；","categories":[{"name":"css","slug":"css","permalink":"/categories/css/"}],"tags":[{"name":"样式","slug":"样式","permalink":"/tags/样式/"}]},{"title":"技术博客网站收集整理","slug":"技术博客网站收集整理","date":"2018-09-06T09:05:00.000Z","updated":"2018-09-28T03:20:29.582Z","comments":true,"path":"2018/09/06/技术博客网站收集整理/","link":"","permalink":"/2018/09/06/技术博客网站收集整理/","excerpt":"对一些大牛的blog或者github的收集。","text":"对一些大牛的blog或者github的收集。 技术博客列表 coco大神的github 大神些webpack 比较不错的面试题收集 前端俱乐部","categories":[],"tags":[{"name":"大牛分享","slug":"大牛分享","permalink":"/tags/大牛分享/"}]},{"title":"jquery上传文件","slug":"jquery上传文件","date":"2018-09-03T05:26:56.000Z","updated":"2018-09-14T06:00:01.826Z","comments":true,"path":"2018/09/03/jquery上传文件/","link":"","permalink":"/2018/09/03/jquery上传文件/","excerpt":"之前在项目中使用jquery，Formdata实现文件上传","text":"之前在项目中使用jquery，Formdata实现文件上传 jquery上传文件现在的上传文件插件非常的多，比如在一个表单中，上传身份证照片，点击上传按钮，选好图片，上传好了，一般都提交到了一个图片服务器上，这是常规做法，但是有遇到过，有的后端同事要求我在点击form的提交按钮时，图片和输入框，下拉信息一并提交，当然，直接用form来做都不用改什么就可以，但是，如果需要更灵活的话，我选择了FormData对象配合jquery来做，具体代码：lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;upload file&lt;/title&gt; &lt;script src=\"./jquery.js\"&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;style&gt;.upload_area &gt; div, .userType_area &gt; div , .sendType_area &gt; div &#123; border: 1px solid #DAD5D5; padding: 10px 15px;&#125;#myUploadBtn&#123; background-color:#1874D5; border: none; color: #ffffff; padding: 5px 12px;&#125;h3 &#123; margin: 5px 0;&#125;.fileName &#123; margin-left: 15px;&#125;.userType_area &#123;&#125; .userType_area ul , .sendType_area ul &#123; overflow: hidden;&#125;.userType_area ul li , .sendType_area ul li &#123; position: relative; float: left; padding: 2px 5px; background-color:#1874D5; color: #ffffff; color: #ffffff; margin: 0 10px; cursor: pointer;&#125;span.checkMark &#123; position: absolute; top: 0; right: 0; width: 20px; height: 20px; border-radius: 50%; background-color: rgba(0,0,0,.5); color: #fffff; text-align: center;&#125;.text_area &#123;&#125;.text_area textarea &#123; width: 100%; height: 120px;&#125;.mes_box &#123; display: none; position: absolute; top: 20%; left: 50%; margin:0 0 0 -150px; width: 300px; height: 200px; background-color: gray; border-radius: 5px; text-align: center;&#125;.mes_box &gt; .cancel &#123; position: absolute; width: 30px; height: 30px; border-radius: 20px; text-align: center; line-height:23px; color: #fff; font-size: 25px; right: 5px; top: 3px; border: 1px solid #fff; cursor: pointer;&#125;.mes_box &gt; strong &#123; color: #ffffff; display: inline-block; margin: 70px 0; font-size: 16px;&#125;&lt;/style&gt;&lt;div class=\"mes_box\"&gt; &lt;span class=\"cancel\"&gt;x&lt;/span&gt; &lt;strong&gt;&lt;/strong&gt;&lt;/div&gt;&lt;input type=\"file\" id=\"choosefile\" style=\"display:none;\" /&gt;&lt;div class=\"upload_area\"&gt; &lt;h3&gt;上传文件&lt;/h3&gt; &lt;div&gt; &lt;button id=\"myUploadBtn\"&gt;请选择您要上传的文件&lt;/button&gt; &lt;span class=\"fileName\"&gt;&lt;/span&gt; &lt;/div&gt;&lt;/div&gt;&lt;div class=\"userType_area\"&gt; &lt;h3&gt;选择用户类型&lt;/h3&gt; &lt;div&gt; &lt;ul&gt; &lt;li data-code=\"1\"&gt;余额不足&lt;/li&gt; &lt;li data-code=\"2\"&gt;宽带到期&lt;/li&gt; &lt;li data-code=\"3\"&gt;其它&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt;&lt;/div&gt;&lt;div class=\"sendType_area\"&gt; &lt;h3&gt;选择推送触点&lt;/h3&gt; &lt;div&gt; &lt;ul&gt; &lt;li data-code=\"1\"&gt;辽宁联通为信号&lt;/li&gt; &lt;li data-code=\"2\"&gt;短信&lt;/li&gt; &lt;li data-code=\"3\"&gt;其它&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt;&lt;/div&gt;&lt;div class=\"text_area\"&gt; &lt;h3&gt;输入推送需求&lt;/h3&gt; &lt;div&gt; &lt;textarea name=\"\" id=\"\" cols=\"30\" rows=\"10\"&gt;&lt;/textarea&gt; &lt;/div&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;button id=\"sendFile\" type=\"button\" class=\"btn btn-primary bsok\"&gt;提交&lt;/button&gt;&lt;script&gt;(function()&#123; var isok = true , isover = false; //选择文件点击事件 $('#myUploadBtn').on('click',function()&#123; (function()&#123; return $('#choosefile')[0].click(); &#125;)(); &#125;); //上传选择文件change事件 $('#choosefile').on('change',function()&#123; $('.fileName').text('上传的文件名：'+$(this)[0].files[0].name); &#125;); //被选中函数 function checkMark($el,isDan)&#123; var strNode = '&lt;span class=\"checkMark\"&gt;√&lt;/span&gt;' if(isDan)&#123; if($el.data('checkMark'))&#123; $el.find('span').remove(); $el.data('checkMark', false); &#125;else&#123; $el.siblings().data('checkMark', false).find('span').remove(); $el.data('checkMark', true).append(strNode); &#125; &#125;else&#123; if($el.data('checkMark'))&#123; $el.find('span').remove(); $el.data('checkMark', false); &#125;else&#123; $el.data('checkMark', true).append(strNode); &#125; &#125; &#125; //获取被选中的code function getCode($el)&#123; var arr = []; $el.find('li').each(function(index, el) &#123; if($(this).data('checkMark') == true)&#123; arr.push($(this).data('code')); &#125; &#125;); return arr; &#125; //选择用户类型添加事件 $('.userType_area li').on('click',function()&#123; checkMark($(this),true); &#125;); //推送触点添加事件 $('.sendType_area li').on('click',function()&#123; checkMark($(this),false); &#125;); //上传文件点击事件 $('#sendFile').on('click',function()&#123; var fd = new FormData(); var upload_file = $('#choosefile')[0].files[0]; var userType = getCode($('.userType_area')); var sendType = getCode($('.sendType_area')); var text = $('.text_area textarea').val(); if(upload_file)&#123; var houz = /\\.[^\\.]+$/.exec(upload_file.name); var size = upload_file.size; &#125; console.log(upload_file); if(!upload_file)&#123; $('.mes_box').show(); $('.mes_box strong').text('请选择一个要上传的文件'); isok = false; &#125;else if(userType.length === 0)&#123; $('.mes_box').show(); $('.mes_box strong').text('请选择用户类型'); isok = false; &#125;else if(sendType.length === 0)&#123; $('.mes_box').show(); $('.mes_box strong').text('请选择推送触点'); isok = false; &#125;else if(!text)&#123; $('.mes_box').show(); $('.mes_box strong').text('请输入推送需求'); isok = false; &#125;else if(houz[0] !== '.txt')&#123; $('.mes_box').show(); $('.mes_box strong').text('请上传以txt结尾的文件'); isok = false; &#125;else if(size &gt; 4194304)&#123; $('.mes_box').show(); $('.mes_box strong').text('您上传的文件过大，请上传小于4M的文件'); isok = false; &#125;; fd.append('userType',userType); fd.append('sendType',userType); fd.append('text',userType); fd.append('file',upload_file); if(isok)&#123; $.ajax(&#123; url: ajaxUrl + \"/module/channel/checkByWhere\", type: 'POST', cache: false, processData: false, contentType: false, data: fd, success:function(res)&#123; $(\".modal-content\").mask(\"hide\"); if(true)&#123; $('.mes_box').show(); $('.mes_box strong').text('数据提交成功'); isover = true; &#125;else&#123; $('.mes_box').show(); $('.mes_box strong').text('服务器问题，数据提交失败'); &#125; &#125;, error:function(err)&#123; $(\".modal-content\").mask(\"hide\"); $('.mes_box').show(); $('.mes_box strong').text('由于网络原因提交失败'); &#125; &#125;); $(\".modal-content\").mask(\"show\");//ajax提交数据出现loading蒙层 &#125; &#125;); //提示框关闭按钮点击事件 $('.mes_box .cancel').on('click',function()&#123; $(this).parent().hide(); isok = true; if(isover === true)&#123; $('#createModal').remove(); $('.modal-backdrop.fade.in').remove(); &#125; &#125;);&#125;)(); &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 这是整个页面的内容，其实重要的几个点在这里：12345678910111213141516171819202122232425 $('#myUploadBtn').on('click',function()&#123; (function()&#123; return $('#choosefile')[0].click(); &#125;)(); &#125;);上边这个函数就是把实际的input file 标签隐藏，用其他的按钮来触发弹出选择文件的窗口，注意，不能直接用file.click()这种形式，要 (function()&#123; return file.click(); &#125;)();这样做才可以调出选择文件的窗口。再有一点，利用了h5的 var fd = new FormData(); 类，把需要上传的文件起个key值，直接放到fd实例里， fd.append('userType',userType); fd.append('sendType',userType); fd.append('text',userType); fd.append('file',upload_file);之后用ajax直接把fd对象上传就可以了，以jquery为例 $.ajax(&#123; url: ajaxUrl + \"/module/channel/checkByWhere\", type: 'POST', cache: false, processData: false,//不对数据进行处理，保持2进制 contentType: false,//不对数据进行处理，保持2进制 data: fd &#125;);","categories":[{"name":"javascript","slug":"javascript","permalink":"/categories/javascript/"}],"tags":[{"name":"ajax","slug":"ajax","permalink":"/tags/ajax/"}]},{"title":"javascript提高性能","slug":"javascript提高性能","date":"2018-09-01T07:00:22.000Z","updated":"2018-09-14T06:00:39.290Z","comments":true,"path":"2018/09/01/javascript提高性能/","link":"","permalink":"/2018/09/01/javascript提高性能/","excerpt":"javascript提高性能的方式总结","text":"javascript提高性能的方式总结 javascript提高性能&emsp;&emsp;javascript如何提高性能，这个在面试中被问到的几率也是蛮高的，之前我也就是想到哪里说到哪里，面试官估计也都是菜鸟（我面的也都是小公司），也觉得我说的对，但是，有空冷静下来，觉得自己说的每次都不是很全面，所以，我想把平时能想到的记录下来，这样再去面试的时候，呵呵，一定把面试官说蒙。 4种内存泄漏&emsp;&emsp;提高JavaScript性能，首先就是避免4种内存泄漏,这里只是简单列出。 1.意外的全局变量JavaScript的目标是开发一种看起来像Java但足够自由的被初学者使用的语言。JavaScript自由的其中一种方式是它可以处理没有声明的变量：一个未声明的变量的引用在全局对象中创建了一个新变量。在浏览器的环境中，全局对象是window。也就是说：1234567function foo(arg) &#123; bar = \"this is a hidden global variable\";&#125;实际上是：function foo(arg) &#123; window.bar = \"this is an explicit global variable\";&#125; 如果bar是仅在foo函数作用域内承载引用，并且你忘记用var来声明的变量，一个意外的全局变量就被创建了。在这个例子中，泄漏一个单一字符串不会有太大害处，但这的确是不好的。另一种意外全局变量被创建的方式是通过this：123456function foo() &#123; this.variable = \"potential accidental global\";&#125;// Foo called on its own, this points to the global object (window)// rather than being undefined.foo(); 为了阻止这种错误发生，在你的Javascript文件最前面添加’use strict;’。这开启了解析JavaScript的阻止意外全局的更严格的模式。全局变量的一个注意事项：即使我们谈了不明的全局变量，仍然存在很多代码被显式的全局变量填充的情况。这是通过定义不可收集的情况（除非清零或重新赋值）。特别的，用来临时存储和处理大量信息的全局变量会引起关注。如果必须用全局变量来存储很多数据，在处理完之后，确保对其清零或重新赋值。 一个在与全局连接上增加内存消耗常见的原因是缓存)。 缓存存储重复被使用的数据。为此，为了有效，缓存必须有其大小的上限。飙出限制的缓存可能会因为内容不可被回收，导致高内存消耗。 2.被遗忘的计时器或回调在JavaScript中setInterval的使用相当常见。其他库提供观察者和其他工具以回调。这些库中大多数，在引用的实例变成不可访问之后，负责让回调的任何引用也不可访问。在setInterval的情况下，这样的代码很常见：12345678var someResource = getData(); setInterval(function() &#123; var node = document.getElementById('Node'); if(node) &#123; // Do stuff with node and someResource. node.innerHTML = JSON.stringify(someResource));&#125;&#125;, 1000); 这个例子表明了跳动的计时器可能发生什么：计时器使得节点或数据的引用不再被需要了。代表node的对象将来可能被移除，使得整个块在间隔中的处理不必要。然而，处理函数，由于间隔仍然是活跃的，不能被回收（间隔需要被停掉才能回收）。如果间隔处理不能被回收，它的依赖也不能被回收。那意味着可能存储着大量数据的someResource，也不能被回收。观察者情况下，一旦不被需要（或相关的对象快要访问不到）就创建明确移除他们的函数很重要。在过去，这由于特定浏览器（IE6）不能很好的管理循环引用（下面有更多相关信息），曾经尤为重要。现如今，一旦观察对象变成不可访问的，即使收听者没有明确的被移除，多数浏览器可以并会回收观察者处理函数。然而，它保持了在对象被处理前明确的移除这些观察者的好实践。例如：1234567891011var element = document.getElementById('button');function onClick(event) &#123; element.innerHtml = 'text';&#125;element.addEventListener('click', onClick);// Do stuffelement.removeEventListener('click', onClick);element.parentNode.removeChild(element);// Now when element goes out of scope,// both element and onClick will be collected even in old browsers that don't// handle cycles well. 一条关于对象观察者及循环引用的笔记观察者和循环引用曾经是JavaScript开发者的祸患。这是由于IE垃圾回收的一个bug(或者设计决议)出现的情况。IE的老版本不能检测到DOM节点和JavaScript代码间的循环引用。 这是一个通常为观察到的保留引用（如同上面的例子）的观察者的典型。 也就是说，每次在IE中对一个节点添加观察者的时候，会导致泄漏。这是开发者在节点或空引用之前开始明确的移除处理函数的原因。 现在，现代浏览器（包括IE和MS Edge）使用可以剪裁这些循环和正确处理的现代垃圾回收算法。换言之，在使一个节点不可访问前，调用removeEventLister不是严格意义上必须的。像Jquery一样的框架和库做了在处置一个节点前（当为其使用特定的API的时候）移除监听者的工作。这被在库内部处理，即使在像老版本IE一样有问题的浏览器里面跑，也会确保没有泄漏产生。 3. 超出DOM引用有时存储DOM节点到数据结构中可能有用。假设你想要迅速的更新一个表格几行内容。存储每个DOM行节点的引用到一个字典或数组会起作用。当这发生是，两个对于同个DOM元素的引用被留存：一个在DOM树中，另外一个在字典中。如果在将来的某些点你决定要移除这些行，需要让两个引用都不可用。123456789101112131415161718var elements = &#123; button: document.getElementById('button'), image: document.getElementById('image'), text: document.getElementById('text')&#125;;function doStuff() &#123;image.src = 'http://some.url/image';button.click();console.log(text.innerHTML);// Much more logic&#125;function removeButton() &#123;// The button is a direct child of body.document.body.removeChild(document.getElementById('button'));// At this point, we still have a reference to #button in the global// elements dictionary. In other words, the button element is still in// memory and cannot be collected by the GC.&#125; 对此的额外考虑，必须处理DOM树内的内部节点或叶子节点。假设你在JavaScript代码中保留了一个对于特定的表格内节点（一个td标签）的引用。在将来的某个点决定从DOM中移除这个表格，但是保留对于那个节点的引用。直观的，会假设GC会回收除那个节点之外的每个节点。在实践中，这不会发生的：这个单节点是那个表格的子节点，子节点保留对父节点引用。换句话说，来自JavaScript代码的表格元素的引用会引起在内存里存整个表格。当保留DOM元素的引用的时候，仔细考虑下。 4.闭包一个JavaScript开发的关键点是闭包：从父级作用域捕获变量的匿名函数。很多开发者发现，由于JavaScript runtime的实现细节，有以一种微妙的方式泄漏的可能，这种特殊的情况：123456789101112131415var theThing = null;var replaceThing = function () &#123; var originalThing = theThing; var unused = function () &#123; if (originalThing) console.log(\"hi\"); &#125;; theThing = &#123; longStr: new Array(1000000).join('*'), someMethod: function () &#123; console.log(someMessage); &#125; &#125;;&#125;;setInterval(replaceThing, 1000); 这个代码片段做了一件事：每次replaceThing被调用的时候，theThing获取到一个包括一个大数组和新闭包(somMethod)的新对象。同时，变量unused保留了一个有originalThing（theThing从之前的对replaceThing的调用）引用的闭包。已经有点疑惑了，哈？重要的是一旦一个作用域被在同个父作用域下的闭包创建，那个作用域是共享的。这种情况下，为闭包somMethod创建的作用域被unused共享了。unused有一个对originalThing的引用。即使unused从来没被用过，someMethod可以通过theTing被使用。由于someMethod和unused共享了闭包作用域，即使unused从来没被用过，它对originalThing的引用迫使它停留在活跃状态（不能回收）。当这个代码片段重复运行的时候，可以看到内存使用稳步的增长。GC运行的时候，这并不会减轻。本质上，一组关联的闭包被创建（同unused变量在表单中的根节点一起），这些闭包作用域中每个带了大数组一个非直接的引用，导致了大型的泄漏。 垃圾回收的直观行为即使垃圾回收很方便，他们有自己的一套权衡方法。其中一个权衡是nondeterminism。也就是说，GC是不可预期的。通常不能确定什么时候回收器被执行。这意味着在一些情况下，需要比程序正在使用的更多的内存。其他情况下，短的暂停在特别敏感的应用中很明显。即使不确定性意味着不能确定回收什么时候执行，大多数GC实现共享在分配期间，普通的回收通行证模式。如果没有执行分配，大多数CG停留在休息状态。考虑下面的方案：1.执行一组大型的分配。2.多数元素（或所有）被标记为不可访问（假设我们置空了一个指向不再需要的缓存的引用）。3.没有进一步的分配执行了。在这个方案中，大多GC不会运行任何进一步的回收通行了。换言之，即使有可用于回收的，不可访问的引用，回收器不会要求他了。这不是严格的泄漏，但是也会导致比平常更高的内存使用率。Google在 JavaScript Memory Profiling docs, example #2.文章中，提供了一个优秀的例子。 编写javascript代码时的优化1.从JavaScript的作用域谈起当JavaScript代码执行时，JavaScript引擎会创建一个执行环境，又叫执行上下文。执行环境定义了变量或函数有权访问的其他数据，决定了它们的行为，每个执行环境都有一个与它关联的变量对象，环境中定义的所有函数、变量都保存在这个对象中。在页面加载的时候，JavaScript引擎会创建一个全局的执行环境，所有全局变量和函数都是作为window对象（浏览器中）的属性和方法创建的。在此之后，每执行一个函数，JavaScript引擎都会创建一个对应的执行环境，并将该环境放入环境栈中，所以当前正在执行的函数的执行环境是在环境栈的最顶部的，当函数执行完毕之后，其执行环境会弹出栈，并被销毁，保存在其中的变量和函数定义也会被销毁。当代码在一个执行环境中执行时，JavaScript引擎会创建变量对象的一个作用域链，它可以保证对执行环境有权访问的变量和函数的有序访问。作用域链的前端始终是当前执行的代码所在的环境的变量对象。全局环境的作用域链中只有一个变量对象，它定义了所有可用的全局变量和函数。当函数被创建时，JavaScript引擎会把创建时执行环境的作用域链赋给函数的内部属性[[scope]]；当函数被执行时，JavaScript引擎会创建一个活动对象，最开始时这个活动对象只有一个变量，即arguments对象。该活动对象会出现在执行环境作用域链的顶端，接下来是函数[[scope]]属性中的对象。当需要查找某个变量或函数时，JavaScript引擎会通过执行环境的作用域链来查找变量和函数，从作用域链的顶端开始，如果没找到，则向下寻找直至找到为止。若一直到全局作用域都没有找到,则该变量或函数为undefined。举个栗子：1234function add(a,b) &#123; return a + b;&#125;var result = add(2,3); 代码执行时，add函数有一个仅包含全局变量对象的[[scope]]属性，add函数执行时，JavaScript引擎创建新的执行环境以及一个包含this、arguments、a、b的活动对象，并将其添加到作用域链中。如下图所示： 2.使用局部变量了解了作用域链的概念，我们应该知道在查找变量会从作用域链的顶端开始一层一层的向下找。显然，查找的层数越多，花费的时间越多。所以为了提高查找的速度，我们应该尽量使用 局部变量（到目前为止，局部变量是JavaScript中读写最快的标识符）。例如：1234567function createEle() &#123; document.createElement(\"div\");&#125;function createEle() &#123; var doc = document; doc.createElement(\"div\");&#125; 当document使用次数比较少时，可能无所谓，可是如果在一个函数的循环中大量使用document，我们可以提前将document变成局部变量。来看看jquery怎么写的：12345(function(window, undefined) &#123; var jQuery = function() &#123;&#125; // ... window.jQuery = window.$ = jQuery;&#125;)(window); 这样写的优势：1、window和undefined都是为了减少变量查找所经过的scope作用域。当window通过传递给闭包内部之后，在闭包内部使用它的时候，可以把它当成一个局部变量，显然比原先在window scope下查找的时候要快一些。（原来的window处于作用域链的最顶端，查找速度慢）2、在jquery压缩版本jquery.min.js中可以将局部变量window替换成单个字母，减小文件大小，提高加载速度3、undefined也是JavaScript中的全局属性。将undefined作为参数传递给闭包，因为没给它传递值，它的值就是undefined，这样闭包内部在使用它的时候就可以把它当做局部变量使用，从而提高查找速度。undefined并不是JavaScript的保留字或者关键字。4、undefined在某些低版本的浏览器（例如IE8、IE7）中值是可以被修改的（在ECMAScript3中，undefined是可读/写的变量，可以给它赋任意值，这个错误在ECMAScript5中做了修正），将undefined作为参数并且不给它传值可以防止因undefined的值被修改而产生的错误。 3.避免增长作用域链在JavaScript中，有两种语句可以临时增加作用域链：with、try-catchwith可以使对象的属性可以像全局变量来使用，它实际上是将一个新的变量对象添加到执行环境作用域的顶部，这个变量对象包含了指定对象的所有属性，因此可以直接访问。这样看似很方便，但是增长了作用域链，原来函数中的局部变量不在处于作用域链的顶端，因此在访问这些变量的时候要查找到第二层才能找到它。当with语句块之行结束后，作用域链将回到原来的状态。鉴于with的这个缺点，所以不推荐使用。try-catch中的catch从句和with类似，也是在作用域链的顶端增加了一个对象，该对象包含了由catch指定命名的异常对象。但是因为catch语句只有在放生错误的时候才执行，因此影响比较少。 4.字符串链接优化由于字符串是不可变的，所以在进行字符串连接时，需要创建临时字符串。频繁创建、销毁临时字符串会导致性能低下。当然，这个问题在新版本浏览器包括IE8+中都得到了优化，所以不需要担心在低版本浏览器（IE6、IE7）中，我们可以种数组的join方法来代替。123456var temp = [];var i = 0;temp[i++] = \"Hello\";temp[i++] = \" \";temp[i++] =\"everyone\";var outcome = temp.join(\"\"); 5.条件判断当出现条件判断时，我们采用什么样的结构才能使性能最优？1234567891011if(val == 0) &#123; return v0;&#125;else if(val == 1) &#123; return v1;&#125;else if(val == 2) &#123; return v2;&#125;else if(val == 3) &#123; return v3;&#125;else if(val == 4) &#123; return v4;&#125; 当条件分支比较多时，我们可以斟酌哪种条件出现的概率比较大，并将对应的语句放在最上面，这样可以减少判断次数。使用switch语句，新版的浏览器基本上都对switch做了优化，这样层数比较深时，性能比if会更好使用数组：12var v = [v0,v1,v2,v3,v4];return v[valeue]; 要求：对应的结果是单一值，而不是一系列操作另外，其他方面的优化，譬如1234567891011if(condition1) &#123; return v1;&#125;else &#123; return v2&#125;// 改成if(condition1) &#123; return v1;&#125;return v2; 6.快速循环1、循环总次数使用局部变量12345678for( var i = 0;i &lt; arr.length;i++) &#123;&#125;// 改成var len = arr.length;for( var i = 0;i &lt; len;i++) &#123;&#125; 这样就避免了每次循环的属性查找。这点尤其重要，因为在进行dom操作时，很多人会这样写：1234var divList = document.getElementsByTagName(\"div\");for( var i = 0;i &lt; divList.length;i++) &#123;&#125; 查找DOM元素的属性是相对耗时的，所以应该避免这种写法。2、如果可以，递减代替递增1234567891011121314151617for(var i = 0;i &lt; arr.length;i++) &#123;&#125;// 改成for(var i = arr.length - 1;i--;) &#123;&#125;var i = 0;while(i &lt; arr.length) &#123; i++;&#125;// 改成var i = arr.length - 1;while(i--) &#123;&#125; i=0的时候会直接跳出，循环次数比较多时还是很有用的。 7.展开循环1234var i = arr.length - 1;while(i--) &#123; dosomething(arr[i]);&#125; 遇到这样的情况时，执行一次循环的时候我们可以选择不止执行一次函数。12345678910111213141516171819var interations = Math.floor(arr.length / 8);var left = arr.length % 8;var i = 0;if(left) &#123; do &#123; dosomething(arr[i++]); &#125; while(--left);&#125;do &#123; dosomething(arr[i++]); dosomething(arr[i++]); dosomething(arr[i++]); dosomething(arr[i++]); dosomething(arr[i++]); dosomething(arr[i++]); dosomething(arr[i++]); dosomething(arr[i++]);&#125; while(--interations); 当遇到大数组，减少循环的开销，性能不就提上去了嘛。（至于为什么是每次循环，调8次函数，大牛测出来的，这样达到最佳） 8.高效存取数据JavaScript中4种地方可以存取数据：字面量值；变量；数组元素；对象属性字面量值和变量中存取数据是最快的，从数组元素和对象属性中存取数据相对较慢，并且随着深度增加，存取速度会越来越慢，譬如obj.item.value就比obj.item慢。某些情况下我们可以将对象、数组属性存成局部变量来提高速度，譬如：12345678910111213141516171819for( var i = 0;i &lt; arr.length;i++) &#123;&#125;// 改成var len = arr.length;for( var i = 0;i &lt; len;i++) &#123;&#125;var divList = document.getElementsByTagName(\"div\");for( var i = 0;i &lt; divList.length;i++) &#123;&#125;// 改成// var divList = document.getElementsByTagName(\"div\");for( var i = 0,len = divList.length;i &lt; len;i++) &#123;&#125; 9.事件委托事件委托就是利用冒泡的原理，将原本应该添加在某些元素身上的监听事件，添加到其父元素身上，来达到提高性能的效果。举个栗子：1234567891011121314151617181920212223242526&lt;div&gt; &lt;ul&gt; &lt;li&gt;1&lt;/li&gt; &lt;li&gt;2&lt;/li&gt; &lt;li&gt;3&lt;/li&gt; &lt;li&gt;4&lt;/li&gt; &lt;li&gt;5&lt;/li&gt; &lt;li&gt;6&lt;/li&gt; &lt;li&gt;7&lt;/li&gt; &lt;li&gt;8&lt;/li&gt; &lt;li&gt;9&lt;/li&gt; &lt;li&gt;10&lt;/li&gt; &lt;/ul&gt;&lt;/div&gt;&lt;script&gt;window.onload = function() &#123; var ul = document.getElementsByTagName('ul')[0]; var liList = document.getElementsByTagName('li'); for(var i = 0,len = liList.length;i &lt; len;i++) &#123; liList[i].onclick = function() &#123; alert(this.innerHTML); &#125; &#125;&#125;&lt;/script&gt; 这样我们就为每个li添加了监听事件了。显然，我们通过循环为每个li添加监听事件是不优化的。这样不仅浪费了内存，在新的li加入的时候我们还要重新为它添加监听事件。我们可以这样写：1234567891011121314151617181920212223242526272829&lt;div&gt; &lt;ul&gt; &lt;li&gt;1&lt;/li&gt; &lt;li&gt;2&lt;/li&gt; &lt;li&gt;3&lt;/li&gt; &lt;li&gt;4&lt;/li&gt; &lt;li&gt;5&lt;/li&gt; &lt;li&gt;6&lt;/li&gt; &lt;li&gt;7&lt;/li&gt; &lt;li&gt;8&lt;/li&gt; &lt;li&gt;9&lt;/li&gt; &lt;li&gt;10&lt;/li&gt; &lt;/ul&gt;&lt;/div&gt;&lt;script&gt;window.onload = function() &#123; var ul = document.getElementsByTagName('ul')[0]; var liList = document.getElementsByTagName('li'); ul.onclick = function(e) &#123; var e = e || window.event; var target = e.target || e.srcElement; if(target.nodeName.toLowerCase() == \"li\") &#123; alert(target.innerHTML); &#125; &#125;&#125;&lt;/script&gt; 这样写的好处：只添加一个监听事件，节省了内存；新加入li的时候我们也不用为它单独添加监听事件；在页面中添加事件处理程序所需的时候更少，因为我们只需要为一个DOM元素添加事件处理程序。 使用typescript使用typescript来提高性能我实在一本关于nodejs的书里看到的，主要还是用在chrome的V8引擎上，这本书里写的比如1234567// 两个数相加的函数function add(a, b) &#123; return a + b;&#125;for(let i=0; i&lt;10000; i++) &#123; console.log(add(i + i*3));&#125; 书里说，如果V8引擎发现一个函数使用频率很高，而且参数传入的都是同一种类型的，好像是在内存寻址的时候书都很快，因为引擎认为传入的参数就是int型。再来看一个例子1234567891011// 两个数相加的函数function add(a, b) &#123; return a + b;&#125;for(let i=0; i&lt;10000; i++) &#123; if(i % 8 === 0) &#123; console.log(add(i + i*0.3)); // 这里出现了浮点数 &#125;else &#123; console.log(add(i + i*3)); // 这里是整数 &#125;&#125; 上边的代码可以看到，在使用整形参数的时候突然传入浮点数，V8引擎寻址机制突然变化，丢弃之前的函数，使用新的来计算，性能下降。所以，如果使用typescript，类型固定，这样性能就会提高哦。","categories":[{"name":"javascript","slug":"javascript","permalink":"/categories/javascript/"}],"tags":[{"name":"面试题","slug":"面试题","permalink":"/tags/面试题/"}]},{"title":"vue双向绑定的简单实现","slug":"vue双向绑定的简单实现","date":"2018-08-30T03:13:39.000Z","updated":"2018-09-14T05:58:16.386Z","comments":true,"path":"2018/08/30/vue双向绑定的简单实现/","link":"","permalink":"/2018/08/30/vue双向绑定的简单实现/","excerpt":"参考网上vue实现教程简单整理","text":"参考网上vue实现教程简单整理 vue双向绑定的简单实现&emsp;&emsp;首先，这篇文章并非我的原创，在网上看到了很多写vue原理的文章，感觉这篇写的层次结构清晰，容易理解，所以留作收藏。废话不多说，开始。 1.原理&emsp;&emsp;Vue的双向数据绑定的原理相信大家也都十分了解了，主要是通过 Object对象的defineProperty属性，重写data的set和get函数来实现的,这里对原理不做过多描述，主要还是来实现一个实例。为了使代码更加的清晰，这里只会实现最基本的内容，主要实现v-model，v-bind 和v-click三个命令，其他命令也可以自行补充。添加网上的一张图 2.实现页面结构很简单，如下：1234567&lt;div id=\"app\"&gt; &lt;form&gt; &lt;input type=\"text\" v-model=\"number\"&gt; &lt;button ype=\"button\" v-click=\"increment\"&gt;增加&lt;/button&gt; &lt;/form&gt; &lt;h3 v-bind=\"number\"&gt;&lt;/h3&gt;&lt;/div&gt; 包含：1.一个input，使用v-model指令2.一个button，使用v-click指令3.一个h3，使用v-bind指令。我们最后会通过类似于vue的方式来使用我们的双向数据绑定，结合我们的数据结构添加注释：1234567891011var app = new myVue(&#123; el:'#app', data:&#123; number:0 &#125;, methods:&#123; increment:function()&#123; this.number++; &#125;, &#125; &#125;) 首先我们需要定义一个myVue构造函数：123function myVue(options)&#123;&#125; 为了初始化这个构造函数，给它添加一 个_init属性123456789function myVue(options) &#123; this._init(options);&#125;myVue.prototype._init = function (options) &#123; this.$options = options; // options 为上面使用时传入的结构体，包括el,data,methods this.$el = document.querySelector(options.el); // el是 #app, this.$el是id为app的Element元素 this.$data = options.data; // this.$data = &#123;number: 0&#125; this.$methods = options.methods; // this.$methods = &#123;increment: function()&#123;&#125;&#125; &#125; 接下来实现_obverse函数，对data进行处理，重写data的set和get函数并改造_init函数12345678910111213141516171819202122232425262728293031323334myVue.prototype._obverse = function (obj) &#123; // obj = &#123;number: 0&#125; var value; for (key in obj) &#123; //遍历obj对象 if (obj.hasOwnProperty(key)) &#123; value = obj[key]; if (typeof value === 'object') &#123; //如果值还是对象，则遍历处理 this._obverse(value); &#125; Object.defineProperty(this.$data, key, &#123; //关键 enumerable: true, configurable: true, get: function () &#123; console.log(`获取$&#123;value&#125;`); return value; &#125;, set: function (newVal) &#123; console.log(`更新$&#123;newVal&#125;`); if (value !== newVal) &#123; value = newVal; &#125; &#125; &#125;) &#125; &#125; &#125;myVue.prototype._init = function (options) &#123; this.$options = options; this.$el = document.querySelector(options.el); this.$data = options.data; this.$methods = options.methods; this._obverse(this.$data); &#125; 接下来我们写一个指令类Watcher，用来绑定更新函数，实现对DOM元素的更新12345678910111213function Watcher(name, el, vm, exp, attr) &#123; this.name = name; //指令名称，例如文本节点，该值设为\"text\" this.el = el; //指令对应的DOM元素 this.vm = vm; //指令所属myVue实例 this.exp = exp; //指令对应的值，本例如\"number\" this.attr = attr; //绑定的属性值，本例为\"innerHTML\" this.update(); &#125; Watcher.prototype.update = function () &#123; this.el[this.attr] = this.vm.$data[this.exp]; //比如 H3.innerHTML = this.data.number; 当number改变时，会触发这个update函数，保证对应的DOM内容进行了更新。 &#125; 更新_init函数以及_obverse函数1234567891011121314151617181920212223242526272829myVue.prototype._init = function (options) &#123; //... this._binding = &#123;&#125;; //_binding保存着model与view的映射关系，也就是我们前面定义的Watcher的实例。当model改变时，我们会触发其中的指令类更新，保证view也能实时更新 //... &#125; myVue.prototype._obverse = function (obj) &#123; //... if (obj.hasOwnProperty(key)) &#123; this._binding[key] = &#123; // 按照前面的数据，_binding = &#123;number: _directives: []&#125; _directives: [] &#125;; //... var binding = this._binding[key]; Object.defineProperty(this.$data, key, &#123; //... set: function (newVal) &#123; console.log(`更新$&#123;newVal&#125;`); if (value !== newVal) &#123; value = newVal; binding._directives.forEach(function (item) &#123; // 当number改变时，触发_binding[number]._directives 中的绑定的Watcher类的更新 item.update(); &#125;) &#125; &#125; &#125;) &#125; &#125; &#125; 那么如何将view与model进行绑定呢？接下来我们定义一个_compile函数，用来解析我们的指令（v-bind,v-model,v-clickde）等，并在这个过程中对view与model进行绑定。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354 myVue.prototype._init = function (options) &#123; //... this._complie(this.$el); &#125; myVue.prototype._complie = function (root) &#123; root 为 id为app的Element元素，也就是我们的根元素 var _this = this; var nodes = root.children; for (var i = 0; i &lt; nodes.length; i++) &#123; var node = nodes[i]; if (node.children.length) &#123; // 对所有元素进行遍历，并进行处理 this._complie(node); &#125; if (node.hasAttribute('v-click')) &#123; // 如果有v-click属性，我们监听它的onclick事件，触发increment事件，即number++ node.onclick = (function () &#123; var attrVal = nodes[i].getAttribute('v-click'); return _this.$methods[attrVal].bind(_this.$data); //bind是使data的作用域与method函数的作用域保持一致 &#125;)(); &#125; if (node.hasAttribute('v-model') &amp;&amp; (node.tagName == 'INPUT' || node.tagName == 'TEXTAREA')) &#123; // 如果有v-model属性，并且元素是INPUT或者TEXTAREA，我们监听它的input事件 node.addEventListener('input', (function(key) &#123; var attrVal = node.getAttribute('v-model'); //_this._binding['number']._directives = [一个Watcher实例] // 其中Watcher.prototype.update = function () &#123; // node['vaule'] = _this.$data['number']; 这就将node的值保持与number一致 // &#125; _this._binding[attrVal]._directives.push(new Watcher( 'input', node, _this, attrVal, 'value' )) return function() &#123; _this.$data[attrVal] = nodes[key].value; // 使number 的值与 node的value保持一致，已经实现了双向绑定 &#125; &#125;)(i)); &#125; if (node.hasAttribute('v-bind')) &#123; // 如果有v-bind属性，我们只要使node的值及时更新为data中number的值即可 var attrVal = node.getAttribute('v-bind'); _this._binding[attrVal]._directives.push(new Watcher( 'text', node, _this, attrVal, 'innerHTML' )) &#125; &#125; &#125; 至此，我们已经实现了一个简单vue的双向绑定功能，包括v-bind, v-model, v-click三个指令。效果如下图 附上全部代码，不到150行 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142 &lt;!DOCTYPE html&gt;&lt;head&gt; &lt;title&gt;myVue&lt;/title&gt;&lt;/head&gt;&lt;style&gt; #app &#123; text-align: center; &#125;&lt;/style&gt;&lt;body&gt; &lt;div id=\"app\"&gt; &lt;form&gt; &lt;input type=\"text\" v-model=\"number\"&gt; &lt;button type=\"button\" v-click=\"increment\"&gt;增加&lt;/button&gt; &lt;/form&gt; &lt;h3 v-bind=\"number\"&gt;&lt;/h3&gt; &lt;/div&gt;&lt;/body&gt;&lt;script&gt; function myVue(options) &#123; this._init(options); &#125; myVue.prototype._init = function (options) &#123; this.$options = options; this.$el = document.querySelector(options.el); this.$data = options.data; this.$methods = options.methods; this._binding = &#123;&#125;; this._obverse(this.$data); this._complie(this.$el); &#125; myVue.prototype._obverse = function (obj) &#123; var value; for (key in obj) &#123; if (obj.hasOwnProperty(key)) &#123; this._binding[key] = &#123; _directives: [] &#125;; value = obj[key]; if (typeof value === 'object') &#123; this._obverse(value); &#125; var binding = this._binding[key]; Object.defineProperty(this.$data, key, &#123; enumerable: true, configurable: true, get: function () &#123; console.log(`获取$&#123;value&#125;`); return value; &#125;, set: function (newVal) &#123; console.log(`更新$&#123;newVal&#125;`); if (value !== newVal) &#123; value = newVal; binding._directives.forEach(function (item) &#123; item.update(); &#125;) &#125; &#125; &#125;) &#125; &#125; &#125; myVue.prototype._complie = function (root) &#123; var _this = this; var nodes = root.children; for (var i = 0; i &lt; nodes.length; i++) &#123; var node = nodes[i]; if (node.children.length) &#123; this._complie(node); &#125; if (node.hasAttribute('v-click')) &#123; node.onclick = (function () &#123; var attrVal = nodes[i].getAttribute('v-click'); return _this.$methods[attrVal].bind(_this.$data); &#125;)(); &#125; if (node.hasAttribute('v-model') &amp;&amp; (node.tagName == 'INPUT' || node.tagName == 'TEXTAREA')) &#123; node.addEventListener('input', (function(key) &#123; var attrVal = node.getAttribute('v-model'); _this._binding[attrVal]._directives.push(new Watcher( 'input', node, _this, attrVal, 'value' )) return function() &#123; _this.$data[attrVal] = nodes[key].value; &#125; &#125;)(i)); &#125; if (node.hasAttribute('v-bind')) &#123; var attrVal = node.getAttribute('v-bind'); _this._binding[attrVal]._directives.push(new Watcher( 'text', node, _this, attrVal, 'innerHTML' )) &#125; &#125; &#125; function Watcher(name, el, vm, exp, attr) &#123; this.name = name; //指令名称，例如文本节点，该值设为\"text\" this.el = el; //指令对应的DOM元素 this.vm = vm; //指令所属myVue实例 this.exp = exp; //指令对应的值，本例如\"number\" this.attr = attr; //绑定的属性值，本例为\"innerHTML\" this.update(); &#125; Watcher.prototype.update = function () &#123; this.el[this.attr] = this.vm.$data[this.exp]; &#125; window.onload = function() &#123; var app = new myVue(&#123; el:'#app', data: &#123; number: 0 &#125;, methods: &#123; increment: function() &#123; this.number ++; &#125;, &#125; &#125;) &#125;&lt;/script&gt; 以上就是所有内容，这个代码不是我创造的，我只是代码的搬运工。","categories":[{"name":"javascript","slug":"javascript","permalink":"/categories/javascript/"}],"tags":[{"name":"vue","slug":"vue","permalink":"/tags/vue/"}]},{"title":"webSocket","slug":"webSocket项目中的使用","date":"2018-08-29T01:23:54.000Z","updated":"2018-09-14T05:52:25.058Z","comments":true,"path":"2018/08/29/webSocket项目中的使用/","link":"","permalink":"/2018/08/29/webSocket项目中的使用/","excerpt":"在项目中使用websocket的小心得","text":"在项目中使用websocket的小心得 webSocket在项目中的使用&emsp;&emsp;webSocket,这个技术相信大家都已经很熟悉了，就是前端浏览器与后端服务器一直保持连通状态，我们在项目中，经常会遇到这样的需求，一个数据图表展示页面，产品的需求是每隔5秒钟页面刷新一次，传统的做法是请求轮询机制，也就是setInterval这个定时器，一遍又一遍的请求后端接口，这个方法简单（特别是后端简单），但是如果前端页面有大量的这种需求，会影响性能，所以，webSocket是现在最好的选择。&emsp;&emsp;其实webSocket现在还是比较重要的，一般在面试的时候，被问到的几率还是很大的。我之前在项目中没有用到过，但是自己写过webSocket的demo，浏览器配合nodejs来写，也是参考了网上的代码，还是很简单的webSocket详细代码看这里。在面试时被问到的时候，也是实话实说，有可能面试官也是小白，基本上都没往下问，但是，确实是这么简单吗？答案显然不是，待我慢慢道来。&emsp;&emsp;首先，我在最近两个项目中，都用到了webSocket，所以还是有发言权的。如果，产品提出了webSocket的需求，对于我们前端来说，并不是直接写个原生的webSocket就可以，而是需要看后端小伙伴们的脸色，什么意思？就是说得看后端用的是什么webSocket库，我接触的有两种，第一个是stomp,说是webSocket的子协议，后端选了这个库之后，我们前端也得相应的选择与后端相配合的前端库，一般情况下，官网很明确的给出了后端和前端相配合写法，当然，写法也是很简单，跟原生差不多。第二个是，sockjs这个库，当然，也是后端小伙伴选好了之后，告诉我，我相应的在前端也用的跟后端一样库。&emsp;&emsp;最后总结一下，webSocket技术并不难（对于我们前端来说，当然，nodejs的后端也很简单，java就不知道了，每次调起来看他们都是一脸懵逼的样子），无论是面试还是在实际工作中，问道这个问题时，我们首先想到的应该是，后端选择的是什么库，我们前端应该跟后端小伙伴保持一致，可别需求以来，觉得简单直接开些，等联调的时候，我靠，为什么连不上呢？你们前后端不在一个频道上，怎么连接啊。所以，我们要说，我做过的项目是这样这样滴，不知道这次我们后端小伙伴用到的webSocket库是什么呢？","categories":[{"name":"javascript","slug":"javascript","permalink":"/categories/javascript/"}],"tags":[{"name":"面试题","slug":"面试题","permalink":"/tags/面试题/"},{"name":"webSocket","slug":"webSocket","permalink":"/tags/webSocket/"}]},{"title":"nodejs代理服务器","slug":"nodejs代理服务器","date":"2018-08-27T06:51:52.000Z","updated":"2018-09-14T05:59:05.665Z","comments":true,"path":"2018/08/27/nodejs代理服务器/","link":"","permalink":"/2018/08/27/nodejs代理服务器/","excerpt":"nodejs代理服务器简单实现","text":"nodejs代理服务器简单实现 nodejs代理服务 最近在与后台同事联调的时候，出现了点故障，跨域，这个经常碰到很好解决的问题，但是一般情况下需要前后端一起配合来解决，比如jsonp，或者h5后端在返回头加上允许跨域的头设置，但是如果后台同事是个小白，问啥啥不明白，也是没招了。我之前还用过将chrome的跨域设置给禁掉的方法，但是这次不知道为啥，也不好使了。最后，只能是用代理这种方式，我现在用的是vue框架，其实vue的脚手架已经集成了跨域功能，只需要配置一下就可以，但是，现在框架这么多，前一阵子还react，angular的项目，最近有换成vue，配置的话，肯定要去查看api，记不住啊，而且，版本不同，设置方法也不同，不如自己写一个，这样多简单，需要的时候把代理服务开启就搞定了。于是乎，自己写一个，当然，稍微想一下就知道，代理的原理，就是利用nodejs在中间做一次请求以及数据返回，不过自己写还得思考，上网找一下多简单，baidu一搜索，哇靠，第一个映入眼帘的就是nodejs代理服务8行代码，嗯，就是这么简单，废话不多说，上代码,当然，自己还得加工一下哦。123456789101112131415161718192021var express = require('express');var request = require('request');var app = express();const proxyUrl = process.argv[2] || 'http://127.0.0.1:8888'; // 如果有传入的代理url，使用它app.all('*', function(req, res, next) &#123; res.header(\"Access-Control-Allow-Origin\", \"*\"); res.header(\"Access-Control-Allow-Headers\", \"Content-Type,Content-Length, Authorization, Accept,X-Requested-With\"); res.header(\"Access-Control-Allow-Methods\",\"PUT,POST,GET,DELETE,OPTIONS\"); res.header(\"X-Powered-By\",' 3.2.1') if(req.method==\"OPTIONS\") res.send(200); // 让options请求快速返回 else next();&#125;);app.use('/', function(req, res) &#123; var url = proxyUrl + req.url; req.pipe(request(url)).pipe(res);&#125;);app.listen(process.env.PORT || 3000, ()=&gt;&#123; console.log('代理服务器，在3000端口已经开启');&#125;); 再把package.json文件内容贴出来12345678910111213141516&#123; &quot;name&quot;: &quot;node-proxy&quot;, &quot;version&quot;: &quot;1.0.0&quot;, &quot;description&quot;: &quot;&quot;, &quot;main&quot;: &quot;index.js&quot;, &quot;scripts&quot;: &#123; &quot;serve&quot;: &quot;node server http://127.0.0.1:9000&quot; &#125;, &quot;keywords&quot;: [], &quot;author&quot;: &quot;&quot;, &quot;license&quot;: &quot;ISC&quot;, &quot;dependencies&quot;: &#123; &quot;express&quot;: &quot;^4.16.3&quot;, &quot;request&quot;: &quot;^2.88.0&quot; &#125;&#125; 源码在这里","categories":[{"name":"nodejs","slug":"nodejs","permalink":"/categories/nodejs/"}],"tags":[{"name":"后端代理服务","slug":"后端代理服务","permalink":"/tags/后端代理服务/"}]}]}