<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>jinux</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="/"/>
  <updated>2018-11-16T08:32:03.385Z</updated>
  <id>/</id>
  
  <author>
    <name>jinux</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>zepto源码</title>
    <link href="/2018/11/16/zepto%E6%BA%90%E7%A0%81/"/>
    <id>/2018/11/16/zepto源码/</id>
    <published>2018-11-16T08:30:56.000Z</published>
    <updated>2018-11-16T08:32:03.385Z</updated>
    
    <content type="html"><![CDATA[<p>zepto源码<br><a id="more"></a></p><h2 id="zepto源码"><a href="#zepto源码" class="headerlink" title="zepto源码"></a>zepto源码</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br><span class="line">1037</span><br><span class="line">1038</span><br><span class="line">1039</span><br><span class="line">1040</span><br><span class="line">1041</span><br><span class="line">1042</span><br><span class="line">1043</span><br><span class="line">1044</span><br><span class="line">1045</span><br><span class="line">1046</span><br><span class="line">1047</span><br><span class="line">1048</span><br><span class="line">1049</span><br><span class="line">1050</span><br><span class="line">1051</span><br><span class="line">1052</span><br><span class="line">1053</span><br><span class="line">1054</span><br><span class="line">1055</span><br><span class="line">1056</span><br><span class="line">1057</span><br><span class="line">1058</span><br><span class="line">1059</span><br><span class="line">1060</span><br><span class="line">1061</span><br><span class="line">1062</span><br><span class="line">1063</span><br><span class="line">1064</span><br><span class="line">1065</span><br><span class="line">1066</span><br><span class="line">1067</span><br><span class="line">1068</span><br><span class="line">1069</span><br><span class="line">1070</span><br><span class="line">1071</span><br><span class="line">1072</span><br><span class="line">1073</span><br><span class="line">1074</span><br><span class="line">1075</span><br><span class="line">1076</span><br><span class="line">1077</span><br><span class="line">1078</span><br><span class="line">1079</span><br><span class="line">1080</span><br><span class="line">1081</span><br><span class="line">1082</span><br><span class="line">1083</span><br><span class="line">1084</span><br><span class="line">1085</span><br><span class="line">1086</span><br><span class="line">1087</span><br><span class="line">1088</span><br><span class="line">1089</span><br><span class="line">1090</span><br><span class="line">1091</span><br><span class="line">1092</span><br><span class="line">1093</span><br><span class="line">1094</span><br><span class="line">1095</span><br><span class="line">1096</span><br><span class="line">1097</span><br><span class="line">1098</span><br><span class="line">1099</span><br><span class="line">1100</span><br><span class="line">1101</span><br><span class="line">1102</span><br><span class="line">1103</span><br><span class="line">1104</span><br><span class="line">1105</span><br><span class="line">1106</span><br><span class="line">1107</span><br><span class="line">1108</span><br><span class="line">1109</span><br><span class="line">1110</span><br><span class="line">1111</span><br><span class="line">1112</span><br><span class="line">1113</span><br><span class="line">1114</span><br><span class="line">1115</span><br><span class="line">1116</span><br><span class="line">1117</span><br><span class="line">1118</span><br><span class="line">1119</span><br><span class="line">1120</span><br><span class="line">1121</span><br><span class="line">1122</span><br><span class="line">1123</span><br><span class="line">1124</span><br><span class="line">1125</span><br><span class="line">1126</span><br><span class="line">1127</span><br><span class="line">1128</span><br><span class="line">1129</span><br><span class="line">1130</span><br><span class="line">1131</span><br><span class="line">1132</span><br><span class="line">1133</span><br><span class="line">1134</span><br><span class="line">1135</span><br><span class="line">1136</span><br><span class="line">1137</span><br><span class="line">1138</span><br><span class="line">1139</span><br><span class="line">1140</span><br><span class="line">1141</span><br><span class="line">1142</span><br><span class="line">1143</span><br><span class="line">1144</span><br><span class="line">1145</span><br><span class="line">1146</span><br><span class="line">1147</span><br><span class="line">1148</span><br><span class="line">1149</span><br><span class="line">1150</span><br><span class="line">1151</span><br><span class="line">1152</span><br><span class="line">1153</span><br><span class="line">1154</span><br><span class="line">1155</span><br><span class="line">1156</span><br><span class="line">1157</span><br><span class="line">1158</span><br><span class="line">1159</span><br><span class="line">1160</span><br><span class="line">1161</span><br><span class="line">1162</span><br><span class="line">1163</span><br><span class="line">1164</span><br><span class="line">1165</span><br><span class="line">1166</span><br><span class="line">1167</span><br><span class="line">1168</span><br><span class="line">1169</span><br><span class="line">1170</span><br><span class="line">1171</span><br><span class="line">1172</span><br><span class="line">1173</span><br><span class="line">1174</span><br><span class="line">1175</span><br><span class="line">1176</span><br><span class="line">1177</span><br><span class="line">1178</span><br><span class="line">1179</span><br><span class="line">1180</span><br><span class="line">1181</span><br><span class="line">1182</span><br><span class="line">1183</span><br><span class="line">1184</span><br><span class="line">1185</span><br><span class="line">1186</span><br><span class="line">1187</span><br><span class="line">1188</span><br><span class="line">1189</span><br><span class="line">1190</span><br><span class="line">1191</span><br><span class="line">1192</span><br><span class="line">1193</span><br><span class="line">1194</span><br><span class="line">1195</span><br><span class="line">1196</span><br><span class="line">1197</span><br><span class="line">1198</span><br><span class="line">1199</span><br><span class="line">1200</span><br><span class="line">1201</span><br><span class="line">1202</span><br><span class="line">1203</span><br><span class="line">1204</span><br><span class="line">1205</span><br><span class="line">1206</span><br><span class="line">1207</span><br><span class="line">1208</span><br><span class="line">1209</span><br><span class="line">1210</span><br><span class="line">1211</span><br><span class="line">1212</span><br><span class="line">1213</span><br><span class="line">1214</span><br><span class="line">1215</span><br><span class="line">1216</span><br><span class="line">1217</span><br><span class="line">1218</span><br><span class="line">1219</span><br><span class="line">1220</span><br><span class="line">1221</span><br><span class="line">1222</span><br><span class="line">1223</span><br><span class="line">1224</span><br><span class="line">1225</span><br><span class="line">1226</span><br><span class="line">1227</span><br><span class="line">1228</span><br><span class="line">1229</span><br><span class="line">1230</span><br><span class="line">1231</span><br><span class="line">1232</span><br><span class="line">1233</span><br><span class="line">1234</span><br><span class="line">1235</span><br><span class="line">1236</span><br><span class="line">1237</span><br><span class="line">1238</span><br><span class="line">1239</span><br><span class="line">1240</span><br><span class="line">1241</span><br><span class="line">1242</span><br><span class="line">1243</span><br><span class="line">1244</span><br><span class="line">1245</span><br><span class="line">1246</span><br><span class="line">1247</span><br><span class="line">1248</span><br><span class="line">1249</span><br><span class="line">1250</span><br><span class="line">1251</span><br><span class="line">1252</span><br><span class="line">1253</span><br><span class="line">1254</span><br><span class="line">1255</span><br><span class="line">1256</span><br><span class="line">1257</span><br><span class="line">1258</span><br><span class="line">1259</span><br><span class="line">1260</span><br><span class="line">1261</span><br><span class="line">1262</span><br><span class="line">1263</span><br><span class="line">1264</span><br><span class="line">1265</span><br><span class="line">1266</span><br><span class="line">1267</span><br><span class="line">1268</span><br><span class="line">1269</span><br><span class="line">1270</span><br><span class="line">1271</span><br><span class="line">1272</span><br><span class="line">1273</span><br><span class="line">1274</span><br><span class="line">1275</span><br><span class="line">1276</span><br><span class="line">1277</span><br><span class="line">1278</span><br><span class="line">1279</span><br><span class="line">1280</span><br><span class="line">1281</span><br><span class="line">1282</span><br><span class="line">1283</span><br><span class="line">1284</span><br><span class="line">1285</span><br><span class="line">1286</span><br><span class="line">1287</span><br><span class="line">1288</span><br><span class="line">1289</span><br><span class="line">1290</span><br><span class="line">1291</span><br><span class="line">1292</span><br><span class="line">1293</span><br><span class="line">1294</span><br><span class="line">1295</span><br><span class="line">1296</span><br><span class="line">1297</span><br><span class="line">1298</span><br><span class="line">1299</span><br><span class="line">1300</span><br><span class="line">1301</span><br><span class="line">1302</span><br><span class="line">1303</span><br><span class="line">1304</span><br><span class="line">1305</span><br><span class="line">1306</span><br><span class="line">1307</span><br><span class="line">1308</span><br><span class="line">1309</span><br><span class="line">1310</span><br><span class="line">1311</span><br><span class="line">1312</span><br><span class="line">1313</span><br><span class="line">1314</span><br><span class="line">1315</span><br><span class="line">1316</span><br><span class="line">1317</span><br><span class="line">1318</span><br><span class="line">1319</span><br><span class="line">1320</span><br><span class="line">1321</span><br><span class="line">1322</span><br><span class="line">1323</span><br><span class="line">1324</span><br><span class="line">1325</span><br><span class="line">1326</span><br><span class="line">1327</span><br><span class="line">1328</span><br><span class="line">1329</span><br><span class="line">1330</span><br><span class="line">1331</span><br><span class="line">1332</span><br><span class="line">1333</span><br><span class="line">1334</span><br><span class="line">1335</span><br><span class="line">1336</span><br><span class="line">1337</span><br><span class="line">1338</span><br><span class="line">1339</span><br><span class="line">1340</span><br><span class="line">1341</span><br><span class="line">1342</span><br><span class="line">1343</span><br><span class="line">1344</span><br><span class="line">1345</span><br><span class="line">1346</span><br><span class="line">1347</span><br><span class="line">1348</span><br><span class="line">1349</span><br><span class="line">1350</span><br><span class="line">1351</span><br><span class="line">1352</span><br><span class="line">1353</span><br><span class="line">1354</span><br><span class="line">1355</span><br><span class="line">1356</span><br><span class="line">1357</span><br><span class="line">1358</span><br><span class="line">1359</span><br><span class="line">1360</span><br><span class="line">1361</span><br><span class="line">1362</span><br><span class="line">1363</span><br><span class="line">1364</span><br><span class="line">1365</span><br><span class="line">1366</span><br><span class="line">1367</span><br><span class="line">1368</span><br><span class="line">1369</span><br><span class="line">1370</span><br><span class="line">1371</span><br><span class="line">1372</span><br><span class="line">1373</span><br><span class="line">1374</span><br><span class="line">1375</span><br><span class="line">1376</span><br><span class="line">1377</span><br><span class="line">1378</span><br><span class="line">1379</span><br><span class="line">1380</span><br><span class="line">1381</span><br><span class="line">1382</span><br><span class="line">1383</span><br><span class="line">1384</span><br><span class="line">1385</span><br><span class="line">1386</span><br><span class="line">1387</span><br><span class="line">1388</span><br><span class="line">1389</span><br><span class="line">1390</span><br><span class="line">1391</span><br><span class="line">1392</span><br><span class="line">1393</span><br><span class="line">1394</span><br><span class="line">1395</span><br><span class="line">1396</span><br><span class="line">1397</span><br><span class="line">1398</span><br><span class="line">1399</span><br><span class="line">1400</span><br><span class="line">1401</span><br><span class="line">1402</span><br><span class="line">1403</span><br><span class="line">1404</span><br><span class="line">1405</span><br><span class="line">1406</span><br><span class="line">1407</span><br><span class="line">1408</span><br><span class="line">1409</span><br><span class="line">1410</span><br><span class="line">1411</span><br><span class="line">1412</span><br><span class="line">1413</span><br><span class="line">1414</span><br><span class="line">1415</span><br><span class="line">1416</span><br><span class="line">1417</span><br><span class="line">1418</span><br><span class="line">1419</span><br><span class="line">1420</span><br><span class="line">1421</span><br><span class="line">1422</span><br><span class="line">1423</span><br><span class="line">1424</span><br><span class="line">1425</span><br><span class="line">1426</span><br><span class="line">1427</span><br><span class="line">1428</span><br><span class="line">1429</span><br><span class="line">1430</span><br><span class="line">1431</span><br><span class="line">1432</span><br><span class="line">1433</span><br><span class="line">1434</span><br><span class="line">1435</span><br><span class="line">1436</span><br><span class="line">1437</span><br><span class="line">1438</span><br><span class="line">1439</span><br><span class="line">1440</span><br><span class="line">1441</span><br><span class="line">1442</span><br><span class="line">1443</span><br><span class="line">1444</span><br><span class="line">1445</span><br><span class="line">1446</span><br><span class="line">1447</span><br><span class="line">1448</span><br><span class="line">1449</span><br><span class="line">1450</span><br><span class="line">1451</span><br><span class="line">1452</span><br><span class="line">1453</span><br><span class="line">1454</span><br><span class="line">1455</span><br><span class="line">1456</span><br><span class="line">1457</span><br><span class="line">1458</span><br><span class="line">1459</span><br><span class="line">1460</span><br><span class="line">1461</span><br><span class="line">1462</span><br><span class="line">1463</span><br><span class="line">1464</span><br><span class="line">1465</span><br><span class="line">1466</span><br><span class="line">1467</span><br><span class="line">1468</span><br><span class="line">1469</span><br><span class="line">1470</span><br><span class="line">1471</span><br><span class="line">1472</span><br><span class="line">1473</span><br><span class="line">1474</span><br><span class="line">1475</span><br><span class="line">1476</span><br><span class="line">1477</span><br><span class="line">1478</span><br><span class="line">1479</span><br><span class="line">1480</span><br><span class="line">1481</span><br><span class="line">1482</span><br><span class="line">1483</span><br><span class="line">1484</span><br><span class="line">1485</span><br><span class="line">1486</span><br><span class="line">1487</span><br><span class="line">1488</span><br><span class="line">1489</span><br><span class="line">1490</span><br><span class="line">1491</span><br><span class="line">1492</span><br><span class="line">1493</span><br><span class="line">1494</span><br><span class="line">1495</span><br><span class="line">1496</span><br><span class="line">1497</span><br><span class="line">1498</span><br><span class="line">1499</span><br><span class="line">1500</span><br><span class="line">1501</span><br><span class="line">1502</span><br><span class="line">1503</span><br><span class="line">1504</span><br><span class="line">1505</span><br><span class="line">1506</span><br><span class="line">1507</span><br><span class="line">1508</span><br><span class="line">1509</span><br><span class="line">1510</span><br><span class="line">1511</span><br><span class="line">1512</span><br><span class="line">1513</span><br><span class="line">1514</span><br><span class="line">1515</span><br><span class="line">1516</span><br><span class="line">1517</span><br><span class="line">1518</span><br><span class="line">1519</span><br><span class="line">1520</span><br><span class="line">1521</span><br><span class="line">1522</span><br><span class="line">1523</span><br><span class="line">1524</span><br><span class="line">1525</span><br><span class="line">1526</span><br><span class="line">1527</span><br><span class="line">1528</span><br><span class="line">1529</span><br><span class="line">1530</span><br><span class="line">1531</span><br><span class="line">1532</span><br><span class="line">1533</span><br><span class="line">1534</span><br><span class="line">1535</span><br><span class="line">1536</span><br><span class="line">1537</span><br><span class="line">1538</span><br><span class="line">1539</span><br><span class="line">1540</span><br><span class="line">1541</span><br><span class="line">1542</span><br><span class="line">1543</span><br><span class="line">1544</span><br><span class="line">1545</span><br><span class="line">1546</span><br><span class="line">1547</span><br><span class="line">1548</span><br><span class="line">1549</span><br><span class="line">1550</span><br><span class="line">1551</span><br><span class="line">1552</span><br><span class="line">1553</span><br><span class="line">1554</span><br><span class="line">1555</span><br><span class="line">1556</span><br><span class="line">1557</span><br><span class="line">1558</span><br><span class="line">1559</span><br><span class="line">1560</span><br><span class="line">1561</span><br><span class="line">1562</span><br><span class="line">1563</span><br><span class="line">1564</span><br><span class="line">1565</span><br><span class="line">1566</span><br><span class="line">1567</span><br><span class="line">1568</span><br><span class="line">1569</span><br><span class="line">1570</span><br><span class="line">1571</span><br><span class="line">1572</span><br><span class="line">1573</span><br><span class="line">1574</span><br><span class="line">1575</span><br><span class="line">1576</span><br><span class="line">1577</span><br><span class="line">1578</span><br><span class="line">1579</span><br><span class="line">1580</span><br><span class="line">1581</span><br><span class="line">1582</span><br><span class="line">1583</span><br><span class="line">1584</span><br><span class="line">1585</span><br><span class="line">1586</span><br><span class="line">1587</span><br><span class="line">1588</span><br><span class="line">1589</span><br><span class="line">1590</span><br><span class="line">1591</span><br><span class="line">1592</span><br><span class="line">1593</span><br><span class="line">1594</span><br><span class="line">1595</span><br><span class="line">1596</span><br><span class="line">1597</span><br><span class="line">1598</span><br><span class="line">1599</span><br><span class="line">1600</span><br><span class="line">1601</span><br><span class="line">1602</span><br><span class="line">1603</span><br><span class="line">1604</span><br><span class="line">1605</span><br><span class="line">1606</span><br><span class="line">1607</span><br><span class="line">1608</span><br><span class="line">1609</span><br><span class="line">1610</span><br><span class="line">1611</span><br><span class="line">1612</span><br><span class="line">1613</span><br><span class="line">1614</span><br><span class="line">1615</span><br><span class="line">1616</span><br><span class="line">1617</span><br><span class="line">1618</span><br><span class="line">1619</span><br><span class="line">1620</span><br><span class="line">1621</span><br><span class="line">1622</span><br><span class="line">1623</span><br><span class="line">1624</span><br><span class="line">1625</span><br><span class="line">1626</span><br><span class="line">1627</span><br><span class="line">1628</span><br><span class="line">1629</span><br><span class="line">1630</span><br><span class="line">1631</span><br><span class="line">1632</span><br><span class="line">1633</span><br><span class="line">1634</span><br><span class="line">1635</span><br><span class="line">1636</span><br><span class="line">1637</span><br><span class="line">1638</span><br><span class="line">1639</span><br><span class="line">1640</span><br><span class="line">1641</span><br><span class="line">1642</span><br><span class="line">1643</span><br><span class="line">1644</span><br><span class="line">1645</span><br><span class="line">1646</span><br><span class="line">1647</span><br><span class="line">1648</span><br><span class="line">1649</span><br><span class="line">1650</span><br><span class="line">1651</span><br><span class="line">1652</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Zepto v1.2.0 - zepto event ajax form ie - zeptojs.com/license */</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">global, factory</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> define === <span class="string">'function'</span> &amp;&amp; define.amd)</span><br><span class="line">    define(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> factory(global) &#125;)</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    factory(global)</span><br><span class="line">&#125;(<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span>(<span class="params">window</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> Zepto = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> <span class="literal">undefined</span>, key, $, classList, emptyArray = [], concat = emptyArray.concat, filter = emptyArray.filter, slice = emptyArray.slice,</span><br><span class="line">    <span class="built_in">document</span> = <span class="built_in">window</span>.document,</span><br><span class="line">    elementDisplay = &#123;&#125;, classCache = &#123;&#125;,</span><br><span class="line">    cssNumber = &#123; <span class="string">'column-count'</span>: <span class="number">1</span>, <span class="string">'columns'</span>: <span class="number">1</span>, <span class="string">'font-weight'</span>: <span class="number">1</span>, <span class="string">'line-height'</span>: <span class="number">1</span>,<span class="string">'opacity'</span>: <span class="number">1</span>, <span class="string">'z-index'</span>: <span class="number">1</span>, <span class="string">'zoom'</span>: <span class="number">1</span> &#125;,</span><br><span class="line">    fragmentRE = <span class="regexp">/^\s*&lt;(\w+|!)[^&gt;]*&gt;/</span>,</span><br><span class="line">    singleTagRE = <span class="regexp">/^&lt;(\w+)\s*\/?&gt;(?:&lt;\/\1&gt;|)$/</span>,</span><br><span class="line">    tagExpanderRE = <span class="regexp">/&lt;(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^&gt;]*)\/&gt;/ig</span>,</span><br><span class="line">    rootNodeRE = <span class="regexp">/^(?:body|html)$/i</span>,</span><br><span class="line">    capitalRE = <span class="regexp">/([A-Z])/g</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// special attributes that should be get/set via method calls</span></span><br><span class="line">    methodAttributes = [<span class="string">'val'</span>, <span class="string">'css'</span>, <span class="string">'html'</span>, <span class="string">'text'</span>, <span class="string">'data'</span>, <span class="string">'width'</span>, <span class="string">'height'</span>, <span class="string">'offset'</span>],</span><br><span class="line"></span><br><span class="line">    adjacencyOperators = [ <span class="string">'after'</span>, <span class="string">'prepend'</span>, <span class="string">'before'</span>, <span class="string">'append'</span> ],</span><br><span class="line">    table = <span class="built_in">document</span>.createElement(<span class="string">'table'</span>),</span><br><span class="line">    tableRow = <span class="built_in">document</span>.createElement(<span class="string">'tr'</span>),</span><br><span class="line">    containers = &#123;</span><br><span class="line">      <span class="string">'tr'</span>: <span class="built_in">document</span>.createElement(<span class="string">'tbody'</span>),</span><br><span class="line">      <span class="string">'tbody'</span>: table, <span class="string">'thead'</span>: table, <span class="string">'tfoot'</span>: table,</span><br><span class="line">      <span class="string">'td'</span>: tableRow, <span class="string">'th'</span>: tableRow,</span><br><span class="line">      <span class="string">'*'</span>: <span class="built_in">document</span>.createElement(<span class="string">'div'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    readyRE = <span class="regexp">/complete|loaded|interactive/</span>,</span><br><span class="line">    simpleSelectorRE = <span class="regexp">/^[\w-]*$/</span>,</span><br><span class="line">    class2type = &#123;&#125;,</span><br><span class="line">    toString = class2type.toString,</span><br><span class="line">    zepto = &#123;&#125;,</span><br><span class="line">    camelize, uniq,</span><br><span class="line">    tempParent = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>),</span><br><span class="line">    propMap = &#123;</span><br><span class="line">      <span class="string">'tabindex'</span>: <span class="string">'tabIndex'</span>,</span><br><span class="line">      <span class="string">'readonly'</span>: <span class="string">'readOnly'</span>,</span><br><span class="line">      <span class="string">'for'</span>: <span class="string">'htmlFor'</span>,</span><br><span class="line">      <span class="string">'class'</span>: <span class="string">'className'</span>,</span><br><span class="line">      <span class="string">'maxlength'</span>: <span class="string">'maxLength'</span>,</span><br><span class="line">      <span class="string">'cellspacing'</span>: <span class="string">'cellSpacing'</span>,</span><br><span class="line">      <span class="string">'cellpadding'</span>: <span class="string">'cellPadding'</span>,</span><br><span class="line">      <span class="string">'rowspan'</span>: <span class="string">'rowSpan'</span>,</span><br><span class="line">      <span class="string">'colspan'</span>: <span class="string">'colSpan'</span>,</span><br><span class="line">      <span class="string">'usemap'</span>: <span class="string">'useMap'</span>,</span><br><span class="line">      <span class="string">'frameborder'</span>: <span class="string">'frameBorder'</span>,</span><br><span class="line">      <span class="string">'contenteditable'</span>: <span class="string">'contentEditable'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    isArray = <span class="built_in">Array</span>.isArray ||</span><br><span class="line">      <span class="function"><span class="keyword">function</span>(<span class="params">object</span>)</span>&#123; <span class="keyword">return</span> object <span class="keyword">instanceof</span> <span class="built_in">Array</span> &#125;</span><br><span class="line">  <span class="comment">// 判断节点是否包含选择器</span></span><br><span class="line">  zepto.matches = <span class="function"><span class="keyword">function</span>(<span class="params">element, selector</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!selector || !element || element.nodeType !== <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">var</span> matchesSelector = element.matches || element.webkitMatchesSelector ||</span><br><span class="line">                          element.mozMatchesSelector || element.oMatchesSelector ||</span><br><span class="line">                          element.matchesSelector</span><br><span class="line">    <span class="keyword">if</span> (matchesSelector) <span class="keyword">return</span> matchesSelector.call(element, selector)</span><br><span class="line">    <span class="comment">// fall back to performing a selector:</span></span><br><span class="line">    <span class="keyword">var</span> match, parent = element.parentNode, temp = !parent</span><br><span class="line">    <span class="keyword">if</span> (temp) (parent = tempParent).appendChild(element)</span><br><span class="line">    match = ~zepto.qsa(parent, selector).indexOf(element)</span><br><span class="line">    temp &amp;&amp; tempParent.removeChild(element)</span><br><span class="line">    <span class="keyword">return</span> match</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">type</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> obj == <span class="literal">null</span> ? <span class="built_in">String</span>(obj) :</span><br><span class="line">      class2type[toString.call(obj)] || <span class="string">"object"</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">isFunction</span>(<span class="params">value</span>) </span>&#123; <span class="keyword">return</span> type(value) == <span class="string">"function"</span> &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">isWindow</span>(<span class="params">obj</span>)     </span>&#123; <span class="keyword">return</span> obj != <span class="literal">null</span> &amp;&amp; obj == obj.window &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">isDocument</span>(<span class="params">obj</span>)   </span>&#123; <span class="keyword">return</span> obj != <span class="literal">null</span> &amp;&amp; obj.nodeType == obj.DOCUMENT_NODE &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">isObject</span>(<span class="params">obj</span>)     </span>&#123; <span class="keyword">return</span> type(obj) == <span class="string">"object"</span> &#125;</span><br><span class="line">  <span class="comment">// 判断是不是纯对象，如 &#123;&#125;,prototype没有添加的</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">isPlainObject</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> isObject(obj) &amp;&amp; !isWindow(obj) &amp;&amp; <span class="built_in">Object</span>.getPrototypeOf(obj) == <span class="built_in">Object</span>.prototype</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">likeArray</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> length = !!obj &amp;&amp; <span class="string">'length'</span> <span class="keyword">in</span> obj &amp;&amp; obj.length,</span><br><span class="line">      type = $.type(obj)</span><br><span class="line">    <span class="comment">// 判断是不是类数组对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'function'</span> != type &amp;&amp; !isWindow(obj) &amp;&amp; (</span><br><span class="line">      <span class="string">'array'</span> == type || length === <span class="number">0</span> ||</span><br><span class="line">        (<span class="keyword">typeof</span> length == <span class="string">'number'</span> &amp;&amp; length &gt; <span class="number">0</span> &amp;&amp; (length - <span class="number">1</span>) <span class="keyword">in</span> obj)</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 压缩精简数组</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">compact</span>(<span class="params">array</span>) </span>&#123; <span class="keyword">return</span> filter.call(array, <span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123; <span class="keyword">return</span> item != <span class="literal">null</span> &#125;) &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">flatten</span>(<span class="params">array</span>) </span>&#123; <span class="keyword">return</span> array.length &gt; <span class="number">0</span> ? $.fn.concat.apply([], array) : array &#125;</span><br><span class="line">  camelize = <span class="function"><span class="keyword">function</span>(<span class="params">str</span>)</span>&#123; <span class="keyword">return</span> str.replace(<span class="regexp">/-+(.)?/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params">match, chr</span>)</span>&#123; <span class="keyword">return</span> chr ? chr.toUpperCase() : <span class="string">''</span> &#125;) &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">dasherize</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> str.replace(<span class="regexp">/::/g</span>, <span class="string">'/'</span>)</span><br><span class="line">           .replace(<span class="regexp">/([A-Z]+)([A-Z][a-z])/g</span>, <span class="string">'$1_$2'</span>)</span><br><span class="line">           .replace(<span class="regexp">/([a-z\d])([A-Z])/g</span>, <span class="string">'$1_$2'</span>)</span><br><span class="line">           .replace(<span class="regexp">/_/g</span>, <span class="string">'-'</span>)</span><br><span class="line">           .toLowerCase()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 删除数组中重复的元素，这个方法好牛逼</span></span><br><span class="line">  uniq = <span class="function"><span class="keyword">function</span>(<span class="params">array</span>)</span>&#123; <span class="keyword">return</span> filter.call(array, <span class="function"><span class="keyword">function</span>(<span class="params">item, idx</span>)</span>&#123; <span class="keyword">return</span> array.indexOf(item) == idx &#125;) &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">classRE</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name <span class="keyword">in</span> classCache ?</span><br><span class="line">      classCache[name] : (classCache[name] = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'(^|\\s)'</span> + name + <span class="string">'(\\s|$)'</span>))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">maybeAddPx</span>(<span class="params">name, value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">typeof</span> value == <span class="string">"number"</span> &amp;&amp; !cssNumber[dasherize(name)]) ? value + <span class="string">"px"</span> : value</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">defaultDisplay</span>(<span class="params">nodeName</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> element, display</span><br><span class="line">    <span class="keyword">if</span> (!elementDisplay[nodeName]) &#123;</span><br><span class="line">      element = <span class="built_in">document</span>.createElement(nodeName)</span><br><span class="line">      <span class="built_in">document</span>.body.appendChild(element)</span><br><span class="line">      display = getComputedStyle(element, <span class="string">''</span>).getPropertyValue(<span class="string">"display"</span>)</span><br><span class="line">      element.parentNode.removeChild(element)</span><br><span class="line">      display == <span class="string">"none"</span> &amp;&amp; (display = <span class="string">"block"</span>)</span><br><span class="line">      elementDisplay[nodeName] = display</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> elementDisplay[nodeName]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">children</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'children'</span> <span class="keyword">in</span> element ?</span><br><span class="line">      slice.call(element.children) :</span><br><span class="line">      $.map(element.childNodes, <span class="function"><span class="keyword">function</span>(<span class="params">node</span>)</span>&#123; <span class="keyword">if</span> (node.nodeType == <span class="number">1</span>) <span class="keyword">return</span> node &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Z</span>(<span class="params">dom, selector</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> i, len = dom ? dom.length : <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) <span class="keyword">this</span>[i] = dom[i]</span><br><span class="line">    <span class="keyword">this</span>.length = len</span><br><span class="line">    <span class="keyword">this</span>.selector = selector || <span class="string">''</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `$.zepto.fragment` takes a html string and an optional tag name</span></span><br><span class="line">  <span class="comment">// to generate DOM nodes from the given html string.</span></span><br><span class="line">  <span class="comment">// The generated DOM nodes are returned as an array.</span></span><br><span class="line">  <span class="comment">// This function can be overridden in plugins for example to make</span></span><br><span class="line">  <span class="comment">// it compatible with browsers that don't support the DOM fully.</span></span><br><span class="line">  zepto.fragment = <span class="function"><span class="keyword">function</span>(<span class="params">html, name, properties</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> dom, nodes, container</span><br><span class="line"></span><br><span class="line">    <span class="comment">// A special case optimization for a single tag</span></span><br><span class="line">    <span class="keyword">if</span> (singleTagRE.test(html)) dom = $(<span class="built_in">document</span>.createElement(<span class="built_in">RegExp</span>.$<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!dom) &#123;</span><br><span class="line">      <span class="keyword">if</span> (html.replace) html = html.replace(tagExpanderRE, <span class="string">"&lt;$1&gt;&lt;/$2&gt;"</span>)</span><br><span class="line">      <span class="keyword">if</span> (name === <span class="literal">undefined</span>) name = fragmentRE.test(html) &amp;&amp; <span class="built_in">RegExp</span>.$<span class="number">1</span></span><br><span class="line">      <span class="keyword">if</span> (!(name <span class="keyword">in</span> containers)) name = <span class="string">'*'</span></span><br><span class="line"></span><br><span class="line">      container = containers[name]</span><br><span class="line">      container.innerHTML = <span class="string">''</span> + html</span><br><span class="line">      dom = $.each(slice.call(container.childNodes), <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        container.removeChild(<span class="keyword">this</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isPlainObject(properties)) &#123;</span><br><span class="line">      nodes = $(dom)</span><br><span class="line">      $.each(properties, <span class="function"><span class="keyword">function</span>(<span class="params">key, value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (methodAttributes.indexOf(key) &gt; <span class="number">-1</span>) nodes[key](value)</span><br><span class="line">        <span class="keyword">else</span> nodes.attr(key, value)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dom</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `$.zepto.Z` swaps out the prototype of the given `dom` array</span></span><br><span class="line">  <span class="comment">// of nodes with `$.fn` and thus supplying all the Zepto functions</span></span><br><span class="line">  <span class="comment">// to the array. This method can be overridden in plugins.</span></span><br><span class="line">  zepto.Z = <span class="function"><span class="keyword">function</span>(<span class="params">dom, selector</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Z(dom, selector)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `$.zepto.isZ` should return `true` if the given object is a Zepto</span></span><br><span class="line">  <span class="comment">// collection. This method can be overridden in plugins.</span></span><br><span class="line">  zepto.isZ = <span class="function"><span class="keyword">function</span>(<span class="params">object</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> object <span class="keyword">instanceof</span> zepto.Z</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `$.zepto.init` is Zepto's counterpart to jQuery's `$.fn.init` and</span></span><br><span class="line">  <span class="comment">// takes a CSS selector and an optional context (and handles various</span></span><br><span class="line">  <span class="comment">// special cases).</span></span><br><span class="line">  <span class="comment">// This method can be overridden in plugins.</span></span><br><span class="line">  zepto.init = <span class="function"><span class="keyword">function</span>(<span class="params">selector, context</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> dom</span><br><span class="line">    <span class="comment">// If nothing given, return an empty Zepto collection</span></span><br><span class="line">    <span class="keyword">if</span> (!selector) <span class="keyword">return</span> zepto.Z()</span><br><span class="line">    <span class="comment">// Optimize for string selectors</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> selector == <span class="string">'string'</span>) &#123;</span><br><span class="line">      selector = selector.trim()</span><br><span class="line">      <span class="comment">// If it's a html fragment, create nodes from it</span></span><br><span class="line">      <span class="comment">// Note: In both Chrome 21 and Firefox 15, DOM error 12</span></span><br><span class="line">      <span class="comment">// is thrown if the fragment doesn't begin with &lt;</span></span><br><span class="line">      <span class="keyword">if</span> (selector[<span class="number">0</span>] == <span class="string">'&lt;'</span> &amp;&amp; fragmentRE.test(selector))</span><br><span class="line">        dom = zepto.fragment(selector, <span class="built_in">RegExp</span>.$<span class="number">1</span>, context), selector = <span class="literal">null</span></span><br><span class="line">      <span class="comment">// If there's a context, create a collection on that context first, and select</span></span><br><span class="line">      <span class="comment">// nodes from there</span></span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (context !== <span class="literal">undefined</span>) <span class="keyword">return</span> $(context).find(selector)</span><br><span class="line">      <span class="comment">// If it's a CSS selector, use it to select nodes.</span></span><br><span class="line">      <span class="keyword">else</span> dom = zepto.qsa(<span class="built_in">document</span>, selector)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// If a function is given, call it when the DOM is ready</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (isFunction(selector)) <span class="keyword">return</span> $(<span class="built_in">document</span>).ready(selector)</span><br><span class="line">    <span class="comment">// If a Zepto collection is given, just return it</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (zepto.isZ(selector)) <span class="keyword">return</span> selector</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// normalize array if an array of nodes is given</span></span><br><span class="line">      <span class="keyword">if</span> (isArray(selector)) dom = compact(selector)</span><br><span class="line">      <span class="comment">// Wrap DOM nodes.</span></span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (isObject(selector))</span><br><span class="line">        dom = [selector], selector = <span class="literal">null</span></span><br><span class="line">      <span class="comment">// If it's a html fragment, create nodes from it</span></span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (fragmentRE.test(selector))</span><br><span class="line">        dom = zepto.fragment(selector.trim(), <span class="built_in">RegExp</span>.$<span class="number">1</span>, context), selector = <span class="literal">null</span></span><br><span class="line">      <span class="comment">// If there's a context, create a collection on that context first, and select</span></span><br><span class="line">      <span class="comment">// nodes from there</span></span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (context !== <span class="literal">undefined</span>) <span class="keyword">return</span> $(context).find(selector)</span><br><span class="line">      <span class="comment">// And last but no least, if it's a CSS selector, use it to select nodes.</span></span><br><span class="line">      <span class="keyword">else</span> dom = zepto.qsa(<span class="built_in">document</span>, selector)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// create a new Zepto collection from the nodes found</span></span><br><span class="line">    <span class="keyword">return</span> zepto.Z(dom, selector)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `$` will be the base `Zepto` object. When calling this</span></span><br><span class="line">  <span class="comment">// function just call `$.zepto.init, which makes the implementation</span></span><br><span class="line">  <span class="comment">// details of selecting nodes and creating Zepto collections</span></span><br><span class="line">  <span class="comment">// patchable in plugins.</span></span><br><span class="line">  $ = <span class="function"><span class="keyword">function</span>(<span class="params">selector, context</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> zepto.init(selector, context)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">extend</span>(<span class="params">target, source, deep</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (key <span class="keyword">in</span> source)</span><br><span class="line">      <span class="keyword">if</span> (deep &amp;&amp; (isPlainObject(source[key]) || isArray(source[key]))) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isPlainObject(source[key]) &amp;&amp; !isPlainObject(target[key]))</span><br><span class="line">          target[key] = &#123;&#125;</span><br><span class="line">        <span class="keyword">if</span> (isArray(source[key]) &amp;&amp; !isArray(target[key]))</span><br><span class="line">          target[key] = []</span><br><span class="line">        extend(target[key], source[key], deep)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (source[key] !== <span class="literal">undefined</span>) target[key] = source[key]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Copy all but undefined properties from one or more</span></span><br><span class="line">  <span class="comment">// objects to the `target` object.</span></span><br><span class="line">  $.extend = <span class="function"><span class="keyword">function</span>(<span class="params">target</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> deep, args = slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> target == <span class="string">'boolean'</span>) &#123;</span><br><span class="line">      deep = target</span><br><span class="line">      target = args.shift()</span><br><span class="line">    &#125;</span><br><span class="line">    args.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">arg</span>)</span>&#123; extend(target, arg, deep) &#125;)</span><br><span class="line">    <span class="keyword">return</span> target</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `$.zepto.qsa` is Zepto's CSS selector implementation which</span></span><br><span class="line">  <span class="comment">// uses `document.querySelectorAll` and optimizes for some special cases, like `#id`.</span></span><br><span class="line">  <span class="comment">// This method can be overridden in plugins.</span></span><br><span class="line">  zepto.qsa = <span class="function"><span class="keyword">function</span>(<span class="params">element, selector</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> found,</span><br><span class="line">        maybeID = selector[<span class="number">0</span>] == <span class="string">'#'</span>,</span><br><span class="line">        maybeClass = !maybeID &amp;&amp; selector[<span class="number">0</span>] == <span class="string">'.'</span>,</span><br><span class="line">        nameOnly = maybeID || maybeClass ? selector.slice(<span class="number">1</span>) : selector, <span class="comment">// Ensure that a 1 char tag name still gets checked</span></span><br><span class="line">        isSimple = simpleSelectorRE.test(nameOnly)</span><br><span class="line">    <span class="keyword">return</span> (element.getElementById &amp;&amp; isSimple &amp;&amp; maybeID) ? <span class="comment">// Safari DocumentFragment doesn't have getElementById</span></span><br><span class="line">      ( (found = element.getElementById(nameOnly)) ? [found] : [] ) :</span><br><span class="line">      (element.nodeType !== <span class="number">1</span> &amp;&amp; element.nodeType !== <span class="number">9</span> &amp;&amp; element.nodeType !== <span class="number">11</span>) ? [] :</span><br><span class="line">      slice.call(</span><br><span class="line">        isSimple &amp;&amp; !maybeID &amp;&amp; element.getElementsByClassName ? <span class="comment">// DocumentFragment doesn't have getElementsByClassName/TagName</span></span><br><span class="line">          maybeClass ? element.getElementsByClassName(nameOnly) : <span class="comment">// If it's simple, it could be a class</span></span><br><span class="line">          element.getElementsByTagName(selector) : <span class="comment">// Or a tag</span></span><br><span class="line">          element.querySelectorAll(selector) <span class="comment">// Or it's not simple, and we need to query all</span></span><br><span class="line">      )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">filtered</span>(<span class="params">nodes, selector</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> selector == <span class="literal">null</span> ? $(nodes) : $(nodes).filter(selector)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  $.contains = <span class="built_in">document</span>.documentElement.contains ?</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">parent, node</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> parent !== node &amp;&amp; parent.contains(node)</span><br><span class="line">    &#125; :</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">parent, node</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">while</span> (node &amp;&amp; (node = node.parentNode))</span><br><span class="line">        <span class="keyword">if</span> (node === parent) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">funcArg</span>(<span class="params">context, arg, idx, payload</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> isFunction(arg) ? arg.call(context, idx, payload) : arg</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">setAttribute</span>(<span class="params">node, name, value</span>) </span>&#123;</span><br><span class="line">    value == <span class="literal">null</span> ? node.removeAttribute(name) : node.setAttribute(name, value)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// access className property while respecting SVGAnimatedString</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">className</span>(<span class="params">node, value</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> klass = node.className || <span class="string">''</span>,</span><br><span class="line">        svg   = klass &amp;&amp; klass.baseVal !== <span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (value === <span class="literal">undefined</span>) <span class="keyword">return</span> svg ? klass.baseVal : klass</span><br><span class="line">    svg ? (klass.baseVal = value) : (node.className = value)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// "true"  =&gt; true</span></span><br><span class="line">  <span class="comment">// "false" =&gt; false</span></span><br><span class="line">  <span class="comment">// "null"  =&gt; null</span></span><br><span class="line">  <span class="comment">// "42"    =&gt; 42</span></span><br><span class="line">  <span class="comment">// "42.5"  =&gt; 42.5</span></span><br><span class="line">  <span class="comment">// "08"    =&gt; "08"</span></span><br><span class="line">  <span class="comment">// JSON    =&gt; parse if valid</span></span><br><span class="line">  <span class="comment">// String  =&gt; self</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">deserializeValue</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> value ?</span><br><span class="line">        value == <span class="string">"true"</span> ||</span><br><span class="line">        ( value == <span class="string">"false"</span> ? <span class="literal">false</span> :</span><br><span class="line">          value == <span class="string">"null"</span> ? <span class="literal">null</span> :</span><br><span class="line">          +value + <span class="string">""</span> == value ? +value :</span><br><span class="line">          /^[\[\&#123;]/.test(value) ? $.parseJSON(value) :</span><br><span class="line">          value )</span><br><span class="line">        : value</span><br><span class="line">    &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">      <span class="keyword">return</span> value</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  $.type = type</span><br><span class="line">  $.isFunction = isFunction</span><br><span class="line">  $.isWindow = isWindow</span><br><span class="line">  $.isArray = isArray</span><br><span class="line">  $.isPlainObject = isPlainObject</span><br><span class="line"></span><br><span class="line">  $.isEmptyObject = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name</span><br><span class="line">    <span class="keyword">for</span> (name <span class="keyword">in</span> obj) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  $.isNumeric = <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="built_in">Number</span>(val), type = <span class="keyword">typeof</span> val</span><br><span class="line">    <span class="keyword">return</span> val != <span class="literal">null</span> &amp;&amp; type != <span class="string">'boolean'</span> &amp;&amp;</span><br><span class="line">      (type != <span class="string">'string'</span> || val.length) &amp;&amp;</span><br><span class="line">      !<span class="built_in">isNaN</span>(num) &amp;&amp; <span class="built_in">isFinite</span>(num) || <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  $.inArray = <span class="function"><span class="keyword">function</span>(<span class="params">elem, array, i</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> emptyArray.indexOf.call(array, elem, i)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  $.camelCase = camelize</span><br><span class="line">  $.trim = <span class="function"><span class="keyword">function</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> str == <span class="literal">null</span> ? <span class="string">""</span> : <span class="built_in">String</span>.prototype.trim.call(str)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// plugin compatibility</span></span><br><span class="line">  $.uuid = <span class="number">0</span></span><br><span class="line">  $.support = &#123; &#125;</span><br><span class="line">  $.expr = &#123; &#125;</span><br><span class="line">  $.noop = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">  $.map = <span class="function"><span class="keyword">function</span>(<span class="params">elements, callback</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> value, values = [], i, key</span><br><span class="line">    <span class="keyword">if</span> (likeArray(elements))</span><br><span class="line">      <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; elements.length; i++) &#123;</span><br><span class="line">        value = callback(elements[i], i)</span><br><span class="line">        <span class="keyword">if</span> (value != <span class="literal">null</span>) values.push(value)</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="keyword">for</span> (key <span class="keyword">in</span> elements) &#123;</span><br><span class="line">        value = callback(elements[key], key)</span><br><span class="line">        <span class="keyword">if</span> (value != <span class="literal">null</span>) values.push(value)</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">return</span> flatten(values)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  $.each = <span class="function"><span class="keyword">function</span>(<span class="params">elements, callback</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> i, key</span><br><span class="line">    <span class="keyword">if</span> (likeArray(elements)) &#123;</span><br><span class="line">      <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; elements.length; i++)</span><br><span class="line">        <span class="keyword">if</span> (callback.call(elements[i], i, elements[i]) === <span class="literal">false</span>) <span class="keyword">return</span> elements</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (key <span class="keyword">in</span> elements)</span><br><span class="line">        <span class="keyword">if</span> (callback.call(elements[key], key, elements[key]) === <span class="literal">false</span>) <span class="keyword">return</span> elements</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> elements</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  $.grep = <span class="function"><span class="keyword">function</span>(<span class="params">elements, callback</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> filter.call(elements, callback)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>.JSON) $.parseJSON = <span class="built_in">JSON</span>.parse</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Populate the class2type map</span></span><br><span class="line">  $.each(<span class="string">"Boolean Number String Function Array Date RegExp Object Error"</span>.split(<span class="string">" "</span>), <span class="function"><span class="keyword">function</span>(<span class="params">i, name</span>) </span>&#123;</span><br><span class="line">    class2type[ <span class="string">"[object "</span> + name + <span class="string">"]"</span> ] = name.toLowerCase()</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Define methods that will be available on all</span></span><br><span class="line">  <span class="comment">// Zepto collections</span></span><br><span class="line">  $.fn = &#123;</span><br><span class="line">    <span class="keyword">constructor</span>: zepto.Z,</span><br><span class="line">    length: 0,</span><br><span class="line"></span><br><span class="line">    // Because a collection acts like an array</span><br><span class="line">    // copy over these useful array functions.</span><br><span class="line">    forEach: emptyArray.forEach,</span><br><span class="line">    reduce: emptyArray.reduce,</span><br><span class="line">    push: emptyArray.push,</span><br><span class="line">    sort: emptyArray.sort,</span><br><span class="line">    splice: emptyArray.splice,</span><br><span class="line">    indexOf: emptyArray.indexOf,</span><br><span class="line">    concat: function()&#123;</span><br><span class="line">      <span class="keyword">var</span> i, value, args = []</span><br><span class="line">      <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">        value = <span class="built_in">arguments</span>[i]</span><br><span class="line">        args[i] = zepto.isZ(value) ? value.toArray() : value</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> concat.apply(zepto.isZ(<span class="keyword">this</span>) ? <span class="keyword">this</span>.toArray() : <span class="keyword">this</span>, args)</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// `map` and `slice` in the jQuery API work differently</span></span><br><span class="line">    <span class="comment">// from their array counterparts</span></span><br><span class="line">    map: <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> $($.map(<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span>(<span class="params">el, i</span>)</span>&#123; <span class="keyword">return</span> fn.call(el, i, el) &#125;))</span><br><span class="line">    &#125;,</span><br><span class="line">    slice: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> $(slice.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>))</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    ready: <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>)</span>&#123;</span><br><span class="line">      <span class="comment">// need to check if document.body exists for IE as that browser reports</span></span><br><span class="line">      <span class="comment">// document ready when it hasn't yet created the body element</span></span><br><span class="line">      <span class="keyword">if</span> (readyRE.test(<span class="built_in">document</span>.readyState) &amp;&amp; <span class="built_in">document</span>.body) callback($)</span><br><span class="line">      <span class="keyword">else</span> <span class="built_in">document</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; callback($) &#125;, <span class="literal">false</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">    &#125;,</span><br><span class="line">    get: <span class="function"><span class="keyword">function</span>(<span class="params">idx</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> idx === <span class="literal">undefined</span> ? slice.call(<span class="keyword">this</span>) : <span class="keyword">this</span>[idx &gt;= <span class="number">0</span> ? idx : idx + <span class="keyword">this</span>.length]</span><br><span class="line">    &#125;,</span><br><span class="line">    toArray: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>.get() &#125;,</span><br><span class="line">    size: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.length</span><br><span class="line">    &#125;,</span><br><span class="line">    remove: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.parentNode != <span class="literal">null</span>)</span><br><span class="line">          <span class="keyword">this</span>.parentNode.removeChild(<span class="keyword">this</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    each: <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>)</span>&#123;</span><br><span class="line">      emptyArray.every.call(<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span>(<span class="params">el, idx</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> callback.call(el, idx, el) !== <span class="literal">false</span></span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">    &#125;,</span><br><span class="line">    filter: <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (isFunction(selector)) <span class="keyword">return</span> <span class="keyword">this</span>.not(<span class="keyword">this</span>.not(selector))</span><br><span class="line">      <span class="keyword">return</span> $(filter.call(<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span>(<span class="params">element</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> zepto.matches(element, selector)</span><br><span class="line">      &#125;))</span><br><span class="line">    &#125;,</span><br><span class="line">    add: <span class="function"><span class="keyword">function</span>(<span class="params">selector,context</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> $(uniq(<span class="keyword">this</span>.concat($(selector,context))))</span><br><span class="line">    &#125;,</span><br><span class="line">    is: <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.length &gt; <span class="number">0</span> &amp;&amp; zepto.matches(<span class="keyword">this</span>[<span class="number">0</span>], selector)</span><br><span class="line">    &#125;,</span><br><span class="line">    not: <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> nodes=[]</span><br><span class="line">      <span class="keyword">if</span> (isFunction(selector) &amp;&amp; selector.call !== <span class="literal">undefined</span>)</span><br><span class="line">        <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">idx</span>)</span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (!selector.call(<span class="keyword">this</span>,idx)) nodes.push(<span class="keyword">this</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> excludes = <span class="keyword">typeof</span> selector == <span class="string">'string'</span> ? <span class="keyword">this</span>.filter(selector) :</span><br><span class="line">          (likeArray(selector) &amp;&amp; isFunction(selector.item)) ? slice.call(selector) : $(selector)</span><br><span class="line">        <span class="keyword">this</span>.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">el</span>)</span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (excludes.indexOf(el) &lt; <span class="number">0</span>) nodes.push(el)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> $(nodes)</span><br><span class="line">    &#125;,</span><br><span class="line">    has: <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.filter(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> isObject(selector) ?</span><br><span class="line">          $.contains(<span class="keyword">this</span>, selector) :</span><br><span class="line">          $(<span class="keyword">this</span>).find(selector).size()</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    eq: <span class="function"><span class="keyword">function</span>(<span class="params">idx</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> idx === <span class="number">-1</span> ? <span class="keyword">this</span>.slice(idx) : <span class="keyword">this</span>.slice(idx, + idx + <span class="number">1</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    first: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> el = <span class="keyword">this</span>[<span class="number">0</span>]</span><br><span class="line">      <span class="keyword">return</span> el &amp;&amp; !isObject(el) ? el : $(el)</span><br><span class="line">    &#125;,</span><br><span class="line">    last: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> el = <span class="keyword">this</span>[<span class="keyword">this</span>.length - <span class="number">1</span>]</span><br><span class="line">      <span class="keyword">return</span> el &amp;&amp; !isObject(el) ? el : $(el)</span><br><span class="line">    &#125;,</span><br><span class="line">    find: <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> result, $<span class="keyword">this</span> = <span class="keyword">this</span></span><br><span class="line">      <span class="keyword">if</span> (!selector) result = $()</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> selector == <span class="string">'object'</span>)</span><br><span class="line">        result = $(selector).filter(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          <span class="keyword">var</span> node = <span class="keyword">this</span></span><br><span class="line">          <span class="keyword">return</span> emptyArray.some.call($<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span>(<span class="params">parent</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> $.contains(parent, node)</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.length == <span class="number">1</span>) result = $(zepto.qsa(<span class="keyword">this</span>[<span class="number">0</span>], selector))</span><br><span class="line">      <span class="keyword">else</span> result = <span class="keyword">this</span>.map(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> zepto.qsa(<span class="keyword">this</span>, selector) &#125;)</span><br><span class="line">      <span class="keyword">return</span> result</span><br><span class="line">    &#125;,</span><br><span class="line">    closest: <span class="function"><span class="keyword">function</span>(<span class="params">selector, context</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> nodes = [], collection = <span class="keyword">typeof</span> selector == <span class="string">'object'</span> &amp;&amp; $(selector)</span><br><span class="line">      <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">_, node</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (node &amp;&amp; !(collection ? collection.indexOf(node) &gt;= <span class="number">0</span> : zepto.matches(node, selector)))</span><br><span class="line">          node = node !== context &amp;&amp; !isDocument(node) &amp;&amp; node.parentNode</span><br><span class="line">        <span class="keyword">if</span> (node &amp;&amp; nodes.indexOf(node) &lt; <span class="number">0</span>) nodes.push(node)</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">return</span> $(nodes)</span><br><span class="line">    &#125;,</span><br><span class="line">    parents: <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> ancestors = [], nodes = <span class="keyword">this</span></span><br><span class="line">      <span class="keyword">while</span> (nodes.length &gt; <span class="number">0</span>)</span><br><span class="line">        nodes = $.map(nodes, <span class="function"><span class="keyword">function</span>(<span class="params">node</span>)</span>&#123;</span><br><span class="line">          <span class="keyword">if</span> ((node = node.parentNode) &amp;&amp; !isDocument(node) &amp;&amp; ancestors.indexOf(node) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            ancestors.push(node)</span><br><span class="line">            <span class="keyword">return</span> node</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      <span class="keyword">return</span> filtered(ancestors, selector)</span><br><span class="line">    &#125;,</span><br><span class="line">    parent: <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> filtered(uniq(<span class="keyword">this</span>.pluck(<span class="string">'parentNode'</span>)), selector)</span><br><span class="line">    &#125;,</span><br><span class="line">    children: <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> filtered(<span class="keyword">this</span>.map(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> children(<span class="keyword">this</span>) &#125;), selector)</span><br><span class="line">    &#125;,</span><br><span class="line">    contents: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.map(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>.contentDocument || slice.call(<span class="keyword">this</span>.childNodes) &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    siblings: <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> filtered(<span class="keyword">this</span>.map(<span class="function"><span class="keyword">function</span>(<span class="params">i, el</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> filter.call(children(el.parentNode), <span class="function"><span class="keyword">function</span>(<span class="params">child</span>)</span>&#123; <span class="keyword">return</span> child!==el &#125;)</span><br><span class="line">      &#125;), selector)</span><br><span class="line">    &#125;,</span><br><span class="line">    empty: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">this</span>.innerHTML = <span class="string">''</span> &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// `pluck` is borrowed from Prototype.js</span></span><br><span class="line">    pluck: <span class="function"><span class="keyword">function</span>(<span class="params">property</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> $.map(<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span>(<span class="params">el</span>)</span>&#123; <span class="keyword">return</span> el[property] &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    show: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.style.display == <span class="string">"none"</span> &amp;&amp; (<span class="keyword">this</span>.style.display = <span class="string">''</span>)</span><br><span class="line">        <span class="keyword">if</span> (getComputedStyle(<span class="keyword">this</span>, <span class="string">''</span>).getPropertyValue(<span class="string">"display"</span>) == <span class="string">"none"</span>)</span><br><span class="line">          <span class="keyword">this</span>.style.display = defaultDisplay(<span class="keyword">this</span>.nodeName)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    replaceWith: <span class="function"><span class="keyword">function</span>(<span class="params">newContent</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.before(newContent).remove()</span><br><span class="line">    &#125;,</span><br><span class="line">    wrap: <span class="function"><span class="keyword">function</span>(<span class="params">structure</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> func = isFunction(structure)</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>[<span class="number">0</span>] &amp;&amp; !func)</span><br><span class="line">        <span class="keyword">var</span> dom   = $(structure).get(<span class="number">0</span>),</span><br><span class="line">            clone = dom.parentNode || <span class="keyword">this</span>.length &gt; <span class="number">1</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">index</span>)</span>&#123;</span><br><span class="line">        $(<span class="keyword">this</span>).wrapAll(</span><br><span class="line">          func ? structure.call(<span class="keyword">this</span>, index) :</span><br><span class="line">            clone ? dom.cloneNode(<span class="literal">true</span>) : dom</span><br><span class="line">        )</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    wrapAll: <span class="function"><span class="keyword">function</span>(<span class="params">structure</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>[<span class="number">0</span>]) &#123;</span><br><span class="line">        $(<span class="keyword">this</span>[<span class="number">0</span>]).before(structure = $(structure))</span><br><span class="line">        <span class="keyword">var</span> children</span><br><span class="line">        <span class="comment">// drill down to the inmost element</span></span><br><span class="line">        <span class="keyword">while</span> ((children = structure.children()).length) structure = children.first()</span><br><span class="line">        $(structure).append(<span class="keyword">this</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">    &#125;,</span><br><span class="line">    wrapInner: <span class="function"><span class="keyword">function</span>(<span class="params">structure</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> func = isFunction(structure)</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">index</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> self = $(<span class="keyword">this</span>), contents = self.contents(),</span><br><span class="line">            dom  = func ? structure.call(<span class="keyword">this</span>, index) : structure</span><br><span class="line">        contents.length ? contents.wrapAll(dom) : self.append(dom)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    unwrap: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.parent().each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="keyword">this</span>).replaceWith($(<span class="keyword">this</span>).children())</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">    &#125;,</span><br><span class="line">    clone: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.map(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>.cloneNode(<span class="literal">true</span>) &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    hide: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.css(<span class="string">"display"</span>, <span class="string">"none"</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    toggle: <span class="function"><span class="keyword">function</span>(<span class="params">setting</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> el = $(<span class="keyword">this</span>)</span><br><span class="line">        ;(setting === <span class="literal">undefined</span> ? el.css(<span class="string">"display"</span>) == <span class="string">"none"</span> : setting) ? el.show() : el.hide()</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    prev: <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>)</span>&#123; <span class="keyword">return</span> $(<span class="keyword">this</span>.pluck(<span class="string">'previousElementSibling'</span>)).filter(selector || <span class="string">'*'</span>) &#125;,</span><br><span class="line">    next: <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>)</span>&#123; <span class="keyword">return</span> $(<span class="keyword">this</span>.pluck(<span class="string">'nextElementSibling'</span>)).filter(selector || <span class="string">'*'</span>) &#125;,</span><br><span class="line">    html: <span class="function"><span class="keyword">function</span>(<span class="params">html</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">in</span> <span class="built_in">arguments</span> ?</span><br><span class="line">        <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">idx</span>)</span>&#123;</span><br><span class="line">          <span class="keyword">var</span> originHtml = <span class="keyword">this</span>.innerHTML</span><br><span class="line">          $(<span class="keyword">this</span>).empty().append( funcArg(<span class="keyword">this</span>, html, idx, originHtml) )</span><br><span class="line">        &#125;) :</span><br><span class="line">        (<span class="number">0</span> <span class="keyword">in</span> <span class="keyword">this</span> ? <span class="keyword">this</span>[<span class="number">0</span>].innerHTML : <span class="literal">null</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    text: <span class="function"><span class="keyword">function</span>(<span class="params">text</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">in</span> <span class="built_in">arguments</span> ?</span><br><span class="line">        <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">idx</span>)</span>&#123;</span><br><span class="line">          <span class="keyword">var</span> newText = funcArg(<span class="keyword">this</span>, text, idx, <span class="keyword">this</span>.textContent)</span><br><span class="line">          <span class="keyword">this</span>.textContent = newText == <span class="literal">null</span> ? <span class="string">''</span> : <span class="string">''</span>+newText</span><br><span class="line">        &#125;) :</span><br><span class="line">        (<span class="number">0</span> <span class="keyword">in</span> <span class="keyword">this</span> ? <span class="keyword">this</span>.pluck(<span class="string">'textContent'</span>).join(<span class="string">""</span>) : <span class="literal">null</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    attr: <span class="function"><span class="keyword">function</span>(<span class="params">name, value</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> result</span><br><span class="line">      <span class="keyword">return</span> (<span class="keyword">typeof</span> name == <span class="string">'string'</span> &amp;&amp; !(<span class="number">1</span> <span class="keyword">in</span> <span class="built_in">arguments</span>)) ?</span><br><span class="line">        (<span class="number">0</span> <span class="keyword">in</span> <span class="keyword">this</span> &amp;&amp; <span class="keyword">this</span>[<span class="number">0</span>].nodeType == <span class="number">1</span> &amp;&amp; (result = <span class="keyword">this</span>[<span class="number">0</span>].getAttribute(name)) != <span class="literal">null</span> ? result : <span class="literal">undefined</span>) :</span><br><span class="line">        <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">idx</span>)</span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">this</span>.nodeType !== <span class="number">1</span>) <span class="keyword">return</span></span><br><span class="line">          <span class="keyword">if</span> (isObject(name)) <span class="keyword">for</span> (key <span class="keyword">in</span> name) setAttribute(<span class="keyword">this</span>, key, name[key])</span><br><span class="line">          <span class="keyword">else</span> setAttribute(<span class="keyword">this</span>, name, funcArg(<span class="keyword">this</span>, value, idx, <span class="keyword">this</span>.getAttribute(name)))</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    removeAttr: <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">this</span>.nodeType === <span class="number">1</span> &amp;&amp; name.split(<span class="string">' '</span>).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">attribute</span>)</span>&#123;</span><br><span class="line">        setAttribute(<span class="keyword">this</span>, attribute)</span><br><span class="line">      &#125;, <span class="keyword">this</span>)&#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    prop: <span class="function"><span class="keyword">function</span>(<span class="params">name, value</span>)</span>&#123;</span><br><span class="line">      name = propMap[name] || name</span><br><span class="line">      <span class="keyword">return</span> (<span class="number">1</span> <span class="keyword">in</span> <span class="built_in">arguments</span>) ?</span><br><span class="line">        <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">idx</span>)</span>&#123;</span><br><span class="line">          <span class="keyword">this</span>[name] = funcArg(<span class="keyword">this</span>, value, idx, <span class="keyword">this</span>[name])</span><br><span class="line">        &#125;) :</span><br><span class="line">        (<span class="keyword">this</span>[<span class="number">0</span>] &amp;&amp; <span class="keyword">this</span>[<span class="number">0</span>][name])</span><br><span class="line">    &#125;,</span><br><span class="line">    removeProp: <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">      name = propMap[name] || name</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">delete</span> <span class="keyword">this</span>[name] &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    data: <span class="function"><span class="keyword">function</span>(<span class="params">name, value</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> attrName = <span class="string">'data-'</span> + name.replace(capitalRE, <span class="string">'-$1'</span>).toLowerCase()</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> data = (<span class="number">1</span> <span class="keyword">in</span> <span class="built_in">arguments</span>) ?</span><br><span class="line">        <span class="keyword">this</span>.attr(attrName, value) :</span><br><span class="line">        <span class="keyword">this</span>.attr(attrName)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> data !== <span class="literal">null</span> ? deserializeValue(data) : <span class="literal">undefined</span></span><br><span class="line">    &#125;,</span><br><span class="line">    val: <span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="number">0</span> <span class="keyword">in</span> <span class="built_in">arguments</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (value == <span class="literal">null</span>) value = <span class="string">""</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">idx</span>)</span>&#123;</span><br><span class="line">          <span class="keyword">this</span>.value = funcArg(<span class="keyword">this</span>, value, idx, <span class="keyword">this</span>.value)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>[<span class="number">0</span>] &amp;&amp; (<span class="keyword">this</span>[<span class="number">0</span>].multiple ?</span><br><span class="line">           $(<span class="keyword">this</span>[<span class="number">0</span>]).find(<span class="string">'option'</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>.selected &#125;).pluck(<span class="string">'value'</span>) :</span><br><span class="line">           <span class="keyword">this</span>[<span class="number">0</span>].value)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    offset: <span class="function"><span class="keyword">function</span>(<span class="params">coordinates</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (coordinates) <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">index</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> $<span class="keyword">this</span> = $(<span class="keyword">this</span>),</span><br><span class="line">            coords = funcArg(<span class="keyword">this</span>, coordinates, index, $<span class="keyword">this</span>.offset()),</span><br><span class="line">            parentOffset = $<span class="keyword">this</span>.offsetParent().offset(),</span><br><span class="line">            props = &#123;</span><br><span class="line">              top:  coords.top  - parentOffset.top,</span><br><span class="line">              left: coords.left - parentOffset.left</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ($<span class="keyword">this</span>.css(<span class="string">'position'</span>) == <span class="string">'static'</span>) props[<span class="string">'position'</span>] = <span class="string">'relative'</span></span><br><span class="line">        $<span class="keyword">this</span>.css(props)</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">if</span> (!<span class="keyword">this</span>.length) <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">document</span>.documentElement !== <span class="keyword">this</span>[<span class="number">0</span>] &amp;&amp; !$.contains(<span class="built_in">document</span>.documentElement, <span class="keyword">this</span>[<span class="number">0</span>]))</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="attr">top</span>: <span class="number">0</span>, <span class="attr">left</span>: <span class="number">0</span>&#125;</span><br><span class="line">      <span class="keyword">var</span> obj = <span class="keyword">this</span>[<span class="number">0</span>].getBoundingClientRect()</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        left: obj.left + <span class="built_in">window</span>.pageXOffset,</span><br><span class="line">        top: obj.top + <span class="built_in">window</span>.pageYOffset,</span><br><span class="line">        width: <span class="built_in">Math</span>.round(obj.width),</span><br><span class="line">        height: <span class="built_in">Math</span>.round(obj.height)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    css: <span class="function"><span class="keyword">function</span>(<span class="params">property, value</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">arguments</span>.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> element = <span class="keyword">this</span>[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> property == <span class="string">'string'</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (!element) <span class="keyword">return</span></span><br><span class="line">          <span class="keyword">return</span> element.style[camelize(property)] || getComputedStyle(element, <span class="string">''</span>).getPropertyValue(property)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isArray(property)) &#123;</span><br><span class="line">          <span class="keyword">if</span> (!element) <span class="keyword">return</span></span><br><span class="line">          <span class="keyword">var</span> props = &#123;&#125;</span><br><span class="line">          <span class="keyword">var</span> computedStyle = getComputedStyle(element, <span class="string">''</span>)</span><br><span class="line">          $.each(property, <span class="function"><span class="keyword">function</span>(<span class="params">_, prop</span>)</span>&#123;</span><br><span class="line">            props[prop] = (element.style[camelize(prop)] || computedStyle.getPropertyValue(prop))</span><br><span class="line">          &#125;)</span><br><span class="line">          <span class="keyword">return</span> props</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> css = <span class="string">''</span></span><br><span class="line">      <span class="keyword">if</span> (type(property) == <span class="string">'string'</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!value &amp;&amp; value !== <span class="number">0</span>)</span><br><span class="line">          <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">this</span>.style.removeProperty(dasherize(property)) &#125;)</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          css = dasherize(property) + <span class="string">":"</span> + maybeAddPx(property, value)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (key <span class="keyword">in</span> property)</span><br><span class="line">          <span class="keyword">if</span> (!property[key] &amp;&amp; property[key] !== <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">this</span>.style.removeProperty(dasherize(key)) &#125;)</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">            css += dasherize(key) + <span class="string">':'</span> + maybeAddPx(key, property[key]) + <span class="string">';'</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">this</span>.style.cssText += <span class="string">';'</span> + css &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    index: <span class="function"><span class="keyword">function</span>(<span class="params">element</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> element ? <span class="keyword">this</span>.indexOf($(element)[<span class="number">0</span>]) : <span class="keyword">this</span>.parent().children().indexOf(<span class="keyword">this</span>[<span class="number">0</span>])</span><br><span class="line">    &#125;,</span><br><span class="line">    hasClass: <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (!name) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">      <span class="keyword">return</span> emptyArray.some.call(<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span>(<span class="params">el</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.test(className(el))</span><br><span class="line">      &#125;, classRE(name))</span><br><span class="line">    &#125;,</span><br><span class="line">    addClass: <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (!name) <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">idx</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!(<span class="string">'className'</span> <span class="keyword">in</span> <span class="keyword">this</span>)) <span class="keyword">return</span></span><br><span class="line">        classList = []</span><br><span class="line">        <span class="keyword">var</span> cls = className(<span class="keyword">this</span>), newName = funcArg(<span class="keyword">this</span>, name, idx, cls)</span><br><span class="line">        newName.split(<span class="regexp">/\s+/g</span>).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">klass</span>)</span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (!$(<span class="keyword">this</span>).hasClass(klass)) classList.push(klass)</span><br><span class="line">        &#125;, <span class="keyword">this</span>)</span><br><span class="line">        classList.length &amp;&amp; className(<span class="keyword">this</span>, cls + (cls ? <span class="string">" "</span> : <span class="string">""</span>) + classList.join(<span class="string">" "</span>))</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    removeClass: <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">idx</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!(<span class="string">'className'</span> <span class="keyword">in</span> <span class="keyword">this</span>)) <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> (name === <span class="literal">undefined</span>) <span class="keyword">return</span> className(<span class="keyword">this</span>, <span class="string">''</span>)</span><br><span class="line">        classList = className(<span class="keyword">this</span>)</span><br><span class="line">        funcArg(<span class="keyword">this</span>, name, idx, classList).split(<span class="regexp">/\s+/g</span>).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">klass</span>)</span>&#123;</span><br><span class="line">          classList = classList.replace(classRE(klass), <span class="string">" "</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">        className(<span class="keyword">this</span>, classList.trim())</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    toggleClass: <span class="function"><span class="keyword">function</span>(<span class="params">name, when</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (!name) <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">idx</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> $<span class="keyword">this</span> = $(<span class="keyword">this</span>), names = funcArg(<span class="keyword">this</span>, name, idx, className(<span class="keyword">this</span>))</span><br><span class="line">        names.split(<span class="regexp">/\s+/g</span>).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">klass</span>)</span>&#123;</span><br><span class="line">          (when === <span class="literal">undefined</span> ? !$<span class="keyword">this</span>.hasClass(klass) : when) ?</span><br><span class="line">            $<span class="keyword">this</span>.addClass(klass) : $<span class="keyword">this</span>.removeClass(klass)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    scrollTop: <span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (!<span class="keyword">this</span>.length) <span class="keyword">return</span></span><br><span class="line">      <span class="keyword">var</span> hasScrollTop = <span class="string">'scrollTop'</span> <span class="keyword">in</span> <span class="keyword">this</span>[<span class="number">0</span>]</span><br><span class="line">      <span class="keyword">if</span> (value === <span class="literal">undefined</span>) <span class="keyword">return</span> hasScrollTop ? <span class="keyword">this</span>[<span class="number">0</span>].scrollTop : <span class="keyword">this</span>[<span class="number">0</span>].pageYOffset</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.each(hasScrollTop ?</span><br><span class="line">        <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">this</span>.scrollTop = value &#125; :</span><br><span class="line">        <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">this</span>.scrollTo(<span class="keyword">this</span>.scrollX, value) &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    scrollLeft: <span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (!<span class="keyword">this</span>.length) <span class="keyword">return</span></span><br><span class="line">      <span class="keyword">var</span> hasScrollLeft = <span class="string">'scrollLeft'</span> <span class="keyword">in</span> <span class="keyword">this</span>[<span class="number">0</span>]</span><br><span class="line">      <span class="keyword">if</span> (value === <span class="literal">undefined</span>) <span class="keyword">return</span> hasScrollLeft ? <span class="keyword">this</span>[<span class="number">0</span>].scrollLeft : <span class="keyword">this</span>[<span class="number">0</span>].pageXOffset</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.each(hasScrollLeft ?</span><br><span class="line">        <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">this</span>.scrollLeft = value &#125; :</span><br><span class="line">        <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">this</span>.scrollTo(value, <span class="keyword">this</span>.scrollY) &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    position: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (!<span class="keyword">this</span>.length) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> elem = <span class="keyword">this</span>[<span class="number">0</span>],</span><br><span class="line">        <span class="comment">// Get *real* offsetParent</span></span><br><span class="line">        offsetParent = <span class="keyword">this</span>.offsetParent(),</span><br><span class="line">        <span class="comment">// Get correct offsets</span></span><br><span class="line">        offset       = <span class="keyword">this</span>.offset(),</span><br><span class="line">        parentOffset = rootNodeRE.test(offsetParent[<span class="number">0</span>].nodeName) ? &#123; <span class="attr">top</span>: <span class="number">0</span>, <span class="attr">left</span>: <span class="number">0</span> &#125; : offsetParent.offset()</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Subtract element margins</span></span><br><span class="line">      <span class="comment">// note: when an element has margin: auto the offsetLeft and marginLeft</span></span><br><span class="line">      <span class="comment">// are the same in Safari causing offset.left to incorrectly be 0</span></span><br><span class="line">      offset.top  -= <span class="built_in">parseFloat</span>( $(elem).css(<span class="string">'margin-top'</span>) ) || <span class="number">0</span></span><br><span class="line">      offset.left -= <span class="built_in">parseFloat</span>( $(elem).css(<span class="string">'margin-left'</span>) ) || <span class="number">0</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// Add offsetParent borders</span></span><br><span class="line">      parentOffset.top  += <span class="built_in">parseFloat</span>( $(offsetParent[<span class="number">0</span>]).css(<span class="string">'border-top-width'</span>) ) || <span class="number">0</span></span><br><span class="line">      parentOffset.left += <span class="built_in">parseFloat</span>( $(offsetParent[<span class="number">0</span>]).css(<span class="string">'border-left-width'</span>) ) || <span class="number">0</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// Subtract the two offsets</span></span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        top:  offset.top  - parentOffset.top,</span><br><span class="line">        left: offset.left - parentOffset.left</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    offsetParent: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.map(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> parent = <span class="keyword">this</span>.offsetParent || <span class="built_in">document</span>.body</span><br><span class="line">        <span class="keyword">while</span> (parent &amp;&amp; !rootNodeRE.test(parent.nodeName) &amp;&amp; $(parent).css(<span class="string">"position"</span>) == <span class="string">"static"</span>)</span><br><span class="line">          parent = parent.offsetParent</span><br><span class="line">        <span class="keyword">return</span> parent</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// for now</span></span><br><span class="line">  $.fn.detach = $.fn.remove</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Generate the `width` and `height` functions</span></span><br><span class="line">  ;[<span class="string">'width'</span>, <span class="string">'height'</span>].forEach(<span class="function"><span class="keyword">function</span>(<span class="params">dimension</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> dimensionProperty =</span><br><span class="line">      dimension.replace(<span class="regexp">/./</span>, <span class="function"><span class="keyword">function</span>(<span class="params">m</span>)</span>&#123; <span class="keyword">return</span> m[<span class="number">0</span>].toUpperCase() &#125;)</span><br><span class="line"></span><br><span class="line">    $.fn[dimension] = <span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> offset, el = <span class="keyword">this</span>[<span class="number">0</span>]</span><br><span class="line">      <span class="keyword">if</span> (value === <span class="literal">undefined</span>) <span class="keyword">return</span> isWindow(el) ? el[<span class="string">'inner'</span> + dimensionProperty] :</span><br><span class="line">        isDocument(el) ? el.documentElement[<span class="string">'scroll'</span> + dimensionProperty] :</span><br><span class="line">        (offset = <span class="keyword">this</span>.offset()) &amp;&amp; offset[dimension]</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">idx</span>)</span>&#123;</span><br><span class="line">        el = $(<span class="keyword">this</span>)</span><br><span class="line">        el.css(dimension, funcArg(<span class="keyword">this</span>, value, idx, el[dimension]()))</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">traverseNode</span>(<span class="params">node, fun</span>) </span>&#123;</span><br><span class="line">    fun(node)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = node.childNodes.length; i &lt; len; i++)</span><br><span class="line">      traverseNode(node.childNodes[i], fun)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Generate the `after`, `prepend`, `before`, `append`,</span></span><br><span class="line">  <span class="comment">// `insertAfter`, `insertBefore`, `appendTo`, and `prependTo` methods.</span></span><br><span class="line">  adjacencyOperators.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">operator, operatorIndex</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> inside = operatorIndex % <span class="number">2</span> <span class="comment">//=&gt; prepend, append</span></span><br><span class="line"></span><br><span class="line">    $.fn[operator] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="comment">// arguments can be nodes, arrays of nodes, Zepto objects and HTML strings</span></span><br><span class="line">      <span class="keyword">var</span> argType, nodes = $.map(<span class="built_in">arguments</span>, <span class="function"><span class="keyword">function</span>(<span class="params">arg</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> arr = []</span><br><span class="line">            argType = type(arg)</span><br><span class="line">            <span class="keyword">if</span> (argType == <span class="string">"array"</span>) &#123;</span><br><span class="line">              arg.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">el</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (el.nodeType !== <span class="literal">undefined</span>) <span class="keyword">return</span> arr.push(el)</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ($.zepto.isZ(el)) <span class="keyword">return</span> arr = arr.concat(el.get())</span><br><span class="line">                arr = arr.concat(zepto.fragment(el))</span><br><span class="line">              &#125;)</span><br><span class="line">              <span class="keyword">return</span> arr</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> argType == <span class="string">"object"</span> || arg == <span class="literal">null</span> ?</span><br><span class="line">              arg : zepto.fragment(arg)</span><br><span class="line">          &#125;),</span><br><span class="line">          parent, copyByClone = <span class="keyword">this</span>.length &gt; <span class="number">1</span></span><br><span class="line">      <span class="keyword">if</span> (nodes.length &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">_, target</span>)</span>&#123;</span><br><span class="line">        parent = inside ? target : target.parentNode</span><br><span class="line"></span><br><span class="line">        <span class="comment">// convert all methods to a "before" operation</span></span><br><span class="line">        target = operatorIndex == <span class="number">0</span> ? target.nextSibling :</span><br><span class="line">                 operatorIndex == <span class="number">1</span> ? target.firstChild :</span><br><span class="line">                 operatorIndex == <span class="number">2</span> ? target :</span><br><span class="line">                 <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> parentInDocument = $.contains(<span class="built_in">document</span>.documentElement, parent)</span><br><span class="line"></span><br><span class="line">        nodes.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">node</span>)</span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (copyByClone) node = node.cloneNode(<span class="literal">true</span>)</span><br><span class="line">          <span class="keyword">else</span> <span class="keyword">if</span> (!parent) <span class="keyword">return</span> $(node).remove()</span><br><span class="line"></span><br><span class="line">          parent.insertBefore(node, target)</span><br><span class="line">          <span class="keyword">if</span> (parentInDocument) traverseNode(node, <span class="function"><span class="keyword">function</span>(<span class="params">el</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (el.nodeName != <span class="literal">null</span> &amp;&amp; el.nodeName.toUpperCase() === <span class="string">'SCRIPT'</span> &amp;&amp;</span><br><span class="line">               (!el.type || el.type === <span class="string">'text/javascript'</span>) &amp;&amp; !el.src)&#123;</span><br><span class="line">              <span class="keyword">var</span> target = el.ownerDocument ? el.ownerDocument.defaultView : <span class="built_in">window</span></span><br><span class="line">              target[<span class="string">'eval'</span>].call(target, el.innerHTML)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// after    =&gt; insertAfter</span></span><br><span class="line">    <span class="comment">// prepend  =&gt; prependTo</span></span><br><span class="line">    <span class="comment">// before   =&gt; insertBefore</span></span><br><span class="line">    <span class="comment">// append   =&gt; appendTo</span></span><br><span class="line">    $.fn[inside ? operator+<span class="string">'To'</span> : <span class="string">'insert'</span>+(operatorIndex ? <span class="string">'Before'</span> : <span class="string">'After'</span>)] = <span class="function"><span class="keyword">function</span>(<span class="params">html</span>)</span>&#123;</span><br><span class="line">      $(html)[operator](<span class="keyword">this</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  zepto.Z.prototype = Z.prototype = $.fn</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Export internal API functions in the `$.zepto` namespace</span></span><br><span class="line">  zepto.uniq = uniq</span><br><span class="line">  zepto.deserializeValue = deserializeValue</span><br><span class="line">  $.zepto = zepto</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> $</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.Zepto = Zepto</span><br><span class="line"><span class="built_in">window</span>.$ === <span class="literal">undefined</span> &amp;&amp; (<span class="built_in">window</span>.$ = Zepto)</span><br><span class="line"></span><br><span class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> _zid = <span class="number">1</span>, <span class="literal">undefined</span>,</span><br><span class="line">      slice = <span class="built_in">Array</span>.prototype.slice,</span><br><span class="line">      isFunction = $.isFunction,</span><br><span class="line">      isString = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123; <span class="keyword">return</span> <span class="keyword">typeof</span> obj == <span class="string">'string'</span> &#125;,</span><br><span class="line">      handlers = &#123;&#125;,</span><br><span class="line">      specialEvents=&#123;&#125;,</span><br><span class="line">      focusinSupported = <span class="string">'onfocusin'</span> <span class="keyword">in</span> <span class="built_in">window</span>,</span><br><span class="line">      focus = &#123; <span class="attr">focus</span>: <span class="string">'focusin'</span>, <span class="attr">blur</span>: <span class="string">'focusout'</span> &#125;,</span><br><span class="line">      hover = &#123; <span class="attr">mouseenter</span>: <span class="string">'mouseover'</span>, <span class="attr">mouseleave</span>: <span class="string">'mouseout'</span> &#125;</span><br><span class="line"></span><br><span class="line">  specialEvents.click = specialEvents.mousedown = specialEvents.mouseup = specialEvents.mousemove = <span class="string">'MouseEvents'</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">zid</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> element._zid || (element._zid = _zid++)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">findHandlers</span>(<span class="params">element, event, fn, selector</span>) </span>&#123;</span><br><span class="line">    event = parse(event)</span><br><span class="line">    <span class="keyword">if</span> (event.ns) <span class="keyword">var</span> matcher = matcherFor(event.ns)</span><br><span class="line">    <span class="keyword">return</span> (handlers[zid(element)] || []).filter(<span class="function"><span class="keyword">function</span>(<span class="params">handler</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> handler</span><br><span class="line">        &amp;&amp; (!event.e  || handler.e == event.e)</span><br><span class="line">        &amp;&amp; (!event.ns || matcher.test(handler.ns))</span><br><span class="line">        &amp;&amp; (!fn       || zid(handler.fn) === zid(fn))</span><br><span class="line">        &amp;&amp; (!selector || handler.sel == selector)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">parse</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> parts = (<span class="string">''</span> + event).split(<span class="string">'.'</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="attr">e</span>: parts[<span class="number">0</span>], <span class="attr">ns</span>: parts.slice(<span class="number">1</span>).sort().join(<span class="string">' '</span>)&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">matcherFor</span>(<span class="params">ns</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'(?:^| )'</span> + ns.replace(<span class="string">' '</span>, <span class="string">' .* ?'</span>) + <span class="string">'(?: |$)'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">eventCapture</span>(<span class="params">handler, captureSetting</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> handler.del &amp;&amp;</span><br><span class="line">      (!focusinSupported &amp;&amp; (handler.e <span class="keyword">in</span> focus)) ||</span><br><span class="line">      !!captureSetting</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">realEvent</span>(<span class="params">type</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> hover[type] || (focusinSupported &amp;&amp; focus[type]) || type</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">element, events, fn, data, selector, delegator, capture</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> id = zid(element), set = (handlers[id] || (handlers[id] = []))</span><br><span class="line">    events.split(<span class="regexp">/\s/</span>).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (event == <span class="string">'ready'</span>) <span class="keyword">return</span> $(<span class="built_in">document</span>).ready(fn)</span><br><span class="line">      <span class="keyword">var</span> handler   = parse(event)</span><br><span class="line">      handler.fn    = fn</span><br><span class="line">      handler.sel   = selector</span><br><span class="line">      <span class="comment">// emulate mouseenter, mouseleave</span></span><br><span class="line">      <span class="keyword">if</span> (handler.e <span class="keyword">in</span> hover) fn = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> related = e.relatedTarget</span><br><span class="line">        <span class="keyword">if</span> (!related || (related !== <span class="keyword">this</span> &amp;&amp; !$.contains(<span class="keyword">this</span>, related)))</span><br><span class="line">          <span class="keyword">return</span> handler.fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      handler.del   = delegator</span><br><span class="line">      <span class="keyword">var</span> callback  = delegator || fn</span><br><span class="line">      handler.proxy = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">        e = compatible(e)</span><br><span class="line">        <span class="keyword">if</span> (e.isImmediatePropagationStopped()) <span class="keyword">return</span></span><br><span class="line">        e.data = data</span><br><span class="line">        <span class="keyword">var</span> result = callback.apply(element, e._args == <span class="literal">undefined</span> ? [e] : [e].concat(e._args))</span><br><span class="line">        <span class="keyword">if</span> (result === <span class="literal">false</span>) e.preventDefault(), e.stopPropagation()</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">      &#125;</span><br><span class="line">      handler.i = set.length</span><br><span class="line">      set.push(handler)</span><br><span class="line">      <span class="keyword">if</span> (<span class="string">'addEventListener'</span> <span class="keyword">in</span> element)</span><br><span class="line">        element.addEventListener(realEvent(handler.e), handler.proxy, eventCapture(handler, capture))</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">remove</span>(<span class="params">element, events, fn, selector, capture</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> id = zid(element)</span><br><span class="line">    ;(events || <span class="string">''</span>).split(<span class="regexp">/\s/</span>).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">      findHandlers(element, event, fn, selector).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">handler</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">delete</span> handlers[id][handler.i]</span><br><span class="line">      <span class="keyword">if</span> (<span class="string">'removeEventListener'</span> <span class="keyword">in</span> element)</span><br><span class="line">        element.removeEventListener(realEvent(handler.e), handler.proxy, eventCapture(handler, capture))</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  $.event = &#123; <span class="attr">add</span>: add, <span class="attr">remove</span>: remove &#125;</span><br><span class="line"></span><br><span class="line">  $.proxy = <span class="function"><span class="keyword">function</span>(<span class="params">fn, context</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> args = (<span class="number">2</span> <span class="keyword">in</span> <span class="built_in">arguments</span>) &amp;&amp; slice.call(<span class="built_in">arguments</span>, <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">if</span> (isFunction(fn)) &#123;</span><br><span class="line">      <span class="keyword">var</span> proxyFn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> fn.apply(context, args ? args.concat(slice.call(<span class="built_in">arguments</span>)) : <span class="built_in">arguments</span>) &#125;</span><br><span class="line">      proxyFn._zid = zid(fn)</span><br><span class="line">      <span class="keyword">return</span> proxyFn</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isString(context)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (args) &#123;</span><br><span class="line">        args.unshift(fn[context], fn)</span><br><span class="line">        <span class="keyword">return</span> $.proxy.apply(<span class="literal">null</span>, args)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> $.proxy(fn[context], fn)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">"expected function"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  $.fn.bind = <span class="function"><span class="keyword">function</span>(<span class="params">event, data, callback</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.on(event, data, callback)</span><br><span class="line">  &#125;</span><br><span class="line">  $.fn.unbind = <span class="function"><span class="keyword">function</span>(<span class="params">event, callback</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.off(event, callback)</span><br><span class="line">  &#125;</span><br><span class="line">  $.fn.one = <span class="function"><span class="keyword">function</span>(<span class="params">event, selector, data, callback</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.on(event, selector, data, callback, <span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> returnTrue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="literal">true</span>&#125;,</span><br><span class="line">      returnFalse = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="literal">false</span>&#125;,</span><br><span class="line">      ignoreProperties = <span class="regexp">/^([A-Z]|returnValue$|layer[XY]$|webkitMovement[XY]$)/</span>,</span><br><span class="line">      eventMethods = &#123;</span><br><span class="line">        preventDefault: <span class="string">'isDefaultPrevented'</span>,</span><br><span class="line">        stopImmediatePropagation: <span class="string">'isImmediatePropagationStopped'</span>,</span><br><span class="line">        stopPropagation: <span class="string">'isPropagationStopped'</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">compatible</span>(<span class="params">event, source</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (source || !event.isDefaultPrevented) &#123;</span><br><span class="line">      source || (source = event)</span><br><span class="line"></span><br><span class="line">      $.each(eventMethods, <span class="function"><span class="keyword">function</span>(<span class="params">name, predicate</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> sourceMethod = source[name]</span><br><span class="line">        event[name] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          <span class="keyword">this</span>[predicate] = returnTrue</span><br><span class="line">          <span class="keyword">return</span> sourceMethod &amp;&amp; sourceMethod.apply(source, <span class="built_in">arguments</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        event[predicate] = returnFalse</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      event.timeStamp || (event.timeStamp = <span class="built_in">Date</span>.now())</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (source.defaultPrevented !== <span class="literal">undefined</span> ? source.defaultPrevented :</span><br><span class="line">          <span class="string">'returnValue'</span> <span class="keyword">in</span> source ? source.returnValue === <span class="literal">false</span> :</span><br><span class="line">          source.getPreventDefault &amp;&amp; source.getPreventDefault())</span><br><span class="line">        event.isDefaultPrevented = returnTrue</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> event</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">createProxy</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> key, proxy = &#123; <span class="attr">originalEvent</span>: event &#125;</span><br><span class="line">    <span class="keyword">for</span> (key <span class="keyword">in</span> event)</span><br><span class="line">      <span class="keyword">if</span> (!ignoreProperties.test(key) &amp;&amp; event[key] !== <span class="literal">undefined</span>) proxy[key] = event[key]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> compatible(proxy, event)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  $.fn.delegate = <span class="function"><span class="keyword">function</span>(<span class="params">selector, event, callback</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.on(event, selector, callback)</span><br><span class="line">  &#125;</span><br><span class="line">  $.fn.undelegate = <span class="function"><span class="keyword">function</span>(<span class="params">selector, event, callback</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.off(event, selector, callback)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  $.fn.live = <span class="function"><span class="keyword">function</span>(<span class="params">event, callback</span>)</span>&#123;</span><br><span class="line">    $(<span class="built_in">document</span>.body).delegate(<span class="keyword">this</span>.selector, event, callback)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">  &#125;</span><br><span class="line">  $.fn.die = <span class="function"><span class="keyword">function</span>(<span class="params">event, callback</span>)</span>&#123;</span><br><span class="line">    $(<span class="built_in">document</span>.body).undelegate(<span class="keyword">this</span>.selector, event, callback)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  $.fn.on = <span class="function"><span class="keyword">function</span>(<span class="params">event, selector, data, callback, one</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> autoRemove, delegator, $<span class="keyword">this</span> = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">if</span> (event &amp;&amp; !isString(event)) &#123;</span><br><span class="line">      $.each(event, <span class="function"><span class="keyword">function</span>(<span class="params">type, fn</span>)</span>&#123;</span><br><span class="line">        $<span class="keyword">this</span>.on(type, selector, data, fn, one)</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">return</span> $<span class="keyword">this</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!isString(selector) &amp;&amp; !isFunction(callback) &amp;&amp; callback !== <span class="literal">false</span>)</span><br><span class="line">      callback = data, data = selector, selector = <span class="literal">undefined</span></span><br><span class="line">    <span class="keyword">if</span> (callback === <span class="literal">undefined</span> || data === <span class="literal">false</span>)</span><br><span class="line">      callback = data, data = <span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (callback === <span class="literal">false</span>) callback = returnFalse</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $<span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">_, element</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (one) autoRemove = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">        remove(element, e.type, callback)</span><br><span class="line">        <span class="keyword">return</span> callback.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (selector) delegator = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> evt, match = $(e.target).closest(selector, element).get(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">if</span> (match &amp;&amp; match !== element) &#123;</span><br><span class="line">          evt = $.extend(createProxy(e), &#123;<span class="attr">currentTarget</span>: match, <span class="attr">liveFired</span>: element&#125;)</span><br><span class="line">          <span class="keyword">return</span> (autoRemove || callback).apply(match, [evt].concat(slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>)))</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      add(element, event, callback, data, selector, delegator || autoRemove)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  $.fn.off = <span class="function"><span class="keyword">function</span>(<span class="params">event, selector, callback</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $<span class="keyword">this</span> = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">if</span> (event &amp;&amp; !isString(event)) &#123;</span><br><span class="line">      $.each(event, <span class="function"><span class="keyword">function</span>(<span class="params">type, fn</span>)</span>&#123;</span><br><span class="line">        $<span class="keyword">this</span>.off(type, selector, fn)</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">return</span> $<span class="keyword">this</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!isString(selector) &amp;&amp; !isFunction(callback) &amp;&amp; callback !== <span class="literal">false</span>)</span><br><span class="line">      callback = selector, selector = <span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (callback === <span class="literal">false</span>) callback = returnFalse</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $<span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      remove(<span class="keyword">this</span>, event, callback, selector)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  $.fn.trigger = <span class="function"><span class="keyword">function</span>(<span class="params">event, args</span>)</span>&#123;</span><br><span class="line">    event = (isString(event) || $.isPlainObject(event)) ? $.Event(event) : compatible(event)</span><br><span class="line">    event._args = args</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="comment">// handle focus(), blur() by calling them directly</span></span><br><span class="line">      <span class="keyword">if</span> (event.type <span class="keyword">in</span> focus &amp;&amp; <span class="keyword">typeof</span> <span class="keyword">this</span>[event.type] == <span class="string">"function"</span>) <span class="keyword">this</span>[event.type]()</span><br><span class="line">      <span class="comment">// items in the collection might not be DOM elements</span></span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">'dispatchEvent'</span> <span class="keyword">in</span> <span class="keyword">this</span>) <span class="keyword">this</span>.dispatchEvent(event)</span><br><span class="line">      <span class="keyword">else</span> $(<span class="keyword">this</span>).triggerHandler(event, args)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// triggers event handlers on current element just as if an event occurred,</span></span><br><span class="line">  <span class="comment">// doesn't trigger an actual event, doesn't bubble</span></span><br><span class="line">  $.fn.triggerHandler = <span class="function"><span class="keyword">function</span>(<span class="params">event, args</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> e, result</span><br><span class="line">    <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">i, element</span>)</span>&#123;</span><br><span class="line">      e = createProxy(isString(event) ? $.Event(event) : event)</span><br><span class="line">      e._args = args</span><br><span class="line">      e.target = element</span><br><span class="line">      $.each(findHandlers(element, event.type || event), <span class="function"><span class="keyword">function</span>(<span class="params">i, handler</span>)</span>&#123;</span><br><span class="line">        result = handler.proxy(e)</span><br><span class="line">        <span class="keyword">if</span> (e.isImmediatePropagationStopped()) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// shortcut methods for `.bind(event, fn)` for each event type</span></span><br><span class="line">  ;(<span class="string">'focusin focusout focus blur load resize scroll unload click dblclick '</span>+</span><br><span class="line">  <span class="string">'mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave '</span>+</span><br><span class="line">  <span class="string">'change select keydown keypress keyup error'</span>).split(<span class="string">' '</span>).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    $.fn[event] = <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> (<span class="number">0</span> <span class="keyword">in</span> <span class="built_in">arguments</span>) ?</span><br><span class="line">        <span class="keyword">this</span>.bind(event, callback) :</span><br><span class="line">        <span class="keyword">this</span>.trigger(event)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  $.Event = <span class="function"><span class="keyword">function</span>(<span class="params">type, props</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!isString(type)) props = type, type = props.type</span><br><span class="line">    <span class="keyword">var</span> event = <span class="built_in">document</span>.createEvent(specialEvents[type] || <span class="string">'Events'</span>), bubbles = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">if</span> (props) <span class="keyword">for</span> (<span class="keyword">var</span> name <span class="keyword">in</span> props) (name == <span class="string">'bubbles'</span>) ? (bubbles = !!props[name]) : (event[name] = props[name])</span><br><span class="line">    event.initEvent(type, bubbles, <span class="literal">true</span>)</span><br><span class="line">    <span class="keyword">return</span> compatible(event)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;)(Zepto)</span><br><span class="line"></span><br><span class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> jsonpID = +<span class="keyword">new</span> <span class="built_in">Date</span>(),</span><br><span class="line">      <span class="built_in">document</span> = <span class="built_in">window</span>.document,</span><br><span class="line">      key,</span><br><span class="line">      name,</span><br><span class="line">      rscript = <span class="regexp">/&lt;script\b[^&lt;]*(?:(?!&lt;\/script&gt;)&lt;[^&lt;]*)*&lt;\/script&gt;/gi</span>,</span><br><span class="line">      scriptTypeRE = <span class="regexp">/^(?:text|application)\/javascript/i</span>,</span><br><span class="line">      xmlTypeRE = <span class="regexp">/^(?:text|application)\/xml/i</span>,</span><br><span class="line">      jsonType = <span class="string">'application/json'</span>,</span><br><span class="line">      htmlType = <span class="string">'text/html'</span>,</span><br><span class="line">      blankRE = <span class="regexp">/^\s*$/</span>,</span><br><span class="line">      originAnchor = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>)</span><br><span class="line"></span><br><span class="line">  originAnchor.href = <span class="built_in">window</span>.location.href</span><br><span class="line"></span><br><span class="line">  <span class="comment">// trigger a custom event and return false if it was cancelled</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">triggerAndReturn</span>(<span class="params">context, eventName, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> event = $.Event(eventName)</span><br><span class="line">    $(context).trigger(event, data)</span><br><span class="line">    <span class="keyword">return</span> !event.isDefaultPrevented()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// trigger an Ajax "global" event</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">triggerGlobal</span>(<span class="params">settings, context, eventName, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (settings.global) <span class="keyword">return</span> triggerAndReturn(context || <span class="built_in">document</span>, eventName, data)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Number of active Ajax requests</span></span><br><span class="line">  $.active = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">ajaxStart</span>(<span class="params">settings</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (settings.global &amp;&amp; $.active++ === <span class="number">0</span>) triggerGlobal(settings, <span class="literal">null</span>, <span class="string">'ajaxStart'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">ajaxStop</span>(<span class="params">settings</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (settings.global &amp;&amp; !(--$.active)) triggerGlobal(settings, <span class="literal">null</span>, <span class="string">'ajaxStop'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// triggers an extra global event "ajaxBeforeSend" that's like "ajaxSend" but cancelable</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">ajaxBeforeSend</span>(<span class="params">xhr, settings</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> context = settings.context</span><br><span class="line">    <span class="keyword">if</span> (settings.beforeSend.call(context, xhr, settings) === <span class="literal">false</span> ||</span><br><span class="line">        triggerGlobal(settings, context, <span class="string">'ajaxBeforeSend'</span>, [xhr, settings]) === <span class="literal">false</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    triggerGlobal(settings, context, <span class="string">'ajaxSend'</span>, [xhr, settings])</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">ajaxSuccess</span>(<span class="params">data, xhr, settings, deferred</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> context = settings.context, status = <span class="string">'success'</span></span><br><span class="line">    settings.success.call(context, data, status, xhr)</span><br><span class="line">    <span class="keyword">if</span> (deferred) deferred.resolveWith(context, [data, status, xhr])</span><br><span class="line">    triggerGlobal(settings, context, <span class="string">'ajaxSuccess'</span>, [xhr, settings, data])</span><br><span class="line">    ajaxComplete(status, xhr, settings)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// type: "timeout", "error", "abort", "parsererror"</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">ajaxError</span>(<span class="params">error, type, xhr, settings, deferred</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> context = settings.context</span><br><span class="line">    settings.error.call(context, xhr, type, error)</span><br><span class="line">    <span class="keyword">if</span> (deferred) deferred.rejectWith(context, [xhr, type, error])</span><br><span class="line">    triggerGlobal(settings, context, <span class="string">'ajaxError'</span>, [xhr, settings, error || type])</span><br><span class="line">    ajaxComplete(type, xhr, settings)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// status: "success", "notmodified", "error", "timeout", "abort", "parsererror"</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">ajaxComplete</span>(<span class="params">status, xhr, settings</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> context = settings.context</span><br><span class="line">    settings.complete.call(context, xhr, status)</span><br><span class="line">    triggerGlobal(settings, context, <span class="string">'ajaxComplete'</span>, [xhr, settings])</span><br><span class="line">    ajaxStop(settings)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">ajaxDataFilter</span>(<span class="params">data, type, settings</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (settings.dataFilter == empty) <span class="keyword">return</span> data</span><br><span class="line">    <span class="keyword">var</span> context = settings.context</span><br><span class="line">    <span class="keyword">return</span> settings.dataFilter.call(context, data, type)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Empty function, used as default callback</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">empty</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">  $.ajaxJSONP = <span class="function"><span class="keyword">function</span>(<span class="params">options, deferred</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!(<span class="string">'type'</span> <span class="keyword">in</span> options)) <span class="keyword">return</span> $.ajax(options)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> _callbackName = options.jsonpCallback,</span><br><span class="line">      callbackName = ($.isFunction(_callbackName) ?</span><br><span class="line">        _callbackName() : _callbackName) || (<span class="string">'Zepto'</span> + (jsonpID++)),</span><br><span class="line">      script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>),</span><br><span class="line">      originalCallback = <span class="built_in">window</span>[callbackName],</span><br><span class="line">      responseData,</span><br><span class="line">      abort = <span class="function"><span class="keyword">function</span>(<span class="params">errorType</span>) </span>&#123;</span><br><span class="line">        $(script).triggerHandler(<span class="string">'error'</span>, errorType || <span class="string">'abort'</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      xhr = &#123; <span class="attr">abort</span>: abort &#125;, abortTimeout</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (deferred) deferred.promise(xhr)</span><br><span class="line"></span><br><span class="line">    $(script).on(<span class="string">'load error'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e, errorType</span>)</span>&#123;</span><br><span class="line">      clearTimeout(abortTimeout)</span><br><span class="line">      $(script).off().remove()</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (e.type == <span class="string">'error'</span> || !responseData) &#123;</span><br><span class="line">        ajaxError(<span class="literal">null</span>, errorType || <span class="string">'error'</span>, xhr, options, deferred)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ajaxSuccess(responseData[<span class="number">0</span>], xhr, options, deferred)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="built_in">window</span>[callbackName] = originalCallback</span><br><span class="line">      <span class="keyword">if</span> (responseData &amp;&amp; $.isFunction(originalCallback))</span><br><span class="line">        originalCallback(responseData[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">      originalCallback = responseData = <span class="literal">undefined</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ajaxBeforeSend(xhr, options) === <span class="literal">false</span>) &#123;</span><br><span class="line">      abort(<span class="string">'abort'</span>)</span><br><span class="line">      <span class="keyword">return</span> xhr</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">window</span>[callbackName] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      responseData = <span class="built_in">arguments</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    script.src = options.url.replace(<span class="regexp">/\?(.+)=\?/</span>, <span class="string">'?$1='</span> + callbackName)</span><br><span class="line">    <span class="built_in">document</span>.head.appendChild(script)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (options.timeout &gt; <span class="number">0</span>) abortTimeout = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      abort(<span class="string">'timeout'</span>)</span><br><span class="line">    &#125;, options.timeout)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> xhr</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  $.ajaxSettings = &#123;</span><br><span class="line">    <span class="comment">// Default type of request</span></span><br><span class="line">    type: <span class="string">'GET'</span>,</span><br><span class="line">    <span class="comment">// Callback that is executed before request</span></span><br><span class="line">    beforeSend: empty,</span><br><span class="line">    <span class="comment">// Callback that is executed if the request succeeds</span></span><br><span class="line">    success: empty,</span><br><span class="line">    <span class="comment">// Callback that is executed the the server drops error</span></span><br><span class="line">    error: empty,</span><br><span class="line">    <span class="comment">// Callback that is executed on request complete (both: error and success)</span></span><br><span class="line">    complete: empty,</span><br><span class="line">    <span class="comment">// The context for the callbacks</span></span><br><span class="line">    context: <span class="literal">null</span>,</span><br><span class="line">    <span class="comment">// Whether to trigger "global" Ajax events</span></span><br><span class="line">    global: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// Transport</span></span><br><span class="line">    xhr: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">window</span>.XMLHttpRequest()</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// MIME types mapping</span></span><br><span class="line">    <span class="comment">// IIS returns Javascript as "application/x-javascript"</span></span><br><span class="line">    accepts: &#123;</span><br><span class="line">      script: <span class="string">'text/javascript, application/javascript, application/x-javascript'</span>,</span><br><span class="line">      json:   jsonType,</span><br><span class="line">      xml:    <span class="string">'application/xml, text/xml'</span>,</span><br><span class="line">      html:   htmlType,</span><br><span class="line">      text:   <span class="string">'text/plain'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// Whether the request is to another domain</span></span><br><span class="line">    crossDomain: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// Default timeout</span></span><br><span class="line">    timeout: <span class="number">0</span>,</span><br><span class="line">    <span class="comment">// Whether data should be serialized to string</span></span><br><span class="line">    processData: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// Whether the browser should be allowed to cache GET responses</span></span><br><span class="line">    cache: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">//Used to handle the raw response data of XMLHttpRequest.</span></span><br><span class="line">    <span class="comment">//This is a pre-filtering function to sanitize the response.</span></span><br><span class="line">    <span class="comment">//The sanitized response should be returned</span></span><br><span class="line">    dataFilter: empty</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">mimeToDataType</span>(<span class="params">mime</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mime) mime = mime.split(<span class="string">';'</span>, <span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> mime &amp;&amp; ( mime == htmlType ? <span class="string">'html'</span> :</span><br><span class="line">      mime == jsonType ? <span class="string">'json'</span> :</span><br><span class="line">      scriptTypeRE.test(mime) ? <span class="string">'script'</span> :</span><br><span class="line">      xmlTypeRE.test(mime) &amp;&amp; <span class="string">'xml'</span> ) || <span class="string">'text'</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">appendQuery</span>(<span class="params">url, query</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (query == <span class="string">''</span>) <span class="keyword">return</span> url</span><br><span class="line">    <span class="keyword">return</span> (url + <span class="string">'&amp;'</span> + query).replace(<span class="regexp">/[&amp;?]&#123;1,2&#125;/</span>, <span class="string">'?'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// serialize payload and append it to the URL for GET requests</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">serializeData</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (options.processData &amp;&amp; options.data &amp;&amp; $.type(options.data) != <span class="string">"string"</span>)</span><br><span class="line">      options.data = $.param(options.data, options.traditional)</span><br><span class="line">    <span class="keyword">if</span> (options.data &amp;&amp; (!options.type || options.type.toUpperCase() == <span class="string">'GET'</span> || <span class="string">'jsonp'</span> == options.dataType))</span><br><span class="line">      options.url = appendQuery(options.url, options.data), options.data = <span class="literal">undefined</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  $.ajax = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> settings = $.extend(&#123;&#125;, options || &#123;&#125;),</span><br><span class="line">        deferred = $.Deferred &amp;&amp; $.Deferred(),</span><br><span class="line">        urlAnchor, hashIndex</span><br><span class="line">    <span class="keyword">for</span> (key <span class="keyword">in</span> $.ajaxSettings) <span class="keyword">if</span> (settings[key] === <span class="literal">undefined</span>) settings[key] = $.ajaxSettings[key]</span><br><span class="line"></span><br><span class="line">    ajaxStart(settings)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!settings.crossDomain) &#123;</span><br><span class="line">      urlAnchor = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>)</span><br><span class="line">      urlAnchor.href = settings.url</span><br><span class="line">      <span class="comment">// cleans up URL for .href (IE only), see https://github.com/madrobby/zepto/pull/1049</span></span><br><span class="line">      urlAnchor.href = urlAnchor.href</span><br><span class="line">      settings.crossDomain = (originAnchor.protocol + <span class="string">'//'</span> + originAnchor.host) !== (urlAnchor.protocol + <span class="string">'//'</span> + urlAnchor.host)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!settings.url) settings.url = <span class="built_in">window</span>.location.toString()</span><br><span class="line">    <span class="keyword">if</span> ((hashIndex = settings.url.indexOf(<span class="string">'#'</span>)) &gt; <span class="number">-1</span>) settings.url = settings.url.slice(<span class="number">0</span>, hashIndex)</span><br><span class="line">    serializeData(settings)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> dataType = settings.dataType, hasPlaceholder = <span class="regexp">/\?.+=\?/</span>.test(settings.url)</span><br><span class="line">    <span class="keyword">if</span> (hasPlaceholder) dataType = <span class="string">'jsonp'</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (settings.cache === <span class="literal">false</span> || (</span><br><span class="line">         (!options || options.cache !== <span class="literal">true</span>) &amp;&amp;</span><br><span class="line">         (<span class="string">'script'</span> == dataType || <span class="string">'jsonp'</span> == dataType)</span><br><span class="line">        ))</span><br><span class="line">      settings.url = appendQuery(settings.url, <span class="string">'_='</span> + <span class="built_in">Date</span>.now())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">'jsonp'</span> == dataType) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!hasPlaceholder)</span><br><span class="line">        settings.url = appendQuery(settings.url,</span><br><span class="line">          settings.jsonp ? (settings.jsonp + <span class="string">'=?'</span>) : settings.jsonp === <span class="literal">false</span> ? <span class="string">''</span> : <span class="string">'callback=?'</span>)</span><br><span class="line">      <span class="keyword">return</span> $.ajaxJSONP(settings, deferred)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> mime = settings.accepts[dataType],</span><br><span class="line">        headers = &#123; &#125;,</span><br><span class="line">        setHeader = <span class="function"><span class="keyword">function</span>(<span class="params">name, value</span>) </span>&#123; headers[name.toLowerCase()] = [name, value] &#125;,</span><br><span class="line">        protocol = <span class="regexp">/^([\w-]+:)\/\//</span>.test(settings.url) ? <span class="built_in">RegExp</span>.$<span class="number">1</span> : <span class="built_in">window</span>.location.protocol,</span><br><span class="line">        xhr = settings.xhr(),</span><br><span class="line">        nativeSetHeader = xhr.setRequestHeader,</span><br><span class="line">        abortTimeout</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (deferred) deferred.promise(xhr)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!settings.crossDomain) setHeader(<span class="string">'X-Requested-With'</span>, <span class="string">'XMLHttpRequest'</span>)</span><br><span class="line">    setHeader(<span class="string">'Accept'</span>, mime || <span class="string">'*/*'</span>)</span><br><span class="line">    <span class="keyword">if</span> (mime = settings.mimeType || mime) &#123;</span><br><span class="line">      <span class="keyword">if</span> (mime.indexOf(<span class="string">','</span>) &gt; <span class="number">-1</span>) mime = mime.split(<span class="string">','</span>, <span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line">      xhr.overrideMimeType &amp;&amp; xhr.overrideMimeType(mime)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (settings.contentType || (settings.contentType !== <span class="literal">false</span> &amp;&amp; settings.data &amp;&amp; settings.type.toUpperCase() != <span class="string">'GET'</span>))</span><br><span class="line">      setHeader(<span class="string">'Content-Type'</span>, settings.contentType || <span class="string">'application/x-www-form-urlencoded'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (settings.headers) <span class="keyword">for</span> (name <span class="keyword">in</span> settings.headers) setHeader(name, settings.headers[name])</span><br><span class="line">    xhr.setRequestHeader = setHeader</span><br><span class="line"></span><br><span class="line">    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span>) &#123;</span><br><span class="line">        xhr.onreadystatechange = empty</span><br><span class="line">        clearTimeout(abortTimeout)</span><br><span class="line">        <span class="keyword">var</span> result, error = <span class="literal">false</span></span><br><span class="line">        <span class="keyword">if</span> ((xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>) || xhr.status == <span class="number">304</span> || (xhr.status == <span class="number">0</span> &amp;&amp; protocol == <span class="string">'file:'</span>)) &#123;</span><br><span class="line">          dataType = dataType || mimeToDataType(settings.mimeType || xhr.getResponseHeader(<span class="string">'content-type'</span>))</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (xhr.responseType == <span class="string">'arraybuffer'</span> || xhr.responseType == <span class="string">'blob'</span>)</span><br><span class="line">            result = xhr.response</span><br><span class="line">          <span class="keyword">else</span> &#123;</span><br><span class="line">            result = xhr.responseText</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">              <span class="comment">// http://perfectionkills.com/global-eval-what-are-the-options/</span></span><br><span class="line">              <span class="comment">// sanitize response accordingly if data filter callback provided</span></span><br><span class="line">              result = ajaxDataFilter(result, dataType, settings)</span><br><span class="line">              <span class="keyword">if</span> (dataType == <span class="string">'script'</span>)    (<span class="number">1</span>,<span class="built_in">eval</span>)(result)</span><br><span class="line">              <span class="keyword">else</span> <span class="keyword">if</span> (dataType == <span class="string">'xml'</span>)  result = xhr.responseXML</span><br><span class="line">              <span class="keyword">else</span> <span class="keyword">if</span> (dataType == <span class="string">'json'</span>) result = blankRE.test(result) ? <span class="literal">null</span> : $.parseJSON(result)</span><br><span class="line">            &#125; <span class="keyword">catch</span> (e) &#123; error = e &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (error) <span class="keyword">return</span> ajaxError(error, <span class="string">'parsererror'</span>, xhr, settings, deferred)</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          ajaxSuccess(result, xhr, settings, deferred)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          ajaxError(xhr.statusText || <span class="literal">null</span>, xhr.status ? <span class="string">'error'</span> : <span class="string">'abort'</span>, xhr, settings, deferred)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ajaxBeforeSend(xhr, settings) === <span class="literal">false</span>) &#123;</span><br><span class="line">      xhr.abort()</span><br><span class="line">      ajaxError(<span class="literal">null</span>, <span class="string">'abort'</span>, xhr, settings, deferred)</span><br><span class="line">      <span class="keyword">return</span> xhr</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> <span class="keyword">async</span> = <span class="string">'async'</span> <span class="keyword">in</span> settings ? settings.async : <span class="literal">true</span></span><br><span class="line">    xhr.open(settings.type, settings.url, <span class="keyword">async</span>, settings.username, settings.password)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (settings.xhrFields) <span class="keyword">for</span> (name <span class="keyword">in</span> settings.xhrFields) xhr[name] = settings.xhrFields[name]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (name <span class="keyword">in</span> headers) nativeSetHeader.apply(xhr, headers[name])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (settings.timeout &gt; <span class="number">0</span>) abortTimeout = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        xhr.onreadystatechange = empty</span><br><span class="line">        xhr.abort()</span><br><span class="line">        ajaxError(<span class="literal">null</span>, <span class="string">'timeout'</span>, xhr, settings, deferred)</span><br><span class="line">      &#125;, settings.timeout)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// avoid sending empty string (#319)</span></span><br><span class="line">    xhr.send(settings.data ? settings.data : <span class="literal">null</span>)</span><br><span class="line">    <span class="keyword">return</span> xhr</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// handle optional data/success arguments</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">parseArguments</span>(<span class="params">url, data, success, dataType</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ($.isFunction(data)) dataType = success, success = data, data = <span class="literal">undefined</span></span><br><span class="line">    <span class="keyword">if</span> (!$.isFunction(success)) dataType = success, success = <span class="literal">undefined</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      url: url</span><br><span class="line">    , <span class="attr">data</span>: data</span><br><span class="line">    , <span class="attr">success</span>: success</span><br><span class="line">    , <span class="attr">dataType</span>: dataType</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  $.get = <span class="function"><span class="keyword">function</span>(<span class="params"><span class="regexp">/* url, data, success, dataType */</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $.ajax(parseArguments.apply(<span class="literal">null</span>, <span class="built_in">arguments</span>))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  $.post = <span class="function"><span class="keyword">function</span>(<span class="params"><span class="regexp">/* url, data, success, dataType */</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> options = parseArguments.apply(<span class="literal">null</span>, <span class="built_in">arguments</span>)</span><br><span class="line">    options.type = <span class="string">'POST'</span></span><br><span class="line">    <span class="keyword">return</span> $.ajax(options)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  $.getJSON = <span class="function"><span class="keyword">function</span>(<span class="params"><span class="regexp">/* url, data, success */</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> options = parseArguments.apply(<span class="literal">null</span>, <span class="built_in">arguments</span>)</span><br><span class="line">    options.dataType = <span class="string">'json'</span></span><br><span class="line">    <span class="keyword">return</span> $.ajax(options)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  $.fn.load = <span class="function"><span class="keyword">function</span>(<span class="params">url, data, success</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.length) <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>, parts = url.split(<span class="regexp">/\s/</span>), selector,</span><br><span class="line">        options = parseArguments(url, data, success),</span><br><span class="line">        callback = options.success</span><br><span class="line">    <span class="keyword">if</span> (parts.length &gt; <span class="number">1</span>) options.url = parts[<span class="number">0</span>], selector = parts[<span class="number">1</span>]</span><br><span class="line">    options.success = <span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</span><br><span class="line">      self.html(selector ?</span><br><span class="line">        $(<span class="string">'&lt;div&gt;'</span>).html(response.replace(rscript, <span class="string">""</span>)).find(selector)</span><br><span class="line">        : response)</span><br><span class="line">      callback &amp;&amp; callback.apply(self, <span class="built_in">arguments</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    $.ajax(options)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> <span class="built_in">escape</span> = <span class="built_in">encodeURIComponent</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">serialize</span>(<span class="params">params, obj, traditional, scope</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> type, array = $.isArray(obj), hash = $.isPlainObject(obj)</span><br><span class="line">    $.each(obj, <span class="function"><span class="keyword">function</span>(<span class="params">key, value</span>) </span>&#123;</span><br><span class="line">      type = $.type(value)</span><br><span class="line">      <span class="keyword">if</span> (scope) key = traditional ? scope :</span><br><span class="line">        scope + <span class="string">'['</span> + (hash || type == <span class="string">'object'</span> || type == <span class="string">'array'</span> ? key : <span class="string">''</span>) + <span class="string">']'</span></span><br><span class="line">      <span class="comment">// handle data in serializeArray() format</span></span><br><span class="line">      <span class="keyword">if</span> (!scope &amp;&amp; array) params.add(value.name, value.value)</span><br><span class="line">      <span class="comment">// recurse into nested objects</span></span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="string">"array"</span> || (!traditional &amp;&amp; type == <span class="string">"object"</span>))</span><br><span class="line">        serialize(params, value, traditional, key)</span><br><span class="line">      <span class="keyword">else</span> params.add(key, value)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  $.param = <span class="function"><span class="keyword">function</span>(<span class="params">obj, traditional</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> params = []</span><br><span class="line">    params.add = <span class="function"><span class="keyword">function</span>(<span class="params">key, value</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> ($.isFunction(value)) value = value()</span><br><span class="line">      <span class="keyword">if</span> (value == <span class="literal">null</span>) value = <span class="string">""</span></span><br><span class="line">      <span class="keyword">this</span>.push(<span class="built_in">escape</span>(key) + <span class="string">'='</span> + <span class="built_in">escape</span>(value))</span><br><span class="line">    &#125;</span><br><span class="line">    serialize(params, obj, traditional)</span><br><span class="line">    <span class="keyword">return</span> params.join(<span class="string">'&amp;'</span>).replace(<span class="regexp">/%20/g</span>, <span class="string">'+'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)(Zepto)</span><br><span class="line"></span><br><span class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;</span><br><span class="line">  $.fn.serializeArray = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name, type, result = [],</span><br><span class="line">      add = <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (value.forEach) <span class="keyword">return</span> value.forEach(add)</span><br><span class="line">        result.push(&#123; <span class="attr">name</span>: name, <span class="attr">value</span>: value &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>[<span class="number">0</span>]) $.each(<span class="keyword">this</span>[<span class="number">0</span>].elements, <span class="function"><span class="keyword">function</span>(<span class="params">_, field</span>)</span>&#123;</span><br><span class="line">      type = field.type, name = field.name</span><br><span class="line">      <span class="keyword">if</span> (name &amp;&amp; field.nodeName.toLowerCase() != <span class="string">'fieldset'</span> &amp;&amp;</span><br><span class="line">        !field.disabled &amp;&amp; type != <span class="string">'submit'</span> &amp;&amp; type != <span class="string">'reset'</span> &amp;&amp; type != <span class="string">'button'</span> &amp;&amp; type != <span class="string">'file'</span> &amp;&amp;</span><br><span class="line">        ((type != <span class="string">'radio'</span> &amp;&amp; type != <span class="string">'checkbox'</span>) || field.checked))</span><br><span class="line">          add($(field).val())</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  $.fn.serialize = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = []</span><br><span class="line">    <span class="keyword">this</span>.serializeArray().forEach(<span class="function"><span class="keyword">function</span>(<span class="params">elm</span>)</span>&#123;</span><br><span class="line">      result.push(<span class="built_in">encodeURIComponent</span>(elm.name) + <span class="string">'='</span> + <span class="built_in">encodeURIComponent</span>(elm.value))</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> result.join(<span class="string">'&amp;'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  $.fn.submit = <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> <span class="keyword">in</span> <span class="built_in">arguments</span>) <span class="keyword">this</span>.bind(<span class="string">'submit'</span>, callback)</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.length) &#123;</span><br><span class="line">      <span class="keyword">var</span> event = $.Event(<span class="string">'submit'</span>)</span><br><span class="line">      <span class="keyword">this</span>.eq(<span class="number">0</span>).trigger(event)</span><br><span class="line">      <span class="keyword">if</span> (!event.isDefaultPrevented()) <span class="keyword">this</span>.get(<span class="number">0</span>).submit()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;)(Zepto)</span><br><span class="line"></span><br><span class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// getComputedStyle shouldn't freak out when called</span></span><br><span class="line">  <span class="comment">// without a valid element as argument</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    getComputedStyle(<span class="literal">undefined</span>)</span><br><span class="line">  &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">    <span class="keyword">var</span> nativeGetComputedStyle = getComputedStyle</span><br><span class="line">    <span class="built_in">window</span>.getComputedStyle = <span class="function"><span class="keyword">function</span>(<span class="params">element, pseudoElement</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> nativeGetComputedStyle(element, pseudoElement)</span><br><span class="line">      &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br><span class="line">  <span class="keyword">return</span> Zepto</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;zepto源码&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
    
      <category term="jquery" scheme="/tags/jquery/"/>
    
  </entry>
  
  <entry>
    <title>javascript获取数据类型</title>
    <link href="/2018/11/14/javascript%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>/2018/11/14/javascript获取数据类型/</id>
    <published>2018-11-14T02:45:29.000Z</published>
    <updated>2018-11-14T03:15:29.408Z</updated>
    
    <content type="html"><![CDATA[<p>判断js的数据类型，如：Boolean Number String等<br><a id="more"></a></p><h2 id="javascript获取数据类型"><a href="#javascript获取数据类型" class="headerlink" title="javascript获取数据类型"></a>javascript获取数据类型</h2><p>平时在工作中，偶尔会用到判断一下这个数据是什么类型，是数组的？string的？function的？我一般都直接按照代码的需求，只写了需要判断的类型，用完就丢到一边，最近在看jquery源码，人家大牛写的真不错，改一改，封装一下，自己用哈。<br>话不多说，直接贴出代码，其实很简单的：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toType</span>(<span class="params"> obj </span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> class2type = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="string">"Boolean Number String Function Array Date RegExp Object Error Symbol"</span></span><br><span class="line">    .split( <span class="string">" "</span> )</span><br><span class="line">    .forEach(<span class="function"><span class="keyword">function</span>(<span class="params"> name </span>) </span>&#123;</span><br><span class="line">        class2type[ <span class="string">"[object "</span> + name + <span class="string">"]"</span> ] = name.toLowerCase();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( obj == <span class="literal">null</span> ) &#123;</span><br><span class="line">      <span class="keyword">return</span> obj + <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> obj === <span class="string">"object"</span> || <span class="keyword">typeof</span> obj === <span class="string">"function"</span> ?</span><br><span class="line">      class2type[ toString.call( obj ) ] || <span class="string">"object"</span> :</span><br><span class="line">      <span class="keyword">typeof</span> obj;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>代码一共没有几行，接下来看看管不管用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试一下</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'对象的类型-&gt;'</span>,toType(&#123;&#125;));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'函数的类型-&gt;'</span>,toType(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'null的类型-&gt;'</span>,toType(<span class="literal">null</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'undefined的类型-&gt;'</span>,toType(<span class="literal">undefined</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'boolean的类型-&gt;'</span>,toType(<span class="literal">true</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'number的类型-&gt;'</span>,toType(<span class="number">555</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'string的类型-&gt;'</span>,toType(<span class="string">'abc'</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'array的类型-&gt;'</span>,toType([]));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'date的类型-&gt;'</span>,toType(<span class="keyword">new</span> <span class="built_in">Date</span>()));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'正则的类型-&gt;'</span>,toType(<span class="regexp">/abc/g</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'symbol-&gt;'</span>,toType(<span class="built_in">Symbol</span>()));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Error的类型-&gt;'</span>,toType(<span class="keyword">new</span> <span class="built_in">Error</span>()));</span><br></pre></td></tr></table></figure></p><p>基本上的类型都判断出来了，不错吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;判断js的数据类型，如：Boolean Number String等&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
    
      <category term="jquery" scheme="/tags/jquery/"/>
    
  </entry>
  
  <entry>
    <title>tcp三次握手和四次挥手</title>
    <link href="/2018/11/07/tcp%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%92%8C%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/"/>
    <id>/2018/11/07/tcp三次握手和四次挥手/</id>
    <published>2018-11-07T06:34:14.000Z</published>
    <updated>2018-11-07T06:58:56.835Z</updated>
    
    <content type="html"><![CDATA[<p>我的tcp三次握手和四次挥手简洁理解。<br><a id="more"></a></p><h2 id="tcp三次握手和四次挥手"><a href="#tcp三次握手和四次挥手" class="headerlink" title="tcp三次握手和四次挥手"></a>tcp三次握手和四次挥手</h2><p>tcp三次握手和四次挥手，这是一个很基础的计算机网络层面的基础问题，让我回答我也说不出来具体的东西，所以，为了加强记忆，按照自己的理解，把它记下来。</p><h3 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h3><p>我们用打电话的生活场景来模拟三次握手：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">client: 你好，能听到我说话吗？</span><br><span class="line">server：能听到，你能听到我说话吗？</span><br><span class="line">client：是的，我也能听到你说话。</span><br></pre></td></tr></table></figure></p><p>像上面这样，来回通过3次对话，确认了双方都可以接收到相互的信息。</p><h3 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h3><p>我们还用打电话的生活场景来模拟四次挥手：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">client: 我有事，不跟你聊了哈。</span><br><span class="line">server：知道了。</span><br><span class="line">server：最后说一句，明天把书给我带来。</span><br><span class="line">client：好的，知道了。</span><br></pre></td></tr></table></figure></p><p>好了，四次挥手也模拟完了。<br>我这只是模拟了这两个过程而已，如果想学习真正的原理，<a href="https://blog.csdn.net/qzcsu/article/details/72861891" target="_blank" rel="noopener">请参考这里</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我的tcp三次握手和四次挥手简洁理解。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="计算机原理" scheme="/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="基础知识" scheme="/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>js抽象语法树AST</title>
    <link href="/2018/11/06/js%E6%8A%BD%E8%B1%A1%E8%AF%AD%E6%B3%95%E6%A0%91AST/"/>
    <id>/2018/11/06/js抽象语法树AST/</id>
    <published>2018-11-06T07:48:54.000Z</published>
    <updated>2018-11-06T09:02:14.113Z</updated>
    
    <content type="html"><![CDATA[<p>通过javascript parser将代码转化成抽象语法树，这棵树定义了代码本身，通过操作这颗树，可以精准的定位到赋值语句、声明语句和运算语句。<br><a id="more"></a></p><h2 id="js抽象语法树AST"><a href="#js抽象语法树AST" class="headerlink" title="js抽象语法树AST"></a>js抽象语法树AST</h2><p>最近在研究webpack，想研究一下它是如何打包的，不过，刚刚入门，就有一个知识点把我难住了，那就是AST抽象语法树。于是乎，上网查了查，原理就是把代码解析，解析成一个有各种属性状态的json树，便于对代码进行操作，具体的解析代码当然是很难的，像我们这种菜鸟只需要了解一下用法就可以了。<br>babel是现在几乎每个项目中必备的一个东西，但是其工作原理避不开对js的解析在生成的过程，babel有引擎babylon，早期fork了项目acron，了解这个之前我们先来看看这种引擎解析出来是什么东西。不光是babel还有webpack等。</p><h3 id="什么是抽象语法树"><a href="#什么是抽象语法树" class="headerlink" title="什么是抽象语法树"></a>什么是抽象语法树</h3><p>见下面例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> b = a + <span class="number">1</span>;</span><br></pre></td></tr></table></figure></p><p>之后我们通过这个<a href="http://esprima.org/demo/parse.html" target="_blank" rel="noopener">网站</a>，他是一个esprima引擎的网站，十分好用.画成流程图如下：<br><img src="/2018/11/06/js抽象语法树AST/astImg1.png" alt="img"><br>而他的json对象格式是这样的：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"type"</span>: <span class="string">"Program"</span>,</span><br><span class="line">    <span class="string">"body"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"type"</span>: <span class="string">"VariableDeclaration"</span>,</span><br><span class="line">            <span class="string">"declarations"</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">"type"</span>: <span class="string">"VariableDeclarator"</span>,</span><br><span class="line">                    <span class="string">"id"</span>: &#123;</span><br><span class="line">                        <span class="string">"type"</span>: <span class="string">"Identifier"</span>,</span><br><span class="line">                        <span class="string">"name"</span>: <span class="string">"a"</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="string">"init"</span>: &#123;</span><br><span class="line">                        <span class="string">"type"</span>: <span class="string">"Literal"</span>,</span><br><span class="line">                        <span class="string">"value"</span>: <span class="number">1</span>,</span><br><span class="line">                        <span class="string">"raw"</span>: <span class="string">"1"</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            <span class="string">"kind"</span>: <span class="string">"var"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"type"</span>: <span class="string">"VariableDeclaration"</span>,</span><br><span class="line">            <span class="string">"declarations"</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">"type"</span>: <span class="string">"VariableDeclarator"</span>,</span><br><span class="line">                    <span class="string">"id"</span>: &#123;</span><br><span class="line">                        <span class="string">"type"</span>: <span class="string">"Identifier"</span>,</span><br><span class="line">                        <span class="string">"name"</span>: <span class="string">"b"</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="string">"init"</span>: &#123;</span><br><span class="line">                        <span class="string">"type"</span>: <span class="string">"BinaryExpression"</span>,</span><br><span class="line">                        <span class="string">"operator"</span>: <span class="string">"+"</span>,</span><br><span class="line">                        <span class="string">"left"</span>: &#123;</span><br><span class="line">                            <span class="string">"type"</span>: <span class="string">"Identifier"</span>,</span><br><span class="line">                            <span class="string">"name"</span>: <span class="string">"a"</span></span><br><span class="line">                        &#125;,</span><br><span class="line">                        <span class="string">"right"</span>: &#123;</span><br><span class="line">                            <span class="string">"type"</span>: <span class="string">"Literal"</span>,</span><br><span class="line">                            <span class="string">"value"</span>: <span class="number">1</span>,</span><br><span class="line">                            <span class="string">"raw"</span>: <span class="string">"1"</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            <span class="string">"kind"</span>: <span class="string">"var"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"sourceType"</span>: <span class="string">"script"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="众多AST解析引擎"><a href="#众多AST解析引擎" class="headerlink" title="众多AST解析引擎"></a>众多AST解析引擎</h3><p>chrome有v8，firefix有spidermonkey.还有一些常用的引擎有：</p><ul><li>esprima</li><li>acron</li><li>Traceur</li><li>UglifyJS2</li><li>shift</li></ul><h3 id="AST的学习三板斧"><a href="#AST的学习三板斧" class="headerlink" title="AST的学习三板斧"></a>AST的学习三板斧</h3><ul><li>通过esprima生成AST</li><li>通过estraverse遍历和更新AST</li><li>通过escodegen将AST重新生成源码</li></ul><p>来一个简单例子，看看用法：<br>1.先新建一个test的工程目录<br>2.在test工程下安装esprima、estraverse、escodegen的npm模块<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i esprima estraverse escodegen --save</span><br></pre></td></tr></table></figure></p><p>3.在目录下面新建一个test.js文件,载入以下代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> esprima = <span class="built_in">require</span>(<span class="string">'esprima'</span>);</span><br><span class="line"><span class="keyword">let</span> code = <span class="string">'const a = 1'</span>;</span><br><span class="line"><span class="keyword">const</span> ast = esprima.parseScript(code);</span><br><span class="line"><span class="built_in">console</span>.log(ast);</span><br></pre></td></tr></table></figure></p><p>你将会看到输出结果：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Script &#123;</span><br><span class="line">  type: <span class="string">'Program'</span>,</span><br><span class="line">  body:</span><br><span class="line">   [ VariableDeclaration &#123;</span><br><span class="line">       type: <span class="string">'VariableDeclaration'</span>,</span><br><span class="line">       declarations: [<span class="built_in">Array</span>],</span><br><span class="line">       kind: <span class="string">'const'</span> &#125; ],</span><br><span class="line">  sourceType: <span class="string">'script'</span> &#125;</span><br></pre></td></tr></table></figure></p><p>4.再在test文件中，载入以下代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> estraverse = <span class="built_in">require</span>(<span class="string">'estraverse'</span>);</span><br><span class="line"></span><br><span class="line">estraverse.traverse(ast, &#123;</span><br><span class="line">    enter: <span class="function"><span class="keyword">function</span> (<span class="params">node</span>) </span>&#123;</span><br><span class="line">        node.kind = <span class="string">"var"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(ast);</span><br></pre></td></tr></table></figure></p><p>输出的结果：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Script &#123;</span><br><span class="line">  type: <span class="string">'Program'</span>,</span><br><span class="line">  body:</span><br><span class="line">   [ VariableDeclaration &#123;</span><br><span class="line">       type: <span class="string">'VariableDeclaration'</span>,</span><br><span class="line">       declarations: [<span class="built_in">Array</span>],</span><br><span class="line">       kind: <span class="string">'var'</span> &#125; ],</span><br><span class="line">  sourceType: <span class="string">'script'</span> &#125;</span><br></pre></td></tr></table></figure></p><p>5.最后在test文件中，加入以下代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> escodegen = <span class="built_in">require</span>(<span class="string">"escodegen"</span>);</span><br><span class="line"><span class="keyword">const</span> transformCode = escodegen.generate(ast)</span><br><span class="line"><span class="built_in">console</span>.log(transformCode);</span><br></pre></td></tr></table></figure></p><p>输出的结果：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br></pre></td></tr></table></figure></p><p>通过这三步，我们将const a = 1转化成了var a = 1</p><p>虽然，具体的解析原理我们并不知道，但是，通过这三个模块包，是不是有种自己搞出一个babel的赶脚。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通过javascript parser将代码转化成抽象语法树，这棵树定义了代码本身，通过操作这颗树，可以精准的定位到赋值语句、声明语句和运算语句。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
    
      <category term="webpack" scheme="/tags/webpack/"/>
    
      <category term="基础知识" scheme="/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>对象链式取值(如loadsh的_.get()方法)在项目中的应用</title>
    <link href="/2018/11/05/%E5%AF%B9%E8%B1%A1%E9%93%BE%E5%BC%8F%E5%8F%96%E5%80%BC-%E5%A6%82loadsh%E7%9A%84-get-%E6%96%B9%E6%B3%95-%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <id>/2018/11/05/对象链式取值-如loadsh的-get-方法-在项目中的应用/</id>
    <published>2018-11-05T05:27:11.000Z</published>
    <updated>2018-11-05T06:15:20.933Z</updated>
    
    <content type="html"><![CDATA[<p>对象的链式取值在项目中的应用场景。<br><a id="more"></a></p><h2 id="对象链式取值-如loadsh的-get-方法-在项目中的应用"><a href="#对象链式取值-如loadsh的-get-方法-在项目中的应用" class="headerlink" title="对象链式取值(如loadsh的_.get()方法)在项目中的应用"></a>对象链式取值(如loadsh的_.get()方法)在项目中的应用</h2><p>相信大家在从后端获取数据的时候，像这样res.data.rows.count来获取数据的情况很多，如果后台返回的格式不对了，或则data是个null，那么很容易报<strong>Uncaught TypeError: Cannot read property ‘goods’ of undefined</strong>这样的错。<br>我们一般会这样写：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(res &amp;&amp; res.data &amp;&amp; res.data.rows &amp;&amp; res.data.count) &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>不过这么写实在是有些麻烦，我一般的做法是直接catch住error，然后定位到具体错误在哪，在改正。<br>不过，最近在网上看到一篇专门写关于对象的链式取值的文章，里边写了大概4种解决方法，这里我只记录学习了其中一种，也是兼容性最好的一种，就想使用loadsh的_.get方法，先看看loadsh是怎么用的，见下边<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> object = &#123; <span class="string">'a'</span>: [&#123; <span class="string">'b'</span>: &#123; <span class="string">'c'</span>: <span class="number">3</span> &#125; &#125;] &#125;;</span><br><span class="line">_.get(object, <span class="string">'a[0].b.c'</span>);</span><br><span class="line"><span class="comment">// =&gt; 3</span></span><br><span class="line">_.get(object, [<span class="string">'a'</span>, <span class="string">'0'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]);</span><br><span class="line"><span class="comment">// =&gt; 3</span></span><br><span class="line">_.get(object, <span class="string">'a.b.c'</span>, <span class="string">'default'</span>);</span><br><span class="line"><span class="comment">// =&gt; 'default'</span></span><br></pre></td></tr></table></figure></p><p>使用方法一目了然，第一个参数：对象，第二个参数：链式字符串，第三个参数是，如果按照这个链式字符串在对象中取不到值，返回这个默认值。这样写的话，就像上边即使后台同事更改了数据结构，不会报错，而是返回默认值。（不过这种写法我觉得也有不好的地方，那就是不容易发现错误，后台返回的数据结构都变了，而我们前台并没有出现异常，而是返回来初始写的默认值，是不是有点。。。）不过，这种写法在其它场合我想一定会有用武之地。<br>我现在的项目中并没有用到loadsh这个库，但是还想用咋办呢？自己写一个喽，还好，写法简单，容易理解，注意，下边给出的代码交通过函数解析字符串方式来处理的。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span> (<span class="params">obj, props, def</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>((obj == <span class="literal">null</span>) || obj == <span class="literal">null</span> || <span class="keyword">typeof</span> props !== <span class="string">'string'</span>) <span class="keyword">return</span> def;</span><br><span class="line">    <span class="keyword">const</span> temp = props.split(<span class="string">'.'</span>);</span><br><span class="line">    <span class="keyword">const</span> fieldArr = [].concat(temp);</span><br><span class="line">    temp.forEach(<span class="function">(<span class="params">e, i</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="regexp">/^(\w+)\[(\w+)\]$/</span>.test(e)) &#123;</span><br><span class="line">            <span class="keyword">const</span> matchs = e.match(<span class="regexp">/^(\w+)\[(\w+)\]$/</span>);</span><br><span class="line">            <span class="keyword">const</span> field1 = matchs[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">const</span> field2 = matchs[<span class="number">2</span>];</span><br><span class="line">            <span class="keyword">const</span> index = fieldArr.indexOf(e);</span><br><span class="line">            fieldArr.splice(index, <span class="number">1</span>, field1, field2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> fieldArr.reduce(<span class="function">(<span class="params">pre, cur</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> target = pre[cur] || def;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(target <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> [].concat(target);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(target <span class="keyword">instanceof</span> <span class="built_in">Object</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, target)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> target;</span><br><span class="line">    &#125;, obj)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> c = &#123;<span class="attr">a</span>: &#123;<span class="attr">b</span> : [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] &#125;&#125;</span><br><span class="line">get(c ,<span class="string">'a.b'</span>)     <span class="comment">// [1,2,3]</span></span><br><span class="line">get(c, <span class="string">'a.b[1]'</span>)  <span class="comment">// 2</span></span><br><span class="line">get(c, <span class="string">'a.d'</span>, <span class="number">12</span>)  <span class="comment">// 12</span></span><br></pre></td></tr></table></figure></p><p>其实，在项目无论如何使用都没什么问题，即使什么都不做，最后项目完成时，也一定会因为出现报错而改正过来，最多就是不够健壮。我觉得这个函数解析字符串的方式很好，值得举一反三，值得学习。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对象的链式取值在项目中的应用场景。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
    
      <category term="基础知识" scheme="/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>webpack打包bundle.js文件代码分析</title>
    <link href="/2018/11/01/webpack%E6%89%93%E5%8C%85bundle-js%E6%96%87%E4%BB%B6%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>/2018/11/01/webpack打包bundle-js文件代码分析/</id>
    <published>2018-11-01T06:16:54.000Z</published>
    <updated>2018-11-01T08:31:47.325Z</updated>
    
    <content type="html"><![CDATA[<p>webpack这个打包工具，现在可以说很火，前一段时间为了优化公司项目，搞了一个月的gulp，说实在的，gulp的功能我感觉很强大了，而且用起来很灵活，最关键是简单，需要什么的时候直接弄个gulp任务，但是，使用场景很少了，由于之前的项目是php的，现在一般都用vue，react等，都已经集成了webpack，虽然说不用太多配置，但是需要配置的时候还是有的，所以，webpack研究一下也是有必要的，今天，复杂的先不说，只说说bundle.js这个文件里的代码都是干吗用的。<br><a id="more"></a></p><h2 id="webpack打包bundle-js文件代码分析"><a href="#webpack打包bundle-js文件代码分析" class="headerlink" title="webpack打包bundle.js文件代码分析"></a>webpack打包bundle.js文件代码分析</h2><h3 id="一个入口，一个文件"><a href="#一个入口，一个文件" class="headerlink" title="一个入口，一个文件"></a>一个入口，一个文件</h3><p>首先，webpack.config.js配置文件是这样滴：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry:<span class="string">'./index.js'</span>,</span><br><span class="line">  output:&#123;</span><br><span class="line">    filename:<span class="string">'bundle.js'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>index.js内容是这样滴：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'index'</span>);</span><br></pre></td></tr></table></figure></p><p>最后再看看打完包后的bundle.js内容<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bundle.js</span></span><br><span class="line"><span class="comment">/******/</span> (<span class="function"><span class="keyword">function</span>(<span class="params">modules</span>) </span>&#123; <span class="comment">// webpackBootstrap</span></span><br><span class="line"><span class="comment">/******/</span>    <span class="comment">// The module cache</span></span><br><span class="line"><span class="comment">/******/</span>    <span class="keyword">var</span> installedModules = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******/</span>    <span class="comment">// The require function</span></span><br><span class="line"><span class="comment">/******/</span>    <span class="function"><span class="keyword">function</span> <span class="title">__webpack_require__</span>(<span class="params">moduleId</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******/</span>        <span class="comment">// Check if module is in cache</span></span><br><span class="line"><span class="comment">/******/</span>        <span class="keyword">if</span>(installedModules[moduleId])</span><br><span class="line"><span class="comment">/******/</span>            <span class="keyword">return</span> installedModules[moduleId].exports;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******/</span>        <span class="comment">// Create a new module (and put it into the cache)</span></span><br><span class="line"><span class="comment">/******/</span>        <span class="keyword">var</span> <span class="built_in">module</span> = installedModules[moduleId] = &#123;</span><br><span class="line"><span class="comment">/******/</span>            exports: &#123;&#125;,</span><br><span class="line"><span class="comment">/******/</span>            id: moduleId,</span><br><span class="line"><span class="comment">/******/</span>            loaded: <span class="literal">false</span></span><br><span class="line"><span class="comment">/******/</span>        &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******/</span>        <span class="comment">// Execute the module function</span></span><br><span class="line"><span class="comment">/******/</span>        modules[moduleId].call(<span class="built_in">module</span>.exports, <span class="built_in">module</span>, <span class="built_in">module</span>.exports, __webpack_require__);</span><br><span class="line"></span><br><span class="line"><span class="comment">/******/</span>        <span class="comment">// Flag the module as loaded</span></span><br><span class="line"><span class="comment">/******/</span>        <span class="built_in">module</span>.loaded = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******/</span>        <span class="comment">// Return the exports of the module</span></span><br><span class="line"><span class="comment">/******/</span>        <span class="keyword">return</span> <span class="built_in">module</span>.exports;</span><br><span class="line"><span class="comment">/******/</span>    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/******/</span>    <span class="comment">// expose the modules object (__webpack_modules__)</span></span><br><span class="line"><span class="comment">/******/</span>    __webpack_require__.m = modules;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******/</span>    <span class="comment">// expose the module cache</span></span><br><span class="line"><span class="comment">/******/</span>    __webpack_require__.c = installedModules;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******/</span>    <span class="comment">// __webpack_public_path__</span></span><br><span class="line"><span class="comment">/******/</span>    __webpack_require__.p = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******/</span>    <span class="comment">// Load entry module and return exports</span></span><br><span class="line"><span class="comment">/******/</span>    <span class="keyword">return</span> __webpack_require__(<span class="number">0</span>);</span><br><span class="line"><span class="comment">/******/</span> &#125;)</span><br><span class="line"><span class="comment">/************************************************************************/</span></span><br><span class="line"><span class="comment">/******/</span> ([</span><br><span class="line"><span class="comment">/* 0 */</span></span><br><span class="line"><span class="comment">/***/</span> <span class="function"><span class="keyword">function</span>(<span class="params">module, exports</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'index'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> &#125;</span><br><span class="line"><span class="comment">/******/</span> ]);</span><br></pre></td></tr></table></figure></p><p>我们来分析一下bundle.js这个文件</p><ul><li>1.整个内容是一个自执行函数，自执行函数传的参数是一个数组，数组里的元素是function函数，这个函数体的内容就是index.js文件的内容。</li><li>2.在这个闭包函数中，__webpack_require_是模块加载函数，接收模块id（对，webpack中每个模块都会有一个独一无二的id，其实也就是在IIFE传参数组中的索引值（0，1，2…..）。</li><li>3.真正执行module index里面语句的是个调用<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Execute the module function</span></span><br><span class="line">modules[moduleId].call(<span class="built_in">module</span>.exports, <span class="built_in">module</span>, <span class="built_in">module</span>.exports, __webpack_require__);</span><br></pre></td></tr></table></figure></li></ul><p>我们再来看一个例子</p><h3 id="一个入口，两个文件，A依赖B"><a href="#一个入口，两个文件，A依赖B" class="headerlink" title="一个入口，两个文件，A依赖B"></a>一个入口，两个文件，A依赖B</h3><p>先贴出文件内容：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a.js</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="built_in">require</span>(<span class="string">'./b.js'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'a'</span>);</span><br><span class="line"></span><br><span class="line">b.b1();</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// b.js</span></span><br><span class="line">exports.b1 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'b1'</span>)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">exports.b2 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'b2'</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bundle.js</span></span><br><span class="line"><span class="comment">/******/</span> (<span class="function"><span class="keyword">function</span>(<span class="params">modules</span>) </span>&#123; <span class="comment">// webpackBootstrap</span></span><br><span class="line"><span class="comment">// 省略一大段...........</span></span><br><span class="line"><span class="comment">/******/</span>    <span class="comment">// Load entry module and return exports</span></span><br><span class="line"><span class="comment">/******/</span>    <span class="keyword">return</span> __webpack_require__(<span class="number">0</span>);</span><br><span class="line"><span class="comment">/******/</span> &#125;)</span><br><span class="line"><span class="comment">/************************************************************************/</span></span><br><span class="line"><span class="comment">/******/</span> ([</span><br><span class="line"><span class="comment">/* 0 */</span></span><br><span class="line"><span class="comment">/***/</span> <span class="function"><span class="keyword">function</span>(<span class="params">module, exports, __webpack_require__</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> b = __webpack_require__(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'a'</span>);</span><br><span class="line"></span><br><span class="line">    b.b1();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> &#125;,</span><br><span class="line"><span class="comment">/* 1 */</span></span><br><span class="line"><span class="comment">/***/</span> <span class="function"><span class="keyword">function</span>(<span class="params">module, exports</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    exports.b1 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'b1'</span>)</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    exports.b2 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'b2'</span>)</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> &#125;</span><br><span class="line"><span class="comment">/******/</span> ]);</span><br></pre></td></tr></table></figure><p>我们再来分析一下上面的代码。</p><ul><li>1.由于有两个文件，所以IIFE得参数为长度是2的数组，并按照require的顺序排列。</li><li>2.IIFE函数体部分是一模一样的，也就是说再复杂的，多个依赖的文件，函数体部分也不变滴。</li><li><p>3.module a发生了变化，因为a依赖b，所以在a中调用webpack加载模块的函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1是模块b的id</span></span><br><span class="line"><span class="keyword">var</span> b = __webpack_require__(<span class="number">1</span>);</span><br></pre></td></tr></table></figure></li><li><p>4.我们再来分析一下modules[moduleId].call(module.exports, module, module.exports, <strong>webpack_require</strong>);<br>使用call是因为为了确保每个module中的this指向的是module本身。然后给它传__webpack_require函数是想让module有加载其他module的能力。</p><h3 id="其它情况"><a href="#其它情况" class="headerlink" title="其它情况"></a>其它情况</h3><p>其它的情况，比如多入口，多出口情况这里就不做过多分析，我也没搞明白，接下来准备手写一个简单的仿webpack打包工具。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;webpack这个打包工具，现在可以说很火，前一段时间为了优化公司项目，搞了一个月的gulp，说实在的，gulp的功能我感觉很强大了，而且用起来很灵活，最关键是简单，需要什么的时候直接弄个gulp任务，但是，使用场景很少了，由于之前的项目是php的，现在一般都用vue，react等，都已经集成了webpack，虽然说不用太多配置，但是需要配置的时候还是有的，所以，webpack研究一下也是有必要的，今天，复杂的先不说，只说说bundle.js这个文件里的代码都是干吗用的。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
    
      <category term="webpack" scheme="/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>移动端webview模板</title>
    <link href="/2018/10/30/%E7%A7%BB%E5%8A%A8%E7%AB%AFwebview%E6%A8%A1%E6%9D%BF/"/>
    <id>/2018/10/30/移动端webview模板/</id>
    <published>2018-10-30T02:29:58.000Z</published>
    <updated>2018-11-06T01:28:03.539Z</updated>
    
    <content type="html"><![CDATA[<p>移动端的页面平时偶尔会有需求需要做，特别是webview嵌入的页面居多，由于是有时候做，有时候不做，所以，需求来的时候从新写页面还是有点麻烦，所以把之前写的记录一下，下次直接copy就好了。<br><a id="more"></a></p><h2 id="移动端webview模板"><a href="#移动端webview模板" class="headerlink" title="移动端webview模板"></a>移动端webview模板</h2><h3 id="css"><a href="#css" class="headerlink" title="css"></a>css</h3><p>一些css初始化的内容<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">charset</span> <span class="string">"utf-8"</span>;</span><br><span class="line"><span class="comment">/* CSS Document */</span></span><br><span class="line"><span class="selector-tag">body</span>,<span class="selector-tag">ul</span>,<span class="selector-tag">ol</span>,<span class="selector-tag">p</span>,<span class="selector-tag">h1</span>,<span class="selector-tag">h2</span>,<span class="selector-tag">h3</span>,<span class="selector-tag">h4</span>,<span class="selector-tag">h5</span>,<span class="selector-tag">dl</span>,<span class="selector-tag">dd</span>,<span class="selector-tag">form</span>,<span class="selector-tag">input</span>,<span class="selector-tag">textarea</span>,</span><br><span class="line"><span class="selector-tag">td</span>,<span class="selector-tag">th</span>,<span class="selector-tag">button</span>,<span class="selector-tag">strong</span>,<span class="selector-tag">em</span>,<span class="selector-tag">select</span>,<span class="selector-tag">video</span>,<span class="selector-tag">canvas</span>&#123;<span class="attribute">margin</span>:<span class="number">0</span>;<span class="attribute">padding</span>:<span class="number">0</span>;&#125;</span><br><span class="line"><span class="selector-tag">h1</span>,<span class="selector-tag">h2</span>,<span class="selector-tag">h3</span>,<span class="selector-tag">h4</span>,<span class="selector-tag">h5</span>,<span class="selector-tag">h6</span>&#123; <span class="attribute">font-weight</span>:normal;&#125;</span><br><span class="line"><span class="selector-tag">li</span>&#123;<span class="attribute">list-style</span>:none;<span class="attribute">vertical-align</span>:top;&#125;</span><br><span class="line"><span class="selector-tag">table</span>&#123; <span class="attribute">border-collapse</span>:collapse;&#125;</span><br><span class="line"><span class="selector-tag">textarea</span>&#123;<span class="attribute">resize</span>:none;<span class="attribute">overflow</span>:auto;&#125;</span><br><span class="line"><span class="selector-tag">img</span>&#123; <span class="attribute">border</span>:none; <span class="attribute">vertical-align</span>:middle; <span class="attribute">width</span>:<span class="number">100%</span>;&#125;</span><br><span class="line"><span class="selector-tag">em</span>,<span class="selector-tag">i</span>&#123; <span class="attribute">font-style</span>:normal;&#125;</span><br><span class="line"><span class="selector-tag">a</span>&#123; <span class="attribute">text-decoration</span>:none;&#125;</span><br><span class="line"><span class="selector-tag">a</span>,<span class="selector-tag">input</span>&#123;</span><br><span class="line">    <span class="attribute">-webkit-appearance</span>: none;<span class="comment">/*屏蔽阴影*/</span></span><br><span class="line">    <span class="attribute">-webkit-tap-highlight-color</span>:<span class="built_in">rgba</span>(0,0,0,0);</span><br><span class="line">    <span class="comment">/*ios android去除自带阴影的样式*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span>, <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="comment">/* 禁止长按链接与图片弹出菜单 */</span></span><br><span class="line">    <span class="attribute">-webkit-touch-callout</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">html</span>, <span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="comment">/* 禁止选中文本(如无文本选中需求,此为必选项) */</span></span><br><span class="line">    <span class="attribute">-webkit-user-select</span>: none;  </span><br><span class="line">    <span class="attribute">user-select</span>: none;</span><br><span class="line"> <span class="attribute">background</span>:<span class="number">#f5f5f5</span>;</span><br><span class="line"> <span class="attribute">overflow-x</span>:hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="js来控制rem大小代码"><a href="#js来控制rem大小代码" class="headerlink" title="js来控制rem大小代码"></a>js来控制rem大小代码</h3><p>js来修改html的font-size大小<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">doc, win</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> docEl = doc.documentElement,</span><br><span class="line">resizeEvt = <span class="string">'orientationchange'</span> <span class="keyword">in</span> <span class="built_in">window</span> ? <span class="string">'orientationchange'</span> : <span class="string">'resize'</span>,</span><br><span class="line">recalc = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> clientWidth = docEl.clientWidth;</span><br><span class="line">  <span class="keyword">if</span> (!clientWidth) <span class="keyword">return</span>;</span><br><span class="line">  docEl.style.fontSize = clientWidth/<span class="number">20</span> + <span class="string">'px'</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">if</span> (!doc.addEventListener) <span class="keyword">return</span>;</span><br><span class="line">win.addEventListener(resizeEvt, recalc, <span class="literal">false</span>);</span><br><span class="line">doc.addEventListener(<span class="string">'DOMContentLoaded'</span>, recalc, <span class="literal">false</span>);</span><br><span class="line">&#125;)(<span class="built_in">document</span>, <span class="built_in">window</span>);</span><br></pre></td></tr></table></figure></p><h3 id="html页面内容"><a href="#html页面内容" class="headerlink" title="html页面内容"></a>html页面内容</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"format-detection"</span> <span class="attr">content</span>=<span class="string">"telephone=no"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"email=no"</span> <span class="attr">name</span>=<span class="string">"format-detection"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-capable"</span> <span class="attr">content</span>=<span class="string">"yes"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-status-bar-style"</span> <span class="attr">content</span>=<span class="string">"black"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/config.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 判断ios android</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> u = navigator.userAgent;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> isAndroid = u.indexOf(<span class="string">'Android'</span>) &gt; <span class="number">-1</span> || u.indexOf(<span class="string">'Adr'</span>) &gt; <span class="number">-1</span>; <span class="comment">//android终端</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> isiOS = !!u.match(<span class="regexp">/\(i[^;]+;( U;)? CPU.+Mac OS X/</span>); <span class="comment">//ios终端</span></span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> goodsId = <span class="built_in">window</span>.location.search.split(<span class="string">'='</span>)[<span class="number">1</span>] </span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> reqUrl = BASEURL +<span class="string">'/goods/shopProduct/findSpuDescsBySpuId/'</span> + goodsId;</span></span><br><span class="line"><span class="javascript">    $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">        method: <span class="string">'POST'</span>,</span></span><br><span class="line"><span class="undefined">        url: reqUrl,</span></span><br><span class="line"><span class="undefined">        headers: &#123;</span></span><br><span class="line"><span class="javascript">              <span class="string">'client-token'</span>: <span class="string">'eyJhbGciOiJIUzUxMiJ9.eyJ1aWQiOiIxMjMiLCJjZXJ0Tm8iOiI0NTYifQ.xTR4SG0z3Nuf-siW34XtVgqNPr9PRpPb8XFKY6Hrj_Qg8kl9C0AeVFcQ8NnguQ-SrlHHcv5M16SkjVYX3PKweg'</span></span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        data: &#123;goodsId: goodsId&#125;,</span></span><br><span class="line"><span class="javascript">        dataType: <span class="string">'json'</span>,</span></span><br><span class="line"><span class="javascript">        success: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span>(res.code === <span class="string">'0000'</span>) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> innerContent = res.data;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> bodyContent = $.parseHTML(innerContent);</span></span><br><span class="line"><span class="javascript">                $(<span class="string">'.content'</span>).append(bodyContent);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span>(isiOS) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> imgNum = $(<span class="string">'img'</span>).size(), loadCount=<span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">                    $(<span class="string">'img'</span>).on(<span class="string">'load'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">                        loadCount++;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">if</span>(loadCount === imgNum)&#123;</span></span><br><span class="line"><span class="javascript">                            <span class="comment">// 获取到页面高度返给ios端</span></span></span><br><span class="line"><span class="javascript">                            <span class="keyword">var</span> bodyHeight = $(<span class="string">'body'</span>).height() + <span class="number">25</span>;</span></span><br><span class="line"><span class="javascript">                            <span class="comment">// 调取ios注入的方法</span></span></span><br><span class="line"><span class="javascript">                            <span class="built_in">window</span>.webkit.messageHandlers.jsCallNative.postMessage(&#123;<span class="attr">height</span>: bodyHeight&#125;);</span></span><br><span class="line"><span class="undefined">                        &#125;</span></span><br><span class="line"><span class="undefined">                    &#125;);</span></span><br><span class="line"><span class="undefined">                    </span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="javascript">        error: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个webview页面相对麻烦些，需求是在ios页面的固定位置显示webview内容，并不是新开一个新页面来整个显示webview内容，这样ios需要获取h5页面的高，而页面的内容又是h5页面通过ajax获取回来的，所以，ajax请求成功后，将内容插入到页面中，如果有图片的话，等待图片全部加载之后再计算页面的高，返给ios。这时，ios提供了一个函数注入到h5页面里了，我们直接调用就可以，代码中就是这个函数window.webkit.messageHandlers.jsCallNative.postMessage();</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;移动端的页面平时偶尔会有需求需要做，特别是webview嵌入的页面居多，由于是有时候做，有时候不做，所以，需求来的时候从新写页面还是有点麻烦，所以把之前写的记录一下，下次直接copy就好了。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
    
      <category term="基础知识" scheme="/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>js基础知识思维导图</title>
    <link href="/2018/10/29/js%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
    <id>/2018/10/29/js基础知识思维导图/</id>
    <published>2018-10-29T05:50:50.000Z</published>
    <updated>2018-10-29T07:38:50.287Z</updated>
    
    <content type="html"><![CDATA[<p>在网上无意间发现了一套js基础的思维导图，赶紧收为己用，呵呵。<br><a id="more"></a></p><h2 id="js基础知识思维导图"><a href="#js基础知识思维导图" class="headerlink" title="js基础知识思维导图"></a>js基础知识思维导图</h2><h4 id="1-变量"><a href="#1-变量" class="headerlink" title="1.变量"></a>1.变量</h4><p><img src="/2018/10/29/js基础知识思维导图/变量.gif" alt="img"></p><h4 id="2-数组"><a href="#2-数组" class="headerlink" title="2.数组"></a>2.数组</h4><p><img src="/2018/10/29/js基础知识思维导图/数组.gif" alt="img"></p><h4 id="3-运算符"><a href="#3-运算符" class="headerlink" title="3.运算符"></a>3.运算符</h4><p><img src="/2018/10/29/js基础知识思维导图/运算符.gif" alt="img"></p><h4 id="4-流程语句"><a href="#4-流程语句" class="headerlink" title="4.流程语句"></a>4.流程语句</h4><p><img src="/2018/10/29/js基础知识思维导图/流程语句.gif" alt="img"></p><h4 id="5-函数基础"><a href="#5-函数基础" class="headerlink" title="5.函数基础"></a>5.函数基础</h4><p><img src="/2018/10/29/js基础知识思维导图/函数基础.gif" alt="img"></p><h4 id="6-字符串函数"><a href="#6-字符串函数" class="headerlink" title="6.字符串函数"></a>6.字符串函数</h4><p><img src="/2018/10/29/js基础知识思维导图/字符串函数.gif" alt="img"></p><h4 id="7-基本dom操作"><a href="#7-基本dom操作" class="headerlink" title="7.基本dom操作"></a>7.基本dom操作</h4><p><img src="/2018/10/29/js基础知识思维导图/基本dom操作.gif" alt="img"></p><h4 id="8-浏览器Bom对象"><a href="#8-浏览器Bom对象" class="headerlink" title="8.浏览器Bom对象"></a>8.浏览器Bom对象</h4><p><img src="/2018/10/29/js基础知识思维导图/浏览器Bom对象.jpg" alt="img"></p><h4 id="9-正则表达式"><a href="#9-正则表达式" class="headerlink" title="9.正则表达式"></a>9.正则表达式</h4><p><img src="/2018/10/29/js基础知识思维导图/正则表达式.gif" alt="img"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在网上无意间发现了一套js基础的思维导图，赶紧收为己用，呵呵。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
    
      <category term="基础知识" scheme="/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>js类的继承(ES5写法)</title>
    <link href="/2018/10/23/js%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BF-ES5%E5%86%99%E6%B3%95/"/>
    <id>/2018/10/23/js类的继承-ES5写法/</id>
    <published>2018-10-23T01:30:30.000Z</published>
    <updated>2018-10-26T01:10:55.777Z</updated>
    
    <content type="html"><![CDATA[<p>js继承之终极继承寄生组合式继承<br><a id="more"></a></p><h2 id="js类的继承-ES5写法"><a href="#js类的继承-ES5写法" class="headerlink" title="js类的继承(ES5写法)"></a>js类的继承(ES5写法)</h2><p>js的继承方式有很多，大致的罗列一下：</p><ul><li>构造继承</li><li>原型链继承</li><li>组合继承</li><li>原型式继承</li><li>寄生式继承</li><li>寄生组合式继承<br>这里只是列举了一些，还有很多其它方法，就不一一写出。<br>在这些方法中，寄生组合式继承被认为是最好的，所以，只要记住这一种写法不就可以了吗。<br>寄生组合式继承代码如下：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inheritPrototype</span>(<span class="params">Super,Sub</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> superProtoClone = <span class="built_in">Object</span>.Create(Super.prototype);</span><br><span class="line">  superProtoClone.constructor = Sub;</span><br><span class="line">  Sub.prototype = superProtoClone;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Super</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sub</span>(<span class="params">name, age, job</span>)</span>&#123;</span><br><span class="line">  Super.call(<span class="keyword">this</span>, name, age);</span><br><span class="line">  Sub.job = job;</span><br><span class="line">&#125;</span><br><span class="line">inheritPrototype(Super,Sub);</span><br><span class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> Sub(<span class="string">'mike'</span>, <span class="number">20</span>);</span><br></pre></td></tr></table></figure></li></ul><p>这里用到了Object.Create方法，如果浏览器不兼容的话，顺便把兼容写法写出来：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">Object</span>.create != <span class="string">'function'</span>) &#123;</span><br><span class="line">  <span class="comment">// Production steps of ECMA-262, Edition 5, 15.2.3.5</span></span><br><span class="line">  <span class="comment">// Reference: http://es5.github.io/#x15.2.3.5</span></span><br><span class="line">  <span class="built_in">Object</span>.create = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// To save on memory, use a shared constructor</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Temp</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// make a safe reference to Object.prototype.hasOwnProperty</span></span><br><span class="line">    <span class="keyword">var</span> hasOwn = <span class="built_in">Object</span>.prototype.hasOwnProperty;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">O</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 1. If Type(O) is not Object or Null throw a TypeError exception.</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> O != <span class="string">'object'</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="built_in">TypeError</span>(<span class="string">'Object prototype may only be an Object or null'</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 2. Let obj be the result of creating a new object as if by the</span></span><br><span class="line">      <span class="comment">//    expression new Object() where Object is the standard built-in</span></span><br><span class="line">      <span class="comment">//    constructor with that name</span></span><br><span class="line">      <span class="comment">// 3. Set the [[Prototype]] internal property of obj to O.</span></span><br><span class="line">      Temp.prototype = O;</span><br><span class="line">      <span class="keyword">var</span> obj = <span class="keyword">new</span> Temp();</span><br><span class="line">      Temp.prototype = <span class="literal">null</span>; <span class="comment">// Let's not keep a stray reference to O...</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 4. If the argument Properties is present and not undefined, add</span></span><br><span class="line">      <span class="comment">//    own properties to obj as if by calling the standard built-in</span></span><br><span class="line">      <span class="comment">//    function Object.defineProperties with arguments obj and</span></span><br><span class="line">      <span class="comment">//    Properties.</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">arguments</span>.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// Object.defineProperties does ToObject on its first argument.</span></span><br><span class="line">        <span class="keyword">var</span> Properties = <span class="built_in">Object</span>(<span class="built_in">arguments</span>[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> Properties) &#123;</span><br><span class="line">          <span class="keyword">if</span> (hasOwn.call(Properties, prop)) &#123;</span><br><span class="line">            obj[prop] = Properties[prop];</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 5. Return obj</span></span><br><span class="line">      <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;)();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;js继承之终极继承寄生组合式继承&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
    
      <category term="基础知识" scheme="/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>实现call函数</title>
    <link href="/2018/10/19/%E5%AE%9E%E7%8E%B0call%E5%87%BD%E6%95%B0/"/>
    <id>/2018/10/19/实现call函数/</id>
    <published>2018-10-19T02:00:15.000Z</published>
    <updated>2018-10-19T06:03:10.245Z</updated>
    
    <content type="html"><![CDATA[<p>自己实现call函数<br><a id="more"></a></p><h2 id="实现call函数"><a href="#实现call函数" class="headerlink" title="实现call函数"></a>实现call函数</h2><p>实现代码很简单，直接贴出来<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.myCall = <span class="function"><span class="keyword">function</span>(<span class="params">context</span>) </span>&#123;</span><br><span class="line">  context.fn = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">var</span> args = <span class="built_in">arguments</span>, str=<span class="string">''</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>; i&lt;args.length; i++) &#123;</span><br><span class="line">    str += (args[i]+<span class="string">','</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> newStr = str.slice(<span class="number">0</span>,(str.length<span class="number">-1</span>));</span><br><span class="line">  <span class="built_in">eval</span>(<span class="string">'context.fn('</span>+newStr+<span class="string">')'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">abc</span>(<span class="params">a,b</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name+a+b);</span><br><span class="line">&#125;</span><br><span class="line">abc.myCall(&#123;</span><br><span class="line">  name: <span class="string">'join'</span></span><br><span class="line">&#125;,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">abc.myCall(&#123;</span><br><span class="line">  name: <span class="string">'mike'</span></span><br><span class="line">&#125;,<span class="number">3</span>,<span class="number">4</span>);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自己实现call函数&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
    
      <category term="基础知识" scheme="/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>ajax跨域请求自定义header字段问题</title>
    <link href="/2018/10/16/ajax%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82%E8%87%AA%E5%AE%9A%E4%B9%89header%E5%AD%97%E6%AE%B5%E9%97%AE%E9%A2%98/"/>
    <id>/2018/10/16/ajax跨域请求自定义header字段问题/</id>
    <published>2018-10-16T03:14:48.000Z</published>
    <updated>2018-10-16T03:31:27.520Z</updated>
    
    <content type="html"><![CDATA[<p>Access-Control-Allow-Headers 列表中不存在请求标头 XXXXXX的处理办法<br><a id="more"></a></p><h2 id="ajax跨域请求自定义header字段问题"><a href="#ajax跨域请求自定义header字段问题" class="headerlink" title="ajax跨域请求自定义header字段问题"></a>ajax跨域请求自定义header字段问题</h2><p>首先，在后端允许跨域请求的情况下，前端加上自定义的请求字段，如下<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">        method: <span class="string">'POST'</span>,</span><br><span class="line">        url: reqUrl,</span><br><span class="line">        headers: &#123;</span><br><span class="line">              <span class="string">'client-token'</span>: <span class="string">'123456'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        data: &#123;<span class="attr">goodsId</span>: goodsId&#125;,</span><br><span class="line">        dataType: <span class="string">'json'</span>,</span><br><span class="line">        success: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">        &#125;,</span><br><span class="line">        error: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></p><p>客户端 按照上面的写，你需要处理的是 服务端 响应头的设置</p><h3 id="1-第一步"><a href="#1-第一步" class="headerlink" title="1.第一步"></a>1.第一步</h3><p>设置响应头<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">header(<span class="string">'Access-Control-Allow-Origin:*'</span>);  <span class="comment">//支持全域名访问，不安全，部署后需要固定限制为客户端网址</span></span><br><span class="line">header(<span class="string">'Access-Control-Allow-Methods:POST,GET,OPTIONS,DELETE'</span>); <span class="comment">//支持的http 动作</span></span><br><span class="line">header(<span class="string">'Access-Control-Allow-Headers:x-requested-with,content-type'</span>);  <span class="comment">//响应头 请按照自己需求添加。</span></span><br></pre></td></tr></table></figure></p><h3 id="2-第二步"><a href="#2-第二步" class="headerlink" title="2.第二步"></a>2.第二步</h3><p>了解IE chrome 等浏览器 对于 跨域请求并要求设置Headers自定义参数的时候的 “预请求”   就是如果遇到 跨域并设置headers的请求，所有请求需要两步完成！<br>A 第一步：发送预请求 OPTIONS 请求。此时 服务器端需要对于OPTIONS请求作出响应 一般使用202响应即可 不用返回任何内容信息。（能看到这份手稿的人，本人不相信你后台处理不了一个options请求）<br>B 第二步：服务器accepted 第一步请求后 浏览器自动执行第二步 发送真正的请求。此时 大多数人 会发现请求成功了，但是 有那么几个人会发现 请求成功了但是没有任何信息返回 why？因为你自定义的请求头在服务器响应中不存在！<br>查看console输出 会发现一个问题：<br>“Access-Control-Allow-Headers 列表中不存在请求标头 XXXXXX”【IE】，<br>request header field xxxxxx is not allowed by Access-Control-Allow-Header【chrome】<br>这是因为 你的XXXX请求头 没有在服务器端被允许哦~<br>遇到这个问题 只有通过修改服务器端来完成，举例：需要设置 client-token这么一个自定义头，那么 你需要在 服务端里面 将header(‘Access-Control-Allow-Headers:x-requested-with,content-type，client-token’);  同学们自行体会吧 这种语法就是根据“,”分割 自己需要设置什么头，必须要在 服务端请求的响应头里面设置好，不然客户端永远永远提交不上去！<br>至此  JavaScript/ajax  跨域+ 修改httpheader 任务完美实现。<br>“人们都一直在抱怨 JavaScript同源策略限制了web前端的发展！然而是服务端做的不够细致！”</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Access-Control-Allow-Headers 列表中不存在请求标头 XXXXXX的处理办法&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
    
      <category term="ajax" scheme="/tags/ajax/"/>
    
  </entry>
  
  <entry>
    <title>scratch介绍</title>
    <link href="/2018/10/11/scratch%E4%BB%8B%E7%BB%8D/"/>
    <id>/2018/10/11/scratch介绍/</id>
    <published>2018-10-11T10:44:55.000Z</published>
    <updated>2018-10-12T05:10:36.869Z</updated>
    
    <content type="html"><![CDATA[<p>少儿编程神器scratch简单介绍<br><a id="more"></a></p><h2 id="scratch介绍"><a href="#scratch介绍" class="headerlink" title="scratch介绍"></a>scratch介绍</h2><p>scratch是一款儿童学习编程的软件，把具体的一些控制语句以图形的形式表现出来，可以用鼠标来拖动，很生动，简单，不理解编程的孩子们容易学习，本人也是刚刚接触学习scratch，跟孩子们一样需要重头来学习，因为我想做一名少儿编程启蒙老师。<br>先把scratch的网址贴出来：<br><a href="https://scratch.mit.edu/" target="_blank" rel="noopener">scratch官网</a></p><h3 id="安装scratch"><a href="#安装scratch" class="headerlink" title="安装scratch"></a>安装scratch</h3><h4 id="在线免安装"><a href="#在线免安装" class="headerlink" title="在线免安装"></a>在线免安装</h4><p>首页点击try it out就进入在线页面玩耍了。<br><img src="/2018/10/11/scratch介绍/1.png" alt="img"></p><h4 id="离线安装"><a href="#离线安装" class="headerlink" title="离线安装"></a>离线安装</h4><p>首页的footer位置，support下有Offline Editor连接，<a href="https://scratch.mit.edu/download" target="_blank" rel="noopener">也可以点这里</a><br>之后见下图位置可以下载安装了<br><img src="/2018/10/11/scratch介绍/2.png" alt="img"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;少儿编程神器scratch简单介绍&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="少儿编程" scheme="/categories/%E5%B0%91%E5%84%BF%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="scratch" scheme="/tags/scratch/"/>
    
  </entry>
  
  <entry>
    <title>编译与解释</title>
    <link href="/2018/10/10/%E7%BC%96%E8%AF%91%E4%B8%8E%E8%A7%A3%E9%87%8A/"/>
    <id>/2018/10/10/编译与解释/</id>
    <published>2018-10-10T05:11:48.000Z</published>
    <updated>2018-10-10T06:09:09.952Z</updated>
    
    <content type="html"><![CDATA[<p>编译与解释的介绍<br><a id="more"></a></p><h2 id="编译与解释"><a href="#编译与解释" class="headerlink" title="编译与解释"></a>编译与解释</h2><h3 id="什么是编译器"><a href="#什么是编译器" class="headerlink" title="什么是编译器"></a>什么是编译器</h3><p>编译器是一种计算机程序，负责把一种编程语言编写的源码转换成另外一种计算机代码，后者往往是以二进制的形式被称为目标代码(object code)。这个转换的过程通常的目的是生成可执行的程序。<br><br>编译器的产出是「另外一种代码」，然后这些代码等着被别人拿来执行，如果还不能直接被执行，那么还需要再编译或解释一遍，再交由计算机硬件执行。<br>编译器，往往是在「执行」之前完成，产出是一种可执行或需要再编译或者解释的「代码」。</p><h3 id="什么是解释器"><a href="#什么是解释器" class="headerlink" title="什么是解释器"></a>什么是解释器</h3><p>在计算机科学中，解释器是一种计算机程序，它直接执行由编程语言或脚本语言编写的代码，并不会把源代码预编译成机器码。一个解释器，通常会用以下的姿势来执行程序代码：<br><br>1.分析源代码，并且直接执行。<br>2.把源代码翻译成相对更加高效率的中间码，然后立即执行它。<br>3.执行由解释器内部的编译器预编译后保存的代码<br>可以把解释器看成一个黑盒子，我们输入源码，它就会实时返回结果。<br>不同类型的解释器，黑盒子里面的构造不一样，有些还会集成编译器，缓存编译结果，用来提高执行效率（例如 Chrome V8 也是这么做的）。<br>解释器通常是工作在「运行时」，并且对于我们输入的源码，是一行一行的解释然后执行，然后返回结果。</p><h3 id="分两个维度比较一下"><a href="#分两个维度比较一下" class="headerlink" title="分两个维度比较一下"></a>分两个维度比较一下</h3><h4 id="表现-Behavior"><a href="#表现-Behavior" class="headerlink" title="表现 Behavior"></a>表现 Behavior</h4><ul><li>编译器把源代码转换成其他的更低级的代码(例如二进制码、机器码)，但是不会执行它。</li><li>解释器会读取源代码，并且直接生成指令让计算机硬件执行，不会输出另外一种代码。</li></ul><h4 id="性能-Performance"><a href="#性能-Performance" class="headerlink" title="性能 Performance"></a>性能 Performance</h4><ul><li>编译器会事先用比较多的时间把整个程序的源代码编译成另外一种代码，后者往往较前者更加接近机器码，所以执行的效率会更加高。时间是消耗在预编译的过程中。</li><li>解释器会一行一行的读取源代码，解释，然后立即执行。这中间往往使用相对简单的词法分析、语法分析，压缩解释的时间，最后生成机器码，交由硬件执行。解释器适合比较低级的语言。但是相对于预编译好的代码，效率往往会更低。如何减少解释的次数和复杂性，是提高解释器效率的难题。</li></ul><h3 id="关于代码，需要知道的几个概念"><a href="#关于代码，需要知道的几个概念" class="headerlink" title="关于代码，需要知道的几个概念"></a>关于代码，需要知道的几个概念</h3><p>在看了不少不多关于「编译和解释」的文章之后，我发现下面的词汇是大量出现的。<br>知道这些词汇代表的意思，以及对应的层次，能够更好地看懂别人所要表达的意思。</p><h4 id="高级语言代码-High-Level-Code"><a href="#高级语言代码-High-Level-Code" class="headerlink" title="高级语言代码 High-Level Code"></a>高级语言代码 High-Level Code</h4><p>高级语言代码，自然是指由高级编程语言编写代码，对计算机的细节有更高层次的抽象。<br>相对于低级编程语言（low-level programming language）更接近自然语言（人类的语言）。<br>集成一系列的自动工具（垃圾回收，内存管理等），会让程序员延长寿命，更快乐的编写出更简洁，更易读的程序代码。</p><h4 id="低级语言代码-Low-Level-Code"><a href="#低级语言代码-Low-Level-Code" class="headerlink" title="低级语言代码 Low-Level Code"></a>低级语言代码 Low-Level Code</h4><p>低级语言代码，指由低级编程语言编写的代码，相对高级语言，少了更多的抽象概念，更加接近于汇编或者机器指令。<br>但是这也意味着代码的可移植性很差。<br>在我看来，高与低，只是一组相对词而已。<br>越高级的语言，性能、自由度越不及低级语言。<br>但是在抽象、可读可写性、可移植性越比低级语言优秀。<br>在以前的年代，C/C++语言相对汇编语言，机器指令来说，肯定是高级语言。<br>而到了今天，我们更多人对C语言偏向认知为「低级语言」。<br>或许未来世界的开发者，看我们现在所熟悉的Java、PHP、Python、ECMAScript等等，都是「low」到爆的语言。</p><h4 id="汇编语言-Assembly-Language"><a href="#汇编语言-Assembly-Language" class="headerlink" title="汇编语言 Assembly Language"></a>汇编语言 Assembly Language</h4><p>汇编语言作为一门低级语言，对应于计算机或者其他可编程的硬件。<br>它和计算机的体系结构以及机器指令是强关联的。<br>换句话说，就是不同的汇编语言代码对应特定的硬件，所以不用谈可移植性了。<br>相对于需要编译和解释的高级语言代码来说，汇编代码只需要翻译成机器码就可以执行了。<br>所以汇编语言也往往被称作象征性机器码(symbolic machine code)</p><h4 id="字节码-Byte-Code"><a href="#字节码-Byte-Code" class="headerlink" title="字节码 Byte Code"></a>字节码 Byte Code</h4><p>字节码严格来说不算是编程语言，而是高级编程语言为了种种需求（可移植性、可传输性、预编译等）而产生的中间码（Intermediate Code）。<br>它是由一堆指令集组成的代码，例如在javac编译过后的java源码产生的就是字节码。<br>源码在编译的过程中，是需要进行「词法分析 → 语法分析 → 生成目标代码」等过程的，在预编译的过程中，就完成这部分工作，生成字节码。<br>然后在后面交由解释器（这里通常指编程语言的虚拟机）解释执行，省去前面预编译的开销。</p><h4 id="机器码-Machine-Code"><a href="#机器码-Machine-Code" class="headerlink" title="机器码 Machine Code"></a>机器码 Machine Code</h4><p>机器码是一组可以直接被CPU执行的指令集，<br>每一条指令都代表一个特定的任务，或者是加载，或者是跳转，亦或是计算操作等等。<br>所有可以直接被CPU执行的程序，都是由这么一系列的指令组成的。<br>机器码可是看作是编译过程中，最低级的代码，因外再往下就是交由硬件来执行了。<br>当然机器码也是可以被编辑的，但是以人类难以看懂的姿势存在，可读性非常差。</p><h3 id="从熟悉的编程语言的角度来看看"><a href="#从熟悉的编程语言的角度来看看" class="headerlink" title="从熟悉的编程语言的角度来看看"></a>从熟悉的编程语言的角度来看看</h3><p><img src="/2018/10/10/编译与解释/1.webp" alt="img"><br>从左往右看，<br>1.以 Java 为例，我们在文本编译器写好了 Java 代码，交由「编译器」编译成 Java Bytecode。然后 Bytecode 交由 JVM 来执行，这时候 JVM 充当了「解释器」的角色，在解释 Bytecode 成 Machine Code 的同时执行它，返回结果。<br>2.以 BASIC 语言（早期的可以由计算机直译的语言） 为例，通过文本编译器编写好，不用经历「编译」的过程，就可以直接交由操作系统内部来进行「解释」然后执行。<br>3.以 C 语言为例，我们在文本编译器编写好源代码，然后运行 gcc hello.c 编译出 hello.out 文件，该文件由一系列的机器指令组成的机器码，可以直接交由硬件来执行。</p><h3 id="抽象看本质：人与计算机之间的鸿沟"><a href="#抽象看本质：人与计算机之间的鸿沟" class="headerlink" title="抽象看本质：人与计算机之间的鸿沟"></a>抽象看本质：人与计算机之间的鸿沟</h3><p>无论是最近在看《暗时间》的作者刘未鹏，还是前一段时间听《以产品思维写文章》讲座的阿禅，还是其他的很多聪明的人。<br>他们都强调「抽象看本质」的能力，能从事物本身抽象出共通属性，看待本质。<br>这也是很多人所说的「跳出这个框框再看」的思维方式。</p><p>无论是「编译 Compile」还是「解释 Interpret」。<br>本质还是「人与计算机的交流形式」，人的语言最终转换成机器语言。<br>一句 「Hello World」，经过一些列的「编译」和「解释」，最终转换成一系列包含机器指令的那些0和1，机器傻傻执行完之后，告诉你结果。</p><p>就这么一个过程，我们就需要很多的翻译官。<br>有些翻译官可以做到同声传译（解释），有些翻译官却只能把我们的意图记下来再全部翻译（编译）给计算机。<br>而往往一个翻译官能力有限，也只能把你的语言，翻译成另外一种低级点的语言，再由另外懂这个语言的翻译官来翻译更接近计算机能读得懂的语言。<br><img src="/2018/10/10/编译与解释/2.webp" alt="img"></p><h3 id="最后用一张图来展示一下编译与解释"><a href="#最后用一张图来展示一下编译与解释" class="headerlink" title="最后用一张图来展示一下编译与解释"></a>最后用一张图来展示一下编译与解释</h3><p><img src="/2018/10/10/编译与解释/3.webp" alt="img"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;编译与解释的介绍&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="计算机原理" scheme="/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="基础知识" scheme="/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>vue不同路由使用同一个组件重新加载这个组件</title>
    <link href="/2018/10/08/vue%E4%B8%8D%E5%90%8C%E8%B7%AF%E7%94%B1%E4%BD%BF%E7%94%A8%E5%90%8C%E4%B8%80%E4%B8%AA%E7%BB%84%E4%BB%B6%E9%87%8D%E6%96%B0%E5%8A%A0%E8%BD%BD%E8%BF%99%E4%B8%AA%E7%BB%84%E4%BB%B6/"/>
    <id>/2018/10/08/vue不同路由使用同一个组件重新加载这个组件/</id>
    <published>2018-10-08T02:26:49.000Z</published>
    <updated>2018-10-08T05:26:06.679Z</updated>
    
    <content type="html"><![CDATA[<p>vue不同路由使用同一个组件重新加载这个组件<br><a id="more"></a></p><h2 id="vue不同路由使用同一个组件重新加载这个组件"><a href="#vue不同路由使用同一个组件重新加载这个组件" class="headerlink" title="vue不同路由使用同一个组件重新加载这个组件"></a>vue不同路由使用同一个组件重新加载这个组件</h2><p>vue,react,angular都会有一个共同点，那就是如果两个路由用的是一个组件的话，在切换路由的时候组件的生命周期函数并没有被调用，比如有一些想在组件渲染之后调用的钩子函数并不会执行，这是为了性能的考虑。我之前用angular的时候有相应的解决办法，react也有，这里不做探讨，这里只说vue，昨天看到了一个这方面的解决方法，感觉很好，记录下来。<br><br>有两种解决方案：</p><h3 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h3><p>监听$route的变化来初始化数据，如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    loading: <span class="literal">false</span>,</span><br><span class="line">    error: <span class="literal">null</span>,</span><br><span class="line">    post: <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">watch: &#123;</span><br><span class="line">  <span class="string">'$route'</span>: &#123;</span><br><span class="line">    handler: <span class="string">'resetData'</span>,</span><br><span class="line">    immediate: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">  resetData() &#123;</span><br><span class="line">    <span class="keyword">this</span>.loading = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">this</span>.error = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">this</span>.post = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">this</span>.getPost(<span class="keyword">this</span>.$route.params.id)</span><br><span class="line">  &#125;,</span><br><span class="line">  getPost(id)&#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h3><p>给router-view添加一个unique的key，这样即使是公用组件，只要url变化了，就一定会重新创建这个组件，将key直接设置为路由的完整路径。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-view :key=<span class="string">"$route.fullpath"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><p>组件代码就可以正常的书写了，如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    loading: <span class="literal">false</span>,</span><br><span class="line">    error: <span class="literal">null</span>,</span><br><span class="line">    post: <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">created () &#123;</span><br><span class="line">  <span class="keyword">this</span>.getPost(<span class="keyword">this</span>.$route.params.id)</span><br><span class="line">&#125;,</span><br><span class="line">methods () &#123;</span><br><span class="line">  getPost(postId) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;vue不同路由使用同一个组件重新加载这个组件&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
    
      <category term="vue" scheme="/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>图片类型转换(image base64 file canvas)</title>
    <link href="/2018/09/29/%E5%9B%BE%E7%89%87%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2-image-base64-file-canvas/"/>
    <id>/2018/09/29/图片类型转换-image-base64-file-canvas/</id>
    <published>2018-09-29T03:32:57.000Z</published>
    <updated>2018-09-29T05:22:22.078Z</updated>
    
    <content type="html"><![CDATA[<p>图片的各种类型相互间的转换。<br><a id="more"></a></p><h2 id="图片类型转换-image-base64-file-canvas"><a href="#图片类型转换-image-base64-file-canvas" class="headerlink" title="图片类型转换(image base64 file canvas)"></a>图片类型转换(image base64 file canvas)</h2><p>dom中的img标签来显示图片，在src上给一个图片的连接即可，但是如果想把这个图片放在canvas上，或者ipput上传的图片想显示出来，或者canvas剪裁的图片想保存为Blob格式用ajax上传等等一系列操作，如果不缕清楚的话真是迷糊，所以做一下小小的总结。</p><h3 id="url连接"><a href="#url连接" class="headerlink" title="url连接"></a>url连接</h3><p>urltoImage(url,fn) 会通过一个url加载所需要的图片对象，其中 url 参数传入图片的 url , fn 为回调方法,包含一个Image对象的参数，代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">urltoImage</span> (<span class="params">url,fn</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">  img.src = url;</span><br><span class="line">  img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    fn(img);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="canvas画图片"><a href="#canvas画图片" class="headerlink" title="canvas画图片"></a>canvas画图片</h3><p>imagetoCanvas(image) 会将一个 Image 对象转变为一个 Canvas 类型对象，其中 image 参数传入一个Image对象，代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">imagetoCanvas</span>(<span class="params">image</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> cvs = <span class="built_in">document</span>.createElement(<span class="string">"canvas"</span>);</span><br><span class="line">  <span class="keyword">var</span> ctx = cvs.getContext(<span class="string">'2d'</span>);</span><br><span class="line">  cvs.width = image.width;</span><br><span class="line">  cvs.height = image.height;</span><br><span class="line">  ctx.drawImage(image, <span class="number">0</span>, <span class="number">0</span>, cvs.width, cvs.height);</span><br><span class="line">  <span class="keyword">return</span> cvs ;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="canvas图片转Blob"><a href="#canvas图片转Blob" class="headerlink" title="canvas图片转Blob"></a>canvas图片转Blob</h3><p> canvasResizetoFile(canvas,quality,fn) 会将一个 Canvas 对象压缩转变为一个 Blob 类型对象；其中 canvas 参数传入一个 Canvas 对象; quality 参数传入一个0-1的 number 类型，表示图片压缩质量; fn 为回调方法，包含一个 Blob 对象的参数;代码如下：<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">canvasResizetoFile</span>(<span class="params">canvas,quality,fn</span>)</span>&#123;</span><br><span class="line">  canvas.toBlob(<span class="function"><span class="keyword">function</span>(<span class="params">blob</span>) </span>&#123;</span><br><span class="line">    fn(blob);</span><br><span class="line">  &#125;,<span class="string">'image/jpeg'</span>,quality);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p> 这里的 Blob 对象表示不可变的类似文件对象的原始数据。 Blob 表示不一定是 JavaScript 原生形式的数据。 File 接口基于 Blob ，继承了 Blob 的功能并将其扩展使其支持用户系统上的文件。我们可以把它当做File类型对待，其他更具体的用法可以参考MDN文档</p><h3 id="canvas转dataURL"><a href="#canvas转dataURL" class="headerlink" title="canvas转dataURL"></a>canvas转dataURL</h3><p> canvasResizetoDataURL(canvas,quality) 会将一个 Canvas 对象压缩转变为一个 dataURL 字符串,其中 canvas 参数传入一个 Canvas 对象; quality 参数传入一个0-1的 number 类型，表示图片压缩质量;代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">methods.canvasResizetoDataURL = <span class="function"><span class="keyword">function</span>(<span class="params">canvas,quality</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> canvas.toDataURL(<span class="string">'image/jpeg'</span>,quality);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>其中的 toDataURL API可以参考MDN文档</p><h3 id="File-Blob-转dataURL"><a href="#File-Blob-转dataURL" class="headerlink" title="File(Blob)转dataURL"></a>File(Blob)转dataURL</h3><p> filetoDataURL(file,fn) 会将 File （ Blob ）类型文件转变为 dataURL 字符串,其中 file 参数传入一个 File （ Blob ）类型文件; fn 为回调方法，包含一个 dataURL 字符串的参数;代码如下：<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filetoDataURL</span>(<span class="params">file,fn</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> reader = <span class="keyword">new</span> FileReader();</span><br><span class="line">  reader.onloadend = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    fn(e.target.result);</span><br><span class="line">  &#125;;</span><br><span class="line">  reader.readAsDataURL(file);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="dataURL转为Image类型文件"><a href="#dataURL转为Image类型文件" class="headerlink" title="dataURL转为Image类型文件"></a>dataURL转为Image类型文件</h3><p> dataURLtoImage(dataurl,fn) 会将一串 dataURL 字符串转变为 Image 类型文件,其中 dataurl 参数传入一个 dataURL 字符串, fn 为回调方法，包含一个 Image 类型文件的参数，代码如下：<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dataURLtoImage</span>(<span class="params">dataurl,fn</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">  img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    fn(img);</span><br><span class="line">  &#125;;</span><br><span class="line">  img.src = dataurl;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="dataURL转为Blob类型"><a href="#dataURL转为Blob类型" class="headerlink" title="dataURL转为Blob类型"></a>dataURL转为Blob类型</h3><p>dataURLtoFile(dataurl) 会将一串 dataURL 字符串转变为 Blob 类型对象，其中 dataurl 参数传入一个 dataURL 字符串,代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dataURLtoFile</span>(<span class="params">dataurl</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> arr = dataurl.split(<span class="string">','</span>), mime = arr[<span class="number">0</span>].match(<span class="regexp">/:(.*?);/</span>)[<span class="number">1</span>],</span><br><span class="line">    bstr = atob(arr[<span class="number">1</span>]), n = bstr.length, u8arr = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(n);</span><br><span class="line">  <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">    u8arr[n] = bstr.charCodeAt(n);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Blob([u8arr], &#123;<span class="attr">type</span>:mime&#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="实际应用demo"><a href="#实际应用demo" class="headerlink" title="实际应用demo"></a>实际应用demo</h3><p>对于常用的将一个 File 对象压缩之后再变为 File 对象,我们可以将上面的方法再封装一下，参考如下代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fileResizetoFile</span>(<span class="params">file,quality,fn</span>)</span>&#123;</span><br><span class="line">  filetoDataURL (file,<span class="function"><span class="keyword">function</span>(<span class="params">dataurl</span>)</span>&#123;</span><br><span class="line">    dataURLtoImage(dataurl,<span class="function"><span class="keyword">function</span>(<span class="params">image</span>)</span>&#123;</span><br><span class="line">      canvasResizetoFile(imagetoCanvas(image),quality,fn);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其中， file 参数传入一个 File （ Blob ）类型文件； quality 参数传入一个 0-1 的 number 类型，表示图片压缩质量； fn 为回调方法，包含一个 Blob 类型文件的参数。<br>它使用起来就像下面这样：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> file = <span class="built_in">document</span>.getElementById(<span class="string">'demo'</span>).files[<span class="number">0</span>];</span><br><span class="line">fileResizetoFile(file,<span class="number">0.6</span>,<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res);</span><br><span class="line">  <span class="comment">//拿到res，做出你要上传的操作；</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h3 id="再来一个图片等比压缩的demo"><a href="#再来一个图片等比压缩的demo" class="headerlink" title="再来一个图片等比压缩的demo"></a>再来一个图片等比压缩的demo</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">proDownImage</span>(<span class="params">path,imgObj</span>) </span>&#123; <span class="comment">// 等比压缩图片工具</span></span><br><span class="line">  <span class="comment">//var proMaxHeight = 185;</span></span><br><span class="line">  <span class="keyword">var</span> proMaxHeight=<span class="number">300</span>;</span><br><span class="line">  <span class="keyword">var</span> proMaxWidth = <span class="number">175</span>;</span><br><span class="line">  <span class="keyword">var</span> size = <span class="keyword">new</span> <span class="built_in">Object</span>();　</span><br><span class="line">  <span class="keyword">var</span> image = <span class="keyword">new</span> Image();　</span><br><span class="line">  image.src = path;　</span><br><span class="line">  image.attachEvent(<span class="string">"onreadystatechange"</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">// 当加载状态改变时执行此方法,因为img的加载有延迟</span></span><br><span class="line">    <span class="keyword">if</span> (image.readyState == <span class="string">"complete"</span>) &#123; <span class="comment">// 当加载状态为完全结束时进入</span></span><br><span class="line">      <span class="keyword">if</span> (image.width &gt; <span class="number">0</span> &amp;&amp; image.height &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> ww = proMaxWidth / image.width;</span><br><span class="line">        <span class="keyword">var</span> hh = proMaxHeight / image.height;　</span><br><span class="line">        <span class="keyword">var</span> rate = (ww &lt; hh) ? ww: hh;</span><br><span class="line">        <span class="keyword">if</span> (rate &lt;= <span class="number">1</span>) &#123;　</span><br><span class="line">          alert(<span class="string">"imgage width*rate is:"</span> + image.width * rate);</span><br><span class="line">          size.width = image.width * rate;</span><br><span class="line">          size.height = image.height * rate;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          alert(<span class="string">"imgage width is:"</span> + image.width);　　</span><br><span class="line">          size.width = image.width;　　</span><br><span class="line">          size.height = image.height;　　　</span><br><span class="line">        &#125;　</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    imgObj.attr(<span class="string">"width"</span>,size.width);</span><br><span class="line">    imgObj.attr(<span class="string">"height"</span>,size.height);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;图片的各种类型相互间的转换。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
    
      <category term="图片处理" scheme="/tags/%E5%9B%BE%E7%89%87%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>一些好的文章收集</title>
    <link href="/2018/09/28/%E4%B8%80%E4%BA%9B%E5%A5%BD%E7%9A%84%E6%96%87%E7%AB%A0%E6%94%B6%E9%9B%86/"/>
    <id>/2018/09/28/一些好的文章收集/</id>
    <published>2018-09-28T02:19:50.000Z</published>
    <updated>2018-09-29T03:34:56.966Z</updated>
    
    <content type="html"><![CDATA[<p>网上看到的好文章，总结收集。<br><a id="more"></a></p><h2 id="一些好的文章收集"><a href="#一些好的文章收集" class="headerlink" title="一些好的文章收集"></a>一些好的文章收集</h2><p>自己写博客文章真的是一件耗时的事儿，写文章需要把各个方面的知识都整理好，有时候我都是在网上看到一篇不错的文章，想记录下来，就照猫画虎的copy，但是，copy下拉也需要时间啊，没办法，现在我只能把连接记录下来，等有时间再好好地记录一下。</p><h3 id="页面渲染优化"><a href="#页面渲染优化" class="headerlink" title="页面渲染优化"></a>页面渲染优化</h3><ul><li><a href="https://feclub.cn/post/content/dom" target="_blank" rel="noopener">高频dom操作和页面性能优化探索</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;网上看到的好文章，总结收集。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
    
      <category term="文章收集" scheme="/tags/%E6%96%87%E7%AB%A0%E6%94%B6%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>hexo中使用hexo-asset-image插件来加载本地图片</title>
    <link href="/2018/09/21/hexo%E4%B8%AD%E4%BD%BF%E7%94%A8hexo-asset-image%E6%8F%92%E4%BB%B6%E6%9D%A5%E5%8A%A0%E8%BD%BD%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/"/>
    <id>/2018/09/21/hexo中使用hexo-asset-image插件来加载本地图片/</id>
    <published>2018-09-21T02:55:52.000Z</published>
    <updated>2018-09-21T03:34:34.812Z</updated>
    
    <content type="html"><![CDATA[<p>hexo中使用hexo-asset-image插件来加载本地图片,因为版本兼容问题不显示图片的解决办法。<br><a id="more"></a></p><h2 id="hexo中使用hexo-asset-image插件来加载本地图片"><a href="#hexo中使用hexo-asset-image插件来加载本地图片" class="headerlink" title="hexo中使用hexo-asset-image插件来加载本地图片"></a>hexo中使用hexo-asset-image插件来加载本地图片</h2><p>在使用hexo时，在md文件里加载图片一般都会用到网络上的图片，但是如果有些图片不允许使用，怎么办？当然可以用七牛云这种图床网站，如果想使用本地的图片怎么办呢？那就用到了hexo-asset-image这个插件，但是这个插件写的很早，与现在新版本的hexo不兼容，于是乎就有一些大牛进行了修改，这里贴出这位大牛的github地址，<a href="https://github.com/7ym0n/hexo-asset-image" target="_blank" rel="noopener">兼容新版本hexo的hexo-asset-image插件</a>。<br><br>使用方法就是替换掉npm安装的hexo-asset-image插件中的文件,代码如下<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> cheerio = <span class="built_in">require</span>(<span class="string">'cheerio'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPosition</span>(<span class="params">str, m, i</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str.split(m, i).join(m).length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> version = <span class="built_in">String</span>(hexo.version).split(<span class="string">'.'</span>);</span><br><span class="line">hexo.extend.filter.register(<span class="string">'after_post_render'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> config = hexo.config;</span><br><span class="line">  <span class="keyword">if</span>(config.post_asset_folder)&#123;</span><br><span class="line">    <span class="keyword">var</span> link = data.permalink;</span><br><span class="line"><span class="keyword">if</span>(version.length &gt; <span class="number">0</span> &amp;&amp; <span class="built_in">Number</span>(version[<span class="number">0</span>]) == <span class="number">3</span>)</span><br><span class="line">   <span class="keyword">var</span> beginPos = getPosition(link, <span class="string">'/'</span>, <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="keyword">var</span> beginPos = getPosition(link, <span class="string">'/'</span>, <span class="number">3</span>) + <span class="number">1</span>;</span><br><span class="line"><span class="comment">// In hexo 3.1.1, the permalink of "about" page is like ".../about/index.html".</span></span><br><span class="line"><span class="keyword">var</span> endPos = link.lastIndexOf(<span class="string">'/'</span>) + <span class="number">1</span>;</span><br><span class="line">    link = link.substring(beginPos, endPos);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> toprocess = [<span class="string">'excerpt'</span>, <span class="string">'more'</span>, <span class="string">'content'</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; toprocess.length; i++)&#123;</span><br><span class="line">      <span class="keyword">var</span> key = toprocess[i];</span><br><span class="line"> </span><br><span class="line">      <span class="keyword">var</span> $ = cheerio.load(data[key], &#123;</span><br><span class="line">        ignoreWhitespace: <span class="literal">false</span>,</span><br><span class="line">        xmlMode: <span class="literal">false</span>,</span><br><span class="line">        lowerCaseTags: <span class="literal">false</span>,</span><br><span class="line">        decodeEntities: <span class="literal">false</span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      $(<span class="string">'img'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span> ($(<span class="keyword">this</span>).attr(<span class="string">'src'</span>))&#123;</span><br><span class="line"><span class="comment">// For windows style path, we replace '\' to '/'.</span></span><br><span class="line"><span class="keyword">var</span> src = $(<span class="keyword">this</span>).attr(<span class="string">'src'</span>).replace(<span class="string">'\\'</span>, <span class="string">'/'</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="regexp">/http[s]*.*|\/\/.*/</span>.test(src) &amp;&amp;</span><br><span class="line">   !<span class="regexp">/^\s*\//</span>.test(src)) &#123;</span><br><span class="line">  <span class="comment">// For "about" page, the first part of "src" can't be removed.</span></span><br><span class="line">  <span class="comment">// In addition, to support multi-level local directory.</span></span><br><span class="line">  <span class="keyword">var</span> linkArray = link.split(<span class="string">'/'</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> elem != <span class="string">''</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">var</span> srcArray = src.split(<span class="string">'/'</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> elem != <span class="string">''</span> &amp;&amp; elem != <span class="string">'.'</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">if</span>(srcArray.length &gt; <span class="number">1</span>)</span><br><span class="line">srcArray.shift();</span><br><span class="line">  src = srcArray.join(<span class="string">'/'</span>);</span><br><span class="line">  $(<span class="keyword">this</span>).attr(<span class="string">'src'</span>, config.root + link + src);</span><br><span class="line">  <span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">"update link as:--&gt;"</span>+config.root + link + src);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">"no src attr, skipped..."</span>);</span><br><span class="line"><span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info($(<span class="keyword">this</span>));</span><br><span class="line">&#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      data[key] = $.html();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>图片具体的引入方式：<br><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">MacGesture2-Publish</span><br><span class="line">├── apppicker.jpg</span><br><span class="line">├── logo.jpg</span><br><span class="line">└── rules.jpg</span><br><span class="line">MacGesture2-Publish.md</span><br><span class="line"></span><br><span class="line">Make sure post_asset_folder: <span class="literal">true</span> <span class="keyword">in</span> your _config.yml.</span><br><span class="line">Just use ![logo](logo.jpg) to insert logo.jpg.</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hexo中使用hexo-asset-image插件来加载本地图片,因为版本兼容问题不显示图片的解决办法。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
    
      <category term="hexo" scheme="/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>HTTP缓存机制及原理</title>
    <link href="/2018/09/19/HTTP%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6%E5%8F%8A%E5%8E%9F%E7%90%86/"/>
    <id>/2018/09/19/HTTP缓存机制及原理/</id>
    <published>2018-09-19T02:14:58.000Z</published>
    <updated>2018-09-21T03:32:01.666Z</updated>
    
    <content type="html"><![CDATA[<p>HTTP缓存机制及原理的一些小总结<br><a id="more"></a></p><h2 id="HTTP缓存机制及原理"><a href="#HTTP缓存机制及原理" class="headerlink" title="HTTP缓存机制及原理"></a>HTTP缓存机制及原理</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Http 缓存机制作为 web 性能优化的重要手段，对于从事 Web 开发的同学们来说，应该是知识体系库中的一个基础环节，同时对于有志成为前端架构师的同学来说是必备的知识技能。<br><br>但是对于很多前端同学来说，仅仅只是知道浏览器会对请求的静态文件进行缓存，但是为什么被缓存，缓存是怎样生效的，却并不是很清楚。<br><br>在此，我会尝试用简单明了的文字，像大家系统的介绍HTTP缓存机制，期望对各位正确的理解前端缓存有所帮助。<br></p><h3 id="在介绍HTTP缓存之前，作为知识铺垫，先简单介绍一下HTTP报文"><a href="#在介绍HTTP缓存之前，作为知识铺垫，先简单介绍一下HTTP报文" class="headerlink" title="在介绍HTTP缓存之前，作为知识铺垫，先简单介绍一下HTTP报文"></a>在介绍HTTP缓存之前，作为知识铺垫，先简单介绍一下HTTP报文</h3><p>HTTP报文就是浏览器和服务器间通信时发送及响应的数据块。<br><br>浏览器向服务器请求数据，发送请求(request)报文；服务器向浏览器返回数据，返回响应(response)报文。<br><br>报文信息主要分为两部分<br><br>1.包含属性的首部(header)————————–附加信息（cookie，缓存信息等）与缓存相关的规则信息，均包含在header中<br><br>2.包含数据的主体部分(body)———————–HTTP请求真正想要传输的部分<br></p><h3 id="缓存规则解析"><a href="#缓存规则解析" class="headerlink" title="缓存规则解析"></a>缓存规则解析</h3><p>为方便大家理解，我们认为浏览器存在一个缓存数据库,用于存储缓存信息。<br><br>在客户端第一次请求数据时，此时缓存数据库中没有对应的缓存数据，需要请求服务器，服务器返回后，将数据存储至缓存数据库中。<br><br><img src="/2018/09/19/HTTP缓存机制及原理/632130-20170210141639213-1923993391.png" alt="img"><br>HTTP缓存有多种规则，根据是否需要重新向服务器发起请求来分类，我将其分为两大类(强制缓存，对比缓存)<br>在详细介绍这两种规则之前，先通过时序图的方式，让大家对这两种规则有个简单了解。<br><br>已存在缓存数据时，仅基于强制缓存，请求数据的流程如下<br><img src="/2018/09/19/HTTP缓存机制及原理/632130-20170210135521072-1812985836.png" alt="img"><br>已存在缓存数据时，仅基于对比缓存，请求数据的流程如<br><img src="/2018/09/19/HTTP缓存机制及原理/632130-20170210141716838-764535017.png" alt="img"><br>对缓存机制不太了解的同学可能会问，基于对比缓存的流程下，不管是否使用缓存，都需要向服务器发送请求，那么还用缓存干什么？<br><br>这个问题，我们暂且放下，后文在详细介绍每种缓存规则的时候，会带给大家答案。<br><br>我们可以看到两类缓存规则的不同，强制缓存如果生效，不需要再和服务器发生交互，而对比缓存不管是否生效，都需要与服务端发生交互。<br><br>两类缓存规则可以同时存在，强制缓存优先级高于对比缓存，也就是说，当执行强制缓存的规则时，如果缓存生效，直接使用缓存，不再执行对比缓存规则。<br></p><h3 id="强制缓存"><a href="#强制缓存" class="headerlink" title="强制缓存"></a>强制缓存</h3><p>从上文我们得知，强制缓存，在缓存数据未失效的情况下，可以直接使用缓存数据，那么浏览器是如何判断缓存数据是否失效呢？<br><br>我们知道，在没有缓存数据的时候，浏览器向服务器请求数据时，服务器会将数据和缓存规则一并返回，缓存规则信息包含在响应header中。<br><br>对于强制缓存来说，响应header中会有两个字段来标明失效规则（Expires/Cache-Control）<br><br>使用chrome的开发者工具，可以很明显的看到对于强制缓存生效时，网络请求的情况<br><br><img src="/2018/09/19/HTTP缓存机制及原理/632130-20170210141755072-1978466289.png" alt="img"></p><h3 id="Expires"><a href="#Expires" class="headerlink" title="Expires"></a>Expires</h3><p>Expires的值为服务端返回的到期时间，即下一次请求时，请求时间小于服务端返回的到期时间，直接使用缓存数据。<br><br>不过Expires 是HTTP 1.0的东西，现在默认浏览器均默认使用HTTP 1.1，所以它的作用基本忽略。<br><br>另一个问题是，到期时间是由服务端生成的，但是客户端时间可能跟服务端时间有误差，这就会导致缓存命中的误差。<br><br>所以HTTP 1.1 的版本，使用Cache-Control替代。<br></p><h3 id="Cache-Control"><a href="#Cache-Control" class="headerlink" title="Cache-Control"></a>Cache-Control</h3><p>Cache-Control 是最重要的规则。常见的取值有private、public、no-cache、max-age，no-store，默认为private。<br><br>private:             客户端可以缓存<br><br>public:              客户端和代理服务器都可缓存（前端的同学，可以认为public和private是一样的）<br><br>max-age=xxx:   缓存的内容将在 xxx 秒后失效<br><br>no-cache:          需要使用对比缓存来验证缓存数据（后面介绍）<br><br>no-store:           所有内容都不会缓存，强制缓存，对比缓存都不会触发（对于前端开发来说，缓存越多越好，so…基本上和它说886）<br><br><img src="/2018/09/19/HTTP缓存机制及原理/632130-20170210141836104-1513192908.png" alt="img"><br>图中Cache-Control仅指定了max-age，所以默认为private，缓存时间为31536000秒（365天）<br><br>也就是说，在365天内再次请求这条数据，都会直接获取缓存数据库中的数据，直接使用。<br></p><h3 id="对比缓存"><a href="#对比缓存" class="headerlink" title="对比缓存"></a>对比缓存</h3><p>对比缓存，顾名思义，需要进行比较判断是否可以使用缓存。<br><br>浏览器第一次请求数据时，服务器会将缓存标识与数据一起返回给客户端，客户端将二者备份至缓存数据库中。<br><br>再次请求数据时，客户端将备份的缓存标识发送给服务器，服务器根据缓存标识进行判断，判断成功后，返回304状态码，通知客户端比较成功，可以使用缓存数据。<br><br>第一次访问：<br><img src="/2018/09/19/HTTP缓存机制及原理/632130-20170210141911682-1756976419.png" alt="img"><br>再次访问：<br><img src="/2018/09/19/HTTP缓存机制及原理/632130-20170210141921697-379821074.png" alt="img"><br>通过两图的对比，我们可以很清楚的发现，在对比缓存生效时，状态码为304，并且报文大小和请求时间大大减少。<br><br>原因是，服务端在进行标识比较后，只返回header部分，通过状态码通知客户端使用缓存，不再需要将报文主体部分返回给客户端。<br><br>对于对比缓存来说，缓存标识的传递是我们着重需要理解的，它在请求header和响应header间进行传递，一共分为两种标识传递，接下来，我们分开介绍。<br></p><h3 id="Last-Modified-If-Modified-Since"><a href="#Last-Modified-If-Modified-Since" class="headerlink" title="Last-Modified  /  If-Modified-Since"></a>Last-Modified  /  If-Modified-Since</h3><h4 id="Last-Modified："><a href="#Last-Modified：" class="headerlink" title="Last-Modified："></a>Last-Modified：</h4><p>服务器在响应请求时，告诉浏览器资源的最后修改时间。<br><img src="/2018/09/19/HTTP缓存机制及原理/632130-20170210142249541-789089587.png" alt="img"></p><h4 id="If-Modified-Since："><a href="#If-Modified-Since：" class="headerlink" title="If-Modified-Since："></a>If-Modified-Since：</h4><p>再次请求服务器时，通过此字段通知服务器上次请求时，服务器返回的资源最后修改时间。<br><br>服务器收到请求后发现有头If-Modified-Since 则与被请求资源的最后修改时间进行比对。<br><br>若资源的最后修改时间大于If-Modified-Since，说明资源又被改动过，则响应整片资源内容，返回状态码200；<br><br>若资源的最后修改时间小于或等于If-Modified-Since，说明资源无新修改，则响应HTTP 304，告知浏览器继续使用所保存的cache。<br><br><img src="/2018/09/19/HTTP缓存机制及原理/632130-20170210142307166-135607673.png" alt="img"></p><h3 id="Etag-If-None-Match（优先级高于Last-Modified-If-Modified-Since）"><a href="#Etag-If-None-Match（优先级高于Last-Modified-If-Modified-Since）" class="headerlink" title="Etag  /  If-None-Match（优先级高于Last-Modified  /  If-Modified-Since）"></a>Etag  /  If-None-Match（优先级高于Last-Modified  /  If-Modified-Since）</h3><h4 id="Etag："><a href="#Etag：" class="headerlink" title="Etag："></a>Etag：</h4><p>服务器响应请求时，告诉浏览器当前资源在服务器的唯一标识（生成规则由服务器决定）。<br><img src="/2018/09/19/HTTP缓存机制及原理/632130-20170210142054182-1766818273.png" alt="img"></p><h4 id="If-None-Match："><a href="#If-None-Match：" class="headerlink" title="If-None-Match："></a>If-None-Match：</h4><p>再次请求服务器时，通过此字段通知服务器客户段缓存数据的唯一标识。<br><br>服务器收到请求后发现有头If-None-Match 则与被请求资源的唯一标识进行比对，不同，说明资源又被改动过，则响应整片资源内容，返回状态码200；<br><br>相同，说明资源无新修改，则响应HTTP 304，告知浏览器继续使用所保存的cache。<br><br><img src="/2018/09/19/HTTP缓存机制及原理/632130-20170210142115479-1921175758.png" alt="img"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>对于强制缓存，服务器通知浏览器一个缓存时间，在缓存时间内，下次请求，直接用缓存，不在时间内，执行比较缓存策略。<br><br>对于比较缓存，将缓存信息中的Etag和Last-Modified通过请求发送给服务器，由服务器校验，返回304状态码时，浏览器直接使用缓存。<br><br>浏览器第一次请求：<br><img src="/2018/09/19/HTTP缓存机制及原理/632130-20170210142134291-1976923079.png" alt="img"><br>浏览器再次请求时：<br><img src="/2018/09/19/HTTP缓存机制及原理/632130-20170210141453338-1263276228.png" alt="img"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;HTTP缓存机制及原理的一些小总结&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
    
      <category term="网络基础" scheme="/tags/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"/>
    
      <category term="面试题" scheme="/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>css省略号</title>
    <link href="/2018/09/14/css%E7%9C%81%E7%95%A5%E5%8F%B7/"/>
    <id>/2018/09/14/css省略号/</id>
    <published>2018-09-14T07:39:45.000Z</published>
    <updated>2018-09-14T08:09:22.697Z</updated>
    
    <content type="html"><![CDATA[<p>页面中文字溢出的省略号<br><a id="more"></a></p><h2 id="css文本溢出省略号"><a href="#css文本溢出省略号" class="headerlink" title="css文本溢出省略号"></a>css文本溢出省略号</h2><h3 id="单行文本省略号"><a href="#单行文本省略号" class="headerlink" title="单行文本省略号"></a>单行文本省略号</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">overflow: hidden;</span><br><span class="line">text-overflow: ellipsis;</span><br><span class="line">white-space: nowrap;</span><br><span class="line"><span class="comment">// 有些浏览器需要加上width</span></span><br></pre></td></tr></table></figure><h3 id="多行文本溢出省略号"><a href="#多行文本溢出省略号" class="headerlink" title="多行文本溢出省略号"></a>多行文本溢出省略号</h3><p>在WebKit浏览器或移动端（绝大部分是WebKit内核的浏览器）的页面实现比较简单，可以直接使用WebKit的CSS扩展属性(WebKit是私有属性)-webkit-line-clamp ；注意：这是一个 不规范的属性（unsupported WebKit property），它没有出现在 CSS 规范草案中。<br><br>-webkit-line-clamp用来限制在一个块元素显示的文本的行数。 为了实现该效果，它需要组合其他的WebKit属性。<br>常见结合属性：<br></p><ul><li>display: -webkit-box; 必须结合的属性 ，将对象作为弹性伸缩盒子模型显示 。</li><li>-webkit-box-orient 必须结合的属性 ，设置或检索伸缩盒对象的子元素的排列方式 。</li><li>text-overflow: ellipsis;，可以用来多行文本的情况下，用省略号“…”隐藏超出范围的文本 。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">overflow : hidden;</span><br><span class="line">text-overflow: ellipsis;</span><br><span class="line">display: -webkit-box;</span><br><span class="line">-webkit-line-clamp: <span class="number">2</span>;</span><br><span class="line">-webkit-box-orient: vertical;</span><br></pre></td></tr></table></figure></li></ul><h3 id="兼容其它浏览器的写法"><a href="#兼容其它浏览器的写法" class="headerlink" title="兼容其它浏览器的写法"></a>兼容其它浏览器的写法</h3><p>html:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;WebKit Browsers will clamp the number <span class="keyword">of</span> lines <span class="keyword">in</span> <span class="keyword">this</span> paragraph to <span class="number">2.</span> Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed <span class="keyword">do</span> eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor <span class="keyword">in</span> reprehenderit <span class="keyword">in</span> voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt <span class="keyword">in</span> culpa qui officia deserunt mollit anim id est laborum.&lt;<span class="regexp">/p&gt;</span></span><br></pre></td></tr></table></figure></p><p>css:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">p &#123;</span><br><span class="line">    position:relative;</span><br><span class="line">    line-height:<span class="number">1.4</span>em;</span><br><span class="line">    <span class="comment">/* 3 times the line-height to show 3 lines */</span></span><br><span class="line">    height:<span class="number">4.2</span>em;</span><br><span class="line">    overflow:hidden;</span><br><span class="line">&#125;</span><br><span class="line">p::after &#123;</span><br><span class="line">    content:<span class="string">"..."</span>;</span><br><span class="line">    font-weight:bold;</span><br><span class="line">    position:absolute;</span><br><span class="line">    bottom:<span class="number">0</span>;</span><br><span class="line">    right:<span class="number">0</span>;</span><br><span class="line">    padding:<span class="number">0</span> <span class="number">20</span>px <span class="number">1</span>px <span class="number">45</span>px;</span><br><span class="line">    background:url(http:<span class="comment">//css88.b0.upaiyun.com/css88/2014/09/ellipsis_bg.png) repeat-y;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里注意几点：<b></b></p><ul><li>height高度真好是line-height的3倍；</li><li>结束的省略好用了半透明的png做了减淡的效果，或者设置背景颜色；</li><li>IE6-7不显示content内容，所以要兼容IE6-7可以是在内容中加入一个标签，比如用<span class="line-clamp">…</span>去模拟；</li><li>要支持IE8，需要将::after替换成:after；</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;页面中文字溢出的省略号&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="css" scheme="/categories/css/"/>
    
    
      <category term="样式" scheme="/tags/%E6%A0%B7%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>技术博客网站收集整理</title>
    <link href="/2018/09/06/%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E6%94%B6%E9%9B%86%E6%95%B4%E7%90%86/"/>
    <id>/2018/09/06/技术博客网站收集整理/</id>
    <published>2018-09-06T09:05:00.000Z</published>
    <updated>2018-09-28T03:20:29.582Z</updated>
    
    <content type="html"><![CDATA[<p>对一些大牛的blog或者github的收集。<br><a id="more"></a></p><h2 id="技术博客列表"><a href="#技术博客列表" class="headerlink" title="技术博客列表"></a>技术博客列表</h2><ul><li><a href="https://github.com/chokcoco" target="_blank" rel="noopener">coco大神的github</a></li><li><a href="https://github.com/youngwind/blog/issues/99" target="_blank" rel="noopener">大神些webpack</a></li><li><a href="https://www.bougieblog.cn/article/Qk9VMTlHSUU.html" target="_blank" rel="noopener">比较不错的面试题收集</a></li><li><a href="https://feclub.cn/home" target="_blank" rel="noopener">前端俱乐部</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对一些大牛的blog或者github的收集。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="大牛分享" scheme="/tags/%E5%A4%A7%E7%89%9B%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
</feed>
