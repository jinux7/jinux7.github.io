<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>jinux</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="/"/>
  <updated>2022-12-07T01:57:58.553Z</updated>
  <id>/</id>
  
  <author>
    <name>jinux</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>javascript常用中英文惯译法</title>
    <link href="/2022/12/06/javascript%E5%B8%B8%E7%94%A8%E4%B8%AD%E8%8B%B1%E6%96%87%E6%83%AF%E8%AF%91%E6%B3%95/"/>
    <id>/2022/12/06/javascript常用中英文惯译法/</id>
    <published>2022-12-06T03:07:18.000Z</published>
    <updated>2022-12-07T01:57:58.553Z</updated>
    
    <content type="html"><![CDATA[<p>javascript常用中英文惯译法<br><a id="more"></a></p><h2 id="语法或词法分析"><a href="#语法或词法分析" class="headerlink" title="语法或词法分析"></a>语法或词法分析</h2><blockquote><p>标识符（identifier）<br>标签（label）<br>关键字，保留字（keyword,reserved words）<br>符号（symbol）<br>标记，记号（token）<br>数据类型（types,data types）<br>无类型的（untype-）<br>变量（variable）<br>声明（declare）<br>赋值（assignment）<br>解构赋值（destructuring assignment）<br>未赋值变量（unassigned variable）<br>未声明变量（undeclared variable）<br>值（values）<br>常量，常数，常值（constant,const）<br>直接量，字面量（literal,literal constant,manifest constant）<br>指数计数法，科学计数法（exponential notation）<br>定点计数法（fixed-point notation）<br>代码逻辑行，物理行（logical line,physical line）<br>语句（statements）<br>语句块（statement block）<br>简单语句（simple statements）<br>单行语句（single line statements）<br>复合语句（compound statements）<br>条件（condition）<br>表达式（expression）<br>一元运算符，单目运算符（unary operator）<br>二元运算符（binary operator）<br>运算符优先级（precedence）<br>运算符，操作符，操作数（operator）</p></blockquote><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><blockquote><p>数组（array）<br>关联数组（associative array）<br>索引数组（index array）<br>多维数组（multidimensional array）<br>动态数组（dynamic arry）<br>变长数组（variable length array）<br>元素（element）<br>索引，下标（index）<br>字符串（string）<br>Unicode 字符串（Unicode string）<br>转义序列（escape sequence）</p></blockquote><h2 id="编程范型（面向对象，函数式等）"><a href="#编程范型（面向对象，函数式等）" class="headerlink" title="编程范型（面向对象，函数式等）"></a>编程范型（面向对象，函数式等）</h2><blockquote><p>编程范型（programming paradigm）<br>多范型语言（multi-paradigm language）<br>动态绑定（dynamic bind）<br>作用域（scope）<br>引用（reference）<br>域，成员，字段（member,field）<br>类（class）<br>继承（inheritance）<br>多态（polymorphism）<br>封装（encapsulation）<br>类方法（class method）<br>虚方法（virtual method）<br>纯虚方法，抽象方法（abstract method）<br>覆盖（override）<br>对象（object）<br>实例（instance）<br>原型（prototype）<br>构造器，构造函数（constructor,constructor function）<br>属性（property）<br>方法（method）<br>用户定义属性（user-defined properties）<br>预定义属性（pre-defined properties）<br>内部（内建）属性/方法/成员（build-in properties/method/member）<br>事件（event）<br>事件句柄，事件处理器，事件处理代码（event handle）<br>特性，性质，属性（attribute）<br>特性（feature）<br>函数（function）<br>参数（arguments）<br>外部局部变量（external local variable,upvalue）<br>lambda运算（lambda calculus）<br>闭包（closure）</p></blockquote><h2 id="编译、执行及其他"><a href="#编译、执行及其他" class="headerlink" title="编译、执行及其他"></a>编译、执行及其他</h2><blockquote><p>解释器（interpreter）<br>运行期（runtime）<br>宿主（host）<br>上下文（context）<br>环境（environment）<br>执行环境，执行上下文（execution context）<br>异常（exception）<br>错误（error）<br>正则表达式（regular expression）<br>全局（global）<br>局部（local）<br>全局对象（global object）<br>全局变量（global variable）<br>局部变量（local variable）</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;javascript常用中英文惯译法&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
    
      <category term="基础知识" scheme="/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>GPU和CSS硬件加速</title>
    <link href="/2022/10/21/GPU%E5%92%8CCSS%E7%A1%AC%E4%BB%B6%E5%8A%A0%E9%80%9F/"/>
    <id>/2022/10/21/GPU和CSS硬件加速/</id>
    <published>2022-10-21T06:38:55.000Z</published>
    <updated>2022-10-21T06:48:54.352Z</updated>
    
    <content type="html"><![CDATA[<p>彻底搞懂GPU和CSS硬件加速<br><a id="more"></a></p><h2 id="从-cpu-聊起"><a href="#从-cpu-聊起" class="headerlink" title="从 cpu 聊起"></a>从 cpu 聊起</h2><p>cpu (central process) 是计算机的大脑，它提供了一套指令集，我们写的程序最终会通过 cpu 指令来控制的计算机的运行。</p><p>cpu 会对指令进行译码，然后通过逻辑电路执行该指令。整个执行的流程分为了多个阶段，叫做流水线。指令流水线包括取指令、译码、执行、取数、写回五步，这是一个指令周期。cpu 会不断的执行指令周期来完成各种任务。</p><p>指令和数据都会首先加载到内存中，在程序运行时依次取到 cpu 里。cpu 访问内存虽然比较快，但比起 cpu 执行速度来说还是比较慢的，为了缓解这种速度矛盾，cpu 设计了 3 级缓存，也就是 L1、L2、L3 的缓存。<br><img src="/2022/10/21/GPU和CSS硬件加速/1.webp" alt="img"><br>如图，多核 cpu 各核心都有自有独立的 L1、L2 缓存，然后共享 L3 缓存，这 3 级缓存容量是逐渐递增的，但是速度是逐渐下降的，但是也会比访问内存快一些。</p><p>有了这 3 级缓存以后，cpu 执行速度和访问内存速度的矛盾就可以得到缓解，不需要一直访问内存，cpu 每次会加载一个缓存行，也就是 64 字节大小的数据到缓存中。这样访问临近的数据的时候就可以直接访问缓存。</p><p>从内存中把数据和指令加载到 cpu 的缓存中，然后通过控制器控制指令的译码、执行，通过运算器进行运算，之后把结果写回内存。这就是 cpu 的工作流程。</p><p>cpu 每个核只有一个线程，也就是单控制流、单数据流。这样的架构导致 cpu 在一些场景下效率是不高的，比如 3d 渲染的场景。</p><h2 id="3d-渲染流程"><a href="#3d-渲染流程" class="headerlink" title="3d 渲染流程"></a>3d 渲染流程</h2><p>3d 的渲染首先是建立 3d 的模型，它由一系列三维空间中的顶点构成，3 个顶点构成一个三角形，然后所有的顶点构成的三角形拼接起来就是 3d 模型。<br><img src="/2022/10/21/GPU和CSS硬件加速/2.webp" alt="img"><br>顶点、三角形，这是 3d 的基础。3d 引擎首先要计算顶点数据，确定 3d 图形的形状。之后还要对每个面进行贴图，可以在每个三角形画上不同的纹理。</p><p>3d 图形要显示在二维的屏幕上就要做投影，这个投影的过程叫做光栅化。（光栅是一种光学仪器，在这里就代表 3d 投影到 2d 屏幕的过程）<br><img src="/2022/10/21/GPU和CSS硬件加速/3.webp" alt="img"><br>光栅化要计算 3d 图形投影到屏幕的每一个像素的颜色，计算完所有的像素之后会写到显存的帧缓冲区，完成了一帧的渲染，之后会继续这样计算下一帧。</p><p>也就是说，3d 渲染的流程是：</p><blockquote><p>计算顶点数据，构成 3d 的图形<br>给每个三角形贴图，画上纹理<br>投影到二维的屏幕，计算每个像素的颜色（光栅化）<br>把一帧的数据写入显存的帧缓冲区</p></blockquote><p>顶点的数量是非常庞大的，而 cpu 只能顺序的一个个计算，所以处理这种 3d 渲染会特别费劲，于是就出现了专门用于这种 3d 数据的并行计算的硬件，也就是 GPU。</p><h2 id="GPU-的构成"><a href="#GPU-的构成" class="headerlink" title="GPU 的构成"></a>GPU 的构成</h2><p>和 cpu 的一个一个数据计算不同，gpu 是并行的，有成百上千个核心用于并行计算。<br><img src="/2022/10/21/GPU和CSS硬件加速/4.webp" alt="img"><br>gpu 也是有着指令、译码、执行的流程，只不过，每个指令会并行执行 n 个计算，是单控制流多数据流的，而 cpu 是单控制流单数据流。</p><p>所以，对于 3d 渲染这种要计算成万个顶点数据和像素点的场景，GPU 会比 CPU 高效很多。</p><p>但是，gpu 全是优点么？也不是。</p><h2 id="cpu-和-gpu-的区别"><a href="#cpu-和-gpu-的区别" class="headerlink" title="cpu 和 gpu 的区别"></a>cpu 和 gpu 的区别</h2><p>cpu 是通用的，能够执行各种逻辑和运算，而 gpu 则是主要是用于并行计算大批量的重复任务，不能处理复杂逻辑。</p><p>如上图，cpu 中控制器和缓存占据了很大一部分，而 gpu 中这两部分则很少，但是有更多的核心用于计算。</p><p>两者对比的话，cpu 相当于一个大学生，能够解决各种难题，但是计算 1 万个加法就没那么快，而 gpu 就像一帮小学生，解决不了难题，但是计算加法这种就很快，因为人多。</p><p>也就是说如果逻辑复杂，那么只能用 cpu，如果只是计算量大，并且每个计算都比较重复，那就比较适合 gpu。</p><p>3d 的渲染中有大量这种重复却简单的计算，比如顶点数据和光栅化的像素数据，通过 gpu 就可以并发的一次计算成百上千个。</p><h2 id="opengl、webgl、css-硬件加速"><a href="#opengl、webgl、css-硬件加速" class="headerlink" title="opengl、webgl、css 硬件加速"></a>opengl、webgl、css 硬件加速</h2><p>显卡中集成了 gpu，提供了驱动，使用 gpu 能力需要使用驱动的 api。 gpu 的 api 有一套开源标准叫做 opengl，有三百多个函数，用于各种图形的绘制。（在 windows 下有一套自己的标准叫做 DirectX）</p><p>我们在网页中绘制 3d 图形是使用 webgl 的 api，而浏览器在实现 webgl 的时候也是基于 opengl 的 api，最终会驱动 gpu 进行渲染。</p><p>css 大部分样式还是通过 cpu 来计算的，但 css 中也有一些 3d 的样式和动画的样式，计算这些样式同样有很多重复且大量的计算任务，可以交给 gpu 来跑。</p><p>浏览器在处理下面的 css 的时候，会使用 gpu 渲染：</p><blockquote><p>transform<br>opacity<br>filter<br>will-change</p></blockquote><p>浏览器是把内容分到不同的图层分别渲染的，最后合并到一起，而触发 gpu 渲染会新建一个图层，把该元素样式的计算交给 gpu。</p><p>opacity 需要改变每个像素的值，符合重复且大量的特点，会新建图层，交给 gpu 渲染。transform 是动画，每个样式值的计算也符合重复且大量的特点，也默认会使用 gpu 加速。同理 fiter 也是一样。</p><p>这里要注意的是 gpu 硬件加速是需要新建图层的，而把该元素移动到新图层是个耗时操作，界面可能会闪一下，所以最好提前做。will-change 就是提前告诉浏览器在一开始就把元素放到新的图层，方便后面用 gpu 渲染的时候，不需要做图层的新建。</p><p>当然，有的时候我们想强制触发硬件渲染，就可以通过上面的属性，比如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">will-change: transform;</span><br></pre></td></tr></table></figure></p><p>或者<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">transform:translate3d(0, 0, 0);</span><br></pre></td></tr></table></figure></p><p>chrome devtools 可以看到是 cpu 渲染还是 gpu 渲染，打开 rendering 面板，勾选 layer borders，会发现蓝色和黄色的框。蓝色的是 cpu 渲染的，而黄色的是 gpu 渲染的。</p><p>比如这段文字，现在没有单独一个图层：<br><img src="/2022/10/21/GPU和CSS硬件加速/5.webp" alt="img"><br>添加一个 will-change: transform 的属性，浏览器会新建图层来渲染该元素，然后使用 gpu 渲染：<br><img src="/2022/10/21/GPU和CSS硬件加速/6.webp" alt="img"><br>gpu 硬件加速能减轻 cpu 压力，使得渲染更流畅，但是也会增加内存的占用，对于 transform、opacity、filter 默认会开启硬件加速。其余情况，建议只在必要的时候用。</p><h2 id="opencl-和神经网络"><a href="#opencl-和神经网络" class="headerlink" title="opencl 和神经网络"></a>opencl 和神经网络</h2><p>重复且大量的计算任务只有 3d 渲染一种场景么？</p><p>不是的，AI 领域的机器学习也很典型，它的特点是大量的神经元需要计算，但是每个计算都比较简单，也很适合用 gpu 来跑。</p><p>现在的 gpu 不只是能跑图形渲染，也提供了一些编程能力，这部分 api 有 opencl 标准。可以通过 gpu 的并行计算能力来跑一些有大量计算但是没有很多逻辑的的任务，会比 cpu 效率更高。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>cpu 提供了指令集，会不断的执行取指令、译码、执行、取数、写回的指令周期，控制着计算机的运转。</p><p>cpu 计算的速度比较快，而访问内存比较慢，为了缓和两者的矛盾，引入了 L1、L2、L3 的多级缓存体系，L1、L2、L3 是容器逐渐变大，访问速度逐渐变慢的关系，但还是比访问内存快。内存会通过一个缓存行（64 字节）的大小为单位来读入缓存，供 cpu 访问。</p><p>3d 渲染的流程是计算每一个顶点的数据，连成一个个三角形，然后进行纹理贴图，之后计算投影到二维屏幕的每一个像素的颜色，也就是光栅化，最后写入显存帧缓冲区，这样进行一帧帧的渲染。</p><p>cpu 的计算是一个个串行执行的，对于 3d 渲染这种涉及大量顶点、像素要计算的场景就不太合适，于是出现了 gpu。</p><p>gpu 可以并行执行大量重复的计算，有成百上千个计算单元，相比 cpu 虽然执行不了复杂逻辑，但是却能执行大量重复的运算。提供了 opengl 的标准 api。</p><p>css 中可以使用 gpu 加速渲染来减轻 cpu 压力，使得页面体验更流畅，默认 transform、opacity、filter 都会新建新的图层，交给 gpu 渲染。对于这样的元素可以使用 will-change: 属性名; 来告诉浏览器在最开始就把该元素放到新图层渲染。</p><p>gpu 的并行计算能力不只是 3d 渲染可以用，机器学习也有类似的场景，可以通过 opencl 的 api 来控制 gpu 进行计算。</p><p>gpu 和前端的关系还是挺密切的，不管是 webgl，还是 css 硬件加速，或者网页的性能都与之相关。希望这篇文章能够帮大家了解 gpu 的原理和应用。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;彻底搞懂GPU和CSS硬件加速&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="css" scheme="/categories/css/"/>
    
    
      <category term="web图形" scheme="/tags/web%E5%9B%BE%E5%BD%A2/"/>
    
      <category term="3D" scheme="/tags/3D/"/>
    
      <category term="web性能" scheme="/tags/web%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>css中的单位</title>
    <link href="/2022/10/21/css%E4%B8%AD%E7%9A%84%E5%8D%95%E4%BD%8D/"/>
    <id>/2022/10/21/css中的单位/</id>
    <published>2022-10-21T05:39:28.000Z</published>
    <updated>2022-10-21T06:30:28.148Z</updated>
    
    <content type="html"><![CDATA[<p>css中的一些单位<br><a id="more"></a><br>说起CSS单位，我们最熟悉的可能就是像素单位（px），它是一个绝对单位，也就是说一个10px的文字，放在哪里都是一样大的。单位可以影响颜色、距离、尺寸等一系列的属性。CSS中单位的形式有很多种，下面就分别来看看这些单位。<br><img src="/2022/10/21/css中的单位/1.webp" alt="img"></p><h2 id="相对单位"><a href="#相对单位" class="headerlink" title="相对单位"></a>相对单位</h2><p>相对单位就是相对于另一个长度的长度。CSS中的相对单位主要分为两大类：</p><blockquote><p>字体相对单位，他们都是根据font-size来进行计算的。常见的字体相对单位有：em、rem、ex、ch；<br>视窗相对单位，他们都是根据视窗大小来决定的。常见的视窗相对单位有vw、vh、vmax、vmin。</p></blockquote><h3 id="em-和-rem"><a href="#em-和-rem" class="headerlink" title="em 和 rem"></a>em 和 rem</h3><h4 id="em"><a href="#em" class="headerlink" title="em"></a>em</h4><p>em是最常见的相对长度单位，适合基于特定的字号进行排版。根据CSS的规定，1em 等于元素的font-size属性的值。<br>em 是相对于父元素的字体大小进行计算的。如果当前对行内文本的字体尺寸未进行显示设置，则相对于浏览器的默认字体尺寸。当DOM元素嵌套加深时，并且同时给很多层级显式的设置了font-size的值的单位是em，那么就需要层层计算，复杂度会很高。<br><strong>如果自身元素是没有设置字体大小的，那么就会根据其父元素的字体大小作为参照去计算，如果元素本身已经设置了字体，那么就会基于自身的字体大小进行计算。</strong><br>em单位除了可以作用于 font-size之外，还可以运用于其他使用长度的属性，比如border-width、width、height、margin、padding、text-shadow等。<br>所以，em的使用还是比较复杂的，它可能会继承任意一级父元素的字体大小。需要谨慎使用。</p><h4 id="rem"><a href="#rem" class="headerlink" title="rem"></a>rem</h4><p>rem相对于em就简单了很多，它是根据页面的根元素（根元素）的字体大小来计算的。<br>如果没有对根元素设定字号的话，font-size: 1rem的作用与font-size: initial相同。</p><h4 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h4><p>使用 em 和 rem 可以让我们灵活的够控制元素整体的放大和缩小，而不是固定大小。那何时应使用 em，何时应使用 rem 呢？可以根据两者的差异来进行选择：</p><blockquote><p>两者在客户端中计算出来的样式都会以px的形式显示；<br>rem是相对于根元素html的font-size计算，em 相对于元素的font-size计算；<br>当需要根据浏览器的font-size设置缩放时，应该使用 rem；<br>使用 em 应该根据组件的font-size来定，而不是根元素的font-size来定；<br>rem 可以从浏览器字体设置中继承 font-size 值， em 可能受任何继承过来的父元素 font-size 的影响。</p></blockquote><h3 id="ex-和-ch"><a href="#ex-和-ch" class="headerlink" title="ex 和 ch"></a>ex 和 ch</h3><p>ex 和 ch 都是排版用的单位，它们的大小取决于元素的font-size 和 font-family属性。</p><blockquote><p>ex 指的是所用字体中小写字母 x 的高度。因此，如果两个字体不一样，那么 ex 的值是不一样的。因为每种字体的小写 x 的高度是不一样的。<br>ch 和 ex 类似，不过它是基于数字 0 的宽度计算的。会随着字体的变化而变化。而0 的宽度通常是对字体的平均字符宽度，它是一个估计值。由于 ch 是一个近似等宽的单元，所以在设置容器的宽度时很有用，比如一个容器想要显示指定个数的字符串时，就可以使用这个单位。</p></blockquote><h3 id="vw、vh、vmax-和-vmin"><a href="#vw、vh、vmax-和-vmin" class="headerlink" title="vw、vh、vmax 和 vmin"></a>vw、vh、vmax 和 vmin</h3><p>这四个单位都是视窗单位，所谓的视窗，在web端指的就是可视区域，移动端的视窗指的就是布局视窗。如果视窗大小发生了变化，那么这些值都会随之变化。这四个单位指的是：</p><blockquote><p>vw：视窗宽度的百分比；<br>vh：视窗高度的百分比；<br>vmax：较大的 vh 和 vw；<br>vmin：较小的 vh 和 vw。</p></blockquote><p>假如一个浏览器的高度是800px，那么1vh的值就是8px。vh和vw的大小总是和视窗的高度和宽度有关。 ​<br>vmin 和 vmax 与视窗宽度和高度的最大值和最小值有关。假如一个浏览器高度为500px，宽度为1200px，那么1vmin就是5px，1vmax就是12px。</p><h2 id="绝对单位"><a href="#绝对单位" class="headerlink" title="绝对单位"></a>绝对单位</h2><p>在 CSS 中，绝对单位包括： px 、pt 、pc、 cm 、 mm 、in 等。绝对单位是一个固定的值，它反应了一个真实的物理尺寸。它不会受屏幕大小或者字体的影响。它们的大小取决于值以及屏幕的分辨率（DPI，每英寸的点数）。px就是我们最常用的绝对单位之一。这些绝对单位的换算关系如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1in = 25.4mm = 2.54cm = 6pc = 72pt =96px</span><br></pre></td></tr></table></figure></p><h3 id="px"><a href="#px" class="headerlink" title="px"></a>px</h3><p>px 全称为 Pixels，表示像素，它并不严格等于显示器的像素，尤其在高清屏下。尽管CSS单位会根据浏览器、操作系统或者硬件适当缩放，在某些设备或者用户的分辨率设置下也会发生变化，但是96px通常等于一个物理英寸的大小。<br>CSS 将光栅图像(如照片等)的显示方式定义为默认每一个图像大小为1px。 一个“600x400”解析度的照片的长宽分别为“600px”和“400px”，所以照片本身的像素并不会与显示装置像素一致，而是与 px 单位一致。如此就可以将图像完整的与网页的其它元素排列起来。 ​<br>很多时候， px 也常被称为 CSS 像素。它是一个绝对单位，但也可以被视为相对单位，因为像素单位相对的是设备像素。在同一个设备上，每 1 个 CSS 像素所代表的物理像素是可以变化的；在不同的设备之间，每 1 个 CSS 像素所代表的物理像素是可以变化的。</p><h3 id="pt"><a href="#pt" class="headerlink" title="pt"></a>pt</h3><p>pt 全称为 Point，表示点。常用于软件设计和排版印刷行业（笔者做的前端系统，最终的产物就是一个需要拿去印刷的PDF，所以会经常用到这个单位）。当使用这个单位时，无论显示器的分辨率是多少，打印在纸上的结果都是一样的。 ​<br>如果单纯为了网页的显示，建议就使用px像素单位，如果需要输出印刷产品，就可以考虑使用pt。</p><h3 id="pc"><a href="#pc" class="headerlink" title="pc"></a>pc</h3><p>pc 全程为 Picas，表示派卡。相当于我国新四号铅字的尺寸。派卡也是印刷的术语，1派卡等于12点。它和 px 的换算关系如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1pc = 16px</span><br></pre></td></tr></table></figure></p><h3 id="cm"><a href="#cm" class="headerlink" title="cm"></a>cm</h3><p>cm 全称为 Centimeters，表示厘米。它和 px 的换算关系如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1cm = 37.8px</span><br></pre></td></tr></table></figure></p><h3 id="mm"><a href="#mm" class="headerlink" title="mm"></a>mm</h3><p>mm 全称为 Millimeters，表示毫米。它和 px 的换算关系如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1mm = 3.78px</span><br></pre></td></tr></table></figure></p><h3 id="in"><a href="#in" class="headerlink" title="in"></a>in</h3><p>in 全称为 Inches，表示英寸。它和 px 的换算关系如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1in = 96px</span><br></pre></td></tr></table></figure></p><h2 id="频率单位"><a href="#频率单位" class="headerlink" title="频率单位"></a>频率单位</h2><p>CSS中的频率单位有两个：赫兹（Hz）和千赫兹（kHz）。它们的换算关系如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1kHz = 1000Hz</span><br></pre></td></tr></table></figure></p><p>通常情况下，频率单位使用在听或说级联样式表中。频率可以被用来改变一个语音阅读文本的音调。低频率就是低音，高频率就是高音。<br>需要注意，当数值为0时，单位对值没有影响，但是单位是不能省略的。也就是说0、0Hz、0kHz是不一样的。所以，在使用频率单位时，不要直接写0。另外，这两个单位是不区分大小写的。</p><h2 id="时间单位"><a href="#时间单位" class="headerlink" title="时间单位"></a>时间单位</h2><p>CSS中的时间单位有两个：秒（s）和毫秒（ms）。这两个时间单位都是CSS新增的单位。这两个单位的换算关系如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1s = 1000ms</span><br></pre></td></tr></table></figure></p><p>时间单位主要用于过度和动画中，用于定义持续时间或延迟时间。</p><h2 id="分辨率单位"><a href="#分辨率单位" class="headerlink" title="分辨率单位"></a>分辨率单位</h2><p>CSS中的分辨率单位有三个：dpi、dpcm、dppx。这三个单位都是CSS3中华新增的单位。他们都是正值，不允许为负值。这三个单位的换算关系如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1dppx = 96dpi</span><br><span class="line">1dpi ≈ 0.39dpcm</span><br><span class="line">1dpcm ≈ 2.54dpi</span><br></pre></td></tr></table></figure></p><p>分辨率单位主要用于媒体查询等操作。</p><h3 id="dpi"><a href="#dpi" class="headerlink" title="dpi"></a>dpi</h3><p>dpi 全称为 dots per inch，表示每英寸包含的点的数量。普通屏幕通常包含 72或96个点，大于 192dpi 的屏幕被称为高分屏。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@media screen and (min-resolution: 96dpi) &#123; ... &#125;</span><br><span class="line">@media print and (min-resolution: 300dpi) &#123; ... &#125;</span><br></pre></td></tr></table></figure></p><h3 id="dpcm"><a href="#dpcm" class="headerlink" title="dpcm"></a>dpcm</h3><p>dpcm 全称为 dots per centimeter，表示每厘米包含的点的数量。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@media screen and (min-resolution: 28dpcm) &#123; ... &#125;</span><br><span class="line">@media print and (min-resolution: 118dpcm) &#123; ... &#125;</span><br></pre></td></tr></table></figure></p><h3 id="dppx"><a href="#dppx" class="headerlink" title="dppx"></a>dppx</h3><p>dppx 全称为 dots per pixel，表示每像素（px）包含点的数量。由于CSS px的固定比率为1:96，因此1dppx相当于96dpi。它对应于由图像分辨率定义的CSS中显示的图像的默认分辨率。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@media screen and (min-resolution: 2dppx) &#123; ... &#125;</span><br><span class="line">@media screen and (min-resolution: 1dppx) and (max-resolution: 1.9dppx) &#123; ... &#125;</span><br></pre></td></tr></table></figure></p><h2 id="角度单位"><a href="#角度单位" class="headerlink" title="角度单位"></a>角度单位</h2><p>CSS中的角度单位有四个：deg、grad、rad、turn。这些角度单位都是CSS3中新增的单位。它们的换算关系如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">90deg = 100grad = 0.25turn ≈ 1.570796326794897rad</span><br></pre></td></tr></table></figure></p><p>一般这些角度单位用于元素的旋转操作，包括2D旋转、3D旋转等。</p><blockquote><p>当旋转值为正值时，元素会顺时针旋转；<br>当旋转值为负值时，元素会逆时针旋转。</p></blockquote><p>通常情况下，一个完整的旋转就是360度。所以，所有的角度都在0-360度之间。但是，超出这个范围的值也是允许的，只不过都会归到0-360度之间。比如，顺时针旋转450度（450deg）、逆时针旋转270度（-270deg）、顺时针旋转90度（90deg）都是一样的效果，都会归为90deg。但是当使用动画时，这些角度值就非常重要了。<br>CSS的旋转主要依赖于 transform 属性中的 rotate() 、rotate3d、 skew() 等方法。只需给它们传递旋转的角度即可。 ​<br>除了旋转会使用角度之外，线性渐变也会经常使用角度值：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background: linear-gradient(45deg, #000, #fff);</span><br></pre></td></tr></table></figure></p><h3 id="deg"><a href="#deg" class="headerlink" title="deg"></a>deg</h3><p>deg 全称为 Degress，表示度，一个圆总共360度。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">transform: rotate(2deg);</span><br></pre></td></tr></table></figure></p><h3 id="grad"><a href="#grad" class="headerlink" title="grad"></a>grad</h3><p>grad 全称为 Gradians，表示梯度，一个圆总共400梯度。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">transform: rotate(2grad);</span><br></pre></td></tr></table></figure></p><h3 id="rad"><a href="#rad" class="headerlink" title="rad"></a>rad</h3><p>rad 全称为 Radians，表示弧度，一个圆总共2π弧度。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">transform: rotate(2rad);</span><br></pre></td></tr></table></figure></p><h3 id="turn"><a href="#turn" class="headerlink" title="turn"></a>turn</h3><p>turn 全称为 Turns，表示圈（转），一个圆总共一圈（转）。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">transform:rotate(.5turn);</span><br></pre></td></tr></table></figure></p><h2 id="百分比单位"><a href="#百分比单位" class="headerlink" title="百分比单位"></a>百分比单位</h2><p>百分比（%）也是我们比较常用的单位之一，所有接受长度值的属性都可以使用百分比单位。但是不同属性使用该单位的效果可能并不一样。但是都需要有一个参照值，也就是说百分比值是一个相对的值。 ​</p><h3 id="盒模型中的百分比"><a href="#盒模型中的百分比" class="headerlink" title="盒模型中的百分比"></a>盒模型中的百分比</h3><p>在CSS中的盒模型包含的属性有：width、max-width、min-width、height、max-height、min-height、padding、margin等。这些属性在使用百分比时，参照物不尽相同：</p><blockquote><p>width、max-width、min-width：值为百分比时，其相对于包含块的 width 进行计算；<br>height、max-height、min-height：值为百分比时，其相对于包含块的 height 进行计算；<br>padding、margin：值为百分比时，如果是水平的值，就是相对于包含块的 width 进行计算；如果是垂直的值，也是相对于包含块的 width 进行计算。</p></blockquote><h3 id="文本中的百分比"><a href="#文本中的百分比" class="headerlink" title="文本中的百分比"></a>文本中的百分比</h3><p>在CSS中文本控制的属性有font-size、line-height 、vertical-align、 text-indent等。这些属性在使用百分比时，参照物不尽相同：</p><blockquote><p>font-size：根据父元素的font-size 进行计算；<br>line-height：根据font-size进行计算；<br>vertical-align：根据line-height进行计算；<br>text-indent：如果是水平的，则根据width进行计算，如果是垂直的，则根据 height 进行计算。</p></blockquote><h3 id="定位中的百分比"><a href="#定位中的百分比" class="headerlink" title="定位中的百分比"></a>定位中的百分比</h3><p>在CSS中用控制 position 位置的top、right、bottom、left都可以使用百分比作为单位。其参照物就是包含块的同方向的width和height。不同定位的包含块不尽相同：</p><blockquote><p>如果元素为静态（ static ）或相对定位（ relative ），包含块一般是其父容器；<br>如果元素为绝对定位（ absolute ），包含块应该是离它最近的 position 为 absolute 、 relative 或 fixed 的祖先元素；<br>如果元素为固定定位（ fixed ），包含块就是视窗（ viewport ）。</p></blockquote><h3 id="变换中的百分比"><a href="#变换中的百分比" class="headerlink" title="变换中的百分比"></a>变换中的百分比</h3><p>CSS 中的 transform 属性中的 translate 和 transform-origin 值也可以设置百分比。</p><blockquote><p>translateX() 根据容器的 width 计算<br>translateY() 根据容器的 height 计算<br>transform-origin 中横坐标（ x ）相对于容器的 width 计算；纵坐标（ y ）相对于容器的 height 计算</p></blockquote><p>注意，在 translate 还有一个 z 轴的函数 translateZ() 。它是不接受百分比为单位的值。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;css中的一些单位&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="css" scheme="/categories/css/"/>
    
    
      <category term="基础知识" scheme="/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>github工作流</title>
    <link href="/2022/10/14/github%E5%B7%A5%E4%BD%9C%E6%B5%81/"/>
    <id>/2022/10/14/github工作流/</id>
    <published>2022-10-14T03:21:29.000Z</published>
    <updated>2022-10-14T03:26:14.090Z</updated>
    
    <content type="html"><![CDATA[<p>常用的一种github工作流<br><a id="more"></a></p><blockquote><p>1.git clone // 到本地<br>2.git checkout -b xxx 切换至新分支xxx<br>（相当于复制了remote的仓库到本地的xxx分支上<br>3.修改或者添加本地代码（部署在硬盘的源文件上）<br>4.git diff 查看自己对代码做出的改变<br>5.git add 上传更新后的代码至暂存区<br>6.git commit 可以将暂存区里更新后的代码更新到本地git<br>7.git push origin xxx 将本地的xxxgit分支上传至github上的git</p></blockquote><blockquote><p>（如果在写自己的代码过程中发现远端GitHub上代码出现改变）<br>1.git checkout main 切换回main分支<br>2.git pull origin master(main) 将远端修改过的代码再更新到本地<br>3.git checkout xxx 回到xxx分支<br>4.git rebase main 我在xxx分支上，先把main移过来，然后根据我的commit来修改成新的内容<br>（中途可能会出现，rebase conflict —–》手动选择保留哪段代码）<br>5.git push -f origin xxx 把rebase后并且更新过的代码再push到远端github上<br>（-f —》强行）<br>6.原项目主人采用pull request 中的 squash and merge 合并所有不同的commit</p></blockquote><blockquote><p>远端完成更新后<br>1.git branch -d xxx 删除本地的git分支<br>2.git pull origin master 再把远端的最新代码拉至本地</p></blockquote><p><a href="https://www.bilibili.com/video/BV19e4y1q7JJ/?spm_id_from=333.1007.tianma.2-2-4.click&amp;vd_source=52fb49cd12021ddab3266f637619f33b" target="_blank" rel="noopener">视频教程地址</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;常用的一种github工作流&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
    
      <category term="github" scheme="/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>企业信息化常用系统</title>
    <link href="/2022/10/12/%E4%BC%81%E4%B8%9A%E4%BF%A1%E6%81%AF%E5%8C%96%E5%B8%B8%E7%94%A8%E7%B3%BB%E7%BB%9F/"/>
    <id>/2022/10/12/企业信息化常用系统/</id>
    <published>2022-10-12T03:15:40.000Z</published>
    <updated>2022-10-12T03:31:34.247Z</updated>
    
    <content type="html"><![CDATA[<p>企业信息化常用系统的英文缩写<br><a id="more"></a></p><h2 id="企业资源计划（ERP）"><a href="#企业资源计划（ERP）" class="headerlink" title="企业资源计划（ERP）"></a>企业资源计划（ERP）</h2><p><img src="/2022/10/12/企业信息化常用系统/1.png" alt="img"></p><h2 id="客户关系管理（CRM）"><a href="#客户关系管理（CRM）" class="headerlink" title="客户关系管理（CRM）"></a>客户关系管理（CRM）</h2><p><img src="/2022/10/12/企业信息化常用系统/2.png" alt="img"></p><h2 id="供应链管理（SCM）"><a href="#供应链管理（SCM）" class="headerlink" title="供应链管理（SCM）"></a>供应链管理（SCM）</h2><p><img src="/2022/10/12/企业信息化常用系统/3.png" alt="img"></p><h2 id="商业智能（BI）"><a href="#商业智能（BI）" class="headerlink" title="商业智能（BI）"></a>商业智能（BI）</h2><p><img src="/2022/10/12/企业信息化常用系统/4.png" alt="img"></p><h2 id="决策支持系统（DSS）"><a href="#决策支持系统（DSS）" class="headerlink" title="决策支持系统（DSS）"></a>决策支持系统（DSS）</h2><p><img src="/2022/10/12/企业信息化常用系统/5.png" alt="img"></p><h2 id="业务流程重组（BPR）"><a href="#业务流程重组（BPR）" class="headerlink" title="业务流程重组（BPR）"></a>业务流程重组（BPR）</h2><p><img src="/2022/10/12/企业信息化常用系统/6.png" alt="img"></p><h2 id="业务流程管理（BPM）"><a href="#业务流程管理（BPM）" class="headerlink" title="业务流程管理（BPM）"></a>业务流程管理（BPM）</h2><p><img src="/2022/10/12/企业信息化常用系统/7.png" alt="img"></p><h2 id="企业应用集成（EAI）"><a href="#企业应用集成（EAI）" class="headerlink" title="企业应用集成（EAI）"></a>企业应用集成（EAI）</h2><p><img src="/2022/10/12/企业信息化常用系统/8.png" alt="img"></p><h2 id="企业门户"><a href="#企业门户" class="headerlink" title="企业门户"></a>企业门户</h2><p><img src="/2022/10/12/企业信息化常用系统/9.png" alt="img"></p><h2 id="电子政务与电子商务简称"><a href="#电子政务与电子商务简称" class="headerlink" title="电子政务与电子商务简称"></a>电子政务与电子商务简称</h2><blockquote><p>政府 Government<br>  企业 Business<br>  公民 Citizen<br>  线上 Online<br>  线下 Offline<br>  G2G G2B B2C C2C等<br>  O2O</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;企业信息化常用系统的英文缩写&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="计算机原理" scheme="/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="软考" scheme="/tags/%E8%BD%AF%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>h5禁止微信字体设置</title>
    <link href="/2022/10/10/h5%E7%A6%81%E6%AD%A2%E5%BE%AE%E4%BF%A1%E5%AD%97%E4%BD%93%E8%AE%BE%E7%BD%AE/"/>
    <id>/2022/10/10/h5禁止微信字体设置/</id>
    <published>2022-10-10T02:28:42.000Z</published>
    <updated>2022-10-10T02:40:12.030Z</updated>
    
    <content type="html"><![CDATA[<p>解除微信字体大小设置，对h5页面的影响<br><a id="more"></a><br>在开发微信公众号，或者用微信打开一个h5页面，如果调整了微信的字体大小，页面的布局会发生改变，这样就做不到统一。<br>IOS和安卓用不同的方法禁止了微信字体的调整，见下例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;title&gt;微信字体大小设置&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">  /* iOS禁止微信调整字体大小 */</span><br><span class="line">  body &#123;</span><br><span class="line">    -webkit-text-size-adjust: 100% !important;</span><br><span class="line">    text-size-adjust: 100% !important;</span><br><span class="line">    -moz-text-size-adjust: 100% !important;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;h1&gt;h1字体大小测试微信&lt;/h1&gt;</span><br><span class="line">  &lt;h2&gt;h2字体大小测试微信&lt;/h2&gt;</span><br><span class="line">  &lt;h3&gt;h3字体大小测试微信&lt;/h3&gt;</span><br><span class="line">  &lt;h4&gt;h4字体大小测试微信&lt;/h4&gt;</span><br><span class="line">  &lt;h5&gt;h5字体大小测试微信&lt;/h5&gt;</span><br><span class="line">  &lt;h6&gt;h6字体大小测试微信&lt;/h6&gt;</span><br><span class="line">  &lt;div style=&quot;font-size:14px;&quot;&gt;div字体大小测试微信px&lt;/div&gt;</span><br><span class="line">  &lt;div style=&quot;font-size:2rem;&quot;&gt;div字体大小测试微信rem&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  // 对安卓手机有效</span><br><span class="line">  // 强制禁止用户修改微信客户端的字体大小</span><br><span class="line">  (function() &#123;</span><br><span class="line">    if (typeof WeixinJSBridge == &quot;object&quot; &amp;&amp; typeof WeixinJSBridge.invoke == &quot;function&quot;) &#123;</span><br><span class="line">    handleFontSize();</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    if (document.addEventListener) &#123;</span><br><span class="line">    document.addEventListener(&quot;WeixinJSBridgeReady&quot;, handleFontSize, false);</span><br><span class="line">  &#125; else if (document.attachEvent) &#123;</span><br><span class="line">    document.attachEvent(&quot;WeixinJSBridgeReady&quot;, handleFontSize);</span><br><span class="line">    document.attachEvent(&quot;onWeixinJSBridgeReady&quot;, handleFontSize);  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  function handleFontSize() &#123;</span><br><span class="line">    // 设置网页字体为默认大小</span><br><span class="line">    WeixinJSBridge.invoke(&apos;setFontSizeCallback&apos;, &#123; &apos;fontSize&apos; : 0 &#125;);</span><br><span class="line">    // 重写设置网页字体大小的事件</span><br><span class="line">    WeixinJSBridge.on(&apos;menu:setfont&apos;, function() &#123;</span><br><span class="line">      WeixinJSBridge.invoke(&apos;setFontSizeCallback&apos;, &#123; &apos;fontSize&apos; : 0 &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)();</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;解除微信字体大小设置，对h5页面的影响&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="css" scheme="/categories/css/"/>
    
    
      <category term="微信" scheme="/tags/%E5%BE%AE%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>canvas-html属性width与css的width区别</title>
    <link href="/2022/09/15/canvas-html%E5%B1%9E%E6%80%A7width%E4%B8%8Ecss%E7%9A%84width%E5%8C%BA%E5%88%AB/"/>
    <id>/2022/09/15/canvas-html属性width与css的width区别/</id>
    <published>2022-09-15T06:45:32.000Z</published>
    <updated>2022-09-15T07:08:41.895Z</updated>
    
    <content type="html"><![CDATA[<p>canvas中标签属性的width，height与css的width，height的区别<br><a id="more"></a><br>canvas中，如果不写width和height，会默认width=300，height=150。</p><blockquote><p>标签属性中的width和height可以理解为虚拟画布的宽高，比如设置width=3000，height=1000，在js中对其进行绘图时，都是在这个宽3000，高1000的画布上进行绘制。<br>而css的width和height是绘制好的这块画布在实际的页面中显示的具体宽高，可以把画布理解为一张宽3000，高1000的图片，当设置其css宽高时，这张图片会根据实际的宽高进行变化。</p></blockquote><p>附上一段代码，可以更改width和height观察其变化<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;title&gt;canvas&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">  canvas &#123;</span><br><span class="line">    border: 1px solid blue;</span><br><span class="line">    width: 300px;</span><br><span class="line">    height: 300px;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;canvas id=&quot;mycanvas&quot; width=&quot;300&quot; height=&quot;300&quot;&gt;浏览器不支持Canvas,请升级或改用其它浏览器！&lt;/canvas&gt;</span><br><span class="line">  &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    var canvas = document.getElementById(&quot;mycanvas&quot;),</span><br><span class="line">        ctx = canvas.getContext(&apos;2d&apos;);</span><br><span class="line">    ctx.moveTo(0,0);</span><br><span class="line">    ctx.lineTo(300,150);</span><br><span class="line">    ctx.stroke();</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;canvas中标签属性的width，height与css的width，height的区别&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
    
      <category term="canvas" scheme="/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>微信公众号开发</title>
    <link href="/2022/09/05/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91/"/>
    <id>/2022/09/05/微信公众号开发/</id>
    <published>2022-09-05T06:31:44.000Z</published>
    <updated>2022-09-06T07:11:06.471Z</updated>
    
    <content type="html"><![CDATA[<p>微信公众号开发简介<br><a id="more"></a><br>微信公众号开发比较繁琐，先来看一下大致架构：<br><img src="/2022/09/05/微信公众号开发/1.png" alt="img"><br>服务器鉴权这块，应该是比较难的。<br>这里有两个需要鉴权的地方，一个是基本配置里的URL接入鉴权，另一个是JS-SDK的鉴权。</p><h2 id="URL接入鉴权"><a href="#URL接入鉴权" class="headerlink" title="URL接入鉴权"></a>URL接入鉴权</h2><p><img src="/2022/09/05/微信公众号开发/2.png" alt="img"><br>上图中的这个URL是微信公众平台接入到自己的后台服务器的接口鉴权，URL可以写成这样<code>http://jinux.top/weixinapi</code>。<br>看一看微信公众平台的定义：</p><blockquote><p>开发者通过检验 signature 对请求进行校验（下面有校验方式）。若确认此次 GET 请求来自微信服务器，请原样返回 echostr 参数内容，则接入生效，成为开发者成功，否则接入失败。加密/校验流程如下：<br>1）将token、timestamp、nonce三个参数进行字典序排序<br>2）将三个参数字符串拼接成一个字符串进行sha1加密<br>3）开发者获得加密后的字符串可与 signature 对比，标识该请求来源于微信</p></blockquote><p><a href="https://developers.weixin.qq.com/doc/offiaccount/Basic_Information/Access_Overview.html" target="_blank" rel="noopener">官网文档地址</a><br>验证signature的示例代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function checkSignature() &#123;</span><br><span class="line">  let &#123; signature, timestamp, nonce, echostr &#125; = req.query;</span><br><span class="line">  let token = &apos;testweixin&apos;; // 这个token是上图中的填写的Token</span><br><span class="line">  let array = [timestamp, nonce, token];</span><br><span class="line">  array.sort(); // 字典排序</span><br><span class="line">  let str = array.join(&apos;&apos;);</span><br><span class="line">  let resultStr = sha1(str); // 对字符串进行sha1加密，需要const sha1 = require(&apos;sha1&apos;)</span><br><span class="line">  if(resultStr === signature) &#123;</span><br><span class="line">    res.send(echostr);</span><br><span class="line">  &#125;else &#123;</span><br><span class="line">    res.send(&apos;Error&apos;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="JS-SDK使用"><a href="#JS-SDK使用" class="headerlink" title="JS-SDK使用"></a>JS-SDK使用</h2><p><a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/JS-SDK.html#62" target="_blank" rel="noopener">官方文档地址</a><br>js-sdk使用流程图：<br><img src="/2022/09/05/微信公众号开发/3.png" alt="img"><br>在网页中调用微信赋予的功能时，需要config 接口注入权限验证配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">wx.config(&#123;</span><br><span class="line">  debug: true, // 开启调试模式,调用的所有 api 的返回值会在客户端 alert 出来，若要查看传入的参数，可以在 pc 端打开，参数信息会通过 log 打出，仅在 pc 端时才会打印。</span><br><span class="line">  appId: &apos;&apos;, // 必填，公众号的唯一标识</span><br><span class="line">  timestamp: , // 必填，生成签名的时间戳</span><br><span class="line">  nonceStr: &apos;&apos;, // 必填，生成签名的随机串</span><br><span class="line">  signature: &apos;&apos;,// 必填，签名</span><br><span class="line">  jsApiList: [] // 必填，需要使用的 JS 接口列表</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p><code>timestamp, nonceStr, signature</code>需要后台生成。<br>接下来，看一下生成流程</p><h3 id="获取ticket"><a href="#获取ticket" class="headerlink" title="获取ticket"></a>获取ticket</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">async function getTicket() &#123;</span><br><span class="line">  let tokenUrl = `https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=$&#123;appid&#125;&amp;secret=$&#123;secret&#125;`;</span><br><span class="line">  let token_data = await axios.get(tokenUrl);</span><br><span class="line">  let access_token = token_data.data.access_token; // 得到access_token</span><br><span class="line">  let ticketUrl = `https://api.weixin.qq.com/cgi-bin/ticket/getticket?access_token=$&#123;access_token&#125;&amp;type=jsapi`;</span><br><span class="line">  let ticket_data = await axios.get(ticketUrl);</span><br><span class="line">  let ticket = ticket_data.data.ticket; // 获取jsp_ticket</span><br><span class="line">  return ticket;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="生成nonceStr"><a href="#生成nonceStr" class="headerlink" title="生成nonceStr"></a>生成nonceStr</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function createNonceStr() &#123;</span><br><span class="line">  return Math.random().toString(36).subStr(2, 15);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="生成timestamp"><a href="#生成timestamp" class="headerlink" title="生成timestamp"></a>生成timestamp</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function createTimestamp() &#123;</span><br><span class="line">  return parseInt(new Date().getTime() / 1000) + &apos;&apos;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="生成signature"><a href="#生成signature" class="headerlink" title="生成signature"></a>生成signature</h3><blockquote><p>签名生成规则如下：<br>1）参与签名的字段包括noncestr（随机字符串）, 有效的jsapi_ticket, timestamp（时间戳）, url（当前网页的URL，不包含#及其后面部分） 。<br>2）对所有待签名参数按照字段名的ASCII 码从小到大排序（字典序）后，使用 URL 键值对的格式（即key1=value1&amp;key2=value2…）拼接成字符串string1。<br>3）这里需要注意的是所有参数名均为小写字符。对string1作sha1加密，字段名和字段值都采用原始值，不进行URL 转义。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">// 处理数据格式</span><br><span class="line">function row(obj) &#123;</span><br><span class="line">  let keys = Object.keys(obj);</span><br><span class="line">  keys = keys.sort(); // 字典排序</span><br><span class="line">  let newObj = &#123;&#125;;</span><br><span class="line">  keys.forEach(key=&gt; &#123;</span><br><span class="line">    newObj[key] = obj[key];</span><br><span class="line">  &#125;);</span><br><span class="line">  let string = &apos;&apos;;</span><br><span class="line">  for(let k in newObj) &#123;</span><br><span class="line">    string += &apos;&amp;&apos; + k + &apos;=&apos; + newObj[k];</span><br><span class="line">  &#125;</span><br><span class="line">  string = string.subStr(1);</span><br><span class="line">  return string;</span><br><span class="line">&#125;</span><br><span class="line">// 生成signature签名方法</span><br><span class="line">async function getSignature(url) &#123;</span><br><span class="line">  let jsapi_ticket = await getTicket();</span><br><span class="line">  var obj = &#123;</span><br><span class="line">    jsapi_ticket,</span><br><span class="line">    nonceStr: createNonceStr(),</span><br><span class="line">    timestamp: createTimestamp(),</span><br><span class="line">    url</span><br><span class="line">  &#125;</span><br><span class="line">  let str = row(obj);</span><br><span class="line">  let signature = sha1(str);</span><br><span class="line">  obj.signature = signature;</span><br><span class="line">  return obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="人脸识别认证"><a href="#人脸识别认证" class="headerlink" title="人脸识别认证"></a>人脸识别认证</h2><p>微信是提供了人脸识别验证接口的，该接口目前是免费的，并且是适用公众号的。由于该接口属于未开放接口，所以在微信JS-SDK说明文档是无法查看到该接口文档的，需要写邮件给腾讯进行申请审核，如果申请通过，腾讯会回复邮件，开通对应公众号的调用权限，并会发送接口文档。<br><a href="https://blog.csdn.net/weixin_36463040/article/details/112664578" target="_blank" rel="noopener">开通人脸识别方法</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上只是简单的列举了URL接入鉴权和JS-SDK的鉴权，这两个也是公众号中最繁琐的地方。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;微信公众号开发简介&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="nodejs" scheme="/categories/nodejs/"/>
    
    
      <category term="微信" scheme="/tags/%E5%BE%AE%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>nodejs path模块详解</title>
    <link href="/2022/08/23/nodejs-path%E6%A8%A1%E5%9D%97%E8%AF%A6%E8%A7%A3/"/>
    <id>/2022/08/23/nodejs-path模块详解/</id>
    <published>2022-08-23T02:50:19.000Z</published>
    <updated>2022-08-23T05:51:10.889Z</updated>
    
    <content type="html"><![CDATA[<p>nodejs的path模块用法<br><a id="more"></a><br>nodejs的path模块包含一系列处理和转换文件路径的工具集</p><h2 id="normalize"><a href="#normalize" class="headerlink" title="normalize"></a>normalize</h2><p>规范化路径，处理冗余的“..”、“.”、“/”字符。发现多个斜杠时，会替换成一个斜杠。当路径末尾包含一个斜杠时，保留。Windows系统使用反斜杠<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">console.log(path.normalize(&apos;a/b/c/../user/bin&apos;));// a\b\user\bin</span><br><span class="line">console.log(path.normalize(&apos;a/b/c///../user/bin/&apos;));// a\b\user\bin\</span><br><span class="line">console.log(path.normalize(&apos;a/b/c/../../user/bin&apos;));// a\user\bin</span><br><span class="line">console.log(path.normalize(&apos;a/b/c/.././///../user/bin/..&apos;));// a\user</span><br><span class="line">console.log(path.normalize(&apos;a/b/c/../../user/bin/../../&apos;));// a\</span><br><span class="line">console.log(path.normalize(&apos;a/../../user/bin/../../&apos;));// ..\</span><br><span class="line">console.log(path.normalize(&apos;a/../../user/bin/../../../../&apos;));// ..\..\..\</span><br><span class="line">console.log(path.normalize(&apos;./a/.././user/bin/./&apos;));// user\bin\</span><br></pre></td></tr></table></figure></p><h2 id="join"><a href="#join" class="headerlink" title="join"></a>join</h2><p>path.join([path1], [path2], […])<br>将多个路径结合在一起，并转换为规范化路径<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">console.log(path.join(&apos;////./a&apos;, &apos;b////c&apos;, &apos;user/&apos;));// \a\b\c\user</span><br><span class="line">console.log(path.join(&apos;./a&apos;, &apos;b//c&apos;, &apos;user&apos;));// a\b\c\user</span><br><span class="line">console.log(path.join(&apos;a&apos;, &apos;../../&apos;, &apos;user/&apos;));// ..\user\</span><br><span class="line">console.log(path.join(__dirname, &apos;a&apos;, &apos;../../&apos;, &apos;user/&apos;));// E:\jinux\node\study\user\</span><br></pre></td></tr></table></figure></p><h2 id="resolve"><a href="#resolve" class="headerlink" title="resolve"></a>resolve</h2><p>从源地址 from 到目的地址 to 的绝对路径</p><blockquote><p>类似在shell里执行一系列的cd命令<br>path.resolve(‘foo/bar’, ‘/tmp/file/‘, ‘..’, ‘a/../subfile’)<br>类似于:<br>cd foo/bar<br>cd /tmp/file/<br>cd ..<br>cd a/../subfile<br>pwd<br>[注意]如果某个from或to参数是绝对路径（比如 ‘E:/abc’，或是以“/”开头的路径），则将忽略之前的from参数</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">console.log(path.resolve(&apos;.&apos;, &apos;testFiles/..&apos;, &apos;trdLayer&apos;));// E:\jinux\node\study\path模块\trdLayer</span><br><span class="line">console.log(path.resolve(&apos;..&apos;, &apos;testFiles&apos;, &apos;a.txt&apos;));// E:\jinux\node\study\testFiles\a.txt</span><br><span class="line">console.log(path.resolve(&apos;D:&apos;, &apos;abc&apos;, &apos;D:/a&apos;));// D:\a</span><br><span class="line">console.log(path.resolve(&apos;abc&apos;, &apos;ok.gif&apos;));// E:\jinux\node\study\path模块\abc\ok.gif</span><br><span class="line">console.log(path.resolve(&apos;abc&apos;, &apos;..&apos;, &apos;a/../subfile&apos;)); // E:\jinux\node\study\path模块\subfile</span><br><span class="line">console.log(path.resolve(&apos;/a&apos;, &apos;/b&apos;, &apos;c&apos;)); // E:\b\c</span><br></pre></td></tr></table></figure><h2 id="relative"><a href="#relative" class="headerlink" title="relative"></a>relative</h2><p>path.relative(from, to)<br>获取从 from 到 to 的相对路径，可以看作 path.resolve 的相反实现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">console.log(path.relative(&apos;C:\\\test&apos;, &apos;C:\\\impl\\bbb&apos;));//..\impl\bbb</span><br><span class="line">console.log(path.relative(&apos;C:/test/aaa&apos;, &apos;C:/bbb&apos;));//..\..\bbb</span><br><span class="line">console.log(path.relative(&apos;C:/test/aaa&apos;, &apos;D:/bbb&apos;));//D:\bbb</span><br></pre></td></tr></table></figure></p><h2 id="isAbsolute"><a href="#isAbsolute" class="headerlink" title="isAbsolute"></a>isAbsolute</h2><p>path.isAbsolute(path)<br>path是一个绝对路径(比如 ‘E:/abc’)，或者是以“/”开头的路径，二者都会返回true<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">console.log(path.isAbsolute(&apos;../testFiles/secLayer&apos;));// false</span><br><span class="line">console.log(path.isAbsolute(&apos;./join.js&apos;));// false</span><br><span class="line">console.log(path.isAbsolute(&apos;temp&apos;));// false</span><br><span class="line">console.log(path.isAbsolute(&apos;/temp/../..&apos;));// true</span><br><span class="line">console.log(path.isAbsolute(&apos;E:/github/nodeAPI/abc/efg&apos;));// true</span><br><span class="line">console.log(path.isAbsolute(&apos;///temp123&apos;));// true</span><br></pre></td></tr></table></figure></p><h2 id="dirname"><a href="#dirname" class="headerlink" title="dirname"></a>dirname</h2><p>path.dirname(p)<br>返回路径p所在的目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">console.log(path.dirname(&apos;/foo/bar/baz/asdf/a.txt&apos;)); // /foo/bar/baz/asdf</span><br><span class="line">console.log(path.dirname(&apos;/foo/bar/baz/asdf/&apos;)); // /foo/bar/baz</span><br><span class="line">console.log(path.dirname(&apos;C:/test/aaa&apos;)); // C:/test</span><br><span class="line">console.log(path.dirname(__dirname)); // E:\jinux\node\study</span><br></pre></td></tr></table></figure></p><h2 id="basename"><a href="#basename" class="headerlink" title="basename"></a>basename</h2><p>path.basename(p[, ext])<br>返回路径的最后一个部分，即文件名。参数ext为需要截掉的后缀内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">console.log(path.basename(&apos;/foo/bar/baz/asdf/a.txt&apos;)); // a.txt</span><br><span class="line">console.log(path.basename(&apos;/foo/bar/baz/asdf/a.txt&apos;,&apos;.txt&apos;)); // a</span><br><span class="line">console.log(path.basename(&apos;/foo/bar/baz/asdf/&apos;)); // asdf</span><br><span class="line">console.log(path.basename(&apos;C:/test/aaa&apos;)); // aaa</span><br></pre></td></tr></table></figure></p><h2 id="extname"><a href="#extname" class="headerlink" title="extname"></a>extname</h2><p>path.extname(p)<br>返回路径p的扩展名，从最后一个’.’到字符串的末尾。如果最后一个部分没有’.’，或者路径是以’.’开头，则返回空字符串<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">console.log(path.extname(&apos;/foo/bar/baz/asdf/a.txt&apos;)); // .txt</span><br><span class="line">console.log(path.extname(&apos;/foo/bar/baz/asdf/a.txt.b&apos;)); // .b</span><br><span class="line">console.log(path.extname(&apos;/foo/bar/baz/asdf/a.&apos;)); // .</span><br><span class="line">console.log(path.extname(&apos;C:/test/aaa/.&apos;)); // &apos;&apos;</span><br><span class="line">console.log(path.extname(&apos;C:/test/aaa&apos;)); // &apos;&apos;</span><br></pre></td></tr></table></figure></p><h2 id="sep"><a href="#sep" class="headerlink" title="sep"></a>sep</h2><p>返回对应平台下的文件分隔符，win下为’\’，linux下为’/‘<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">console.log(path.sep); // win下为\，linux下为/</span><br><span class="line">console.log(&apos;foo\\bar\\baz&apos;.split(path.sep)); // [ &apos;foo&apos;, &apos;bar&apos;, &apos;baz&apos; ]</span><br><span class="line">console.log(&apos;foo/bar/baz&apos;.split(path.sep)); // win下返回[&apos;foo/bar/baz&apos;]，但在linux系统下会返回[&apos;foo&apos;,&apos;bar&apos;,&apos;baz&apos;]</span><br></pre></td></tr></table></figure></p><h2 id="delimiter"><a href="#delimiter" class="headerlink" title="delimiter"></a>delimiter</h2><p>返回对应平台下的路径分隔符，win下为’;’ linux下为’:’<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(path.delimiter); //win下为“;” linux下为“:”</span><br></pre></td></tr></table></figure></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>所有代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&apos;path&apos;);</span><br><span class="line">// 当前文件路径</span><br><span class="line">console.log(&apos;当前文件夹路径&apos;, process.cwd());</span><br><span class="line">console.log(&apos;-------------------------------------------------------------&apos;);</span><br><span class="line">/**</span><br><span class="line"> * path.normalize</span><br><span class="line"> * 规范化路径，处理冗余的“..”、“.”、“/”字符。发现多个斜杠时，会替换成一个斜杠。当路径末尾包含一个斜杠时，保留。Windows系统使用反斜杠　</span><br><span class="line"> */</span><br><span class="line">console.log(path.normalize(&apos;a/b/c/../user/bin&apos;));// a\b\user\bin</span><br><span class="line">console.log(path.normalize(&apos;a/b/c///../user/bin/&apos;));// a\b\user\bin\</span><br><span class="line">console.log(path.normalize(&apos;a/b/c/../../user/bin&apos;));// a\user\bin</span><br><span class="line">console.log(path.normalize(&apos;a/b/c/.././///../user/bin/..&apos;));// a\user</span><br><span class="line">console.log(path.normalize(&apos;a/b/c/../../user/bin/../../&apos;));// a\</span><br><span class="line">console.log(path.normalize(&apos;a/../../user/bin/../../&apos;));// ..\</span><br><span class="line">console.log(path.normalize(&apos;a/../../user/bin/../../../../&apos;));// ..\..\..\</span><br><span class="line">console.log(path.normalize(&apos;./a/.././user/bin/./&apos;));// user\bin\</span><br><span class="line">console.log(&apos;-------------------------------------------------------------&apos;);</span><br><span class="line">/**</span><br><span class="line"> * path.join</span><br><span class="line"> * path.join([path1], [path2], [...])</span><br><span class="line"> * 将多个路径结合在一起，并转换为规范化路径</span><br><span class="line"> */</span><br><span class="line">console.log(path.join(&apos;////./a&apos;, &apos;b////c&apos;, &apos;user/&apos;));// \a\b\c\user</span><br><span class="line">console.log(path.join(&apos;./a&apos;, &apos;b//c&apos;, &apos;user&apos;));// a\b\c\user</span><br><span class="line">console.log(path.join(&apos;a&apos;, &apos;../../&apos;, &apos;user/&apos;));// ..\user\</span><br><span class="line">console.log(path.join(__dirname, &apos;a&apos;, &apos;../../&apos;, &apos;user/&apos;));// E:\jinux\node\study\user\</span><br><span class="line">console.log(&apos;-------------------------------------------------------------&apos;);</span><br><span class="line">/**</span><br><span class="line"> * path.resolve</span><br><span class="line"> * path.resolve([from ...], to)</span><br><span class="line"> * 从源地址 from 到目的地址 to 的绝对路径，类似在shell里执行一系列的cd命令</span><br><span class="line"> * path.resolve(&apos;foo/bar&apos;, &apos;/tmp/file/&apos;, &apos;..&apos;, &apos;a/../subfile&apos;)</span><br><span class="line"> * 类似于:</span><br><span class="line"> * cd foo/bar</span><br><span class="line"> * cd /tmp/file/</span><br><span class="line"> * cd ..</span><br><span class="line"> * cd a/../subfile</span><br><span class="line"> * pwd</span><br><span class="line"> * [注意]如果某个from或to参数是绝对路径（比如 &apos;E:/abc&apos;，或是以“/”开头的路径），则将忽略之前的from参数</span><br><span class="line"> */</span><br><span class="line">console.log(path.resolve(&apos;.&apos;, &apos;testFiles/..&apos;, &apos;trdLayer&apos;));// E:\jinux\node\study\path模块\trdLayer</span><br><span class="line">console.log(path.resolve(&apos;..&apos;, &apos;testFiles&apos;, &apos;a.txt&apos;));// E:\jinux\node\study\testFiles\a.txt</span><br><span class="line">console.log(path.resolve(&apos;D:&apos;, &apos;abc&apos;, &apos;D:/a&apos;));// D:\a</span><br><span class="line">console.log(path.resolve(&apos;abc&apos;, &apos;ok.gif&apos;));// E:\jinux\node\study\path模块\abc\ok.gif</span><br><span class="line">console.log(path.resolve(&apos;abc&apos;, &apos;..&apos;, &apos;a/../subfile&apos;)); // E:\jinux\node\study\path模块\subfile</span><br><span class="line">console.log(path.resolve(&apos;/a&apos;, &apos;/b&apos;, &apos;c&apos;)); // E:\b\c</span><br><span class="line">console.log(&apos;-------------------------------------------------------------&apos;);</span><br><span class="line">/**</span><br><span class="line"> * path.relative</span><br><span class="line"> * path.relative(from, to)</span><br><span class="line"> * 获取从 from 到 to 的相对路径，可以看作 path.resolve 的相反实现</span><br><span class="line"> */</span><br><span class="line">console.log(path.relative(&apos;C:\\\test&apos;, &apos;C:\\\impl\\bbb&apos;));//..\impl\bbb</span><br><span class="line">console.log(path.relative(&apos;C:/test/aaa&apos;, &apos;C:/bbb&apos;));//..\..\bbb</span><br><span class="line">console.log(path.relative(&apos;C:/test/aaa&apos;, &apos;D:/bbb&apos;));//D:\bbb</span><br><span class="line">console.log(&apos;-------------------------------------------------------------&apos;);</span><br><span class="line">/**</span><br><span class="line"> * path.dirname</span><br><span class="line"> * path.dirname(p)</span><br><span class="line"> * 返回路径p所在的目录</span><br><span class="line"> */</span><br><span class="line">console.log(path.dirname(&apos;/foo/bar/baz/asdf/a.txt&apos;)); // /foo/bar/baz/asdf</span><br><span class="line">console.log(path.dirname(&apos;/foo/bar/baz/asdf/&apos;)); // /foo/bar/baz</span><br><span class="line">console.log(path.dirname(&apos;C:/test/aaa&apos;)); // C:/test</span><br><span class="line">console.log(path.dirname(__dirname)); // E:\jinux\node\study</span><br><span class="line">console.log(&apos;-------------------------------------------------------------&apos;);</span><br><span class="line">/**</span><br><span class="line"> * path.basename</span><br><span class="line"> * path.basename(p[, ext])</span><br><span class="line"> * 返回路径的最后一个部分，即文件名。参数ext为需要截掉的后缀内容</span><br><span class="line"> */</span><br><span class="line">console.log(path.basename(&apos;/foo/bar/baz/asdf/a.txt&apos;)); // a.txt</span><br><span class="line">console.log(path.basename(&apos;/foo/bar/baz/asdf/a.txt&apos;,&apos;.txt&apos;)); // a</span><br><span class="line">console.log(path.basename(&apos;/foo/bar/baz/asdf/&apos;)); // asdf</span><br><span class="line">console.log(path.basename(&apos;C:/test/aaa&apos;)); // aaa</span><br><span class="line">console.log(&apos;-------------------------------------------------------------&apos;);</span><br><span class="line">/**</span><br><span class="line"> * path.extname</span><br><span class="line"> * path.extname(p)</span><br><span class="line"> * 返回路径p的扩展名，从最后一个&apos;.&apos;到字符串的末尾。如果最后一个部分没有&apos;.&apos;，或者路径是以&apos;.&apos;开头，则返回空字符串</span><br><span class="line"> */</span><br><span class="line">console.log(path.extname(&apos;/foo/bar/baz/asdf/a.txt&apos;)); // .txt</span><br><span class="line">console.log(path.extname(&apos;/foo/bar/baz/asdf/a.txt.b&apos;)); // .b</span><br><span class="line">console.log(path.extname(&apos;/foo/bar/baz/asdf/a.&apos;)); // .</span><br><span class="line">console.log(path.extname(&apos;C:/test/aaa/.&apos;)); // &apos;&apos;</span><br><span class="line">console.log(path.extname(&apos;C:/test/aaa&apos;)); // &apos;&apos;</span><br><span class="line">console.log(&apos;-------------------------------------------------------------&apos;);</span><br><span class="line">/**</span><br><span class="line"> * path.sep</span><br><span class="line"> * 返回对应平台下的文件分隔符，win下为&apos;\&apos;，linux下为&apos;/&apos;</span><br><span class="line"> */</span><br><span class="line">console.log(path.sep); // win下为\，linux下为/</span><br><span class="line">console.log(&apos;foo\\bar\\baz&apos;.split(path.sep)); // [ &apos;foo&apos;, &apos;bar&apos;, &apos;baz&apos; ]</span><br><span class="line">console.log(&apos;foo/bar/baz&apos;.split(path.sep)); // win下返回[&apos;foo/bar/baz&apos;]，但在linux系统下会返回[&apos;foo&apos;,&apos;bar&apos;,&apos;baz&apos;]</span><br><span class="line">console.log(&apos;-------------------------------------------------------------&apos;);</span><br><span class="line">/**</span><br><span class="line"> * path.delimiter</span><br><span class="line"> * 返回对应平台下的路径分隔符，win下为&apos;;&apos; linux下为&apos;:&apos;</span><br><span class="line"> */</span><br><span class="line">console.log(path.delimiter); //win下为“;” linux下为“:”</span><br><span class="line">console.log(&apos;-------------------------------------------------------------&apos;);</span><br><span class="line">/**</span><br><span class="line"> * path.isAbsolute</span><br><span class="line"> * path.isAbsolute(path)</span><br><span class="line"> * path是一个绝对路径(比如 &apos;E:/abc&apos;)，或者是以“/”开头的路径，二者都会返回true</span><br><span class="line"> */</span><br><span class="line">console.log(path.isAbsolute(&apos;../testFiles/secLayer&apos;));// false</span><br><span class="line">console.log(path.isAbsolute(&apos;./join.js&apos;));// false</span><br><span class="line">console.log(path.isAbsolute(&apos;temp&apos;));// false</span><br><span class="line">console.log(path.isAbsolute(&apos;/temp/../..&apos;));// true</span><br><span class="line">console.log(path.isAbsolute(&apos;E:/github/nodeAPI/abc/efg&apos;));// true</span><br><span class="line">console.log(path.isAbsolute(&apos;///temp123&apos;));// true</span><br><span class="line">console.log(&apos;-------------------------------------------------------------&apos;);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;nodejs的path模块用法&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="nodejs" scheme="/categories/nodejs/"/>
    
    
      <category term="工具库" scheme="/tags/%E5%B7%A5%E5%85%B7%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>CSS设计模式</title>
    <link href="/2022/08/15/CSS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>/2022/08/15/CSS设计模式/</id>
    <published>2022-08-15T06:00:04.000Z</published>
    <updated>2022-08-15T07:27:03.736Z</updated>
    
    <content type="html"><![CDATA[<p>CSS设计模式<br><a id="more"></a><br>css的设计模式有OOCSS，BEM，SMACSS，ACSS这几种，接下来逐一介绍。</p><h2 id="设计模式-OOCSS"><a href="#设计模式-OOCSS" class="headerlink" title="设计模式:OOCSS"></a>设计模式:OOCSS</h2><p>OOCSS是比较基础的设计模式，其他设计模式或多或少都有OOCSS的影子,OO就是面向对象，也就是用面向对象的思维来写CSS。</p><h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><p>大家都很熟悉面向对象，我们简单看下下面这一段代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class Person &#123;</span><br><span class="line">    void study () &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Teacher extends Person &#123;</span><br><span class="line">    void study () &#123;&#125;</span><br><span class="line">    void teach () &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Student extends Person &#123;</span><br><span class="line">    void study () &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>有一个Person类，它有一些方法，Teacher和Student都继承Person，并且进行了一些修订和扩展。那么我们可以把Person类看成是别人写代码，在不改变别人源码的情况下,新增Teacher和Student对源码进行修订和扩展。这种写法是完全可以应用到CSS上面的。我们看下面一段代码场景:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;menu&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;menu fix&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;menu&quot;&gt;&lt;/div&gt;</span><br><span class="line">.menu &#123;</span><br><span class="line">   color: green;</span><br><span class="line">   font-size: 14px;</span><br><span class="line">&#125;</span><br><span class="line">.fix &#123;</span><br><span class="line">   color: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p>设计师只想让我们改变其中一个盒子的样式，其他的不变。<br>这时不能轻易改变menu，因为一旦改变就会影响不需要改变的地方。那么我们可以直接利用面向对象的思想，在后面单独添加一个类进行修订和扩展。这样一看我们平时在写的CSS，不就是面向对象吗？<br>当然，OOCSS是有具体的原则的。那么它有哪些原则且个原则的具体是什么呢？我们来看一下：</p><h3 id="原则一-容器与内容分离"><a href="#原则一-容器与内容分离" class="headerlink" title="原则一:容器与内容分离"></a>原则一:容器与内容分离</h3><p>容器与内容分离顾名思义，直接看一个代码案例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;post&quot;&gt; </span><br><span class="line">  &lt;p class=&quot;metadata&quot;&gt;</span><br><span class="line">    &lt;a&gt;Hello&lt;/a&gt;</span><br><span class="line">  &lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;comment&quot;&gt; </span><br><span class="line">  &lt;p class=&quot;metadata&quot;&gt;</span><br><span class="line">    &lt;a&gt;Hello&lt;/a&gt;</span><br><span class="line">  &lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">// ---------code 1-----------</span><br><span class="line">.post .metadata &#123;</span><br><span class="line">  // css code</span><br><span class="line">&#125;</span><br><span class="line">// ---------code 2-----------</span><br><span class="line">.post &#123;&#125;</span><br><span class="line">.metadata &#123;</span><br><span class="line">  // css code</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="场景-1"><a href="#场景-1" class="headerlink" title="场景"></a>场景</h3><p>两个不同容器中的内容相同<br>先看样式的code 1，这样显然不好，容器和内容是嵌套依赖关系，并没有做到容器与内容分离。内容的样式无法复用。样式的code 2做到了容器与内容分离，内容在不同的容器中可以复用。</p><h3 id="原则二-结构与皮肤分离"><a href="#原则二-结构与皮肤分离" class="headerlink" title="原则二:结构与皮肤分离"></a>原则二:结构与皮肤分离</h3><p>结构可以看做是一个基础对象,而皮肤可以看做是另外一个对象,也就是对象与对象要分离。基础对象不能改,不断的分离出皮肤对象达到对基础对象的修正和扩展。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;menu fix&quot;&gt;&lt;/div&gt;</span><br><span class="line">// 基础对象</span><br><span class="line">.menu &#123;</span><br><span class="line">  color: green;</span><br><span class="line">  font-size: 14px;</span><br><span class="line">&#125;</span><br><span class="line">// 皮肤</span><br><span class="line">.fix &#123;</span><br><span class="line">  color: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="OOCSS与Vue的关系"><a href="#OOCSS与Vue的关系" class="headerlink" title="OOCSS与Vue的关系"></a>OOCSS与Vue的关系</h3><p>我们每天都在写OOCSS，Vue的组件就是OOCSS。我们下面一段代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">// -------------定义组件-----------------</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;menu&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &apos;MateData&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt; </span><br><span class="line">// 基础对象</span><br><span class="line">.menu &#123;</span><br><span class="line">   color: green;</span><br><span class="line">   font-size: 14px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">// -----------使用组件-------------------</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;mate-data class=&quot;fix1&quot;&gt;&lt;/mate-data&gt;</span><br><span class="line">  &lt;mate-data class=&quot;fix2&quot;&gt;&lt;/mate-data&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;style&gt; </span><br><span class="line">// 皮肤</span><br><span class="line">.fix1 &#123;</span><br><span class="line">   color: red;</span><br><span class="line">&#125;</span><br><span class="line">.fix2 &#123;</span><br><span class="line">   font-size: 20px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></p><h2 id="设计模式-BEM"><a href="#设计模式-BEM" class="headerlink" title="设计模式:BEM"></a>设计模式:BEM</h2><h3 id="BEM是什么"><a href="#BEM是什么" class="headerlink" title="BEM是什么"></a>BEM是什么</h3><p>BEM即块(Block)、元素(Element)、修饰符(Modifier) 是由Yandex（俄罗斯最著名的互联网企业）的开发团队提出的前端开发理论。BEM通过Block、Element、Modifier来描述页面(关键就是为了解决多人协作的命名问题)。<br>Block是页面中独立存在的区块，可以在不同场合下使用。每个页面都可以看做是多个Block组成。<br>Element是构成Block的元素，只有在对应Block内部才具有意义，是依赖于Block的存在。<br>Modifier是描述Block或Element的属性或状态。同一Block或Element可以有多个Modifier，Modifier不可以单独存在。<br>在命名时，Block作为起始开头，不同 Block 和 Element 用 _ 两个底线区隔开来，不同的 Modifier 则用 – 区隔。<br><img src="/2022/08/15/CSS设计模式/1.jpg" alt="img"></p><h3 id="进阶版的OOCSS"><a href="#进阶版的OOCSS" class="headerlink" title="进阶版的OOCSS"></a>进阶版的OOCSS</h3><p>BEM就是进阶版的OOCSS，我们看下图所示:<br><img src="/2022/08/15/CSS设计模式/2.jpg" alt="img"></p><h3 id="场景-2"><a href="#场景-2" class="headerlink" title="场景"></a>场景</h3><p>页面两个tab栏，整体布局相似,只有细节部分不同<br>那么使用BEM写样式时，就会定义一个块menu，下面包含元素menu_tab，完成整体布局，细微部分使用修饰符menu_tab-style1进行微调。代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- BEM --&gt;</span><br><span class="line">&lt;div class=&quot;menu menu-style1&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;menu_tab menu_tab-style1&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;menu_tab menu_tab-style1&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;menu_tab menu_tab-style1&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;menu_tab menu_tab-style1&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;menu&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;menu_tab menu_tab-style2&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;menu_tab menu_tab-style2&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;menu_tab menu_tab-style2&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;menu_tab menu_tab-style2&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>通过上面代码可以看出BEM就是OOCSS。<br>对BEM感兴趣的话，可以访问<a href="https://en.bem.info/methodology/css/" target="_blank" rel="noopener">BEM的官网</a></p><h2 id="设计模式-SMACSS"><a href="#设计模式-SMACSS" class="headerlink" title="设计模式:SMACSS"></a>设计模式:SMACSS</h2><p>SMACSS is a way to examine your design process and as a way to fit those rigid frameworks into a flexible thought process. (SMACSS通过一个灵活的思维过程来检查你的设计过程和方式是否符合你的架构，更像一种规范~)</p><h3 id="核心思想-分类"><a href="#核心思想-分类" class="headerlink" title="核心思想:分类"></a>核心思想:分类</h3><ul><li>SMACSS的核心就是分类，它主要要求分为五大类分别是：Base、Layout、Modules、State、Theme</li><li>Base是对浏览器默认样式的重置，常见的<a href="http://necolas.github.io/normalize.css/" target="_blank" rel="noopener">normalize.css</a>就属于此。这里样式只会对标签元素本身做设定，不会出现任何 class 或id，但是可以有属性选择器或是伪类.</li><li>Layout对页面布局的一些功能，属于较高的一层，它可以作为层级较低的Module Rules元素的容器。左右分栏、栅格系统等都属于布局规范。SMACSS还约定命名使用l-/layout-前缀来标识布局的class。</li><li>Modules公共复用的小模块，模块是SMACSS最基本的思想，同时也是大部分CSS理论的基本，将样式模块化就能达到复用和可维护的目的，但是SMACSS提出了更具体的模块化方案。SMACSS中的模块具有自己的一个命名，隶属于模块下的类皆以该模块为前缀，例如：.menu .menu-title等。</li><li>State对不同的展示效果，例如显示、隐藏，与BEM抽取修饰类的方式的不同，SMACSS是抽取更高级别的样式类，得到更强的复用性，命名全都以is-前缀,如:is-hidden。</li><li>Theme对不同主题皮肤的维护，可以修改前面4个类别的样式，且应和前面4个类别分离开来（便于切换，也就是“换肤”）。命名规范需要添加theme-前缀。</li></ul><h3 id="最小适配深度原则"><a href="#最小适配深度原则" class="headerlink" title="最小适配深度原则"></a>最小适配深度原则</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/* depth 1 */</span><br><span class="line">.sidebar ul h3 &#123;&#125;</span><br><span class="line">/* depth 2 */</span><br><span class="line">.sub-title &#123;&#125;</span><br></pre></td></tr></table></figure><p>两段css的区别在于html和css的耦合度(这一点上和OOCSS的分离容器和内容的原则不谋而合)。可以想到，由于上面的样式规则使用了继承选择符，因此对于html的结构实际是有一定依赖的。如果html发生重构，就有可能不再具有这些样式。对应的，下面的样式规则只有一个选择符，因此不依赖于特定html结构，只要为元素添加class，就可以获得对应样式。<br>当然，继承选择符是有用的，它可以减少因相同命名引发的样式冲突（常发生于多人协作开发）。但是，我们不应过度使用，在不造成样式冲突的允许范围之内，尽可能使用短的、不限定html结构的选择符。这就是SMACSS的最小化适配深度的意义。<br>在项目中使用SMACSS时，每一个分类都是一个目录，但是在Vue中，Layout和Modules不需要单独维护目录，因为我们写的布局组件和模块组件就相当于这两个分类了。<br>如果想要对SMACSS更详细的了解可以访问<a href="https://smacss-zh.vercel.app/preface.html" target="_blank" rel="noopener">SMACSS</a></p><h2 id="设计模式-ITCSS"><a href="#设计模式-ITCSS" class="headerlink" title="设计模式:ITCSS"></a>设计模式:ITCSS</h2><p>这是由<a href="https://csswizardry.com/" target="_blank" rel="noopener">csswizardry</a>提倡的一个 CSS 设计方法论，它可以让CSS更好的管理和维护。<br>使用ITCSS主要可以帮助我们以下几点:</p><ul><li>Manages source order.(管理 CSS 代码的书写顺序)</li><li>Filters explicitness.(过滤器的明确性，是说分层来明确每层 CSS 的作用)</li><li>Tames the cascade.(控制好 CSS 的权重)</li><li>Sanitises inheritance.(安全地使用继承)</li></ul><h3 id="核心思想-分层"><a href="#核心思想-分层" class="headerlink" title="核心思想:分层"></a>核心思想:分层</h3><p>TCSS的核心是分层,主要分为七层, 与SMACSS的分类相比更加精细，层次分的更细主要有:</p><table><thead><tr><th>Layer</th><th>作用</th></tr></thead><tbody><tr><td>Settings</td><td>项目使用的全局变量</td></tr><tr><td>Tools</td><td>mixin，function</td></tr><tr><td>Generic</td><td>最基本的设定 normalize.css，reset</td></tr><tr><td>Base</td><td>type selector</td></tr><tr><td>Objects</td><td>不经过装饰 (Cosmetic-free) 的设计模式，相当于SMACSS的Layout</td></tr><tr><td>Components</td><td>UI 组件</td></tr><tr><td>Trumps</td><td>helper 唯一可以使用 !important 的地方</td></tr></tbody></table><p>下面就是ITCSS的架构模型:<br><img src="/2022/08/15/CSS设计模式/3.jpg" alt="img"><br>从这个模型可以看出来，越往下就越具体，越局限于使用在某个具体的东西。另外它的下一层永远继承上一层的所有样式。</p><h3 id="各个分层例子"><a href="#各个分层例子" class="headerlink" title="各个分层例子"></a>各个分层例子</h3><h4 id="Settings"><a href="#Settings" class="headerlink" title="Settings"></a>Settings</h4><p>全局变量，比如颜色，字体大小等等<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$yellow: #FAAF00;</span><br><span class="line">$yellow-bright: #FAF7F0;</span><br></pre></td></tr></table></figure></p><h4 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h4><p>mixin，function 等等<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@mixin sample-mixin () &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>到 Tools 为止，不会生成具体的 css</p><h4 id="Generic"><a href="#Generic" class="headerlink" title="Generic"></a>Generic</h4><p>reset，normalize 等等<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*,</span><br><span class="line">*::before,</span><br><span class="line">*::after &#123;</span><br><span class="line">  box-sizing: border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="Base"><a href="#Base" class="headerlink" title="Base"></a>Base</h4><p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Type_selectors" target="_blank" rel="noopener">type selector</a> 比如 link, p 等等，只有这一层才使用 type selector<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">p &#123;</span><br><span class="line">  margin: 0</span><br><span class="line">  line-height: 1.5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="Objects"><a href="#Objects" class="headerlink" title="Objects"></a>Objects</h4><p>Cosmetic-free，不使用比如 color、border-color、background-color 之类的<br>使用这个 CSS 你在浏览器上面只可以看一片空白<br>主要用来做画面的 layout<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.o-container &#123;</span><br><span class="line">  box-sizing: border-box;</span><br><span class="line">  margin: 0 auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="Components"><a href="#Components" class="headerlink" title="Components"></a>Components</h4><p>UI 组件<br>到这个部分，根据UI分析具体有哪些组件需要实现，可以分给多个人来同时实现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># button组件</span><br><span class="line">.c-btn &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  justify-content: center;</span><br><span class="line">  align-items: center;</span><br><span class="line">  ...</span><br><span class="line">  &amp;--primary &#123;</span><br><span class="line">    background-color: #ff5959;</span><br><span class="line">    color: #fff;</span><br><span class="line">  &#125;</span><br><span class="line">  &amp;--large &#123;</span><br><span class="line">    font-size: 16px;</span><br><span class="line">    padding: 16px 14px;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>HTML 类似这样<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;a class=&quot;c-btn c-btn--primary&quot; href=&quot;#&quot;&gt;sample&lt;/a&gt;</span><br><span class="line">&lt;a class=&quot;c-btn c-btn--primary c-btn--large&quot; href=&quot;#&quot;&gt;sample&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><h4 id="Trumps"><a href="#Trumps" class="headerlink" title="Trumps"></a>Trumps</h4><p>放各种 helper<br>最主要的作用是用在不适合或者不容易放在 Component 的时候<br>比如 margin，很可能不应该放 Component，这时候可以用 Trumps 来微调<br>这样可以防止你的 Component 变得非常大<br>只有这一层才可以使用! important，以此来避免多个! important 的混乱局面<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.u-color &#123;</span><br><span class="line">  &amp;--white &#123;</span><br><span class="line">    color: $white !important;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">.u-hidden &#123;</span><br><span class="line">  display: hidden !important;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>在使用时，每个分层都维护为一个文件夹。在Vue中使用时，Objects和Components相当于我们的组件，不需要单独维护。<br>另外值得注意的是，无论是SMACSS的分类还是ITCSS的分层，都是一种思想，我们可以根据实际项目来动态的添加或者删除某一个分类或者分层，不能生搬硬套。</p></blockquote><h2 id="设计模式-ACSS"><a href="#设计模式-ACSS" class="headerlink" title="设计模式:ACSS"></a>设计模式:ACSS</h2><p>ACSS使用了紧密的类名库。 这些类名通常被缩写，并与它们影响的内容分开。 在ACSS系统中，我们可以知道类名的作用； 但是类名称与内容类型之间没有关系,即每一个样式对应一个类，也称原子类CSS。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.float-left &#123;</span><br><span class="line">  float: left;</span><br><span class="line">&#125;</span><br><span class="line">.float-right &#123;</span><br><span class="line">  float: right;</span><br><span class="line">&#125;</span><br><span class="line">.z-0 &#123;</span><br><span class="line">  z-index: 0;</span><br><span class="line">&#125;</span><br><span class="line">.z-auto &#123;</span><br><span class="line">  z-index: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>从上面的代码中，可以看到ACSS有极强的复用性,维护成本低，但是破坏了css命名的语义化。最终很可能代码会成为下面这样。但是存在即合理，ACSS也有其作用，继续往下看。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;grid grid-cols-3 gap-2 place-content-center h-48 ...&quot;&gt;</span><br><span class="line">  &lt;div&gt;1&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;2&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;3&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;4&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;5&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;6&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p><a href="https://tailwindcss.com/" target="_blank" rel="noopener">tailwindcss</a>是一个典型的ACSS框架。</p><h2 id="混合使用CSS设计模式"><a href="#混合使用CSS设计模式" class="headerlink" title="混合使用CSS设计模式"></a>混合使用CSS设计模式</h2><p>在进行一个项目的设计时,我们可以针对多种CSS设计模式进行选型，结合不同设计模式的优点和缺点，设计一个完整银杏的CSS架构。<br>假如我们选择ITCSS、BEM、ACSS进行组合，设计一个CSS架构。<br>在我们设计CSS架构时,我们首先想到的一定是SMACSS和ITCSS,因为它们两个对CSS进行了分类分层的划分。</p><table><thead><tr><th>SMACSS</th><th>ITCSS</th></tr></thead><tbody><tr><td>Base</td><td>Setting</td></tr><tr><td>Layout</td><td>Tools</td></tr><tr><td>Modules</td><td>Generic</td></tr><tr><td>State</td><td>Base</td></tr><tr><td>Theme</td><td>Objects</td></tr><tr><td></td><td>Components</td></tr><tr><td></td><td>Trumps</td></tr></tbody></table><p>根据上表我们可以看出ITCSS分层更加精细，所以我们选择ITCSS，接着我们继续看ITCSS的Objects和Components层，它就相当于OOCSS且相当于开发Vue组件，所以我们在开发组件时使用选择OOCSS的进阶版BEM。我们知道如果一个项目全部使用ACSS的缺点跟明显，那么我们选择ACSS的原因是因为项目中可能会存在向字体大小的这种的样式,所以我们可以把这一类样式维护在ACSS目录中。Generic和Base类似所以只保留Base即可，我假设Trumps用不到,所以也去掉这一层。所以我们的架构现在就是下面这样。</p><table><thead><tr><th>ITCSS+BEM+ACSS</th></tr></thead><tbody><tr><td>Setting</td></tr><tr><td>Tools</td></tr><tr><td>Base</td></tr><tr><td>Objects</td></tr><tr><td>Components</td></tr><tr><td>ACSS</td></tr></tbody></table><p>目录结构就是:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-|comments</span><br><span class="line">-|styles</span><br><span class="line">--|acss</span><br><span class="line">--|base</span><br><span class="line">--|settings</span><br><span class="line">--|tools</span><br></pre></td></tr></table></figure></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>CSS设计模式听起来很深奥，但是大家在日常开发时，已经不知不觉的在使用，只不过是没有概念而已。在开发中熟练的使用CSS设计模式，可以使代码结构思路清晰，易于阅读，维护，如果想真正的在项目中写好CSS,CSS设计模式是必不可少的，也是我们开发者应该掌握的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CSS设计模式&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="css" scheme="/categories/css/"/>
    
    
      <category term="样式" scheme="/tags/%E6%A0%B7%E5%BC%8F/"/>
    
      <category term="基础知识" scheme="/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>算法基础-时间复杂度</title>
    <link href="/2022/08/05/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80-%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/"/>
    <id>/2022/08/05/算法基础-时间复杂度/</id>
    <published>2022-08-05T07:20:47.000Z</published>
    <updated>2022-08-05T08:19:41.307Z</updated>
    
    <content type="html"><![CDATA[<p>算法基础之时间复杂度<br><a id="more"></a><br>对于算法的衡量一般是从两个维度进行的，一是空间维度，即算法执行所需要占据的内存空间；一是时间维度，即算法执行所需要的时间，今天主讲时间维度。</p><h2 id="大O符号表示法"><a href="#大O符号表示法" class="headerlink" title="大O符号表示法"></a>大O符号表示法</h2><p>对于时间复杂度的衡量，我们最常见的就是使用大O符号表示法，例如O(1),O(n)等。之所以采用这样的方式衡量，是因为在不同配置的计算机上，相同的算法代码所呈现出来的性能也不尽相同。所以引入大O符号表示法可以使算法执行所消耗的时间标准化，更加易于对比。<br>大O符号表示法的完整格式是T(n)=O(f(n))，这个函数表示的是代码执行次数与所使用时间之间的正比例关系。其中f(n)表示算法中每行代码执行次数的和，O()表示一个正比例关系。所以大O符号表示法所表示的是算法执行时间的增长变化趋势的，而不是算法实际的执行时间。在使用大O符号表示法的时候，我们一般会假设算法中每一行代码的执行时间都是一样，也就是一个单位时间会运行一行代码，这样我们就能够方便的计算f(n)了。</p><h2 id="常见时间复杂度量级"><a href="#常见时间复杂度量级" class="headerlink" title="常见时间复杂度量级"></a>常见时间复杂度量级</h2><p>一般在代码设计中长长的出现的时间复杂度量级主要有以下这些：</p><ul><li>常数阶O(1)。</li><li>对数阶O(logN)。</li><li>线性阶O(n) 。</li><li>线性对数阶O(nlogN)。</li><li>平方阶O(n^2)。</li><li>立方阶O(n^3)。</li><li>K方阶O(n^k)。</li><li>指数阶O(2^n)。</li><li>组合阶O(n!)。</li></ul><p>以上这些复杂度量级从上到下所表示的复杂度越来越大，执行效率也越来越低。下面就一些示例来说明不同形式的代码其时间复杂度的量级。</p><h3 id="O-1"><a href="#O-1" class="headerlink" title="O(1)"></a>O(1)</h3><p>代码中没有循环结构，无论执行多少行，代码所消耗的时间始终固定，不随着某个变量的操作发生变化，其复杂度就是O(1) 。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">i = 1</span><br><span class="line">j = 2</span><br><span class="line">i += 1</span><br><span class="line">j += 2</span><br></pre></td></tr></table></figure></p><h3 id="O-n"><a href="#O-n" class="headerlink" title="O(n)"></a>O(n)</h3><p>代码中只有一层循环结构，没有任何嵌套的循环结构，代码执行所消耗的时间只与循环控制变量线性相关，那么这段代码的复杂度就是O(n) 。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int n =100;</span><br><span class="line">for(int i=0; i&lt;n; i++)&#123;</span><br><span class="line">  System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="O-logN"><a href="#O-logN" class="headerlink" title="O(logN)"></a>O(logN)</h3><p>代码中同样只有一层循环结构，没有任何嵌套的循环结构，但是代码执行所消耗的时间与循环控制变量指数相关，那么这段代码的复杂度就是O(logN)。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">int i = 1;</span><br><span class="line">int n = 1024;</span><br><span class="line">while(i &lt; n)&#123;</span><br><span class="line">    i = i*2;</span><br><span class="line">&#125;</span><br><span class="line">// 或者</span><br><span class="line">for(int i=0; i&lt;n; i*=2)&#123;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>从例子可以看出，时间复杂度是O(log2(n)),但是2可以忽略掉，直接写成O(log(n))。</p><h3 id="O-nlogN"><a href="#O-nlogN" class="headerlink" title="O(nlogN)"></a>O(nlogN)</h3><p>线性对数阶量级中就已经开始出现多层的循环结构了，在复杂度为O(nlogN)量级的代码中，有两层循环结构，其中一层为O(n)量级的循环，一层为O(logN)量级的循环。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">int n =100;</span><br><span class="line">int m = 1024;</span><br><span class="line">for(int i=0; i&lt;n; i++)&#123;</span><br><span class="line">  while(i &lt; m)&#123;</span><br><span class="line">    i = i*2;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="O-n-2"><a href="#O-n-2" class="headerlink" title="O(n^2)"></a>O(n^2)</h3><p>平方阶O(n²) 就是把 O(n) 的代码再嵌套循环一遍，它的时间复杂度就是 O(n²) 了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">int n = 100;</span><br><span class="line">int m = 100;</span><br><span class="line">for (i=0; i &lt; n ; i++)&#123;</span><br><span class="line">  for(i=0; i &lt; m ;i++)&#123;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="O-n-3-O-n-k"><a href="#O-n-3-O-n-k" class="headerlink" title="O(n^3) O(n^k)"></a>O(n^3) O(n^k)</h3><p>立方阶则是3层循环嵌套。<br>K方阶则是k层循环嵌套。</p><h3 id="O-2-n"><a href="#O-2-n" class="headerlink" title="O(2^n)"></a>O(2^n)</h3><p>下例从出现递归的时候，T(0) = T(1) = 1，同时 T(n) = T(n - 1) + T(n - 2) + 1，这里的 1 是其中的加法算一次执行。显然 T(n) = T(n - 1) + T(n - 2) 是一个斐波那契数列，通过归纳证明法可以证明，当 n &gt;= 1 时 T(n) &lt; (5/3)^n，同时当 n &gt; 4 时 T(n) &gt;= (3/2)^n。所以该方法的时间复杂度可以表示为 O((5/3)^n)，简化后为 O(2^n)。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">long function1(int n) &#123;    </span><br><span class="line">  if (n &lt;= 1) &#123;        </span><br><span class="line">    return 1;</span><br><span class="line">  &#125; else &#123;        </span><br><span class="line">    return function1(n - 1) + function1(n - 2);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="复杂度分析的4个高阶概念"><a href="#复杂度分析的4个高阶概念" class="headerlink" title="复杂度分析的4个高阶概念"></a>复杂度分析的4个高阶概念</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul><li>最好情况时间复杂度：代码在最理想情况下执行的时间复杂度。</li><li>最坏情况时间复杂度：代码在最坏情况下执行的时间复杂度。</li><li>平均时间复杂度：用代码在所有情况下执行的次数的加权平均值表示。</li><li>均摊时间复杂度：在代码执行的所有复杂度情况中绝大部分是低级别的复杂度，个别情况是高级别复杂度且发生具有时序关系时，可以将个别高级别复杂度均摊到低级别复杂度上。基本上均摊结果就等于低级别复杂度。</li></ul><h3 id="为什么要引入这4个概念？"><a href="#为什么要引入这4个概念？" class="headerlink" title="为什么要引入这4个概念？"></a>为什么要引入这4个概念？</h3><p>同一段代码在不同情况下时间复杂度会出现量级差异，为了更全面，更准确的描述代码的时间复杂度，所以引入这4个概念。代码复杂度在不同情况下出现量级差别时才需要区别这四种复杂度。大多数情况下，是不需要区别分析它们的。</p><h3 id="如何分析平均、均摊时间复杂度？"><a href="#如何分析平均、均摊时间复杂度？" class="headerlink" title="如何分析平均、均摊时间复杂度？"></a>如何分析平均、均摊时间复杂度？</h3><p>平均时间复杂度：代码在不同情况下复杂度出现量级差别，则用代码所有可能情况下执行次数的加权平均值表示。<br>均摊时间复杂度：两个条件满足时使用：1）代码在绝大多数情况下是低级别复杂度，只有极少数情况是高级别复杂度；2）低级别和高级别复杂度出现具有时序规律。均摊结果一般都等于低级别复杂度。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上是浅浅的介绍下算法的时间复杂度内容。<br>最后介绍一个图形工具<a href="https://zh.numberempire.com/" target="_blank" rel="noopener">数学工具</a><br>进入网站后，点击函数图像绘制工具，可以把复杂度量级以图形的方式直观的展示出来。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;算法基础之时间复杂度&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="计算机原理" scheme="/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="面试题" scheme="/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
      <category term="算法" scheme="/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>node.js中的setTimeout,setImmediate,Promise,process.nextTick</title>
    <link href="/2022/08/02/node-js%E4%B8%AD%E7%9A%84setTimeout-setImmediate-Promise-process-nextTick/"/>
    <id>/2022/08/02/node-js中的setTimeout-setImmediate-Promise-process-nextTick/</id>
    <published>2022-08-02T08:37:15.000Z</published>
    <updated>2022-08-03T02:10:22.881Z</updated>
    
    <content type="html"><![CDATA[<p>nodejs中的事件循环宏任务和微任务<br><a id="more"></a></p><h2 id="宏任务"><a href="#宏任务" class="headerlink" title="宏任务"></a>宏任务</h2><p>首先，看一下nodejs的任务队列<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">┌───────────────────────┐</span><br><span class="line"></span><br><span class="line">┌&gt; │timers          │执行setTimeout() 和 setInterval()中到期的callback</span><br><span class="line"></span><br><span class="line">│  └──────────┬────────────┘</span><br><span class="line"></span><br><span class="line">│  ┌──────────┴────────────┐</span><br><span class="line"></span><br><span class="line">│  │pending callbacks│执行系统操作的回调, 如:tcp, udp通信的错误callback</span><br><span class="line"></span><br><span class="line">│  └──────────┬────────────┘</span><br><span class="line"></span><br><span class="line">│  ┌──────────┴────────────┐</span><br><span class="line"></span><br><span class="line">│  │idle, prepare   │只在内部使用</span><br><span class="line"></span><br><span class="line">│  └──────────┬────────────┘</span><br><span class="line"></span><br><span class="line">│  ┌──────────┴────────────┐</span><br><span class="line"></span><br><span class="line">│  │poll            │执行与I/O相关的回调</span><br><span class="line"></span><br><span class="line">    │                  (除了close回调、定时器回调和setImmediate()之外，几乎所有回调都执行);</span><br><span class="line"></span><br><span class="line">│  └──────────┬────────────┘</span><br><span class="line"></span><br><span class="line">│  ┌──────────┴────────────┐</span><br><span class="line"></span><br><span class="line">│  │check           │执行setImmediate的callback</span><br><span class="line"></span><br><span class="line">│  └──────────┬────────────┘</span><br><span class="line"></span><br><span class="line">│  ┌──────────┴────────────┐</span><br><span class="line"></span><br><span class="line">└─┤close callbacks │执行close事件的callback，例如socket.on(&quot;close&quot;,func)</span><br><span class="line"></span><br><span class="line">    └───────────────────────┘</span><br><span class="line">————————————————</span><br></pre></td></tr></table></figure></p><p>nodejs任务队列有timers，pending callbacks，idle, prepare，poll ，check，close callbacks这6个阶段，其中第2，3个属于nodejs内部的不去探讨，还剩下1，4，5，6.<br>先看两个宏任务的执行顺序：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(()=&gt; &#123;</span><br><span class="line">    console.log(&apos;setTimeout&apos;);</span><br><span class="line">&#125;, 0);</span><br><span class="line"></span><br><span class="line">setImmediate(()=&gt; &#123;</span><br><span class="line">    console.log(&apos;setImmediate&apos;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>输出的结果不是固定的，可能是nodejs启动时进入的任务队列时机不一样造成的，再看下边的例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">fs.readFile(&apos;./file.txt&apos;, &apos;utf-8&apos;, (err, data)=&gt; &#123;</span><br><span class="line">    setTimeout(()=&gt; &#123;</span><br><span class="line">        console.log(&apos;setTimeout&apos;);</span><br><span class="line">    &#125;, 0);</span><br><span class="line">    </span><br><span class="line">    setImmediate(()=&gt; &#123;</span><br><span class="line">        console.log(&apos;setImmediate&apos;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>这个例子的输出就是固定的，永远都是”setImmediate”,”setTimeout”,因为按照按照上边任务队列的表来看，poll之后就是check。</p><h2 id="微任务"><a href="#微任务" class="headerlink" title="微任务"></a>微任务</h2><p>Promise和process.nextTick是两个微任务，他们不在任务队列的表格中。他们的执行跟在浏览器端一样，在宏任务之前执行，就是每个宏任务执行之后都会把微任务都执行完了再去执行宏任务。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Promise.resolve().then(()=&gt; &#123;</span><br><span class="line">    console.log(&apos;Promise&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">process.nextTick(()=&gt; &#123;</span><br><span class="line">    console.log(&apos;nextTick&apos;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>nextTick优先顺序高于Promise</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>最后写一个宏任务和微任务都有的例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(()=&gt; &#123;</span><br><span class="line">    console.log(&apos;setTimeout&apos;);</span><br><span class="line">    process.nextTick(()=&gt; &#123;</span><br><span class="line">        console.log(&apos;setTimeout-nextTick&apos;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;, 0);</span><br><span class="line"></span><br><span class="line">setImmediate(()=&gt; &#123;</span><br><span class="line">    console.log(&apos;setImmediate&apos;);</span><br><span class="line">    process.nextTick(()=&gt; &#123;</span><br><span class="line">        console.log(&apos;setImmediate-nextTick&apos;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Promise.resolve().then(()=&gt; &#123;</span><br><span class="line">    console.log(&apos;Promise&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">process.nextTick(()=&gt; &#123;</span><br><span class="line">    console.log(&apos;nextTick&apos;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>执行后发现，当有下边两个微任务在的时候，setTimeout永远在setImmediate前执行，当没有这两个微任务的时候，先后顺序又不一定了，侧面说明微任务可以校准任务队列的执行时机。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;nodejs中的事件循环宏任务和微任务&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="nodejs" scheme="/categories/nodejs/"/>
    
    
      <category term="面试题" scheme="/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Web Component</title>
    <link href="/2022/06/22/Web-Component/"/>
    <id>/2022/06/22/Web-Component/</id>
    <published>2022-06-22T07:45:43.000Z</published>
    <updated>2022-06-22T08:06:25.943Z</updated>
    
    <content type="html"><![CDATA[<p>Web Component初探<br><a id="more"></a></p><h3 id="什么是-Web-Component"><a href="#什么是-Web-Component" class="headerlink" title="什么是 Web Component"></a>什么是 Web Component</h3><p>Web Component 是一种 W3C标准 支持的 组件化方案，通过它，我们可以编写可复用的 组件，同时，我们也可以对自己的组件做更精细化的控制。正如 PWA 一样，他并非一项单一的技术，而是由三项技术组成：</p><blockquote><p>1.Shadow DOM<br>2.Custom elements<br>3.HTML templates</p></blockquote><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>我们准备编写一个 TextReverse 组件，TextReverse 只有一个很简单的功能，就是把传入的 字符串颠倒显示。<br>例如： <text-reverse text="123"></text-reverse> 将会显示 321。<br>第一步，我们需要 定义 这个自定义组件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class TextReverse extends HTMLElement &#123;</span><br><span class="line">    constructor() &#123;</span><br><span class="line">        super();</span><br><span class="line">        const shadowRoot = this.attachShadow(&#123; mode: &apos;open&apos; &#125;);</span><br><span class="line">        const text = this.getAttribute(&apos;text&apos;) || &apos;&apos;;</span><br><span class="line">        const wrapper = document.createElement(&apos;span&apos;);</span><br><span class="line">        wrapper.textContent = text.split(&apos;&apos;).reverse().join(&apos;&apos;);</span><br><span class="line">        shadowRoot.appendChild(wrapper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>定义组件的方式也十分简单，我们只需要 继承一下 HTMLElement，然后在 构造函数 中编写自己的 初始化逻辑 就可以了。<br>初始化过程中，我们首先 创建了一个 shadowRoot，这个相当于是我们整个组件的一个 根结点。<br>紧接着，我们获取到自身的 text 属性，并且将其 倒置 放入新创建的 span 元素中。<br>最后，我们把带有 text 的 span 塞入 shadowRoot。<br>定义完成之后，我们要告知一下系统，也就是 组件注册。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">customElements.define(</span><br><span class="line">    &apos;text-reverse&apos;,</span><br><span class="line">    TextReverse</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>这里有一个小细节，就是我们注册的名字必须是带短横线的。<br>注册完成之后就可以正式使用啦。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;text-reverse text=&apos;12345&apos;&gt;&lt;/text-reverse&gt;</span><br></pre></td></tr></table></figure></p><p>上面的例子中，我们用到了 shadow root，他承载着我们组件所有的内容。而他也是 Web Component 核心技术。<br>我们都知道 Dom 其实就是一棵树，而我们的组件则是树上的一个节点。我们可以称组件节点为 shadow host。<br>shadow host 中含有一颗与外界隔离的 dom 树，我们称之为 shadow tree。shadow tree 中的内容不会影响到外界。Shadow Root 则是这一课shadow tree 的根节点。</p><h3 id="样式隔离"><a href="#样式隔离" class="headerlink" title="样式隔离"></a>样式隔离</h3><p>shadow dom 一大亮点就是样式隔离。我们可以给之前的例子加上样式。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class TextReverse extends HTMLElement &#123;</span><br><span class="line">    constructor() &#123;</span><br><span class="line">        super();</span><br><span class="line">        // ...</span><br><span class="line">        const style = document.createElement(&apos;style&apos;);</span><br><span class="line">        style.textContent = `* &#123;</span><br><span class="line">            background: red;</span><br><span class="line">        &#125;`</span><br><span class="line">        shadowRoot.appendChild(style);</span><br><span class="line">        // ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们给所有元素添加一个红的背景色。但是，结果只有组件内的元素背景色受到了影响。这种样式隔离的特性很好地避免了不同组件之间的样式干扰。</p><h3 id="Template"><a href="#Template" class="headerlink" title="Template"></a>Template</h3><p>在上面的例子中，我们采用代码的方式来创建修改节点。相较于 React 的 Jsx 和 Vue 的模版，这种方法比较低效。所以，我们可以使用 Template 来解决这问题。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template id=&apos;text-reverse&apos;&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        *&#123;</span><br><span class="line">            background: red;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">    &lt;span id=&apos;text&apos;&gt;&lt;/span&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">class TextReverse extends HTMLElement &#123;</span><br><span class="line">    constructor() &#123;</span><br><span class="line">        super();</span><br><span class="line">        const shadowRoot = this.attachShadow(&#123; mode: &apos;open&apos; &#125;);</span><br><span class="line">        const text = this.getAttribute(&apos;text&apos;) || &apos;&apos;;</span><br><span class="line">        const template = document.getElementById(&apos;text-reverse&apos;).content.cloneNode(true);</span><br><span class="line">        template.getElementById(&apos;text&apos;).textContent = text.split(&apos;&apos;).reverse().join(&apos;&apos;);</span><br><span class="line">        shadowRoot.appendChild(template);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们在 html 中定义了一个 template，然后，就和操作普通元素一样获取到 template 节点，然后深拷贝一份节点内容。最后直接操作这个节点。</p><h3 id="Slot"><a href="#Slot" class="headerlink" title="Slot"></a>Slot</h3><p>和 Vue 的 Slot 相似，Slot 赋予了组件更高的可扩展性。通过 Slot，我们可以给组件传入更多的自定义内容。<br>在上面的例子中，我们给组件添加一个自定义的标题。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;text-reverse text=&apos;12345&apos;&gt;</span><br><span class="line">    &lt;span slot=&apos;title&apos;&gt;text reverse&lt;/span&gt;</span><br><span class="line">&lt;/text-reverse&gt;</span><br><span class="line">&lt;template id=&apos;text-reverse&apos;&gt;</span><br><span class="line">        &lt;h1&gt;&lt;slot name=&apos;title&apos;&gt;default title&lt;/slot&gt;&lt;/h1&gt;</span><br><span class="line">        &lt;span id=&apos;text&apos;&gt;&lt;/span&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></p><p>模版中，我们定义一个 slot 元素，命名为 title，并且设置一个无内容时的默认值 default title。 使用的时候，我们在元素中添加一个 slot 属性来与模版中的 slot 相匹配。</p><h3 id="继承现有元素"><a href="#继承现有元素" class="headerlink" title="继承现有元素"></a>继承现有元素</h3><p>至今，我们都是完全自定义组件内容，假如我们想扩展现有系统元素，那就需要定义一个 内置自定义元素。 我们来用一个屏蔽数字的 p 元素来说明。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class PFilter extends HTMLParagraphElement &#123;</span><br><span class="line">    constructor() &#123;</span><br><span class="line">        super();</span><br><span class="line">        const textContent = this.textContent;</span><br><span class="line">        this.textContent = textContent.replace(/\d/g, &apos;*&apos;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">customElements.define(</span><br><span class="line">    &apos;p-filter&apos;,</span><br><span class="line">    PFilter,</span><br><span class="line">    &#123;</span><br><span class="line">        extends: &apos;p&apos;</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>我们这边不再是继承 HTMLElement，而是继承需要扩展的 p节点 HTMLParagraphElement。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p is=&apos;p-filter&apos;&gt;我的手机号是：10086&lt;/p&gt;</span><br></pre></td></tr></table></figure></p><p>不同于独立自定义组件，我们还是需要用原有元素名去声明，并且在 is 属性中填写我们的组件名。</p><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><p>和大多数框架一样，Web Component 也含有许多控制组件生命周期的方法。</p><blockquote><p>1.connectedCallback：当 custom elemen t首次被插入 DOM 时，被调用。<br>2.disconnectedCallback：当 custom element 从 DOM 中删除时，被调用。<br>3.adoptedCallback：当 custom element 被移动到新的文档时，被调用。<br>4.attributeChangedCallback: 当 custom element 增加、删除、修改自身属性时，被调用。</p></blockquote><p>我们只需在定义组件的类中声明对应的方法即可。attributeChangedCallback 相对与别的属性比较特别，他需要 搭配 observedAttributes 使用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class TextReverse extends HTMLElement &#123;</span><br><span class="line">    //...</span><br><span class="line">    static get observedAttributes () &#123;</span><br><span class="line">        return [&apos;text&apos;];</span><br><span class="line">    &#125;</span><br><span class="line">    attributeChangedCallback () &#123;</span><br><span class="line">        const text = this.getAttribute(&apos;text&apos;) || &apos;&apos;;</span><br><span class="line">        this.shadowRoot.getElementById(&apos;text&apos;).textContent = text.split(&apos;&apos;).reverse().join(&apos;&apos;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们在 observedAttributes静态方法中添加需要监听的属性值。然后，在 text 改变的时候，触发 attributeChangedCallback方法来更新 text的值。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Web Component 的功能十分强大，相较于 React，Vue等框架，他天生自带样式隔离，并且最主要的是拥有浏览器的原生支持。不过，想要达到工程开发标准 的话，他还有一段很长很长的路要走。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Web Component初探&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
    
      <category term="基础知识" scheme="/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>Service Worker</title>
    <link href="/2022/06/06/Service-Worker/"/>
    <id>/2022/06/06/Service-Worker/</id>
    <published>2022-06-06T07:51:56.000Z</published>
    <updated>2022-06-06T08:48:05.785Z</updated>
    
    <content type="html"><![CDATA[<p>Service Worker初探<br><a id="more"></a></p><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>service worker定义先不谈，主要简单的介绍下笔者对service worker流程理解,也就是生命周期,直奔主题。</p><blockquote><p>1.第一次进入html文件时，注册service worker文件(sw.js)，接下来sw.js文件中的install事件响应，紧接着activate事件响应，最后是register注册的Promise的then执行，记住，这时registration的状态是installed。在第一次打开网页时，install和activate事件都会执行，可以在install事件里做缓存配置处理，可以在activate事件里做删除无用的缓存处理。<br>2.再次进入这个页面时，因为第一次已经注册了sw.js文件，所以install和activate事件是不会执行的，但是fetch事件可以执行，也可以理解为，再次进入这个页面时，service worker已经接管了这个页面，可以在fetch事件里对请求做处理，也就是service worker的核心功能所在。这时registration的状态是active。<br>3.service worker和html页面是分离的，页面关闭，service worker并不会关闭，每次打开html页面时，这个页面注册过的service worker都会对其进行监管操作，一个页面可以对应多个service worker，只有active状态下的service worker才是正在工作的。因为每次在修改了sw.js文件后，浏览器会自动检查这个文件是否有改变，如果有改变了，会执行步骤1的注册流程，这个时候可以在install事件中，加上self.skipWaiting()，它的作用是将当前的service worker状态提升到active，接管网页操作。</p></blockquote><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>sw.html<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;./lib/1.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;./lib/2.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;./lib/3.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;./lib/4.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;./lib/5.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;./lib/6.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;h1&gt;service worker&lt;/h1&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    if (&apos;serviceWorker&apos; in navigator) &#123;</span><br><span class="line">      /* 当页面加载完成就创建一个serviceWorker */</span><br><span class="line">      window.addEventListener(&apos;load&apos;, function () &#123;</span><br><span class="line">        /* 创建并指定对应的执行内容 */</span><br><span class="line">        /* scope 参数是可选的，可以用来指定你想让 service worker 控制的内容的子目录。 在这个例子里，我们指定了 &apos;/&apos;，表示 根网域下的所有内容。这也是默认值。 */</span><br><span class="line">        navigator.serviceWorker.register(&apos;./sw.js&apos;, &#123;scope: &apos;./&apos;&#125;)</span><br><span class="line">          .then(function (registration) &#123;</span><br><span class="line">            if (registration.installing) &#123;</span><br><span class="line">              console.log(&apos;Service worker installing&apos;);</span><br><span class="line">            &#125; else if (registration.waiting) &#123;</span><br><span class="line">              console.log(&apos;Service worker installed&apos;);</span><br><span class="line">            &#125; else if (registration.active) &#123;</span><br><span class="line">              console.log(&apos;Service worker active&apos;);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">          .catch(function (err) &#123;</span><br><span class="line">            console.log(&apos;ServiceWorker registration failed: &apos;, err);</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>sw.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">var CACHE_NAME = &apos;v1&apos;;</span><br><span class="line">/* 监听安装事件，install 事件一般是被用来设置你的浏览器的离线缓存逻辑 */</span><br><span class="line">this.addEventListener(&apos;install&apos;, function (event) &#123;</span><br><span class="line">  console.log(&apos;install-&apos;+CACHE_NAME);</span><br><span class="line">  self.skipWaiting();</span><br><span class="line">  event.waitUntil(</span><br><span class="line">      /* 创建一个名叫V1的缓存版本 */</span><br><span class="line">      caches.open(CACHE_NAME).then(function (cache) &#123;</span><br><span class="line">          /* 指定要缓存的内容，地址为相对于跟域名的访问路径 */</span><br><span class="line">          return cache.addAll([</span><br><span class="line">              &apos;/sw.html&apos;,</span><br><span class="line">              &apos;./lib/1.js&apos;,</span><br><span class="line">              &apos;./lib/2.js&apos;,</span><br><span class="line">              &apos;./lib/3.js&apos;,</span><br><span class="line">          ]);</span><br><span class="line">      &#125;)</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br><span class="line">// 激活事件</span><br><span class="line">this.addEventListener(&apos;activate&apos;, function(event) &#123;</span><br><span class="line">  console.log(&apos;activate&apos;);</span><br><span class="line">  let cacheWhitelist = [CACHE_NAME];</span><br><span class="line">    // 将其他的chace缓存清除</span><br><span class="line">    event.waitUntil(</span><br><span class="line">      caches.keys().then (cacheNames =&gt; &#123;</span><br><span class="line">        return Promise.all(</span><br><span class="line">          cacheNames.map( cacheName =&gt; &#123;</span><br><span class="line">            if (cacheWhitelist.indexOf(cacheName) === -1) &#123;</span><br><span class="line">              return caches.delete(cacheName)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">        )</span><br><span class="line">      &#125;)</span><br><span class="line">    )</span><br><span class="line">&#125;);</span><br><span class="line">// fetch事件-是否是install时缓存的文件</span><br><span class="line">// this.addEventListener(&apos;fetch&apos;, function(event) &#123;</span><br><span class="line">//   event.respondWith(caches.match(event.request).then(function (response) &#123;</span><br><span class="line">//     if (response) &#123;</span><br><span class="line">//       console.log(response, &apos;------&apos;);</span><br><span class="line">//       return response</span><br><span class="line">//     &#125; else &#123;</span><br><span class="line">//       console.log(event.request, &apos;========&apos;);</span><br><span class="line">//       return fetch(event.request)</span><br><span class="line">//     &#125;</span><br><span class="line">//   &#125;));</span><br><span class="line">// &#125;);</span><br><span class="line">// fetch事件-</span><br><span class="line">this.addEventListener(&apos;fetch&apos;, function(event) &#123;</span><br><span class="line">  if (navigator.onLine) &#123;</span><br><span class="line">    return fetch(event.request.clone()).then(function (response) &#123;</span><br><span class="line">      if (!response || response.status !== 200) &#123;</span><br><span class="line">        return response</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      caches.open(CACHE_NAME).then(function (cache) &#123;</span><br><span class="line">        cache.put(event.request, response.clone())</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      return response</span><br><span class="line">    &#125;).catch(function (err) &#123;</span><br><span class="line">      console.log(err)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    event.respondWith(caches.match(event.request).then(function (response) &#123;</span><br><span class="line">      if (response) &#123;</span><br><span class="line">        // A cached response has been found!</span><br><span class="line">        return response</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        // We don&apos;t have a cached response, initiate a fetch...</span><br><span class="line">        return fetch(event.request)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>service worker功能非常强大，PWA就是基于service worker，以上只是简单的介绍，不过生命周期也就这么多内容。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Service Worker初探&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
    
      <category term="worker" scheme="/tags/worker/"/>
    
  </entry>
  
  <entry>
    <title>Web Worker</title>
    <link href="/2022/06/01/Web-Worker/"/>
    <id>/2022/06/01/Web-Worker/</id>
    <published>2022-06-01T08:26:47.000Z</published>
    <updated>2022-06-01T08:49:42.226Z</updated>
    
    <content type="html"><![CDATA[<p>Web Server的简单介绍<br><a id="more"></a></p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Web Worker使得一个Web应用程序可以在与主执行线程分离的后台线程中运行一个脚本操作。这样做的好处是可以在一个单独的线程中执行任务，从而允许主（通常是UI）线程运行而不被阻塞。<br>它的作用就是给JS创造多线程运行环境，允许主线程创建worker线程，分配任务给后者，主线程运行的同时worker线程也在运行，相互不干扰，在worker线程运行结束后把结果返回给主线程。这样做的好处是主线程可以把计算密集型或高延迟的任务交给worker线程执行，这样主线程就会变得轻松，不会被阻塞或拖慢。这并不意味着JS语言本身支持了多线程能力，而是浏览器作为宿主环境提供了JS一个多线程运行的环境。<br>不过因为worker一旦新建，就会一直运行，不会被主线程的活动打断，这样有利于随时响应主线程的通性，但是也会造成资源的浪费，所以不应过度使用，用完注意关闭。或者说：如果worker无实例引用，该worker空闲后立即会被关闭；如果worker实列引用不为0，该worker空闲也不会被关闭。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h3><ul><li>同源限制<br>worker线程执行的脚本文件必须和主线程的脚本文件同源，这是当然的了，总不能允许worker线程到别人电脑上到处读文件吧</li><li>文件限制<br>为了安全，worker线程无法读取本地文件，它所加载的脚本必须来自网络，且需要与主线程的脚本同源</li><li>DOM操作限制<br>worker线程在与主线程的window不同的另一个全局上下文中运行，其中无法读取主线程所在网页的DOM对象，也不能获取 document、window等对象，但是可以获取navigator、location(只读)、XMLHttpRequest、setTimeout族等浏览器API。</li><li>通信限制<br>worker线程与主线程不在同一个上下文，不能直接通信，需要通过postMessage方法来通信。</li><li>脚本限制<br>worker线程不能执行alert、confirm，但可以使用 XMLHttpRequest 对象发出ajax请求。</li></ul><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>worker线程的js文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// workerThread1.js</span><br><span class="line">let i = 1</span><br><span class="line">function simpleCount() &#123;</span><br><span class="line">  i++</span><br><span class="line">  self.postMessage(i)</span><br><span class="line">  setTimeout(simpleCount, 1000)</span><br><span class="line">&#125;</span><br><span class="line">simpleCount()</span><br><span class="line">self.onmessage = ev =&gt; &#123;</span><br><span class="line">  postMessage(ev.data + &apos; 呵呵~&apos;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>html文件中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  Worker 输出内容：&lt;span id=&apos;app&apos;&gt;&lt;/span&gt;</span><br><span class="line">  &lt;input type=&apos;text&apos; title=&apos;&apos; id=&apos;msg&apos;&gt;</span><br><span class="line">  &lt;button onclick=&apos;sendMessage()&apos;&gt;发送&lt;/button&gt;</span><br><span class="line">  &lt;button onclick=&apos;stopWorker()&apos;&gt;stop!&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&apos;text/javascript&apos;&gt;</span><br><span class="line">  if (typeof(Worker) === &apos;undefined&apos;)// 使用Worker前检查一下浏览器是否支持</span><br><span class="line">    document.writeln(&apos; Sorry! No Web Worker support.. &apos;)</span><br><span class="line">  else &#123;</span><br><span class="line">    window.w = new Worker(&apos;workerThread1.js&apos;)</span><br><span class="line">    window.w.onmessage = ev =&gt; &#123;</span><br><span class="line">      document.getElementById(&apos;app&apos;).innerHTML = ev.data</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    window.w.onerror = err =&gt; &#123;</span><br><span class="line">      w.terminate()</span><br><span class="line">      console.log(error.filename, error.lineno, error.message) // 发生错误的文件名、行号、错误内容</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function sendMessage() &#123;</span><br><span class="line">      const msg = document.getElementById(&apos;msg&apos;)</span><br><span class="line">      window.w.postMessage(msg.value)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function stopWorker() &#123;</span><br><span class="line">      window.w.terminate()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><p>主线程中的api，worker表示是 Worker 的实例</p><blockquote><p>worker.postMessage: 主线程往worker线程发消息，消息可以是任意类型数据，包括二进制数据<br>worker.terminate: 主线程关闭worker线程<br>worker.onmessage: 指定worker线程发消息时的回调，也可以通过worker.addEventListener(‘message’,cb)的方式<br>worker.onerror: 指定worker线程发生错误时的回调，也可以 worker.addEventListener(‘error’,cb)</p></blockquote><p>Worker线程中全局对象为 self，代表子线程自身，这时 this指向self</p><blockquote><p>self.postMessage: worker线程往主线程发消息，消息可以是任意类型数据，包括二进制数据<br>self.close: worker线程关闭自己<br>self.onmessage: 指定主线程发worker线程消息时的回调，也可以self.addEventListener(‘message’,cb)<br>self.onerror: 指定worker线程发生错误时的回调，也可以 self.addEventListener(‘error’,cb)</p></blockquote><p>注意，w.postMessage(aMessage, transferList) 方法接受两个参数，aMessage 是可以传递任何类型数据的，包括对象，这种通信是拷贝关系，即是传值而不是传址，Worker 对通信内容的修改，不会影响到主线程。事实上，浏览器内部的运行机制是，先将通信内容串行化，然后把串行化后的字符串发给 Worker，后者再将它还原。一个可选的 Transferable对象的数组，用于传递所有权。如果一个对象的所有权被转移，在发送它的上下文中将变为不可用（中止），并且只有在它被发送到的worker中可用。可转移对象是如ArrayBuffer，MessagePort或ImageBitmap的实例对象，transferList数组中不可传入null。</p><p>worker线程中加载脚本的api</p><blockquote><p>importScripts(‘script1.js’)    // 加载单个脚本<br>importScripts(‘script1.js’, ‘script2.js’)    // 加载多个脚本</p></blockquote><h2 id="实战场景"><a href="#实战场景" class="headerlink" title="实战场景"></a>实战场景</h2><ul><li>加密数据<br>有些加解密的算法比较复杂，或者在加解密很多数据的时候，这会非常耗费计算资源，导致UI线程无响应，因此这是使用Web Worker的好时机，使用Worker线程可以让用户更加无缝的操作UI。</li><li>预取数据<br>有时候为了提升数据加载速度，可以提前使用Worker线程获取数据，因为Worker线程是可以是用 XMLHttpRequest 的。</li><li>预渲染<br>在某些渲染场景下，比如渲染复杂的canvas的时候需要计算的效果比如反射、折射、光影、材料等，这些计算的逻辑可以使用Worker线程来执行，也可以使用多个Worker线程，这里有个<a href="https://nerget.com/rayjs-mt/rayjs.html" target="_blank" rel="noopener">射线追踪的示例</a>。</li><li>复杂数据处理场景<br>某些检索、排序、过滤、分析会非常耗费时间，这时可以使用Web Worker来进行，不占用主线程。</li><li>预加载图片<br>有时候一个页面有很多图片，或者有几个很大的图片的时候，如果业务限制不考虑懒加载，也可以使用Web Worker来加载图片，可以参考一下<a href="https://juejin.cn/post/6844903510673211400" target="_blank" rel="noopener">这篇文章的探索</a>，这里简单提要一下。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Web Server的简单介绍&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
    
      <category term="worker" scheme="/tags/worker/"/>
    
  </entry>
  
  <entry>
    <title>Map与WeakMap(垃圾回收角度)</title>
    <link href="/2022/05/30/Map%E4%B8%8EWeakMap-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E8%A7%92%E5%BA%A6/"/>
    <id>/2022/05/30/Map与WeakMap-垃圾回收角度/</id>
    <published>2022-05-30T05:25:18.000Z</published>
    <updated>2022-05-30T05:58:14.889Z</updated>
    
    <content type="html"><![CDATA[<p>nodejs环境，垃圾回收角度看Map与WeakMap区别<br><a id="more"></a></p><h3 id="Map与WeakMap简单区别"><a href="#Map与WeakMap简单区别" class="headerlink" title="Map与WeakMap简单区别"></a>Map与WeakMap简单区别</h3><blockquote><p>Map的键值可以是原始数据类型和引用类型，WeakMap的键值只能说引用类型（object）。<br>Map可以迭代遍历键，WeakMap不可迭代遍历键。<br>WeakMap中的”weak“表示弱映射的键是”弱弱地拿着“的，意思就是，这些键不属于正式的引用。<br>换言之，WeakMap所构建的实例中，其key键所对应引用地址的引用断开或不属于指向同一个内存地址的时候，其对应value值就会被加入垃圾回收队伍。（粗暴理解为：因为key必须是个引用类型，当key引用断了或变了，这个键值对就可以进垃圾桶了）<br>观察内存空间理解WeakMap，因为通常条件下很难察觉WeakMap里面keyValue什么时候消失，但是通过某一个引用类型的值大到足够占据一定内存时候，我们可以通过观察内存的变化来观察WeakMap的特性。</p></blockquote><h3 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h3><p>Node.js的进程Api process.memoryUsage()配合手动垃圾回收global.gc()在终端观察。（也可以使用Chrome浏览器Performance功能录制内存变化）</p><blockquote><p>glabal.gc()<br>手动调用一次垃圾回收。需要在运行js文件时候增加命令 –expose-gc，一般环境下不推荐使用，这里做学习用。</p></blockquote><blockquote><p>process.memoryUsage()<br>查看Node进程的内存占用情况,返回值为对象其中包含五个属性 rss，heapTotal，heapUsed，external，arrayBuffers；其中主要属性是 heapTotal和heapUsed对应的是V8的堆内存信息。heapTotal是堆中总共申请的内存量，heapUsed表示目前堆中使用的内存量,单位都为字节。</p></blockquote><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><p>1.WeakMap<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">// 第一次手动清理垃圾以确保为最新状态，观察内存情况</span><br><span class="line">global.gc();</span><br><span class="line">console.log(`第一次垃圾回收，当前内存使用情况：$&#123;(process.memoryUsage().heapUsed / 1024 / 1024).toFixed(2)&#125;MB`);</span><br><span class="line">const wm = new WeakMap();</span><br><span class="line"></span><br><span class="line">let key = &#123;&#125;;</span><br><span class="line">// 给 WeakMap实例 赋值一个 占领内存足够大的 键值对</span><br><span class="line">wm.set(key, new Array(114514 * 19));</span><br><span class="line">// 手动清理一下垃圾 观察内存占用情况</span><br><span class="line">global.gc();</span><br><span class="line">console.log(`第二次垃圾回收，当前内存使用情况：$&#123;(process.memoryUsage().heapUsed / 1024 / 1024).toFixed(2)&#125;MB`);</span><br><span class="line"></span><br><span class="line">// 此时把 key键 的引用进行断开，并观察内存占用情况</span><br><span class="line">key = null;</span><br><span class="line">// key = new Array();  </span><br><span class="line">// 这种改变引用地址写法也可以引起 弱映射，因为引用地址不再是同块内存地址 WeakMap内对应的value也会被垃圾回收</span><br><span class="line"></span><br><span class="line">global.gc();</span><br><span class="line">console.log(`第三次垃圾回收，当前内存使用情况：$&#123;(process.memoryUsage().heapUsed / 1024 / 1024).toFixed(2)&#125;MB`);</span><br><span class="line"></span><br><span class="line">$ node --expose-gc index.js</span><br><span class="line"></span><br><span class="line">第一次垃圾回收，当前内存使用情况：1.66MB</span><br><span class="line">第二次垃圾回收，当前内存使用情况：18.45MB</span><br><span class="line">第三次垃圾回收，当前内存使用情况：1.84MB</span><br></pre></td></tr></table></figure></p><p>2.Map<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">// 第一次手动清理垃圾以确保为最新状态，观察内存情况</span><br><span class="line">global.gc();</span><br><span class="line">console.log(</span><br><span class="line">  `第一次垃圾回收，当前内存使用情况：$&#123;(process.memoryUsage().heapUsed / 1024 / 1024).toFixed(2)&#125;MB`</span><br><span class="line">);</span><br><span class="line">const m = new Map();</span><br><span class="line"></span><br><span class="line">let key = &#123;&#125;;</span><br><span class="line">m.set(key, new Array(114514 * 19));</span><br><span class="line">// 手动清理一下垃圾 观察内存占用情况</span><br><span class="line">global.gc();</span><br><span class="line">console.log(</span><br><span class="line">  `第二次垃圾回收，当前内存使用情况：$&#123;(process.memoryUsage().heapUsed / 1024 / 1024).toFixed(2)&#125;MB，</span><br><span class="line">  当前Map的长度: $&#123;m.size&#125;`</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">// 此时把 key键 的引用进行断开，并观察内存占用情况</span><br><span class="line">key = null;</span><br><span class="line">global.gc();</span><br><span class="line">console.log(</span><br><span class="line">  `第三次垃圾回收，当前内存使用情况：$&#123;(process.memoryUsage().heapUsed / 1024 / 1024).toFixed(2)&#125;MB，</span><br><span class="line">  当前Map的长度: $&#123;m.size&#125;`</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">// 清除Map所有键值对</span><br><span class="line">m.clear();</span><br><span class="line"></span><br><span class="line">global.gc();</span><br><span class="line">console.log(</span><br><span class="line">  `第四次垃圾回收，当前内存使用情况：$&#123;(process.memoryUsage().heapUsed / 1024 / 1024).toFixed(2)&#125;MB，</span><br><span class="line">  当前Map的长度: $&#123;m.size&#125;`</span><br><span class="line">);</span><br><span class="line">$ node --expose-gc index.js</span><br><span class="line">第一次垃圾回收，当前内存使用情况：1.66MB</span><br><span class="line">第二次垃圾回收，当前内存使用情况：18.45MB，当前Map的长度: 1</span><br><span class="line">第三次垃圾回收，当前内存使用情况：18.45MB，当前Map的长度: 1</span><br><span class="line">第四次垃圾回收，当前内存使用情况：1.85MB，当前Map的长度: 0</span><br></pre></td></tr></table></figure></p><p>由此可见Map所构建的实例是需要手动清理，才能被垃圾回收清除，而WeakMap只要外部的引用消失，所对应的键值对就会自动被垃圾回收清除。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;nodejs环境，垃圾回收角度看Map与WeakMap区别&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
    
      <category term="基础知识" scheme="/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>函数式编程的核心思想</title>
    <link href="/2022/05/09/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E7%9A%84%E6%A0%B8%E5%BF%83%E6%80%9D%E6%83%B3/"/>
    <id>/2022/05/09/函数式编程的核心思想/</id>
    <published>2022-05-09T05:57:39.000Z</published>
    <updated>2022-05-09T06:24:42.268Z</updated>
    
    <content type="html"><![CDATA[<p>什么是函数式编程<br><a id="more"></a><br>函数式编程最近几年越炒越热，有函数式编程的语言鄙视没有函数式编程的语言，纯函数式编程的语言鄙视不纯的函数式编程的语言。</p><p>那么，到底什么是函数式编程，函数式编程的核心思想又是什么？</p><p>函数式编程的第一个特点就是可以把函数作为参数传递给另一个函数，也就是所谓的高阶函数。例如，对数组进行排序，可以传入一个排序函数作为参数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String[] array = &#123; &quot;orange&quot;, &quot;Pear&quot;, &quot;Apple&quot; &#125;;</span><br><span class="line">Arrays.sort(array, String::compareToIgnoreCase);</span><br></pre></td></tr></table></figure></p><p>函数式编程的第二个特点就是可以返回一个函数，这样就可以实现闭包或者惰性计算：</p><p>以上两个特点还仅仅是简化了代码。从代码的可维护性上讲，函数式编程最大的好处是引用透明，即函数运行的结果只依赖于输入的参数，而不依赖于外部状态，因此，我们常常说函数式编程没有副作用。</p><p>没有副作用有个巨大的好处，就是函数内部无状态，即输入确定，输出就是确定的，容易测试和维护。</p><p>很多初学者容易纠结“纯”函数式语言，认为只有Haskell这种消除了变量和副作用的语言才是正宗的函数式编程。还有人甚至认为纯函数不能有任何IO操作，包括打行日志都不行。</p><p>其实这种纠结是没有意义的，因为计算机底层就是一个完全可变的内存和不可预测输入的系统，追求完美的无副作用是不现实的，我们只需要理解函数式编程的思想，把业务逻辑做到“无副作用”，至于有变量、打日志、读缓存这些无关紧要的“副作用”，根本不用担心，不需要解决，也几乎没法解决。</p><p>我们来举个栗子。</p><p>比如一个财务软件，需要一个函数专门计算个人所得税，输入是一个<code>IncomeRecord</code>，输出是个税金额：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">double calculateIncomeTax(IncomeRecord record) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>又假设<code>IncomeRecord</code>长这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class IncomeRecord &#123;</span><br><span class="line">    String id; // 身份证号</span><br><span class="line">    String name; // 姓名</span><br><span class="line">    double salary; // 工资</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先不考虑五险一金这些乱七八糟的东西，我们只关注如何计算个税。为了简化，我们假设直接扣除一个免征额后按20%计算：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">double calculateIncomeTax(IncomeRecord record) &#123;</span><br><span class="line">    double threshold = 3500;</span><br><span class="line">    double tax = record.salary &lt;= threshold ? 0 : (record.salary - threshold) * 0.2;</span><br><span class="line">    return tax;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这个程序在2018年9月1号前是没问题的，问题是2018年9月1号后起征点调整到了5000，那2018年8月和2018年9月，计算结果应该不一样。怎么改？</p><p>普通开发者的改法：那还不简单？直接获取当前日期，返回正确的起征点就行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">double calculateIncomeTax(IncomeRecord record) &#123;</span><br><span class="line">    double threshold = today() &lt; date(2018, 9, 1) ? 3500 : 5000;</span><br><span class="line">    double tax = record.salary &lt;= threshold ? 0 : (record.salary - threshold) * 0.2;</span><br><span class="line">    return tax;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序是没错，问题是：</p><p>同样的输入，8月31号跑，和9月1号跑，结果不一样，难道会计要在9月1号做8月份的工资条，必须把电脑的时间先调到8月份？</p><p>用函数式编程的观点思考一下，就发现问题所在：</p><p><code>today()</code>这个函数，返回结果与时间有关，这就造成了<code>calculateIncomeTax()</code>不再是一个纯函数，它与当前时间相关了。</p><p>那怎么把<code>calculateIncomeTax()</code>恢复成一个纯函数，同时要支持起征点调整？</p><p>方法是把时间相关的变量作为参数传进来，例如，给<code>IncomeRecord</code>增加几个字段：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class IncomeRecord &#123;</span><br><span class="line">    String id; // 身份证号</span><br><span class="line">    String name; // 姓名</span><br><span class="line">    double salary; // 工资</span><br><span class="line">    int year; // 年</span><br><span class="line">    int month; // 月</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样我们就可以消除today()的调用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">double calculateIncomeTax(IncomeRecord record) &#123;</span><br><span class="line">    double threshold = date(record.year, record.month) &lt; date(2018, 9) ? 3500 : 5000;</span><br><span class="line">    double tax = record.salary &lt;= threshold ? 0 : (record.salary - threshold) * 0.2;</span><br><span class="line">    return tax;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>calculateIncomeTax()</code>又变成了一个纯函数，会计就不用改电脑时间了。</p><p>是不是觉得这个例子太简单了？其实简单的函数如果都能写成有状态的，那么复杂的业务逻辑必然写成一锅粥。</p><p>举个复杂的栗子：</p><p>对于一个股票交易系统，如果我们把输入定义为：开盘前所有股民的现金和持股，以及交易时段的所有订单，那么，输出就是收盘后所有股民的现金和持股：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">StockStatus process(StockStatus old, List&lt;Order&gt; orders) &#123;</span><br><span class="line">    ...</span><br><span class="line">    for (Order order : orders) &#123;</span><br><span class="line">        ...</span><br><span class="line">        sendExchangeResult(...); // 给每一笔成交发送信息</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很显然这是一个纯函数，虽然在处理过程中，这个函数会给股民朋友发送各种心跳消息。</p><p>如果把交易系统的模型设计成这样一个纯函数，那么理论上我们只需要从股市开市的那一天开始，把所有订单全部处理一遍，就可以正确得到今天收盘后的状态。</p><p>或者说，只要取任意一天开盘前的系统状态的备份（就是整个数据库的备份），把当天的订单重新处理一遍，就得到了当天收盘的状态。这个过程可以做任意次，结果不变，因此，非常适合验证代码的修改是否影响了业务流程。</p><p>那么问题来了，交易系统中有无数和时间相关的状态，怎么处理成纯函数？这个模型的处理，可比计算个税复杂多了。</p><p>这就是函数式编程的精髓：业务系统模型无状态。模型的好坏，直接影响到代码的正确性、可靠性、稳定性，以及是否需要996。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;什么是函数式编程&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
    
      <category term="基础知识" scheme="/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
      <category term="面试题" scheme="/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>fork github仓库后，与原仓库进行同步</title>
    <link href="/2022/04/29/fork-github%E4%BB%93%E5%BA%93%E5%90%8E%EF%BC%8C%E4%B8%8E%E5%8E%9F%E4%BB%93%E5%BA%93%E8%BF%9B%E8%A1%8C%E5%90%8C%E6%AD%A5/"/>
    <id>/2022/04/29/fork-github仓库后，与原仓库进行同步/</id>
    <published>2022-04-29T03:02:39.000Z</published>
    <updated>2022-04-29T03:12:19.294Z</updated>
    
    <content type="html"><![CDATA[<p>fork了别人的github仓库，如何与原仓库进行同步？<br><a id="more"></a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们在使用GitHub时，看到好的项目或想给某个项目做贡献，此时通常会将代码仓库fork到自己的账号下。如果在此期间，如果源仓库的代码发生了变动，就需要与源仓库代码进行同步。本篇文章就带大家实操一下，如何实现这一操作。</p><h2 id="配置项目的上游仓库"><a href="#配置项目的上游仓库" class="headerlink" title="配置项目的上游仓库"></a>配置项目的上游仓库</h2><p>首先需要大家将fork的仓库代码clone到本地，后面的所有操作都是基于本地代码库来进行操作的。比如，可以通过git clone先将fork的代码下载到本地：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:secbr/nacos.git</span><br></pre></td></tr></table></figure></p><p>后续的一步步操作，都是基于本地仓库来进行操作。</p><h2 id="进入到本地仓库目录"><a href="#进入到本地仓库目录" class="headerlink" title="进入到本地仓库目录"></a>进入到本地仓库目录</h2><p>通过cd操作，进入到clone下来的本地仓库根目录：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /Users/apple/develop/nacos-request/nacos</span><br></pre></td></tr></table></figure></p><p>后续的操作无特殊说明，都是在这个本地仓库的目录下进行操作。</p><h2 id="查看远程仓库路径"><a href="#查看远程仓库路径" class="headerlink" title="查看远程仓库路径"></a>查看远程仓库路径</h2><p>执行命令 git remote -v 查看远程仓库的路径：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">appledeMacBook-Pro-2:nacos apple$ git remote -v</span><br><span class="line">origin  https://github.com/secbr/nacos.git (fetch)</span><br><span class="line">origin  https://github.com/secbr/nacos.git (push)</span><br></pre></td></tr></table></figure></p><p>如果只显示2行内容，说明该项目还未设置upstream （中文叫：上游代码库），一般情况下，设置好一次 upstream 后就无需重复设置。通过显示远程仓库的路径和clone时的路径对照，会发现，此时远程仓库的路径还是fork项目的路径。</p><h2 id="添加upstream路径"><a href="#添加upstream路径" class="headerlink" title="添加upstream路径"></a>添加upstream路径</h2><p>执行命令 git remote add upstream <a href="https://xxx.git，把fork的源仓库设置为" target="_blank" rel="noopener">https://xxx.git，把fork的源仓库设置为</a> upstream 。这里项目是从alibaba的nacos仓库fork过来的，因此对应的upstream就是alibaba的源仓库地址。</p><p>执行上述命令，在此执行git remote -v 检查是否成功。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">appledeMacBook-Pro-2:nacos apple$ git remote add upstream https://github.com/alibaba/nacos.git</span><br><span class="line">appledeMacBook-Pro-2:nacos apple$ git remote -v</span><br><span class="line">origin  https://github.com/secbr/nacos.git (fetch)</span><br><span class="line">origin  https://github.com/secbr/nacos.git (push)</span><br><span class="line">upstream        https://github.com/alibaba/nacos.git (fetch)</span><br><span class="line">upstream        https://github.com/alibaba/nacos.git (push)</span><br></pre></td></tr></table></figure></p><p>通过上面的输出可以看出，多了两项upstream的地址，说明添加upstream成功。</p><h2 id="检查本地代码状态"><a href="#检查本地代码状态" class="headerlink" title="检查本地代码状态"></a>检查本地代码状态</h2><p>由于我们的实例是直接从仓库clone下来的，本地还没有修改代码。如果你的本地项目已经修改了一些代码，不确定是否提交了代码，就需要执行git status来检查一下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">appledeMacBook-Pro-2:nacos apple$ git status</span><br><span class="line">On branch develop</span><br><span class="line">Your branch is up to date with &apos;origin/develop&apos;.</span><br><span class="line"></span><br><span class="line">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure></p><p>上面显示，本地没有需要提交的（commit）的代码。如果本地有修改，需要先从本地仓库推送到GitHub仓库。然后，再执行一次 git status 检查。<br>对应推送到GitHub仓库的基本操作步骤如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git add -A 或者 git add filename</span><br><span class="line">git commit -m &quot;your note&quot;</span><br><span class="line">git push origin master</span><br><span class="line">git status</span><br></pre></td></tr></table></figure></p><p>完成上面的基本操作之后，确认代码都已经提交，便可以开始执行源仓库与本地仓库的merge操作了。</p><h2 id="抓取源仓库的更新"><a href="#抓取源仓库的更新" class="headerlink" title="抓取源仓库的更新"></a>抓取源仓库的更新</h2><p>经过上面步骤的准备之后，我们可以进行源仓库的代码更新了。执行命令 git fetch upstream 抓取原仓库的更新：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">appledeMacBook-Pro-2:nacos apple$ git fetch upstream</span><br><span class="line">remote: Enumerating objects: 2646, done.</span><br><span class="line">remote: Counting objects: 100% (2593/2593), done.</span><br><span class="line">remote: Compressing objects: 100% (1157/1157), done.</span><br><span class="line">remote: Total 2646 (delta 731), reused 2404 (delta 682), pack-reused 53</span><br><span class="line">Receiving objects: 100% (2646/2646), 1.67 MiB | 1.47 MiB/s, done.</span><br><span class="line">Resolving deltas: 100% (734/734), completed with 37 local objects.</span><br><span class="line">From https://github.com/alibaba/nacos</span><br><span class="line"> * [new branch]          0.2.1                               -&gt; upstream/0.2.1</span><br><span class="line"> * [new branch]          0.2.2                               -&gt; upstream/0.2.2</span><br><span class="line"> * [new branch]          0.3.0                               -&gt; upstream/0.3.0</span><br><span class="line">//...省略一部分</span><br></pre></td></tr></table></figure></p><p>执行上述命令之后，上游仓库的更新（commit）会本存储为本地的分支，通常名称为：upstream/BRANCHNAME。比如上面的upstream/0.3.0。</p><h2 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h2><p>完成了上游仓库分支的拉取之后，先来核查一下本地仓库当前处于哪个分支，也就是需要更新合并的分支。比如，这里我需要将develop分支的内容更新到与上游仓库代码一致。则先切换到develop分支：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">appledeMacBook-Pro-2:nacos apple$ git checkout develop</span><br><span class="line">Already on &apos;develop&apos;</span><br><span class="line">Your branch is up to date with &apos;origin/develop&apos;.</span><br></pre></td></tr></table></figure></p><p>上面提示已经是develop分支了。</p><h2 id="执行合并"><a href="#执行合并" class="headerlink" title="执行合并"></a>执行合并</h2><p>执行命令 git merge upstream/develop 合并远程的develop分支。比如你合并的可能是master，可根据需要将develop的名称替换成对应的master。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">appledeMacBook-Pro-2:nacos apple$ git merge upstream/develop</span><br><span class="line">Removing test/src/test/java/com/alibaba/nacos/test/naming/DeregisterInstance_ITCase.java</span><br><span class="line">// ...省略一部分</span><br><span class="line">Removing naming/src/test/java/com/alibaba/nacos/naming/core/PushServiceTest.java</span><br><span class="line">Auto-merging client/src/main/java/com/alibaba/nacos/client/naming/remote/http/NamingHttpClientProxy.java</span><br><span class="line">CONFLICT (content): Merge conflict in client/src/main/java/com/alibaba/nacos/client/naming/remote/http/NamingHttpClientProxy.java</span><br><span class="line">Removing client/src/main/java/com/alibaba/nacos/client/naming/core/HostReactor.java</span><br><span class="line">Removing .editorconfig</span><br><span class="line">Automatic merge failed; fix conflicts and then commit the result.</span><br></pre></td></tr></table></figure></p><p>执行完上述命令之后，会发现上游代码指定分支的修改内容已经反映到本地代码了。</p><h2 id="上传代码到fork分支"><a href="#上传代码到fork分支" class="headerlink" title="上传代码到fork分支"></a>上传代码到fork分支</h2><p>执行完上一步的合并操作之后，往后还有一些后续处理，比如代码冲突。如果本地修改了内容，上游仓库也修改了对应的代码，则可能会出现冲突。这时就需要对比代码进行修改。本人更习惯使用IDEA中可视化的插件进行代码冲突解决，你也可以选择你喜欢的方式进行解决。</p><p>解决完冲突之后，就可以执行正常的代码add、commit和push操作了。这里的一系列操作都是针对自己fork的仓库的，对应操作实例如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">appledeMacBook-Pro-2:nacos apple$ git add .</span><br><span class="line">appledeMacBook-Pro-2:nacos apple$ git commit -m &apos;merge from nacos&apos;</span><br><span class="line">[develop 8601c1791] merge from nacos </span><br><span class="line">appledeMacBook-Pro-2:nacos apple$ git push</span><br><span class="line">Enumerating objects: 4, done.</span><br><span class="line">Counting objects: 100% (4/4), done.</span><br><span class="line">Delta compression using up to 12 threads</span><br><span class="line">Compressing objects: 100% (2/2), done.</span><br><span class="line">Writing objects: 100% (2/2), 281 bytes | 281.00 KiB/s, done.</span><br><span class="line">Total 2 (delta 1), reused 0 (delta 0), pack-reused 0</span><br><span class="line">remote: Resolving deltas: 100% (1/1), completed with 1 local object.</span><br><span class="line">To https://github.com/secbr/nacos.git</span><br><span class="line">   76a4dcbb1..8601c1791  develop -&gt; develop</span><br></pre></td></tr></table></figure></p><p>上述操作，通过add、commit、push一系列操作，将源仓库中的修改内容，提交到自己fork的分支当中了。此时再查看自己fork的GitHub仓库，发现代码已经更新。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>本篇文章介绍了当我们fork一个仓库代码之后，如何将上游仓库最新的代码与自己仓库进行同步更新。如果你喜欢fork一些优秀的代码，需要在GitHub上为开源项目做贡献，那么这个基本的操作必须得了解一下。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;fork了别人的github仓库，如何与原仓库进行同步？&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
    
      <category term="github" scheme="/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript设计模式与开发实践</title>
    <link href="/2022/04/12/JavaScript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%8E%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5/"/>
    <id>/2022/04/12/JavaScript设计模式与开发实践/</id>
    <published>2022-04-12T06:58:23.000Z</published>
    <updated>2022-04-12T07:09:33.623Z</updated>
    
    <content type="html"><![CDATA[<p>JavaScript设计模式与开发实践<br><a id="more"></a></p><h1 id="JavaScript设计模式与开发实践"><a href="#JavaScript设计模式与开发实践" class="headerlink" title="JavaScript设计模式与开发实践"></a>JavaScript设计模式与开发实践</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="面向对象的JavaScript"><a href="#面向对象的JavaScript" class="headerlink" title="面向对象的JavaScript"></a>面向对象的JavaScript</h3><p>::: tip<br>编程语言按照数据类型大体分为两大类：一类是<strong>静态类型语言</strong>，一类是<strong>动态类型语言</strong><br>:::</p><h4 id="静态类型语言的优缺点"><a href="#静态类型语言的优缺点" class="headerlink" title="静态类型语言的优缺点"></a>静态类型语言的优缺点</h4><p><strong>优点</strong>：</p><ul><li>能够在编译时就能发现类型不匹配的错误</li><li>能够根据数据的不同类型进行针对的优化，提高程序的执行速度</li></ul><p><strong>缺点</strong>:</p><ul><li>强迫程序员必须使用强契约来编写程序，为每一个变量规定数据类型</li><li>类型的声明会增加更多的代码，这些细节容易让程序员的精力从思考业务逻辑上分散开</li></ul><h4 id="动态类型语言的优缺点"><a href="#动态类型语言的优缺点" class="headerlink" title="动态类型语言的优缺点"></a>动态类型语言的优缺点</h4><p><strong>优点</strong>：</p><ul><li>编写的代码数量更少，看起来也更简洁，程序员可以把精力更多的放在业务逻辑上面</li></ul><p><strong>缺点</strong>:</p><ul><li>无法保证变量的类型，从而在程序运行期有可能发生跟类型相关的错误</li></ul><h4 id="鸭子类型"><a href="#鸭子类型" class="headerlink" title="鸭子类型"></a>鸭子类型</h4><p>::: tip<br>如果它走起路来像鸭子，叫起来也像鸭子，那么它就是鸭子，鸭子类型指导我们只关注对象的行为，而不关注对象本身<br>:::<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 鸭子类型</span></span><br><span class="line"><span class="keyword">var</span> duck = &#123;</span><br><span class="line">  duckSinging: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'嘎嘎嘎'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> chicken = &#123;</span><br><span class="line">  duckSinging: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'嘎嘎嘎'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 合唱团</span></span><br><span class="line"><span class="keyword">var</span> choir = [];</span><br><span class="line"><span class="keyword">var</span> joinChoir = <span class="function"><span class="keyword">function</span>(<span class="params">animal</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(animal &amp;&amp; <span class="keyword">typeof</span> animal.duckSinging === <span class="string">'function'</span>) &#123;</span><br><span class="line">    choir.push(animal);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'恭喜加入合唱团'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">joinChoir(duck);    <span class="comment">// 恭喜加入合唱团</span></span><br><span class="line">joinChoir(chicken); <span class="comment">// 恭喜加入合唱团</span></span><br></pre></td></tr></table></figure></p><h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h4><p>::: tip<br>多态的含义是：同一操作作用于不同的对象，可以产生不同的解释和不同的执行结果<br>:::<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 多态</span></span><br><span class="line"><span class="keyword">var</span> makeSound = <span class="function"><span class="keyword">function</span>(<span class="params">animal</span>) </span>&#123;</span><br><span class="line">  animal.sound();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> Duck = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">Duck.prototype.sound =<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'嘎嘎嘎'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Chicken = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">Chicken.prototype.sound = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'咯咯咯'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">makeSound(<span class="keyword">new</span> Duck());    <span class="comment">// 嘎嘎嘎</span></span><br><span class="line">makeSound(<span class="keyword">new</span> Chicken()); <span class="comment">// 咯咯咯</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Dog = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">Dog.prototype.sound = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'汪汪汪'</span>);</span><br><span class="line">&#125;</span><br><span class="line">makeSound(<span class="keyword">new</span> Dog());     <span class="comment">// 汪汪汪</span></span><br></pre></td></tr></table></figure></p><h3 id="this，call和apply"><a href="#this，call和apply" class="headerlink" title="this，call和apply"></a>this，call和apply</h3><p>::: tip<br>JavaScript中this始终指向一个对象，而具体指向哪个对象，是根据程序运行时的环境所决定的，不是在被声明时决定的<br>:::</p><p><strong>this指向的四种情况</strong></p><ol><li>作为对象的方法调用</li><li>作为普通函数调用</li><li>构造器调用</li><li>Function.prototype.call 或 Function.prototype.apply调用</li></ol><p><strong>第一种：作为对象方法调用</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一种：作为对象方法调用</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  a: <span class="number">1</span>,</span><br><span class="line">  getA: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.getA(); <span class="comment">// 输出1</span></span><br></pre></td></tr></table></figure></p><p><strong>第二种：作为普通函数调用</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第二种：作为普通函数调用</span></span><br><span class="line"><span class="built_in">window</span>.name = <span class="string">'global-name'</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'obj'</span>,</span><br><span class="line">  getName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> newGetName = obj.getName;</span><br><span class="line"><span class="built_in">console</span>.log(newGetName());  <span class="comment">// 输出global-name</span></span><br></pre></td></tr></table></figure></p><p><strong>第三种：作为构造器调用</strong><br>::: tip<br>new进行构造器调用时的步骤:<br></p><ol><li>新创建一个对象</li><li>新对象进行原型委托</li><li>this绑定到这个新对象</li><li>如果构造器不返回其他对象，那么默认返回这个新对象<br>:::<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第三种：作为构造器调用</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">'why'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> stu = <span class="keyword">new</span> Student();</span><br><span class="line"><span class="built_in">console</span>.log(stu.name);      <span class="comment">// 输出why</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Teacher</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">'www'</span>;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    name: <span class="string">'AAA'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> teacher = <span class="keyword">new</span> Teacher();</span><br><span class="line"><span class="built_in">console</span>.log(teacher.name);  <span class="comment">// 输出AAA，而不是wwww</span></span><br></pre></td></tr></table></figure></li></ol><p><strong>第四中：call和apply调用</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第四中：call和apply调用</span></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">  name: <span class="string">'why'</span>,</span><br><span class="line">  getName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">  name: <span class="string">'AAA'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(obj1.getName.call(obj2)); <span class="comment">// 输出AAA</span></span><br></pre></td></tr></table></figure></p><h4 id="call和apply详解"><a href="#call和apply详解" class="headerlink" title="call和apply详解"></a>call和apply详解</h4><p>::: tip 区别</p><ol><li>apply只接受两个参数，其中第二个参数是一个类数组或者数组</li><li>call可以接受多个参数，即参数不固定<br>:::<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// call和apply的区别</span></span><br><span class="line"><span class="keyword">var</span> func = <span class="function"><span class="keyword">function</span>(<span class="params">a,b,c</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log([a,b,c]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 当使用call和apply时，如果第一个参数传递的是null,则此时this指向全局对象</span></span><br><span class="line">func.apply(<span class="literal">null</span>,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]);   <span class="comment">// 输出[1,2,3]</span></span><br><span class="line">func.call(<span class="literal">null</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);      <span class="comment">// 输出[1,2,3]</span></span><br></pre></td></tr></table></figure></li></ol><h5 id="call和apply的用途"><a href="#call和apply的用途" class="headerlink" title="call和apply的用途"></a>call和apply的用途</h5><p>::: tip</p><ol><li>改变this指向</li><li>Function.prototype.bind绑定</li><li>借用其他对象的方法<br>:::</li></ol><p><strong>改变this指向</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// call和apply的用途：改变this指向</span></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">  name: <span class="string">'why'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">  name: <span class="string">'www'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.name = <span class="string">'global-name'</span></span><br><span class="line"><span class="keyword">var</span> getName =<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(getName());           <span class="comment">// 输出global-name</span></span><br><span class="line"><span class="built_in">console</span>.log(getName.call(obj1));  <span class="comment">// 输出why</span></span><br><span class="line"><span class="built_in">console</span>.log(getName.apply(obj2)); <span class="comment">// 输出www</span></span><br></pre></td></tr></table></figure></p><p><strong>Function.prototype.bind绑定</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// call和apply的用途：Function.prototype.bind绑定</span></span><br><span class="line"><span class="comment">// 基础bind实现</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.bind = <span class="function"><span class="keyword">function</span>(<span class="params">context</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> self.apply(context,<span class="built_in">arguments</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'why'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> func = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;.bind(obj);</span><br><span class="line">func(); <span class="comment">// 输出why</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 完善版bind</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.bind = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">var</span> context = <span class="built_in">Array</span>.prototype.shift.call(<span class="built_in">arguments</span>); <span class="comment">// 读取第一个参数，即this对象</span></span><br><span class="line">  <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);    <span class="comment">// 获取参数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> newArgs = <span class="built_in">Array</span>.prototype.concat.call(args,<span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>));</span><br><span class="line">    <span class="keyword">return</span> self.apply(context,newArgs);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">  name: <span class="string">'why'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> func = <span class="function"><span class="keyword">function</span>(<span class="params">a,b,c,d</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">  <span class="built_in">console</span>.log([a,b,c,d]);</span><br><span class="line">&#125;.bind(obj1,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">func(<span class="number">3</span>,<span class="number">4</span>);    <span class="comment">// 输出why  [1,2,3,4]</span></span><br></pre></td></tr></table></figure></p><p><strong>借用其他对象的方法</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// call和apply的用途：借用其他对象的方法</span></span><br><span class="line"><span class="keyword">var</span> Foo = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> Bar = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  Foo.apply(<span class="keyword">this</span>,<span class="built_in">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line">Bar.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> bar = <span class="keyword">new</span> Bar(<span class="string">'why'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(bar.getName()); <span class="comment">// 输出why</span></span><br></pre></td></tr></table></figure></p><h3 id="闭包和高阶函数"><a href="#闭包和高阶函数" class="headerlink" title="闭包和高阶函数"></a>闭包和高阶函数</h3><h4 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h4><p>::: tip</p><ol><li>全局变量的生存周期是永久的</li><li>局部变量在退出函数时，局部变量会被销毁</li><li>闭包能够延长局部变量的生存周期<br>:::<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 变量的生存周期</span></span><br><span class="line"><span class="built_in">window</span>.name = <span class="string">'why'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> sex = <span class="string">'男'</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(sex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> age = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ++age;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> _bar = bar();</span><br><span class="line"><span class="built_in">console</span>.log(name);    <span class="comment">// 输出why</span></span><br><span class="line"><span class="built_in">console</span>.log(sex);     <span class="comment">// 报错</span></span><br><span class="line"><span class="built_in">console</span>.log(_bar());  <span class="comment">// 输出11</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="闭包的作用"><a href="#闭包的作用" class="headerlink" title="闭包的作用"></a>闭包的作用</h4><p>::: tip</p><ol><li>封装变量</li><li>延续局部变量的寿命<br>:::<br><strong>封装变量</strong><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 闭包的作用：封装变量</span></span><br><span class="line"><span class="comment">// 实例：计算乘积</span></span><br><span class="line"><span class="keyword">var</span> mult = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> cache = &#123;&#125;;</span><br><span class="line">  <span class="comment">// 小函数提取出来</span></span><br><span class="line">  <span class="keyword">var</span> calculate = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>,len=<span class="built_in">arguments</span>.length;i&lt;len;i++) &#123;</span><br><span class="line">      a = a * <span class="built_in">arguments</span>[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 闭包计算</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.join.call(<span class="built_in">arguments</span>,<span class="string">','</span>);</span><br><span class="line">    <span class="keyword">if</span>(cache[args]) &#123;</span><br><span class="line">      <span class="keyword">return</span> cache[args]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> result = calculate.apply([],<span class="built_in">arguments</span>);</span><br><span class="line">    cache[args] = result;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(mult(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)); <span class="comment">// 输出24</span></span><br></pre></td></tr></table></figure></li></ol><p><strong>延续局部变量的寿命</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 闭包的作用：延续局部变量的寿命</span></span><br><span class="line"><span class="comment">// 实例：利用img进行数据上报</span></span><br><span class="line"><span class="keyword">var</span> report = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> imgs = [];</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">src</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">    imgs.push(img);</span><br><span class="line">    img.src = src;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure></p><h4 id="闭包和面向对象设计"><a href="#闭包和面向对象设计" class="headerlink" title="闭包和面向对象设计"></a>闭包和面向对象设计</h4><p>::: tip<br>用面向对象思想能实现的功能，用闭包也能实现，反之亦然。<br>:::<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 闭包和面向对象设计</span></span><br><span class="line"><span class="keyword">var</span> extent = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> value = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    call: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      value++;</span><br><span class="line">      <span class="built_in">console</span>.log(value);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> foo = extent();</span><br><span class="line">foo.call();     <span class="comment">// 输出1</span></span><br><span class="line">foo.call();     <span class="comment">// 输出2</span></span><br><span class="line">foo.call();     <span class="comment">// 输出3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> extent = &#123;</span><br><span class="line">  value: <span class="number">0</span>,</span><br><span class="line">  call: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.value++;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">extent.call();  <span class="comment">// 输出1</span></span><br><span class="line">extent.call();  <span class="comment">// 输出2</span></span><br><span class="line">extent.call();  <span class="comment">// 输出3</span></span><br></pre></td></tr></table></figure></p><h4 id="面向对象和闭包实现命令模式"><a href="#面向对象和闭包实现命令模式" class="headerlink" title="面向对象和闭包实现命令模式"></a>面向对象和闭包实现命令模式</h4><p><strong>面向对象实现命令模式</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 面向对象实现命令模式</span></span><br><span class="line"><span class="keyword">var</span> TV = &#123;</span><br><span class="line">  open: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'打开电视'</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  close: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'关闭电视'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> TVCommand = <span class="function"><span class="keyword">function</span>(<span class="params">receiver</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.receiver = receiver</span><br><span class="line">&#125;</span><br><span class="line">TVCommand.prototype.open = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.receiver.open();</span><br><span class="line">&#125;</span><br><span class="line">TVCommand.prototype.close = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.receiver.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> setCommand = <span class="function"><span class="keyword">function</span>(<span class="params">command</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    open: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      command.open();</span><br><span class="line">    &#125;,</span><br><span class="line">    close: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      command.close();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = setCommand(<span class="keyword">new</span> TVCommand(TV));</span><br><span class="line">obj.open();   <span class="comment">// 输出打开电视</span></span><br><span class="line">obj.close();  <span class="comment">// 输出关闭电视</span></span><br></pre></td></tr></table></figure></p><p><strong>闭包实现命令模式</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 闭包实现命令模式</span></span><br><span class="line"><span class="keyword">var</span> TV = &#123;</span><br><span class="line">  open: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'打开电视'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  close: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'关闭电视'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> createCommand = <span class="function"><span class="keyword">function</span>(<span class="params">receiver</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> open = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    receiver.open();</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">var</span> close = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    receiver.close();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    open: open,</span><br><span class="line">    close: close</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> setCommand = <span class="function"><span class="keyword">function</span>(<span class="params">command</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    open: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      command.open();</span><br><span class="line">    &#125;,</span><br><span class="line">    close: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      command.close();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj =  setCommand(createCommand(TV));</span><br><span class="line">obj.open();   <span class="comment">// 输出打开电视</span></span><br><span class="line">obj.close();  <span class="comment">// 输出关闭电视</span></span><br></pre></td></tr></table></figure></p><h4 id="闭包在内存泄露上的争议"><a href="#闭包在内存泄露上的争议" class="headerlink" title="闭包在内存泄露上的争议"></a>闭包在内存泄露上的争议</h4><ol><li><p>局部函数应该在函数退出时就销毁，而闭包却延续了局部变量的生存周期<br><br><strong>解答</strong>：闭包之所以会延长局部变量的生存周期，是因为该局部变量会在以后使用到，而需要使用到的变量，你把它存放在全局或者闭包里，对内存方面的影响是一致的。</p></li><li><p>使用闭包容易形成循环引用，如果闭包的作用域链中保存着一些DOM节点，这可能会造成内存泄露<br><br><strong>解答</strong>：在IE浏览器中，垃圾回收机制是基于COM对象的引用计数策略，而基于此的垃圾回收机制无法在两个循环引用的对象之间进行回收，实质是并不是闭包的问题造成的。</p></li></ol><h4 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h4><p>::: tip 条件</p><ol><li>函数可以作为参数被传递</li><li>函数可以作为返回值输出<br>:::<br>JavaScript语言中的函数显然满足高阶函数的条件，在实际开发中，无论是将函数作为参数传递还是让函数的执行结果返回另一个函数，这两种情形都有很多的应用场景。</li></ol><p><strong>函数作为参数传递</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 高阶函数的应用场景：函数作为参数传递</span></span><br><span class="line"><span class="comment">// 应用场景：创建100个div，并将这些div节点设置隐藏</span></span><br><span class="line"><span class="keyword">var</span> appendDiv = <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">    div.innerHTML = i;</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(div);</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> callback === <span class="string">'function'</span>) &#123;</span><br><span class="line">      callback(div);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 回调函数</span></span><br><span class="line"><span class="keyword">var</span> hideDiv = <span class="function"><span class="keyword">function</span>(<span class="params">div</span>) </span>&#123;</span><br><span class="line">  div.style.display = <span class="string">'none'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">appendDiv(hideDiv);</span><br></pre></td></tr></table></figure></p><p><strong>函数作为返回值输出</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 高阶函数的应用场景：函数作为返回值输出</span></span><br><span class="line"><span class="comment">// 应用场景：注册isType方法</span></span><br><span class="line"><span class="keyword">var</span> isType = <span class="function"><span class="keyword">function</span>(<span class="params">type</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(obj) === <span class="string">'[object '</span>+ type+<span class="string">']'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> isNumber = isType(<span class="string">'Number'</span>);</span><br><span class="line"><span class="keyword">var</span> isString = isType(<span class="string">'String'</span>);</span><br><span class="line"><span class="keyword">var</span> isArray = isType(<span class="string">'Array'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(isNumber(<span class="number">12</span>));      <span class="comment">// 输出true</span></span><br><span class="line"><span class="built_in">console</span>.log(isString(<span class="string">'abc'</span>));   <span class="comment">// 输出true</span></span><br><span class="line"><span class="built_in">console</span>.log(isArray([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]));  <span class="comment">// 输出true</span></span><br></pre></td></tr></table></figure></p><p><strong>实现AOP</strong><br>::: tip<br>AOP(面向切面编程)的主要作用是把一些跟核心业务逻辑模块无关的功能抽离出来，这些跟业务逻辑无关的功能通常包括日志统计，安全控制，异常处理等。把这些功能抽离出来后，再通过动态织入的方式掺入业务逻辑模块中<br>:::<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 高阶函数的应用场景：实现AOP</span></span><br><span class="line"><span class="comment">// 应用场景：装饰者模式</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.before = <span class="function"><span class="keyword">function</span>(<span class="params">beforeFn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> _self = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    beforeFn.apply(<span class="keyword">this</span>,<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="keyword">return</span> _self.apply(<span class="keyword">this</span>,<span class="built_in">arguments</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Function</span>.prototype.after = <span class="function"><span class="keyword">function</span>(<span class="params">afterFn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> _self = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ret = _self.apply(<span class="keyword">this</span>,<span class="built_in">arguments</span>);</span><br><span class="line">    afterFn.apply(<span class="keyword">this</span>,<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> func = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">func = func.before(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;).after(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">&#125;)</span><br><span class="line">func();</span><br></pre></td></tr></table></figure></p><h4 id="高阶函数的其他用法"><a href="#高阶函数的其他用法" class="headerlink" title="高阶函数的其他用法"></a>高阶函数的其他用法</h4><p><strong>柯里化</strong>：又称部分求值，一个柯里化参数首先会接受一些参数，接受这些参数之后，该函数并不会立即求值，而是继续返回另外一个函数，刚才传入的参数在函数形成的闭包中被保存起来，待到合适的时机一起求值。<br></p><p><strong>其他用法：柯里化</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 高阶函数其他用法：柯里化</span></span><br><span class="line"><span class="comment">// 不完整的柯里化</span></span><br><span class="line"><span class="keyword">var</span> cost = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> costs = [];</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 开始计算</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">arguments</span>.length==<span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> total = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;costs.length;i++) &#123;</span><br><span class="line">        total += costs[i];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> total;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">Array</span>.prototype.push.apply(costs,<span class="built_in">arguments</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br><span class="line">cost(<span class="number">100</span>);           <span class="comment">// 未真正计算</span></span><br><span class="line">cost(<span class="number">200</span>);           <span class="comment">// 未真正计算</span></span><br><span class="line">cost(<span class="number">20</span>);            <span class="comment">// 未真正计算</span></span><br><span class="line">cost(<span class="number">10</span>);            <span class="comment">// 未真正计算</span></span><br><span class="line"><span class="built_in">console</span>.log(cost()); <span class="comment">// 真正计算，输出330</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 通用的柯里化</span></span><br><span class="line"><span class="keyword">var</span> currying = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> args = [];</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">arguments</span>.length==<span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> fn.apply(<span class="keyword">this</span>,args);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">Array</span>.prototype.push.apply(args,<span class="built_in">arguments</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">arguments</span>.callee;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cost = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> money = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>,len = <span class="built_in">arguments</span>.length;i&lt;len;i++) &#123;</span><br><span class="line">      money +=<span class="built_in">arguments</span>[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> money;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"><span class="keyword">var</span> cost = currying(cost);</span><br><span class="line">cost(<span class="number">100</span>);</span><br><span class="line">cost(<span class="number">200</span>);</span><br><span class="line">cost(<span class="number">20</span>);</span><br><span class="line">cost(<span class="number">10</span>);</span><br><span class="line"><span class="built_in">console</span>.log(cost()); <span class="comment">// 输出330</span></span><br></pre></td></tr></table></figure></p><p><strong>其他用法：函数节流</strong><br><br>将原本一秒执行10次的事件，节流成一秒执行2次或者3次<br>::: tip 函数节流的场景</p><ol><li>window.onresize事件</li><li>mouseover事件</li><li>scroll事件</li><li>其他<br>:::<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 高阶函数其他用法：函数节流</span></span><br><span class="line"><span class="comment">// 应用场景：window.onresize事件</span></span><br><span class="line"><span class="keyword">var</span> throttle = <span class="function"><span class="keyword">function</span>(<span class="params">fn,interval</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> timer = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">var</span> firstTime = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">var</span> _self = fn;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">var</span> args = <span class="built_in">arguments</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 判断是否第一次执行</span></span><br><span class="line">    <span class="keyword">if</span>(firstTime) &#123;</span><br><span class="line">      _self.apply(that,args);</span><br><span class="line">      <span class="keyword">return</span> firstTime = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判断定时器是否执行完毕</span></span><br><span class="line">    <span class="keyword">if</span>(timer) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      clearTimeout(timer);</span><br><span class="line">      timer = <span class="literal">null</span>;</span><br><span class="line">      _self.apply(that,args);</span><br><span class="line">    &#125;,interval || <span class="number">500</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.onresize = throttle(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'window onsize'</span>);</span><br><span class="line">&#125;, <span class="number">500</span>)</span><br></pre></td></tr></table></figure></li></ol><p><strong>其他用法：分时函数</strong><br><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 高阶函数其他用法：分时函数</span></span><br><span class="line"><span class="comment">// 应用场景：分批次创建1000个DOM节点</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 分时函数</span></span><br><span class="line"><span class="comment">// 参数arr：要填充的数据</span></span><br><span class="line"><span class="comment">// 参数fn：要分时的函数</span></span><br><span class="line"><span class="comment">// 参数count：每一次分时的数量</span></span><br><span class="line"><span class="comment">// 参数interval：分时的间隔</span></span><br><span class="line"><span class="keyword">var</span> timeChunk = <span class="function"><span class="keyword">function</span>(<span class="params">arr,fn,count,interval</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> timer = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">var</span> data = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">var</span> start = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; <span class="built_in">Math</span>.min(count || <span class="number">1</span> , arr.length) ; i++) &#123;</span><br><span class="line">      data = arr.shift();</span><br><span class="line">      fn(data);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(arr.length == <span class="number">0</span>) &#123;</span><br><span class="line">        clearInterval(timer);</span><br><span class="line">        timer = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      start();</span><br><span class="line">    &#125;, interval || <span class="number">200</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; <span class="number">1000</span> ; i++) &#123;</span><br><span class="line">  arr.push(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> renderDOMList = timeChunk(arr, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">  div.innerHTML = data;</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(div);</span><br><span class="line">&#125;,<span class="number">8</span>,<span class="number">200</span>);</span><br><span class="line">renderDOMList();</span><br></pre></td></tr></table></figure></p><h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><p>第二部分设计模式并没有全部覆盖GoF所提出的23种设计模式，而是选择了在JavaScript开发中更常见的14种设计模式</p><h3 id="单例设计模式"><a href="#单例设计模式" class="headerlink" title="单例设计模式"></a>单例设计模式</h3><p>::: tip 定义<br>单例模式：保证一个类仅有一个实例，并提供一个访问它的全局访问点。<br>:::</p><h4 id="单例设计模式的案例"><a href="#单例设计模式的案例" class="headerlink" title="单例设计模式的案例"></a>单例设计模式的案例</h4><ol><li>线程池</li><li>全局缓存</li><li>浏览器中的window对象</li><li>网页登录浮窗</li><li>等等</li></ol><h4 id="单例设计模式的实现：面向对象"><a href="#单例设计模式的实现：面向对象" class="headerlink" title="单例设计模式的实现：面向对象"></a>单例设计模式的实现：面向对象</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单例设计模式的实现：面向对象</span></span><br><span class="line"><span class="keyword">var</span> Singleton = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.instance = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">Singleton.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;</span><br><span class="line">Singleton.getInstance = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!<span class="keyword">this</span>.instance) &#123;</span><br><span class="line">    <span class="keyword">this</span>.instance = <span class="keyword">new</span> Singleton(name);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance1 = Singleton.getInstance(<span class="string">'why'</span>);</span><br><span class="line"><span class="keyword">var</span> instance2 = Singleton.getInstance(<span class="string">'www'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(instance1===instance2); <span class="comment">// 输出true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj1 = <span class="keyword">new</span> Singleton(<span class="string">'why'</span>);</span><br><span class="line"><span class="keyword">var</span> obj2 = <span class="keyword">new</span> Singleton(<span class="string">'www'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(obj1.getName());        <span class="comment">// 输出why</span></span><br><span class="line"><span class="built_in">console</span>.log(obj2.getName());        <span class="comment">// 输出www</span></span><br></pre></td></tr></table></figure><h4 id="单例设计模式的实现：闭包"><a href="#单例设计模式的实现：闭包" class="headerlink" title="单例设计模式的实现：闭包"></a>单例设计模式的实现：闭包</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单例设计模式的实现：闭包</span></span><br><span class="line"><span class="keyword">var</span> Singleton = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line">Singleton.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;</span><br><span class="line">Singleton.getInstance = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> instance = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!instance) &#123;</span><br><span class="line">      instance = <span class="keyword">new</span> Singleton(name)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance1 = Singleton.getInstance(<span class="string">'why'</span>);</span><br><span class="line"><span class="keyword">var</span> instance2 = Singleton.getInstance(<span class="string">'www'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(instance1 === instance2); <span class="comment">// 输出true</span></span><br></pre></td></tr></table></figure><h4 id="透明的单例设计模式"><a href="#透明的单例设计模式" class="headerlink" title="透明的单例设计模式"></a>透明的单例设计模式</h4><p>无论以上面向对象的单例实现还是闭包的单例实现，都通过<code>Singleton.getInstance</code>来获取<code>Singleton</code>类的唯一对象，这增加了这个类的不透明性，使用者必须知道<code>Singleton</code>是一个单例类，然后通过<code>Singleton.getInstance</code>方法才能获取单例对象，要解决这一问题，可以使用透明的单例设计模式<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 透明的单例模式</span></span><br><span class="line"><span class="keyword">var</span> CreateDiv = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> instance = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">var</span> CreateDiv = <span class="function"><span class="keyword">function</span>(<span class="params">html</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(instance) &#123;</span><br><span class="line">      <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.html = html;</span><br><span class="line">    <span class="keyword">this</span>.init();</span><br><span class="line">    instance = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;</span><br><span class="line">  CreateDiv.prototype.init = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">    div.innerHTML = <span class="keyword">this</span>.html;</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(div);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> CreateDiv;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance1 = <span class="keyword">new</span> CreateDiv(<span class="string">'why'</span>);</span><br><span class="line"><span class="keyword">var</span> instance2 = <span class="keyword">new</span> CreateDiv(<span class="string">'www'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(instance1===instance2); <span class="comment">// 输出true</span></span><br></pre></td></tr></table></figure></p><h4 id="用代理实现单例模式"><a href="#用代理实现单例模式" class="headerlink" title="用代理实现单例模式"></a>用代理实现单例模式</h4><p>虽然上述透明的单例设计模式解决了不用通过<code>Singleton.getInstance</code>来获取单例类的唯一对象，但是在透明的单例设计模式中，构造函数<code>CreateDiv</code>违反了单一职责，它不仅要负责创建对象，而且还要负责保证单例，假如某一天需求变化了，不再需要创建单例的<code>div</code>，则需要改写<code>CreateDiv</code>函数，解决这种问题，可以使用代理来实现单例模式<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用代理实现单例模式</span></span><br><span class="line"><span class="keyword">var</span> CreateDiv = <span class="function"><span class="keyword">function</span>(<span class="params">html</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.html = html;</span><br><span class="line">  <span class="keyword">this</span>.init();</span><br><span class="line">&#125;</span><br><span class="line">CreateDiv.prototype.init = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">  div.innerHTML = <span class="keyword">this</span>.html;</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(div);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> ProxyCreateDiv = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> instance = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">html</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 惰性单例</span></span><br><span class="line">    <span class="keyword">if</span>(!instance) &#123;</span><br><span class="line">      instance = <span class="keyword">new</span> CreateDiv(html);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"><span class="keyword">var</span> divInstance1 = <span class="keyword">new</span> ProxyCreateDiv(<span class="string">'why'</span>);</span><br><span class="line"><span class="keyword">var</span> divInstance2 = <span class="keyword">new</span> ProxyCreateDiv(<span class="string">'www'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(divInstance1===divInstance2); <span class="comment">// 输出true</span></span><br></pre></td></tr></table></figure></p><h3 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h3><p>::: tip 定义<br>策略模式：定义一系列算法，把他们一个一个封装起来，并且使他们可以相互替换。<br>:::</p><h4 id="策略模式的优点"><a href="#策略模式的优点" class="headerlink" title="策略模式的优点"></a>策略模式的优点</h4><ol><li>策略模式利用组合、委托和多态等技术的思想，可以有效的避免多重条件分支语句</li><li>策略模式提供了对开放-封闭原则的完美支持，将算法封装在独立的策略类中，使它们易于切换、易于理解、易于扩展。</li><li>策略模式中的算法也可以复用在系统的其他地方</li><li>策略模式利用组合和委托来让<code>Context</code>拥有执行算法的能力，这也是继承的一种更轻便的替代方案。</li></ol><h4 id="策略模式案例：计算奖金"><a href="#策略模式案例：计算奖金" class="headerlink" title="策略模式案例：计算奖金"></a>策略模式案例：计算奖金</h4><p>案例描述：某公司的年终奖是根据员工的工资基数和年底绩效来发放的。例如，绩效为S的人年终奖有4倍工资，绩效为A的人年终奖有3倍工资，绩效为B的人年终奖有2倍工资，财务部要求我们提供一段代码，来方便他们计算员工的年终奖。</p><h5 id="计算奖金：最初版本"><a href="#计算奖金：最初版本" class="headerlink" title="计算奖金：最初版本"></a>计算奖金：最初版本</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 计算奖金：最初版本</span></span><br><span class="line"><span class="keyword">var</span> calculateBouns = <span class="function"><span class="keyword">function</span>(<span class="params">level,salary</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(level==<span class="string">'S'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> salary * <span class="number">4</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(level==<span class="string">'A'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> salary * <span class="number">3</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(level==<span class="string">'B'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> salary * <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(calculateBouns(<span class="string">'S'</span>,<span class="number">4000</span>));  <span class="comment">// 输出16000</span></span><br><span class="line"><span class="built_in">console</span>.log(calculateBouns(<span class="string">'A'</span>,<span class="number">3000</span>));  <span class="comment">// 输出9000</span></span><br><span class="line"><span class="built_in">console</span>.log(calculateBouns(<span class="string">'B'</span>,<span class="number">2000</span>));  <span class="comment">// 输出4000</span></span><br></pre></td></tr></table></figure><h5 id="计算奖金：面向对象完善版本"><a href="#计算奖金：面向对象完善版本" class="headerlink" title="计算奖金：面向对象完善版本"></a>计算奖金：面向对象完善版本</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 计算奖金：面向对象完善版本</span></span><br><span class="line"><span class="keyword">var</span> PerformanceS = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">PerformanceS.prototype.calculate = <span class="function"><span class="keyword">function</span>(<span class="params">salary</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> salary * <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> PerformanceA = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">PerformanceA.prototype.calculate = <span class="function"><span class="keyword">function</span>(<span class="params">salary</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> salary * <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> PerformanceB = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">PerformanceB.prototype.calculate = <span class="function"><span class="keyword">function</span>(<span class="params">salary</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> salary * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Bouns = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.salary = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">this</span>.strategy = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">Bouns.prototype.setSalary = <span class="function"><span class="keyword">function</span>(<span class="params">salary</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.salary = salary;</span><br><span class="line">&#125;</span><br><span class="line">Bouns.prototype.setStrategy = <span class="function"><span class="keyword">function</span>(<span class="params">strategy</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.strategy = strategy;</span><br><span class="line">&#125;</span><br><span class="line">Bouns.prototype.getBouns = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.strategy.calculate(<span class="keyword">this</span>.salary);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> bouns = <span class="keyword">new</span> Bouns();</span><br><span class="line">bouns.setSalary(<span class="number">4000</span>);</span><br><span class="line">bouns.setStrategy(<span class="keyword">new</span> PerformanceS());</span><br><span class="line"><span class="built_in">console</span>.log(bouns.getBouns());  <span class="comment">// 输出16000</span></span><br><span class="line"></span><br><span class="line">bouns.setSalary(<span class="number">3000</span>);</span><br><span class="line">bouns.setStrategy(<span class="keyword">new</span> PerformanceA());</span><br><span class="line"><span class="built_in">console</span>.log(bouns.getBouns());  <span class="comment">// 输出9000</span></span><br><span class="line"></span><br><span class="line">bouns.setSalary(<span class="number">2000</span>);</span><br><span class="line">bouns.setStrategy(<span class="keyword">new</span> PerformanceB());</span><br><span class="line"><span class="built_in">console</span>.log(bouns.getBouns());  <span class="comment">// 输出4000</span></span><br></pre></td></tr></table></figure><h5 id="计算奖金：JavaScript的完善版本"><a href="#计算奖金：JavaScript的完善版本" class="headerlink" title="计算奖金：JavaScript的完善版本"></a>计算奖金：JavaScript的完善版本</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 计算奖金：JavaScript的完善版本</span></span><br><span class="line"><span class="keyword">var</span> strategy = &#123;</span><br><span class="line">  <span class="string">'S'</span>: <span class="function"><span class="keyword">function</span>(<span class="params">salary</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> salary * <span class="number">4</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">'A'</span>: <span class="function"><span class="keyword">function</span>(<span class="params">salary</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> salary * <span class="number">3</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">'B'</span>: <span class="function"><span class="keyword">function</span>(<span class="params">salary</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> salary * <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> calcluateBouns = <span class="function"><span class="keyword">function</span>(<span class="params">level,salary</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> strategy[level](salary);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(calcluateBouns(<span class="string">'S'</span>,<span class="number">4000</span>));  <span class="comment">// 输出16000</span></span><br><span class="line"><span class="built_in">console</span>.log(calcluateBouns(<span class="string">'A'</span>,<span class="number">3000</span>));  <span class="comment">// 输出9000</span></span><br><span class="line"><span class="built_in">console</span>.log(calcluateBouns(<span class="string">'B'</span>,<span class="number">2000</span>));  <span class="comment">// 输出4000</span></span><br></pre></td></tr></table></figure><h4 id="策略模式案例：表单验证"><a href="#策略模式案例：表单验证" class="headerlink" title="策略模式案例：表单验证"></a>策略模式案例：表单验证</h4><p>::: tip 表单标签</p><ol><li>用户名(验证是否为空)</li><li>密码(验证长度不能小于6位)</li><li>手机号(验证是否是手机号格式)<br>:::<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 策略模式案例：表单验证</span></span><br><span class="line"><span class="keyword">var</span> strategies = &#123;</span><br><span class="line">  isEmpty: <span class="function"><span class="keyword">function</span>(<span class="params">value,errMsg</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(value===<span class="string">''</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> errMsg</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  minLength: <span class="function"><span class="keyword">function</span>(<span class="params">value,length,errMsg</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(value.length&lt;length) &#123;</span><br><span class="line">      <span class="keyword">return</span> errMsg</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  isMobile: <span class="function"><span class="keyword">function</span>(<span class="params">value,errMsg</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!(<span class="regexp">/^1[34578]\d&#123;9&#125;$/</span>.test(value))) &#123;</span><br><span class="line">      <span class="keyword">return</span> errMsg</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> Validator = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.cache = [];</span><br><span class="line">&#125;</span><br><span class="line">Validator.prototype.add = <span class="function"><span class="keyword">function</span>(<span class="params">dom,rule,msg</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> ary = rule.split(<span class="string">':'</span>);</span><br><span class="line">  <span class="keyword">this</span>.cache.push(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> strategy = ary.shift();</span><br><span class="line">    ary.unshift(dom.value);</span><br><span class="line">    ary.push(msg);</span><br><span class="line">    <span class="keyword">return</span> strategies[strategy].apply(dom,ary);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line">Validator.prototype.run = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; <span class="keyword">this</span>.cache.length; index++) &#123;</span><br><span class="line">    <span class="keyword">var</span> msg = <span class="keyword">this</span>.cache[index]();</span><br><span class="line">    <span class="keyword">if</span>(msg) &#123;</span><br><span class="line">      <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> validateFunc = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> validator = <span class="keyword">new</span> Validator();</span><br><span class="line">  validator.add(registerForm.username,<span class="string">'isEmpty'</span>,<span class="string">'用户名不能为空'</span>);</span><br><span class="line">  validator.add(registerForm.password,<span class="string">'minLength:6'</span>,<span class="string">'密码长度不能小于6位'</span>);</span><br><span class="line">  validator.add(registerForm.phone,<span class="string">'isMobile'</span>,<span class="string">'手机号格式不正确'</span>);</span><br><span class="line">  <span class="keyword">var</span> errMsg = validator.run();</span><br><span class="line">  <span class="keyword">return</span> errMsg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> submitBtn = <span class="built_in">document</span>.getElementById(<span class="string">'submitBtn'</span>);</span><br><span class="line"><span class="keyword">var</span> registerForm = <span class="built_in">document</span>.getElementById(<span class="string">'registerForm'</span>);</span><br><span class="line">submitBtn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> errMsg = validateFunc();</span><br><span class="line">  <span class="keyword">if</span>(errMsg) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(errMsg);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'表单验证成功'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><p>::: tip 定义<br>代理模式是为一个对象提供一个代用品或占位符，以便控制对它的访问。<br>:::<br>代理模式的<strong>关键</strong>所在就是：当客户不方便直接访问一个对象或者不满足需要的时候，提供一个替身对象来控制对这个对象的访问，客户实际上访问的是替身对象，替身对象作出一些请求后再把请求转接给本体对象</p><h4 id="简单的代理：小明追女神"><a href="#简单的代理：小明追女神" class="headerlink" title="简单的代理：小明追女神"></a>简单的代理：小明追女神</h4><p>::: tip 场景<br>小明打算向女神表白，又怕直接被拒绝而尴尬，决定找女神的同学帮忙转接鲜花给女神<br>:::<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Flower = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> xiaoming = &#123;</span><br><span class="line">  sendFlower: <span class="function"><span class="keyword">function</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> flower = <span class="keyword">new</span> Flower();</span><br><span class="line">    target.receive(flower);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> classmate = &#123;</span><br><span class="line">  receive: <span class="function"><span class="keyword">function</span>(<span class="params">flower</span>) </span>&#123;</span><br><span class="line">    girl.receive(flower);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> girl = &#123;</span><br><span class="line">  receive: <span class="function"><span class="keyword">function</span>(<span class="params">flower</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'女神收到了花'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">xiaoming.sendFlower(classmate); <span class="comment">// 输出女神收到了花</span></span><br></pre></td></tr></table></figure></p><h4 id="保护代理"><a href="#保护代理" class="headerlink" title="保护代理"></a>保护代理</h4><p>::: tip<br>在代理模式中，替身对象能做到过滤一些对本体不合理的请求时，这种代理就叫保护代理<br>:::<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 保护代理</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Flower</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age,salary</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.salary = salary;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.sendFlower = <span class="function"><span class="keyword">function</span>(<span class="params">target,person</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> flower = <span class="keyword">new</span> Flower();</span><br><span class="line">  target.receive(flower,person);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">'www'</span>,<span class="number">20</span>,<span class="number">4000</span>);</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">'AAA'</span>,<span class="number">25</span>,<span class="number">8000</span>);</span><br><span class="line"><span class="keyword">var</span> person3 = <span class="keyword">new</span> Person(<span class="string">'BBB'</span>,<span class="number">45</span>,<span class="number">16000</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> proxyObj = &#123;</span><br><span class="line">  receive: <span class="function"><span class="keyword">function</span>(<span class="params">flower,person</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(person.age&gt;=<span class="number">40</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(person.name+<span class="string">',你年龄太大了'</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(person.salary&lt;<span class="number">5000</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(person.name+<span class="string">',你工资太低了'</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    originObj.receive(flower);</span><br><span class="line">    <span class="built_in">console</span>.log(person.name+<span class="string">',恭喜你,女神收下了你的花'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> originObj = &#123;</span><br><span class="line">  receive: <span class="function"><span class="keyword">function</span>(<span class="params">flower</span>) </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">person1.sendFlower(proxyObj,person1); <span class="comment">// 输出www,你工资太低了</span></span><br><span class="line">person2.sendFlower(proxyObj,person2); <span class="comment">// 输出AAA,恭喜你,女神收下了你的花</span></span><br><span class="line">person3.sendFlower(proxyObj,person3); <span class="comment">// 输出BBB,你年龄太大了</span></span><br></pre></td></tr></table></figure></p><h4 id="虚拟代理"><a href="#虚拟代理" class="headerlink" title="虚拟代理"></a>虚拟代理</h4><p>::: tip<br>将一些代价昂贵的操作放置在代理对象中，待到机会合适时再进行，这种代理就叫虚拟代理<br>:::<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 虚拟代理</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Flower</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> xiaoming = &#123;</span><br><span class="line">  sendFlower: <span class="function"><span class="keyword">function</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">    target.receiveFlower();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> classmate = &#123;</span><br><span class="line">  receiveFlower: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    girl.listenMood(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> flower = <span class="keyword">new</span> Flower();</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'同学帮你买了花,并送了出去'</span>);</span><br><span class="line">      girl.receiveFlower(flower);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> girl = &#123;</span><br><span class="line">  mood: <span class="number">0</span>,</span><br><span class="line">  receiveFlower: <span class="function"><span class="keyword">function</span>(<span class="params">flower</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'女神收下了你的花'</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  listenMood: <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      fn();</span><br><span class="line">    &#125;,<span class="number">1500</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 首先输出：同学帮你买了花,并送了出去、</span></span><br><span class="line"><span class="comment">// 最后输出：女神收下了你的花</span></span><br><span class="line">xiaoming.sendFlower(classmate);</span><br></pre></td></tr></table></figure></p><h4 id="代理模式实现图片懒加载"><a href="#代理模式实现图片懒加载" class="headerlink" title="代理模式实现图片懒加载"></a>代理模式实现图片懒加载</h4><p><strong>不用代理实现</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不用代理实现图片懒加载</span></span><br><span class="line"><span class="keyword">var</span> myImage = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> imgNode = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>);</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(imgNode);</span><br><span class="line">  <span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">  img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    imgNode.src = img.src;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    setSrc: <span class="function"><span class="keyword">function</span>(<span class="params">src</span>) </span>&#123;</span><br><span class="line">      imgNode.src = <span class="string">'file:///C:/Users/admin/Desktop/mask/img/7.jpg'</span></span><br><span class="line">      img.src = src;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br><span class="line">myImage.setSrc(<span class="string">'https://img1.sycdn.imooc.com/5c09123400014ba418720632.jpg'</span>)</span><br></pre></td></tr></table></figure></p><p><strong>用代理实现图片懒加载</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用代理实现图片懒加载</span></span><br><span class="line"><span class="keyword">var</span> myImage = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> image = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>);</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(image);</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    setSrc: <span class="function"><span class="keyword">function</span>(<span class="params">src</span>) </span>&#123;</span><br><span class="line">      image.src = src;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> proxyImage = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">  img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    myImage.setSrc(<span class="keyword">this</span>.src);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    setSrc: <span class="function"><span class="keyword">function</span>(<span class="params">src</span>) </span>&#123;</span><br><span class="line">      myImage.setSrc(<span class="string">'file:///C:/Users/admin/Desktop/mask/img/7.jpg'</span>);</span><br><span class="line">      img.src = src;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br><span class="line">proxyImage.setSrc(<span class="string">'https://img1.sycdn.imooc.com/5c09123400014ba418720632.jpg'</span>);</span><br></pre></td></tr></table></figure></p><h4 id="缓存代理"><a href="#缓存代理" class="headerlink" title="缓存代理"></a>缓存代理</h4><p>::: tip<br>缓存代理可以为一些开销大的运算结果提供暂时的存储，在下次运算时，如果传递进来的参数跟之前一样，则可以直接返回前面存储的运算结果。<br>:::<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 缓存代理：计算乘积</span></span><br><span class="line"><span class="keyword">var</span> mult = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'开始计算乘积'</span>);</span><br><span class="line">  <span class="keyword">var</span> sum = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="built_in">arguments</span>.length;i++) &#123;</span><br><span class="line">    sum = sum * <span class="built_in">arguments</span>[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> proxyMult = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> cache = &#123;&#125;;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.join.call(<span class="built_in">arguments</span>,<span class="string">','</span>);</span><br><span class="line">    <span class="keyword">if</span>(cache.hasOwnProperty(args)) &#123;</span><br><span class="line">      <span class="keyword">return</span> cache[args];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cache[args] = mult.apply(<span class="keyword">this</span>,<span class="built_in">arguments</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"><span class="built_in">console</span>.log(proxyMult(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)); <span class="comment">// 输出：开始计算乘积 24</span></span><br><span class="line"><span class="built_in">console</span>.log(proxyMult(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)); <span class="comment">// 输出24</span></span><br></pre></td></tr></table></figure></p><h4 id="举一反三代理工厂"><a href="#举一反三代理工厂" class="headerlink" title="举一反三代理工厂"></a>举一反三代理工厂</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 代理工厂(累加和乘积)</span></span><br><span class="line"><span class="keyword">var</span> mult = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'开始计算乘积'</span>)</span><br><span class="line">  <span class="keyword">var</span> sum = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; <span class="built_in">arguments</span>.length; index++) &#123;</span><br><span class="line">    sum = sum * <span class="built_in">arguments</span>[index]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> plus = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'开始计算累加'</span>)</span><br><span class="line">  <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; <span class="built_in">arguments</span>.length; index++) &#123;</span><br><span class="line">    sum = sum + <span class="built_in">arguments</span>[index]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> createProxyFactory = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> cache = &#123;&#125;;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.join.call(<span class="built_in">arguments</span>,<span class="string">','</span>);</span><br><span class="line">    <span class="keyword">if</span>(cache.hasOwnProperty(args)) &#123;</span><br><span class="line">      <span class="keyword">return</span> cache[args]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cache[args] = fn.apply(<span class="keyword">this</span>,<span class="built_in">arguments</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> proxyMult = createProxyFactory(mult);</span><br><span class="line"><span class="keyword">var</span> proxyPlus = createProxyFactory(plus);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(proxyMult(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)); <span class="comment">// 输出：开始计算乘积 24</span></span><br><span class="line"><span class="built_in">console</span>.log(proxyMult(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)); <span class="comment">// 输出： 24</span></span><br><span class="line"><span class="built_in">console</span>.log(proxyPlus(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)); <span class="comment">// 输出：开始计算累加 18</span></span><br><span class="line"><span class="built_in">console</span>.log(proxyPlus(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)); <span class="comment">// 输出 18</span></span><br></pre></td></tr></table></figure><h3 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h3><p>::: tip<br>迭代器模式是指提供一种顺序访问一个聚合对象中的各个元素，而又不需要暴露该对象的内部表示。迭代器分为两种，一种是内部迭代器，另外一种是外部迭代器<br>:::</p><h4 id="内部迭代器"><a href="#内部迭代器" class="headerlink" title="内部迭代器"></a>内部迭代器</h4><p>::: tip<br>内部迭代器在调用的时候非常方便，外界不用关心迭代器内部到底是如何实现的，跟迭代器的交互也只有一次初始调用，而这也正好是内部迭代器的缺点。<br>:::<br><strong>Jquery中的迭代器</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Jquery中的迭代器</span></span><br><span class="line">$.each([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],<span class="function"><span class="keyword">function</span>(<span class="params">index,value</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(index);</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p><strong>实现自己的each迭代器</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现自己的each迭代器</span></span><br><span class="line"><span class="keyword">var</span> each = <span class="function"><span class="keyword">function</span>(<span class="params">array,callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;array.length;i++) &#123;</span><br><span class="line">    callback.call(<span class="literal">null</span>,i,array[i]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">each([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],<span class="function"><span class="keyword">function</span>(<span class="params">index,value</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(index);<span class="comment">// 依次输出0 1 2</span></span><br><span class="line">  <span class="built_in">console</span>.log(value);<span class="comment">// 依次输出1 2 3</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h4 id="外部迭代器"><a href="#外部迭代器" class="headerlink" title="外部迭代器"></a>外部迭代器</h4><p>::: tip<br>外部迭代器必须显示的请求迭代下一个元素<br>:::<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义外部迭代器实现比较两个数组的值是否完全相等</span></span><br><span class="line"><span class="keyword">var</span> Iterator = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> current = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> next = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    current++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> isDone = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> current &gt;=obj.length;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> getCurrentItem = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> obj[current];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    next: next,</span><br><span class="line">    isDone: isDone,</span><br><span class="line">    getCurrentItem:getCurrentItem,</span><br><span class="line">    length: obj.length</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> compare = <span class="function"><span class="keyword">function</span>(<span class="params">iterator1,iterator2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(iterator1.length!=iterator2.length) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'两个数组不相等'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span>(!iterator1.isDone() &amp;&amp; !iterator2.isDone()) &#123;</span><br><span class="line">    <span class="keyword">if</span>(iterator1.getCurrentItem()!=iterator2.getCurrentItem()) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'两个数组不相等'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    iterator1.next();</span><br><span class="line">    iterator2.next();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'两个数组相等'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> iterator1 = Iterator([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]);</span><br><span class="line"><span class="keyword">var</span> iterator2 = Iterator([<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>]);</span><br><span class="line">compare(iterator1,iterator2); <span class="comment">// 报错，两个数组不相等</span></span><br></pre></td></tr></table></figure></p><h3 id="发布-订阅模式"><a href="#发布-订阅模式" class="headerlink" title="发布-订阅模式"></a>发布-订阅模式</h3><p>::: tip 定义<br>发布-订阅模式又叫观察者模式，他定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都将得到通知。<br>:::</p><p><strong>优点</strong>：发布-订阅模式一为时间上的解耦，二为对象之间的解耦。它的应用非常广泛，既可以用在异步编程中，也可以帮助我们完成更加松耦合的代码编写。发布-订阅模式还可以用来帮助实现一些其他的设计模式，例如中介者模式。<br><br><strong>缺点</strong>：创建订阅者本身要消耗一定的时间和内存，而当你订阅一个消息后，也许此消息最后都没有发生，但订阅者依然存在于内存中，造成了一种浪费。发布-订阅模式虽然弱化了对象之间的联系，但过度使用的话，对象和对象之间的必要联系也将深埋在背后，会导致程序难以追踪维护和理解。</p><h4 id="DOM事件中的发布-订阅"><a href="#DOM事件中的发布-订阅" class="headerlink" title="DOM事件中的发布-订阅"></a>DOM事件中的发布-订阅</h4><p>只要我们曾经在DOM节点上绑定了事件函数，那我们就曾经使用过发布-订阅模式。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DOM事件中的发布-订阅模式</span></span><br><span class="line"><span class="built_in">document</span>.body.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">document</span>.body.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">document</span>.body.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">document</span>.body.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">4</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">document</span>.body.click(); <span class="comment">// 输出1 2 3 4</span></span><br></pre></td></tr></table></figure></p><h4 id="自定义发布-订阅"><a href="#自定义发布-订阅" class="headerlink" title="自定义发布-订阅"></a>自定义发布-订阅</h4><p>背景：小明最近看中一套房子，到销售中心才告知已经卖完了，好在销售楼中心准备出后期工程，但不知道什么时候出，只要小明留下自己的联系方式，楼盘开启后销售中心会通知小明相关信息。而对于其他像小明那样的客户，只要同样留下联系方式都可以收到相关信息。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义发布-订阅事件</span></span><br><span class="line"><span class="keyword">var</span> sales = &#123;</span><br><span class="line">  clientList: &#123;&#125;,</span><br><span class="line">  listen: <span class="function"><span class="keyword">function</span>(<span class="params">key,fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">this</span>.clientList[key]) &#123;</span><br><span class="line">      <span class="keyword">this</span>.clientList[key] = [];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.clientList[key].push(fn)</span><br><span class="line">  &#125;,</span><br><span class="line">  trigger: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> type = <span class="built_in">Array</span>.prototype.shift.call(<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="keyword">var</span> fns = <span class="keyword">this</span>.clientList[type];</span><br><span class="line">    <span class="keyword">if</span>(!fns || fns.length&lt;<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; fns.length; index++) &#123;</span><br><span class="line">      fns[index].apply(<span class="keyword">this</span>,<span class="built_in">arguments</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 订阅</span></span><br><span class="line">sales.listen(<span class="string">'88'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">price</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'88平米的房子价格是：'</span>+price);</span><br><span class="line">&#125;)</span><br><span class="line">sales.listen(<span class="string">'100'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">price</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'100平米的房子价格是：'</span>+price);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发布</span></span><br><span class="line">sales.trigger(<span class="string">'88'</span>,<span class="number">200000</span>);  <span class="comment">// 88平米的房子价格是：200000</span></span><br><span class="line">sales.trigger(<span class="string">'100'</span>,<span class="number">300000</span>); <span class="comment">// 100平米的房子价格是：300000</span></span><br></pre></td></tr></table></figure></p><h4 id="取消订阅的事件"><a href="#取消订阅的事件" class="headerlink" title="取消订阅的事件"></a>取消订阅的事件</h4><p>发布-订阅模式中，既然可以订阅事件，那么一定可以取消订阅，假设小明突然不想买房子了，为避免销售中心发短信打搅自己，他决定取消订阅。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 取消订阅事件</span></span><br><span class="line"><span class="keyword">var</span> sales = &#123;</span><br><span class="line">  clientList: &#123;&#125;,</span><br><span class="line">  listen: <span class="function"><span class="keyword">function</span>(<span class="params">key,fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">this</span>.clientList[key]) &#123;</span><br><span class="line">      <span class="keyword">this</span>.clientList[key] = [];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.clientList[key].push(fn);</span><br><span class="line">  &#125;,</span><br><span class="line">  trigger: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> type = <span class="built_in">Array</span>.prototype.shift.call(<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="keyword">var</span> fns = <span class="keyword">this</span>.clientList[type]</span><br><span class="line">    <span class="keyword">if</span>(!fns || fns.length&lt;<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; fns.length; index++) &#123;</span><br><span class="line">      fns[index].apply(<span class="keyword">this</span>,<span class="built_in">arguments</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  remove: <span class="function"><span class="keyword">function</span>(<span class="params">type</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> fns = <span class="keyword">this</span>.clientList[type];</span><br><span class="line">    <span class="keyword">if</span>(!fns || fns.length&lt;<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 全部取消订阅</span></span><br><span class="line">    fns.length = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 订阅</span></span><br><span class="line">sales.listen(<span class="string">'88'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">price</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'88平米的房子价格是：'</span>+price);</span><br><span class="line">&#125;)</span><br><span class="line">sales.listen(<span class="string">'100'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">price</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'100平米的房子价格是：'</span>+price);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取消订阅</span></span><br><span class="line">sales.remove(<span class="string">'88'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发布</span></span><br><span class="line">sales.trigger(<span class="string">'88'</span>,<span class="number">200000</span>);  <span class="comment">// 不输出</span></span><br><span class="line">sales.trigger(<span class="string">'100'</span>,<span class="number">300000</span>); <span class="comment">// 100平米的房子价格是：300000</span></span><br></pre></td></tr></table></figure></p><h4 id="一个真实的例子：网站登录"><a href="#一个真实的例子：网站登录" class="headerlink" title="一个真实的例子：网站登录"></a>一个真实的例子：网站登录</h4><p>背景：一个商场网站，有头部header，有导航nav，有购物车cart，有消息列表message等等模块度依赖于登录成功后的用户信息。而用户不知道什么时候会登陆。需要将以上各个模块与登录模块做一个发布-订阅<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个真实的发布-订阅例子：网站登录</span></span><br><span class="line"><span class="keyword">var</span> login = &#123;</span><br><span class="line">  clientList: &#123;&#125;,</span><br><span class="line">  listen: <span class="function"><span class="keyword">function</span>(<span class="params">key,fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">this</span>.clientList[key]) &#123;</span><br><span class="line">      <span class="keyword">this</span>.clientList[key] = [];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.clientList[key].push(fn);</span><br><span class="line">  &#125;,</span><br><span class="line">  trigger: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> type = <span class="built_in">Array</span>.prototype.shift.call(<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="keyword">var</span> fns = <span class="keyword">this</span>.clientList[type];</span><br><span class="line">    <span class="keyword">if</span>(!fns || fns.length&lt;<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; fns.length; index++) &#123;</span><br><span class="line">      fns[index].apply(<span class="keyword">this</span>,<span class="built_in">arguments</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 头部</span></span><br><span class="line"><span class="keyword">var</span> header = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  login.listen(<span class="string">'loginSuccess'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    header.setAvatar(data.avatar);</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    setAvatar: <span class="function"><span class="keyword">function</span>(<span class="params">avatar</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'设置header头像：'</span>+avatar);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导航</span></span><br><span class="line"><span class="keyword">var</span> nav = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  login.listen(<span class="string">'loginSuccess'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    nav.setAvatar(data.avatar);</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    setAvatar: <span class="function"><span class="keyword">function</span>(<span class="params">avatar</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'设置nav头像：'</span>+avatar);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 购物车</span></span><br><span class="line"><span class="keyword">var</span> cart = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  login.listen(<span class="string">'loginSuccess'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    cart.getOrders(data);</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    getOrders: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'获取'</span>+data.name+<span class="string">'的购物车订单列表'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 依次输出</span></span><br><span class="line">  <span class="comment">// 设置header头像：https://www.baidu.com/1.jpg</span></span><br><span class="line">  <span class="comment">// 设置nav头像：https://www.baidu.com/1.jpg</span></span><br><span class="line">  <span class="comment">// 获取AAA的购物车订单列表</span></span><br><span class="line">  login.trigger(<span class="string">'loginSuccess'</span>,&#123;<span class="attr">name</span>:<span class="string">'AAA'</span>,<span class="attr">avatar</span>: <span class="string">'https://www.baidu.com/1.jpg'</span>&#125;);</span><br><span class="line">&#125;, <span class="number">1500</span>)</span><br></pre></td></tr></table></figure></p><h3 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h3><p>::: tip 定义<br>命令模式是最简单和优雅的模式之一，命令模式中的命令指的是一个执行某些特定事件的指令。<br>:::</p><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><p>有时候需要向某些对象发送请求，但是并不知道请求的接受者是谁，也不知道被请求的操作是什么。此时希望有一种松耦合的方式来设计程序，使得请求发送者和接受者能够消除彼此之间的耦合关系。</p><h4 id="命令模式案例：面向对象版"><a href="#命令模式案例：面向对象版" class="headerlink" title="命令模式案例：面向对象版"></a>命令模式案例：面向对象版</h4><p>故事背景：有一个用户界面程序，该用户界面上至少有数十个Button按钮，因为项目比较复杂，所以我们觉得让某个程序员负责Button按钮的绘制，另外一个程序员负责编写点击按钮的具体行为，这些行为都将封装在对象里。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"button1"</span>&gt;</span>刷新界面<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"button2"</span>&gt;</span>添加子菜单<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"button3"</span>&gt;</span>删除子菜单<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 面向对象版本</span></span><br><span class="line"><span class="keyword">var</span> button1 = <span class="built_in">document</span>.getElementById(<span class="string">'button1'</span>);</span><br><span class="line"><span class="keyword">var</span> button2 = <span class="built_in">document</span>.getElementById(<span class="string">'button2'</span>);</span><br><span class="line"><span class="keyword">var</span> button3 = <span class="built_in">document</span>.getElementById(<span class="string">'button3'</span>);</span><br><span class="line"><span class="comment">// 设置命令</span></span><br><span class="line"><span class="keyword">var</span> setCommand = <span class="function"><span class="keyword">function</span>(<span class="params">button,command</span>) </span>&#123;</span><br><span class="line">  button.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    command.execute();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 具体行为</span></span><br><span class="line"><span class="keyword">var</span> MenuBar = &#123;</span><br><span class="line">  refresh: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'刷新界面'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> SubMenu = &#123;</span><br><span class="line">  add: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'添加子菜单'</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  remove: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'删除子菜单'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 封装具体行为到对象中</span></span><br><span class="line"><span class="keyword">var</span> RefreshBarCommand = <span class="function"><span class="keyword">function</span>(<span class="params">receiver</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.receiver = receiver;</span><br><span class="line">&#125;</span><br><span class="line">RefreshBarCommand.prototype.execute = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.receiver.refresh();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> AddSubMenuCommand = <span class="function"><span class="keyword">function</span>(<span class="params">receiver</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.receiver = receiver;</span><br><span class="line">&#125;</span><br><span class="line">AddSubMenuCommand.prototype.execute = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.receiver.add();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> RemoveSubMenuCommand = <span class="function"><span class="keyword">function</span>(<span class="params">receiver</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.receiver = receiver;</span><br><span class="line">&#125;</span><br><span class="line">RemoveSubMenuCommand.prototype.execute = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.receiver.remove();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 传入命令接受者</span></span><br><span class="line"><span class="keyword">var</span> refreshBarCommand = <span class="keyword">new</span> RefreshBarCommand(MenuBar);</span><br><span class="line"><span class="keyword">var</span> addSubMenuCommand = <span class="keyword">new</span> AddSubMenuCommand(SubMenu);</span><br><span class="line"><span class="keyword">var</span> removeSubMenuCommand = <span class="keyword">new</span> RemoveSubMenuCommand(SubMenu);</span><br><span class="line">setCommand(button1,refreshBarCommand);    <span class="comment">// 点击按钮输出：刷新界面</span></span><br><span class="line">setCommand(button2,addSubMenuCommand);    <span class="comment">// 点击按钮输出：添加子菜单</span></span><br><span class="line">setCommand(button3,removeSubMenuCommand); <span class="comment">// 点击按钮输出：删除子菜单</span></span><br></pre></td></tr></table></figure><h4 id="命令模式案例：闭包版本"><a href="#命令模式案例：闭包版本" class="headerlink" title="命令模式案例：闭包版本"></a>命令模式案例：闭包版本</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"button1"</span>&gt;</span>刷新界面<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"button2"</span>&gt;</span>添加子菜单<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"button3"</span>&gt;</span>删除子菜单<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 闭包版本</span></span><br><span class="line"><span class="keyword">var</span> button1 = <span class="built_in">document</span>.getElementById(<span class="string">'button1'</span>);</span><br><span class="line"><span class="keyword">var</span> button2 = <span class="built_in">document</span>.getElementById(<span class="string">'button2'</span>);</span><br><span class="line"><span class="keyword">var</span> button3 = <span class="built_in">document</span>.getElementById(<span class="string">'button3'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置命令</span></span><br><span class="line"><span class="keyword">var</span> setCommand = <span class="function"><span class="keyword">function</span>(<span class="params">button,func</span>) </span>&#123;</span><br><span class="line">  button.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    func();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义具体行为</span></span><br><span class="line"><span class="keyword">var</span> MenuBar = &#123;</span><br><span class="line">  refresh: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'刷新界面'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> SubMenu = &#123;</span><br><span class="line">  add: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'添加子菜单'</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  remove: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'删除子菜单'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 封装具体行为到对象</span></span><br><span class="line"><span class="keyword">var</span> RefreshBarCommand = <span class="function"><span class="keyword">function</span>(<span class="params">receiver</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    receiver.refresh();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> AddSubMenuCommand = <span class="function"><span class="keyword">function</span>(<span class="params">receiver</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    receiver.add();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> RemoveSubMenuCommand = <span class="function"><span class="keyword">function</span>(<span class="params">receiver</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    receiver.remove();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 传入命令接受者</span></span><br><span class="line"><span class="keyword">var</span> refreshBarCommand = RefreshBarCommand(MenuBar);</span><br><span class="line"><span class="keyword">var</span> addSubMenuCommand = AddSubMenuCommand(SubMenu);</span><br><span class="line"><span class="keyword">var</span> removeSubMenuCommand = RemoveSubMenuCommand(SubMenu);</span><br><span class="line">setCommand(button1,refreshBarCommand);    <span class="comment">// 点击按钮输出：刷新界面</span></span><br><span class="line">setCommand(button2,addSubMenuCommand);    <span class="comment">// 点击按钮输出：添加子菜单</span></span><br><span class="line">setCommand(button3,removeSubMenuCommand); <span class="comment">// 点击按钮输出：删除子菜单</span></span><br></pre></td></tr></table></figure><h4 id="更为简单的回调函数版本"><a href="#更为简单的回调函数版本" class="headerlink" title="更为简单的回调函数版本"></a>更为简单的回调函数版本</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"button1"</span>&gt;</span>刷新界面<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"button2"</span>&gt;</span>添加子菜单<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"button3"</span>&gt;</span>删除子菜单<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 更为简单的回调函数版本</span></span><br><span class="line"><span class="comment">// 绑定事件</span></span><br><span class="line"><span class="keyword">var</span> bindClick = <span class="function"><span class="keyword">function</span>(<span class="params">button,func</span>) </span>&#123;</span><br><span class="line">  button.onclick = func;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义具体行为</span></span><br><span class="line"><span class="keyword">var</span> MenuBar = &#123;</span><br><span class="line">  refresh: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'刷新界面'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> SubMenu = &#123;</span><br><span class="line">  add: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'添加子菜单'</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  remove: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'删除子菜单'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 回调函数</span></span><br><span class="line">bindClick(button1,MenuBar.refresh); <span class="comment">// 点击按钮输出：刷新界面</span></span><br><span class="line">bindClick(button2,SubMenu.add);     <span class="comment">// 点击按钮输出：添加子菜单</span></span><br><span class="line">bindClick(button3,SubMenu.remove);  <span class="comment">// 点击按钮输出：删除子菜单</span></span><br></pre></td></tr></table></figure><h4 id="宏命令"><a href="#宏命令" class="headerlink" title="宏命令"></a>宏命令</h4><p>::: tip 定义<br>宏命令是一组命令的集合，通过执行宏命令的方式，可以一次执行多个命令。<br>:::<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 宏命令</span></span><br><span class="line"><span class="comment">// 基础命令</span></span><br><span class="line"><span class="keyword">var</span> CloseDoorCommand = &#123;</span><br><span class="line">  execute: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'关门'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> OpenTVCommand = &#123;</span><br><span class="line">  execute: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'打开电视'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> OpenQQComand = &#123;</span><br><span class="line">  execute: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'登QQ'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 宏命令</span></span><br><span class="line"><span class="keyword">var</span> MacroCommand = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    commandList: [],</span><br><span class="line">    add: <span class="function"><span class="keyword">function</span>(<span class="params">command</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.commandList.push(command)</span><br><span class="line">    &#125;,</span><br><span class="line">    execute: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; <span class="keyword">this</span>.commandList.length; index++) &#123;</span><br><span class="line">        <span class="keyword">this</span>.commandList[index].execute();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加命令到宏命令</span></span><br><span class="line"><span class="keyword">var</span> macroCommand = MacroCommand();</span><br><span class="line">macroCommand.add(CloseDoorCommand);</span><br><span class="line">macroCommand.add(OpenTVCommand);</span><br><span class="line">macroCommand.add(OpenQQComand);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行宏命令</span></span><br><span class="line">macroCommand.execute(); <span class="comment">// 依次输出：关门 打开电视 登QQ</span></span><br></pre></td></tr></table></figure></p><h3 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h3><p>::: tip<br>组合模式将对象组合成树形结构，以表示”部分-整体”的层次结构。<br>:::</p><h4 id="传递顺序"><a href="#传递顺序" class="headerlink" title="传递顺序"></a>传递顺序</h4><p>对宏命令为例，请求从树最顶端的对象往下传递，如果当前处理请求的对象是叶对象，叶对象自身会对请求做出相应的处理。如果当前处理请求的是组合对象，则遍历该组合对象下的子节点，将请求继续传递给这些子节点。</p><h4 id="更强大的宏命令"><a href="#更强大的宏命令" class="headerlink" title="更强大的宏命令"></a>更强大的宏命令</h4><p>万能遥控器:<br></p><ol><li>打开空调</li><li>打开电视和音响</li><li>关门、打开电脑、登录QQ<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"SuperButton"</span>&gt;</span>万能遥控器<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 更强大的宏命令</span></span><br><span class="line"><span class="keyword">var</span> MacroCommand = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    commandList: [],</span><br><span class="line">    add: <span class="function"><span class="keyword">function</span>(<span class="params">command</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.commandList.push(command)</span><br><span class="line">    &#125;,</span><br><span class="line">    execute: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; <span class="keyword">this</span>.commandList.length; index++) &#123;</span><br><span class="line">        <span class="keyword">this</span>.commandList[index].execute();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 打开空调</span></span><br><span class="line"><span class="keyword">var</span> openAcCommand = &#123;</span><br><span class="line">  execute: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'打开空调'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 打开电视和音响</span></span><br><span class="line"><span class="keyword">var</span> openTVCommand = &#123;</span><br><span class="line">  execute: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'打开电视'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> openSoundCommand = &#123;</span><br><span class="line">  execute: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'打开音响'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> macroCommand1 = MacroCommand();</span><br><span class="line">macroCommand1.add(openTVCommand);</span><br><span class="line">macroCommand1.add(openSoundCommand);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关门、开电脑、登QQ</span></span><br><span class="line"><span class="keyword">var</span> closeCommand = &#123;</span><br><span class="line">  execute: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'关门'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> openPcCommand = &#123;</span><br><span class="line">  execute: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'打开电脑'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> openQQCommand = &#123;</span><br><span class="line">  execute: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'登录QQ'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> macroCommand2 = MacroCommand();</span><br><span class="line">macroCommand2.add(closeCommand);</span><br><span class="line">macroCommand2.add(openPcCommand);</span><br><span class="line">macroCommand2.add(openQQCommand);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 宏命令</span></span><br><span class="line"><span class="keyword">var</span> macroCommand = MacroCommand();</span><br><span class="line">macroCommand.add(openAcCommand);</span><br><span class="line">macroCommand.add(macroCommand1);</span><br><span class="line">macroCommand.add(macroCommand2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 触发宏命令</span></span><br><span class="line"><span class="keyword">var</span> setCommand = (<span class="function"><span class="keyword">function</span>(<span class="params">command</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'SuperButton'</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 依次输出：打开空调 打开电视 打开音响 关门 打开电脑 登录QQ</span></span><br><span class="line">    command.execute();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)(macroCommand)</span><br></pre></td></tr></table></figure><h4 id="组合模式案例：扫描文件"><a href="#组合模式案例：扫描文件" class="headerlink" title="组合模式案例：扫描文件"></a>组合模式案例：扫描文件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 组合模式案例：文件扫描</span></span><br><span class="line"><span class="comment">// 文件夹类</span></span><br><span class="line"><span class="keyword">var</span> Folder = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.files = [];</span><br><span class="line">&#125;</span><br><span class="line">Folder.prototype.add = <span class="function"><span class="keyword">function</span>(<span class="params">file</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.files.push(file);</span><br><span class="line">&#125;</span><br><span class="line">Folder.prototype.scan = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'开始扫描文件夹:'</span>+<span class="keyword">this</span>.name);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; <span class="keyword">this</span>.files.length; index++) &#123;</span><br><span class="line">    <span class="keyword">this</span>.files[index].scan();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 文件类</span></span><br><span class="line"><span class="keyword">var</span> File = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line">File.prototype.add = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'文件下面不能添加文件'</span>);</span><br><span class="line">&#125;</span><br><span class="line">File.prototype.scan = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'开始扫描文件：'</span>+<span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> folder = <span class="keyword">new</span> Folder(<span class="string">'学习资料'</span>);</span><br><span class="line"><span class="keyword">var</span> folder1 = <span class="keyword">new</span> Folder(<span class="string">'JavaScript'</span>);</span><br><span class="line"><span class="keyword">var</span> folder2 = <span class="keyword">new</span> Folder(<span class="string">'jQuery'</span>);</span><br><span class="line"><span class="keyword">var</span> folder3 = <span class="keyword">new</span> Folder(<span class="string">'重构与实现'</span>);</span><br><span class="line"><span class="keyword">var</span> folder4 = <span class="keyword">new</span> Folder(<span class="string">'NodeJs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> file1 = <span class="keyword">new</span> File(<span class="string">'JavaScript设计模式'</span>);</span><br><span class="line"><span class="keyword">var</span> file2 = <span class="keyword">new</span> File(<span class="string">'精通jQuery'</span>);</span><br><span class="line"><span class="keyword">var</span> file3 = <span class="keyword">new</span> File(<span class="string">'JavaScript语言精粹'</span>);</span><br><span class="line"><span class="keyword">var</span> file4 = <span class="keyword">new</span> File(<span class="string">'深入浅出的Node.js'</span>);</span><br><span class="line"></span><br><span class="line">folder1.add(file1);</span><br><span class="line">folder2.add(file2);</span><br><span class="line">folder4.add(file4);</span><br><span class="line"></span><br><span class="line">folder.add(folder1);</span><br><span class="line">folder.add(folder2);</span><br><span class="line">folder.add(file3);</span><br><span class="line">folder.add(folder3);</span><br><span class="line">folder.add(folder4);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行扫描</span></span><br><span class="line"><span class="comment">// 开始扫描文件夹:学习资料</span></span><br><span class="line"><span class="comment">// 开始扫描文件夹:JavaScript</span></span><br><span class="line"><span class="comment">// 开始扫描文件：JavaScript设计模式</span></span><br><span class="line"><span class="comment">// 开始扫描文件夹:jQuery</span></span><br><span class="line"><span class="comment">// 开始扫描文件：精通jQuery</span></span><br><span class="line"><span class="comment">// 开始扫描文件：JavaScript语言精粹</span></span><br><span class="line"><span class="comment">// 开始扫描文件夹:重构与实现</span></span><br><span class="line"><span class="comment">// 开始扫描文件夹:NodeJs</span></span><br><span class="line"><span class="comment">// 开始扫描文件：深入浅出的Node.js</span></span><br><span class="line">folder.scan();</span><br></pre></td></tr></table></figure><h3 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h3><p>::: tip 定义<br>模板方法是一种只需使用继承就可以实现的非常简单的模式。模板方法由两部分组成，一部分是抽象的父类，另一部分是具体的子类。<br>:::<br>通常而言，在抽象父类中封装了子类的算法框架，包括实现一些公共方法以及封装子类中所有方法的执行顺序。子类通过继承抽象的父类，也继承了整个算法结构。</p><h4 id="模板方法：经典案例"><a href="#模板方法：经典案例" class="headerlink" title="模板方法：经典案例"></a>模板方法：经典案例</h4><p>泡咖啡的步骤：</p><ol><li>把水煮沸</li><li>用沸水泡咖啡</li><li>把咖啡倒进杯子</li><li>加糖和牛奶<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 泡咖啡</span></span><br><span class="line"><span class="keyword">var</span> Coffee = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">Coffee.prototype.boilWater = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'把水煮沸'</span>);</span><br><span class="line">&#125;</span><br><span class="line">Coffee.prototype.brewCoffee = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'冲泡咖啡'</span>);</span><br><span class="line">&#125;</span><br><span class="line">Coffee.prototype.purInCup = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'把咖啡倒进杯子里'</span>);</span><br><span class="line">&#125;</span><br><span class="line">Coffee.prototype.addSugarAndMilk = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'加牛奶和糖'</span>)</span><br><span class="line">&#125;</span><br><span class="line">Coffee.prototype.init = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.boilWater();</span><br><span class="line">  <span class="keyword">this</span>.brewCoffee();</span><br><span class="line">  <span class="keyword">this</span>.purInCup();</span><br><span class="line">  <span class="keyword">this</span>.addSugarAndMilk();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> coffee = <span class="keyword">new</span> Coffee();</span><br><span class="line"><span class="comment">// 依次输出： 把水煮沸 冲泡咖啡 把咖啡倒进杯子里 加牛奶和糖</span></span><br><span class="line">coffee.init();</span><br></pre></td></tr></table></figure></li></ol><p>泡茶的步骤:</p><ol><li>把水煮沸</li><li>用沸水浸泡茶叶</li><li>把茶水倒进杯子</li><li>加柠檬<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 泡茶</span></span><br><span class="line"><span class="keyword">var</span> Tea = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">Tea.prototype.boilWater = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'把水煮沸'</span>);</span><br><span class="line">&#125;</span><br><span class="line">Tea.prototype.brewTea = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'用沸水浸泡茶叶'</span>);</span><br><span class="line">&#125;</span><br><span class="line">Tea.prototype.purInCup = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'把茶水倒进杯子'</span>)</span><br><span class="line">&#125;</span><br><span class="line">Tea.prototype.addLemon = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'加柠檬'</span>);</span><br><span class="line">&#125;</span><br><span class="line">Tea.prototype.init = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.boilWater();</span><br><span class="line">  <span class="keyword">this</span>.brewTea();</span><br><span class="line">  <span class="keyword">this</span>.purInCup();</span><br><span class="line">  <span class="keyword">this</span>.addLemon();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> tea = <span class="keyword">new</span> Tea();</span><br><span class="line"><span class="comment">// 依次输出： 把水煮沸 用沸水浸泡茶叶 把茶水倒进杯子 加柠檬</span></span><br><span class="line">tea.init();</span><br></pre></td></tr></table></figure></li></ol><h4 id="泡茶经典案例重构"><a href="#泡茶经典案例重构" class="headerlink" title="泡茶经典案例重构"></a>泡茶经典案例重构</h4><p>经过对比分析，泡咖啡和泡茶虽然具体实现的方法是不一样的，但是步骤大致是类似的：</p><ol><li>把水煮沸</li><li>用沸水</li><li>倒进杯子</li><li>加调料</li></ol><p>泡咖啡和泡茶主要的不同点</p><ol><li>原料不同，一个是咖啡，一个是茶，统称为饮料</li><li>泡的方式不同，一个是冲泡，一个是浸泡，统称为泡</li><li>加入的调料不同，一个是牛奶和糖，另一个是柠檬。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象父类提取</span></span><br><span class="line"><span class="keyword">var</span> Beverage = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">Beverage.prototype.boilWater = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'把水煮沸'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 抽象方法，由子类去具体实现</span></span><br><span class="line">Beverage.prototype.brew = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"><span class="comment">// 抽象方法，由子类去具体实现</span></span><br><span class="line">Beverage.prototype.pourInCur = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"><span class="comment">// 抽象方法，由子类去具体实现</span></span><br><span class="line">Beverage.prototype.addCondiments = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">Beverage.prototype.init = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.boilWater();</span><br><span class="line">  <span class="keyword">this</span>.brew();</span><br><span class="line">  <span class="keyword">this</span>.pourInCur();</span><br><span class="line">  <span class="keyword">this</span>.addCondiments();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建子类以及实例化子类</span></span><br><span class="line"><span class="keyword">var</span> Coffee = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">Coffee.prototype = <span class="keyword">new</span> Beverage();</span><br><span class="line">Coffee.prototype.brew = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'用沸水冲泡咖啡'</span>);</span><br><span class="line">&#125;</span><br><span class="line">Coffee.prototype.pourInCur = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'把咖啡到进杯子里'</span>);</span><br><span class="line">&#125;</span><br><span class="line">Coffee.prototype.addCondiments = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'加糖和牛奶'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> Tea = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125; ;</span><br><span class="line">Tea.prototype = <span class="keyword">new</span> Beverage();</span><br><span class="line">Tea.prototype.brew = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'用沸水浸泡茶'</span>);</span><br><span class="line">&#125;</span><br><span class="line">Tea.prototype.pourInCur = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'把茶到进杯子里'</span>);</span><br><span class="line">&#125;</span><br><span class="line">Tea.prototype.addCondiments = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'加柠檬'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 实例化子类</span></span><br><span class="line"><span class="keyword">var</span> coffee = <span class="keyword">new</span> Coffee();</span><br><span class="line"><span class="comment">// 依次输出：用沸水冲泡咖啡 把咖啡到进杯子里 加糖和牛奶</span></span><br><span class="line">coffee.init();</span><br><span class="line"><span class="keyword">var</span> tea = <span class="keyword">new</span> Tea();</span><br><span class="line"><span class="comment">// 依次输出：用沸水浸泡茶 把茶到进杯子里  加柠檬</span></span><br><span class="line">tea.init();</span><br></pre></td></tr></table></figure><h4 id="泡茶经典案例解析"><a href="#泡茶经典案例解析" class="headerlink" title="泡茶经典案例解析"></a>泡茶经典案例解析</h4><p>在泡咖啡和茶的经典案例中，到底谁才是真正的模板方法呢？答案是<code>Beverage.prototype.init</code>,<br>这是因为该方法中封装了子类的算法框架，它作为一个算法的模板，指导子类以何种顺序去执行哪些方法。</p><h4 id="好莱坞原则重写经典案例"><a href="#好莱坞原则重写经典案例" class="headerlink" title="好莱坞原则重写经典案例"></a>好莱坞原则重写经典案例</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 重构父类</span></span><br><span class="line"><span class="keyword">var</span> Beverage = <span class="function"><span class="keyword">function</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> boilWater = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'把水煮沸'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> brew = params.brew || <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'子类必须重写brew方法'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> pourInCup = params.pourInCup || <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'子类必须重写pourInCup方法'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> addCondiments = params.addCondiments || <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'子类必须重写addCondiments方法'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> F = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">  F.prototype.init = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    boilWater();</span><br><span class="line">    brew();</span><br><span class="line">    pourInCup();</span><br><span class="line">    addCondiments();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> F;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建子类</span></span><br><span class="line"><span class="keyword">var</span> Coffee = Beverage(&#123;</span><br><span class="line">  brew: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'冲泡咖啡'</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  pourInCup: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'把咖啡倒进杯子里'</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  addCondiments: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'加牛奶和糖'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">var</span> Tea = Beverage(&#123;</span><br><span class="line">  brew: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'用沸水浸泡茶叶'</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  pourInCup: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'把茶水倒进杯子'</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  addCondiments: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'加柠檬'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 实例化子类</span></span><br><span class="line"><span class="keyword">var</span> coffee = <span class="keyword">new</span> Coffee();</span><br><span class="line"><span class="comment">// 依次输出： 把水煮沸 冲泡咖啡 把咖啡倒进杯子里 加牛奶和糖</span></span><br><span class="line">coffee.init();</span><br><span class="line"><span class="keyword">var</span> tea = <span class="keyword">new</span> Tea();</span><br><span class="line"><span class="comment">// 依次输出： 把水煮沸 用沸水浸泡茶叶 把茶水倒进杯子 加柠檬</span></span><br><span class="line">tea.init();</span><br></pre></td></tr></table></figure><h3 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h3><p>::: tip<br>亨元模式是一种用于性能优化的模式，其核心是运用共享技术来有效支持大量细粒度的对象。亨元模式要求将对象的属性划分为内部状态和外部状态。<br>:::</p><h4 id="亨元模式雏形"><a href="#亨元模式雏形" class="headerlink" title="亨元模式雏形"></a>亨元模式雏形</h4><p><strong>背景</strong>：某内衣厂生产有50种男士内衣和50种女士内衣，正常情况下，需要50个男模特和50个女模特来完成对内衣的试穿拍照，在不使用亨元模式的情况下，在程序里也许会这样写<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 亨元模式雏形</span></span><br><span class="line"><span class="keyword">var</span> Model = <span class="function"><span class="keyword">function</span>(<span class="params">sex,underwear</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.sex = sex;</span><br><span class="line">  <span class="keyword">this</span>.underwear = underwear;</span><br><span class="line">&#125;</span><br><span class="line">Model.prototype.takePhoto = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'sex='</span>+<span class="keyword">this</span>.sex+<span class="string">',underwear='</span>+<span class="keyword">this</span>.underwear);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; <span class="number">50</span>; index++) &#123;</span><br><span class="line">  <span class="keyword">var</span> model = <span class="keyword">new</span> Model(<span class="string">'male'</span>,<span class="string">'underwear'</span>+index);</span><br><span class="line">  model.takePhoto();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; <span class="number">50</span>; index++) &#123;</span><br><span class="line">  <span class="keyword">var</span> model = <span class="keyword">new</span> Model(<span class="string">'female'</span>,<span class="string">'underwear'</span>+index);</span><br><span class="line">  model.takePhoto();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>思考</strong>：</p><ol><li>在上列中，要得到一张照片，每次需要传入sex和underwear参数，一共有50种男士内衣和50种女士内衣，一共需要100个对象，将来如果生产1000种内衣，则需要的对象会更多。</li><li>利用亨元模式后，虽然有100种内衣，但只需要男、女两个模特即可，即只需要两个对象</li></ol><h4 id="亨元模式初运用"><a href="#亨元模式初运用" class="headerlink" title="亨元模式初运用"></a>亨元模式初运用</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Model = <span class="function"><span class="keyword">function</span> (<span class="params">sex</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.sex = sex;</span><br><span class="line">&#125;</span><br><span class="line">Model.prototype.takePhoto = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'sex='</span> + <span class="keyword">this</span>.sex + <span class="string">',underwear='</span> + <span class="keyword">this</span>.underwear);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> male = <span class="keyword">new</span> Model(<span class="string">'male'</span>);</span><br><span class="line"><span class="keyword">var</span> female = <span class="keyword">new</span> Model(<span class="string">'female'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; <span class="number">50</span>; index++) &#123;</span><br><span class="line">  male.underwear = index+<span class="number">1</span>;</span><br><span class="line">  male.takePhoto();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; <span class="number">50</span>; index++) &#123;</span><br><span class="line">  female.underwear = index+<span class="number">1</span>;</span><br><span class="line">  female.takePhoto();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>亨元模式初运用思考</strong>：</p><ol><li>我们通过new来创建男女两个model对象，在其他情况下，也许并不是一开始就需要共享所有的对象。</li><li>给model手动添加了underwear属性，在更加复杂的系统中，这并不是一个最好的方法，因为外部状态可能是相对比较复杂的，他们与共享对象的联系会变得更加困难。</li></ol><h4 id="真实案例：文件上传"><a href="#真实案例：文件上传" class="headerlink" title="真实案例：文件上传"></a>真实案例：文件上传</h4><p><strong>背景</strong>：在微云文件上传模块的开发中，曾爆发过对象爆炸的问题。微云文件上传分为浏览器插件上传，flash上传和表单上传等。用户对于不用的上传模式，都能一个一个上传，或者批量上传。在最初版时，同时上传2000个文件，在IE浏览器中直接进入假死状态。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 真实案例：文件上传</span></span><br><span class="line"><span class="comment">// 文件上传对象</span></span><br><span class="line"><span class="keyword">var</span> Upload = <span class="function"><span class="keyword">function</span> (<span class="params">uploadType, fileName, fileSize</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.uploadType = uploadType;</span><br><span class="line">  <span class="keyword">this</span>.fileName = fileName;</span><br><span class="line">  <span class="keyword">this</span>.fileSize = fileSize;</span><br><span class="line">  <span class="keyword">this</span>.dom = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">Upload.prototype.init = <span class="function"><span class="keyword">function</span> (<span class="params">id</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> _self = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">this</span>.id = id;</span><br><span class="line">  <span class="keyword">this</span>.dom = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">  <span class="keyword">this</span>.dom.innerHTML = <span class="string">'&lt;span&gt;文件名称：'</span> + <span class="keyword">this</span>.fileName + <span class="string">',文件大小：'</span> </span><br><span class="line">  + <span class="keyword">this</span>.fileSize + <span class="string">'kb&lt;/span&gt;'</span> + <span class="string">'&lt;button type="button" class="delFile"&gt;删除&lt;/button&gt;'</span>;</span><br><span class="line">  <span class="keyword">this</span>.dom.querySelector(<span class="string">'.delFile'</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    _self.deleteFile();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(<span class="keyword">this</span>.dom);</span><br><span class="line">&#125;</span><br><span class="line">Upload.prototype.deleteFile = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.fileSize &lt; <span class="number">3000</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'成功删除'</span> + <span class="keyword">this</span>.fileName + <span class="string">'文件'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.dom.parentNode.removeChild(<span class="keyword">this</span>.dom);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (confirm(<span class="string">'是否确定删除此文件?'</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.dom.parentNode.removeChild(<span class="keyword">this</span>.dom);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上传方法</span></span><br><span class="line"><span class="keyword">var</span> id = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">window</span>.startUpload = <span class="function"><span class="keyword">function</span> (<span class="params">uploadType, fileList</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; fileList.length; index++) &#123;</span><br><span class="line">    <span class="keyword">var</span> file = fileList[index];</span><br><span class="line">    <span class="keyword">var</span> upload = <span class="keyword">new</span> Upload(uploadType, file.name, file.size);</span><br><span class="line">    upload.init(id++);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用户上传</span></span><br><span class="line">startUpload(<span class="string">'plugin'</span>, [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'1.txt'</span>, <span class="attr">size</span>: <span class="number">1000</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'2.txt'</span>, <span class="attr">size</span>: <span class="number">3000</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'3.txt'</span>, <span class="attr">size</span>: <span class="number">5000</span> &#125;</span><br><span class="line">])</span><br><span class="line">startUpload(<span class="string">'flash'</span>, [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'4.txt'</span>, <span class="attr">size</span>: <span class="number">1000</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'5.txt'</span>, <span class="attr">size</span>: <span class="number">3000</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'6.txt'</span>, <span class="attr">size</span>: <span class="number">5000</span> &#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure></p><h4 id="真实案例：文件上传结果"><a href="#真实案例：文件上传结果" class="headerlink" title="真实案例：文件上传结果"></a>真实案例：文件上传结果</h4><p><img src="/2022/04/12/JavaScript设计模式与开发实践/images/books/fileUploadResult.png" alt="真实案例：文件上传结果"></p><h4 id="真实案例：亨元模式重构文件上传"><a href="#真实案例：亨元模式重构文件上传" class="headerlink" title="真实案例：亨元模式重构文件上传"></a>真实案例：亨元模式重构文件上传</h4><p>::: tip 如何划分内部状态和外部状态</p><ol><li>内部状态存储于对象内部</li><li>内部状态可以被一些对象共享</li><li>内部状态独立于具体的场景，通常不会改变</li><li>外部状态取决于具体的场景，并根据场景的变化而变化，外部状态通常是不能被共享的。<br>:::<br>::: tip 文件上传内部状态划分<br>内部状态：uploadType<br><br>外部状态：fileName,fileSize(文件名和文件大小不能被共享，它随不同的文件不同而不同)<br>:::<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 真实案例：亨元模式重构文件上传</span></span><br><span class="line"><span class="comment">// 文件上传对象</span></span><br><span class="line"><span class="keyword">var</span> Upload = <span class="function"><span class="keyword">function</span> (<span class="params">uploadType</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.uploadType = uploadType;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 工厂模式：解决一开始就共享所有对象的问题</span></span><br><span class="line"><span class="keyword">var</span> UploadFactory = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> createFactoryList = &#123;&#125;;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    create: <span class="function"><span class="keyword">function</span>(<span class="params">uploadType</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(createFactoryList[uploadType]) &#123;</span><br><span class="line">        <span class="keyword">return</span> createFactoryList[uploadType]</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> createFactoryList[uploadType] = <span class="keyword">new</span> Upload(uploadType);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="comment">// 管理器：封装外部状态，使程序在运行时给upload对象设置外部状态</span></span><br><span class="line"><span class="keyword">var</span> uploadManage = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> uploadDataBase = &#123;&#125;;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    add: <span class="function"><span class="keyword">function</span>(<span class="params">id,type,name,size</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> uploadObj = UploadFactory.create(type);</span><br><span class="line">      <span class="keyword">var</span> dom = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">      dom.innerHTML = <span class="string">'&lt;span&gt;文件名称：'</span> + name + <span class="string">',文件大小：'</span> + </span><br><span class="line">      size + <span class="string">'kb&lt;/span&gt;'</span> + <span class="string">'&lt;button type="button" class="delFile"&gt;删除&lt;/button&gt;'</span>;</span><br><span class="line">      dom.querySelector(<span class="string">'.delFile'</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        uploadObj.deleteFile(id);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">document</span>.body.appendChild(dom);</span><br><span class="line">      uploadDataBase[id] = &#123;</span><br><span class="line">        fileName: name,</span><br><span class="line">        fileSize: size,</span><br><span class="line">        dom: dom</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> uploadObj;</span><br><span class="line">    &#125;,</span><br><span class="line">    setExternalState: <span class="function"><span class="keyword">function</span>(<span class="params">id,uploadObj</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> uploadData = uploadDataBase[id];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> uploadData) &#123;</span><br><span class="line">        uploadObj[i] = uploadData[i];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br><span class="line">Upload.prototype.deleteFile = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  uploadManage.setExternalState(id,<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.fileSize &lt; <span class="number">3000</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.dom.parentNode.removeChild(<span class="keyword">this</span>.dom);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (confirm(<span class="string">'是否确定删除此文件?'</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.dom.parentNode.removeChild(<span class="keyword">this</span>.dom);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上传方法</span></span><br><span class="line"><span class="keyword">var</span> id = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">window</span>.startUpload = <span class="function"><span class="keyword">function</span> (<span class="params">uploadType, fileList</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; fileList.length; index++) &#123;</span><br><span class="line">    <span class="keyword">var</span> file = fileList[index];</span><br><span class="line">    <span class="keyword">var</span> upload = uploadManage.add(++id,uploadType,file.name,file.size);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用户上传</span></span><br><span class="line">startUpload(<span class="string">'plugin'</span>, [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'1.txt'</span>, <span class="attr">size</span>: <span class="number">1000</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'2.txt'</span>, <span class="attr">size</span>: <span class="number">3000</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'3.txt'</span>, <span class="attr">size</span>: <span class="number">5000</span> &#125;</span><br><span class="line">])</span><br><span class="line">startUpload(<span class="string">'flash'</span>, [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'4.txt'</span>, <span class="attr">size</span>: <span class="number">1000</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'5.txt'</span>, <span class="attr">size</span>: <span class="number">3000</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'6.txt'</span>, <span class="attr">size</span>: <span class="number">5000</span> &#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure></li></ol><h4 id="真实案例：亨元模式重构文件上传-1"><a href="#真实案例：亨元模式重构文件上传-1" class="headerlink" title="真实案例：亨元模式重构文件上传"></a>真实案例：亨元模式重构文件上传</h4><p><img src="/2022/04/12/JavaScript设计模式与开发实践/images/books/fileUploadResult.png" alt="亨元模式重构文件上传结果"></p><h3 id="职责链模式"><a href="#职责链模式" class="headerlink" title="职责链模式"></a>职责链模式</h3><p>::: tip 定义<br>职责链模式：使多个对象都有机会处理请求，从而避免请求的发送者和接受者之间的耦合关系，将这些对象连成一条链传递该请求，直到有一个对象处理它为止。<br>:::<br><strong>优点</strong>：</p><ol><li>解耦发送者和N个接受者之间的关系</li><li>可以手动设置起始节点，并不是必须从第一个开始</li><li>可以与其他设计模式在一起实现更加复杂的功能，例如职责链模式+命令模式</li></ol><p><strong>缺点</strong>：</p><ol><li>请求不能保证一定能在接受者中被处理</li><li>请求链过长的情况下，可能某些节点并没有起到实质性的作用，造成性能损耗。</li></ol><h4 id="现实中的职责链模式"><a href="#现实中的职责链模式" class="headerlink" title="现实中的职责链模式"></a>现实中的职责链模式</h4><ol><li>高峰坐公交时，从后门上车的乘客需要把卡一个一个传递，最后一个人打卡或者投币。</li><li>考试写小纸条，往后一个一个传递，直到有一个人把正确答案给你为止。</li></ol><h4 id="实际开发中的职责链模式-if-else版"><a href="#实际开发中的职责链模式-if-else版" class="headerlink" title="实际开发中的职责链模式: if-else版"></a>实际开发中的职责链模式: if-else版</h4><p><strong>背景</strong>：某公司电商网站，准备做一个活动，用户分别交纳500元定金，可得100元优惠券；交纳200元定金，可得50元优惠券；不交纳定金，正常购买，不享受优惠券，切在库存不充足时，不一定保证能买到商品。<br><br><strong>字段描述</strong>:</p><ol><li>orderType: 1代表500元定金用户；2代表200元定金用户；3代表普通用户</li><li>pay：是否已支付定金</li><li>stock：库存，支付了定金的用户不受库存限制</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// if else版</span></span><br><span class="line"><span class="keyword">var</span>  order = <span class="function"><span class="keyword">function</span>(<span class="params">orderType,pay,stock</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(orderType==<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(pay) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'500元定金预购，享受100元优惠券'</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 未支付定金，降级到普通订单</span></span><br><span class="line">      <span class="keyword">if</span>(stock&gt;<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'普通订单，无优惠券'</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'库存不足'</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(orderType==<span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(pay) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'200元定金预购，享受50元优惠券'</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 未支付定金，降级到普通订单</span></span><br><span class="line">      <span class="keyword">if</span>(stock&gt;<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'普通订单，无优惠券'</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'库存不足'</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(orderType==<span class="number">3</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(stock&gt;<span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'普通订单，无优惠券'</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'库存不足'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 订单测试</span></span><br><span class="line">order(<span class="number">1</span>, <span class="literal">true</span>, <span class="number">500</span>);  <span class="comment">// 输出：500元定金预购，享受100元优惠券</span></span><br><span class="line">order(<span class="number">1</span>, <span class="literal">false</span>,<span class="number">500</span>);  <span class="comment">// 输出：普通订单，无优惠券</span></span><br><span class="line">order(<span class="number">2</span>, <span class="literal">true</span>, <span class="number">500</span>);  <span class="comment">// 输出：200元定金预购，享受50元优惠券</span></span><br><span class="line">order(<span class="number">3</span>, <span class="literal">true</span>, <span class="number">500</span>);  <span class="comment">// 输出：普通订单，无优惠券</span></span><br></pre></td></tr></table></figure><h4 id="实际开发中的职责链模式-职责链重构版"><a href="#实际开发中的职责链模式-职责链重构版" class="headerlink" title="实际开发中的职责链模式: 职责链重构版"></a>实际开发中的职责链模式: 职责链重构版</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 职责链重构版</span></span><br><span class="line"><span class="keyword">var</span> order500 = <span class="function"><span class="keyword">function</span>(<span class="params">orderType,pay,stock</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(orderType==<span class="number">1</span> &amp;&amp; pay) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'500元定金预购，享受100元优惠券'</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    order200(orderType,pay,stock);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> order200 = <span class="function"><span class="keyword">function</span>(<span class="params">orderType,pay,stock</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(orderType==<span class="number">2</span> &amp;&amp; pay) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'200元定金预购，享受50元优惠券'</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    orderNormal(orderType,pay,stock);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> orderNormal = <span class="function"><span class="keyword">function</span>(<span class="params">orderType,pay,stock</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(stock&gt;<span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'普通订单，无优惠券'</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'库存不足'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 订单测试</span></span><br><span class="line">order500(<span class="number">1</span>, <span class="literal">true</span>, <span class="number">500</span>);  <span class="comment">// 输出：500元定金预购，享受100元优惠券</span></span><br><span class="line">order500(<span class="number">1</span>, <span class="literal">false</span>,<span class="number">500</span>);  <span class="comment">// 输出：普通订单，无优惠券</span></span><br><span class="line">order500(<span class="number">2</span>, <span class="literal">true</span>, <span class="number">500</span>);  <span class="comment">// 输出：200元定金预购，享受50元优惠券</span></span><br><span class="line">order500(<span class="number">3</span>, <span class="literal">true</span>, <span class="number">500</span>);  <span class="comment">// 输出：普通订单，无优惠券</span></span><br></pre></td></tr></table></figure><p><strong>存在的问题</strong>:</p><ol><li>传递请求的代码被严格耦合在了一起，违反开放-封闭原则</li><li>当要新增300元订单时，必须把原来的职责链拆解，移动后才能运行起来</li></ol><h4 id="实际开发中的职责链模式-职责链重构完善版"><a href="#实际开发中的职责链模式-职责链重构完善版" class="headerlink" title="实际开发中的职责链模式: 职责链重构完善版"></a>实际开发中的职责链模式: 职责链重构完善版</h4><p>::: tip 约定<br>我们约定，在某个节点处理不了请求时，返回一个字段，把请求往后传递<br>:::<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 职责链重构完善版</span></span><br><span class="line"><span class="keyword">var</span> order500 = <span class="function"><span class="keyword">function</span>(<span class="params">orderType,pay,stock</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(orderType==<span class="number">1</span> &amp;&amp; pay) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'500元定金预购，享受100元优惠券'</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'next'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> order200 = <span class="function"><span class="keyword">function</span>(<span class="params">orderType,pay,stock</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(orderType==<span class="number">2</span> &amp;&amp; pay) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'200元定金预购，享受50元优惠券'</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'next'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> orderNormal = <span class="function"><span class="keyword">function</span>(<span class="params">orderType,pay,stock</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(stock&gt;<span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'普通订单，无优惠券'</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'库存不足'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新增职责链类</span></span><br><span class="line"><span class="keyword">var</span> Chain = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.fn = fn;</span><br><span class="line">  <span class="keyword">this</span>.receiver = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">Chain.prototype.setReceiver = <span class="function"><span class="keyword">function</span>(<span class="params">receiver</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.receiver = receiver;</span><br><span class="line">&#125;</span><br><span class="line">Chain.prototype.passRequest = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> returnMsg = <span class="keyword">this</span>.fn.apply(<span class="keyword">this</span>,<span class="built_in">arguments</span>);</span><br><span class="line">  <span class="keyword">if</span>(returnMsg==<span class="string">'next'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.receiver &amp;&amp; <span class="keyword">this</span>.receiver.passRequest.apply(<span class="keyword">this</span>.receiver,<span class="built_in">arguments</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> returnMsg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> chainOrder500 = <span class="keyword">new</span> Chain(order500);</span><br><span class="line"><span class="keyword">var</span> chainOrder200 = <span class="keyword">new</span> Chain(order200);</span><br><span class="line"><span class="keyword">var</span> chainOrderNormal = <span class="keyword">new</span> Chain(orderNormal);</span><br><span class="line">chainOrder500.setReceiver(chainOrder200);</span><br><span class="line">chainOrder200.setReceiver(chainOrderNormal);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 订单测试</span></span><br><span class="line">chainOrder500.passRequest(<span class="number">1</span>, <span class="literal">true</span>, <span class="number">500</span>);  <span class="comment">// 输出：500元定金预购，享受100元优惠券</span></span><br><span class="line">chainOrder500.passRequest(<span class="number">1</span>, <span class="literal">false</span>,<span class="number">500</span>);  <span class="comment">// 输出：普通订单，无优惠券</span></span><br><span class="line">chainOrder500.passRequest(<span class="number">2</span>, <span class="literal">true</span>, <span class="number">500</span>);  <span class="comment">// 输出：200元定金预购，享受50元优惠券</span></span><br><span class="line">chainOrder500.passRequest(<span class="number">3</span>, <span class="literal">true</span>, <span class="number">500</span>);  <span class="comment">// 输出：普通订单，无优惠券</span></span><br></pre></td></tr></table></figure></p><h4 id="实际开发中的职责链模式-AOP实现"><a href="#实际开发中的职责链模式-AOP实现" class="headerlink" title="实际开发中的职责链模式: AOP实现"></a>实际开发中的职责链模式: AOP实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AOP实现职责链模式</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.after = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> returnMsg = self.apply(<span class="keyword">this</span>,<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="keyword">if</span>(returnMsg==<span class="string">'next'</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> fn.apply(<span class="keyword">this</span>,<span class="built_in">arguments</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> returnMsg;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> order500 = <span class="function"><span class="keyword">function</span>(<span class="params">orderType,pay,stock</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(orderType==<span class="number">1</span> &amp;&amp; pay) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'500元定金预购，享受100元优惠券'</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'next'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> order200 = <span class="function"><span class="keyword">function</span>(<span class="params">orderType,pay,stock</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(orderType==<span class="number">2</span> &amp;&amp; pay) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'200元定金预购，享受50元优惠券'</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'next'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> orderNormal = <span class="function"><span class="keyword">function</span>(<span class="params">orderType,pay,stock</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(stock&gt;<span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'普通订单，无优惠券'</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'库存不足'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> order = order500.after(order200).after(orderNormal);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 订单测试</span></span><br><span class="line">order(<span class="number">1</span>, <span class="literal">true</span>, <span class="number">500</span>);  <span class="comment">// 输出：500元定金预购，享受100元优惠券</span></span><br><span class="line">order(<span class="number">1</span>, <span class="literal">false</span>,<span class="number">500</span>);  <span class="comment">// 输出：普通订单，无优惠券</span></span><br><span class="line">order(<span class="number">2</span>, <span class="literal">true</span>, <span class="number">500</span>);  <span class="comment">// 输出：200元定金预购，享受50元优惠券</span></span><br><span class="line">order(<span class="number">3</span>, <span class="literal">true</span>, <span class="number">500</span>);  <span class="comment">// 输出：普通订单，无优惠券</span></span><br></pre></td></tr></table></figure><h3 id="中介者模式"><a href="#中介者模式" class="headerlink" title="中介者模式"></a>中介者模式</h3><p>::: tip<br>中介者模式：中介者模式的作用就是解除对象与对象之间的紧耦合关系。增加一个中介者对象后，所有的相关对象都通过中介者对象来通信，而不是互相引用，所以当一个对象发生改变时，只需要通知中介者即可。<br>:::</p><h4 id="中介者模式的缺点"><a href="#中介者模式的缺点" class="headerlink" title="中介者模式的缺点"></a>中介者模式的缺点</h4><ol><li>中介者模式本身就要新增一个中介者对象</li><li>将对象与对象之间交互的复杂性，转移到对象与中介者之间的复杂性，使得中介者对象经常是巨大的</li><li>中介者本身就是一个难以维护的对象。</li></ol><h4 id="现实中的案例"><a href="#现实中的案例" class="headerlink" title="现实中的案例"></a>现实中的案例</h4><ol><li>机场指挥塔<br>机场指挥塔扮演者中介者，而不同的飞机扮演对象，他们通过与指挥塔进行通信，从而得知消息，什么时候可以起飞，什么时候可以降落。</li><li>博彩公司<br>在世界杯期间，博彩公司通过扮演中介者，把成千上万的用户投注情况进行汇总，根据比赛的输赢，进行计算相关的赔率。</li></ol><h4 id="中介者模式案例：泡泡堂-原始版"><a href="#中介者模式案例：泡泡堂-原始版" class="headerlink" title="中介者模式案例：泡泡堂(原始版)"></a>中介者模式案例：泡泡堂(原始版)</h4><p>::: tip</p><ol><li>分为红蓝两队</li><li>只有某队全部死亡，才算失败<br>:::<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 中介者模式案例：泡泡堂(原始版)</span></span><br><span class="line"><span class="keyword">var</span> Player = <span class="function"><span class="keyword">function</span>(<span class="params">name,teamColor</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.partners = [];         <span class="comment">// 队友列表</span></span><br><span class="line">  <span class="keyword">this</span>.emeies = [];           <span class="comment">// 敌人列表</span></span><br><span class="line">  <span class="keyword">this</span>.name = name;           <span class="comment">// 名字</span></span><br><span class="line">  <span class="keyword">this</span>.teamColor = teamColor; <span class="comment">// 队伍颜色</span></span><br><span class="line">  <span class="keyword">this</span>.state = <span class="string">'live'</span>;        <span class="comment">// 生存状态</span></span><br><span class="line">&#125;</span><br><span class="line">Player.prototype.win = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name+<span class="string">'胜利了'</span>);</span><br><span class="line">&#125;</span><br><span class="line">Player.prototype.lose = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name+<span class="string">'失败了'</span>);</span><br><span class="line">&#125;</span><br><span class="line">Player.prototype.die = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> allDie = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">this</span>.state = <span class="string">'dead'</span>;</span><br><span class="line">  <span class="comment">// 遍历队友是否全部阵亡</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>,len = <span class="keyword">this</span>.partners.length; index &lt; len; index++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.partners[index].state!=<span class="string">'dead'</span>) &#123;</span><br><span class="line">      allDie = <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如果全部阵亡，遍历通知队友失败，通知敌人胜利</span></span><br><span class="line">  <span class="keyword">if</span>(allDie) &#123;</span><br><span class="line">    <span class="keyword">this</span>.lose();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>,len = <span class="keyword">this</span>.partners.length; index &lt; len; index++) &#123;</span><br><span class="line">      <span class="keyword">this</span>.partners[index].lose();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>,len = <span class="keyword">this</span>.emeies.length; index &lt; len; index++) &#123;</span><br><span class="line">      <span class="keyword">this</span>.emeies[index].win();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 工厂方法创建玩家</span></span><br><span class="line"><span class="keyword">var</span> players = [];</span><br><span class="line"><span class="keyword">var</span> playerFactory = <span class="function"><span class="keyword">function</span>(<span class="params">name,teamColor</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> newPlayer = <span class="keyword">new</span> Player(name,teamColor);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>,len = players.length; index &lt; len; index++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(players[index].teamColor==teamColor) &#123;</span><br><span class="line">      players[index].partners.push(newPlayer);</span><br><span class="line">      newPlayer.partners.push(players[index]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      players[index].emeies.push(newPlayer);</span><br><span class="line">      newPlayer.emeies.push(players[index]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  players.push(newPlayer);</span><br><span class="line">  <span class="keyword">return</span> newPlayer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 红队</span></span><br><span class="line"><span class="keyword">var</span> player1 = playerFactory(<span class="string">'张三'</span>,<span class="string">'red'</span>),</span><br><span class="line">    player2 = playerFactory(<span class="string">'张四'</span>,<span class="string">'red'</span>),</span><br><span class="line">    player3 = playerFactory(<span class="string">'张五'</span>,<span class="string">'red'</span>),</span><br><span class="line">    player4 = playerFactory(<span class="string">'张六'</span>,<span class="string">'red'</span>);</span><br><span class="line"><span class="comment">// 蓝队</span></span><br><span class="line"><span class="keyword">var</span> player5 = playerFactory(<span class="string">'辰大'</span>,<span class="string">'blue'</span>),</span><br><span class="line">    player6 = playerFactory(<span class="string">'辰二'</span>,<span class="string">'blue'</span>),</span><br><span class="line">    player7 = playerFactory(<span class="string">'辰三'</span>,<span class="string">'blue'</span>),</span><br><span class="line">    player8 = playerFactory(<span class="string">'辰四'</span>,<span class="string">'blue'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 淘汰玩家</span></span><br><span class="line"><span class="comment">// 依次输出：辰四失败了 辰大失败了 辰二失败了 辰三失败了 张三胜利了  张四胜利了</span></span><br><span class="line"><span class="comment">// 张五胜利了  张六胜利了</span></span><br><span class="line">player5.die();</span><br><span class="line">player6.die();</span><br><span class="line">player7.die();</span><br><span class="line">player8.die();</span><br></pre></td></tr></table></figure></li></ol><p><strong>思考</strong>：<br></p><ol><li>虽然我们可以随意创建任意对个玩家，但玩家和其他玩家紧紧耦合在了一起</li><li>某一个玩家的状态改变，必须通知其他对象，当其它对象很多时，会非常不合适。</li><li>不利于扩展，今后如果要添加新的功能，如：玩家掉线，解除队伍，添加到别的队伍会非常不方便。</li></ol><h4 id="中介者模式案例：泡泡堂-引入中介者"><a href="#中介者模式案例：泡泡堂-引入中介者" class="headerlink" title="中介者模式案例：泡泡堂(引入中介者)"></a>中介者模式案例：泡泡堂(引入中介者)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 中介者模式案例：泡泡堂(引入中介者)</span></span><br><span class="line"><span class="keyword">var</span> playerDirector = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> players = &#123;&#125;;</span><br><span class="line">  <span class="keyword">var</span> operations = &#123;</span><br><span class="line">    addPlayer: <span class="function"><span class="keyword">function</span>(<span class="params">player</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> teamColor = player.teamColor;</span><br><span class="line">      <span class="keyword">if</span>(!players[teamColor]) &#123;</span><br><span class="line">        players[teamColor] = [];</span><br><span class="line">      &#125;</span><br><span class="line">      players[teamColor].push(player)</span><br><span class="line">    &#125;,</span><br><span class="line">    removePlayer: <span class="function"><span class="keyword">function</span>(<span class="params">player</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> teamColor = player.teamColor;</span><br><span class="line">      <span class="keyword">var</span> teamPlayers = players[teamColor] || [];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>,len=teamPlayers.length; index &lt; len; index++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(teamPlayers[index]==player) &#123;</span><br><span class="line">          teamPlayers.splice(index,<span class="number">1</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    changeTeam: <span class="function"><span class="keyword">function</span>(<span class="params">player,newTeamColor</span>) </span>&#123;</span><br><span class="line">      operations.removePlayer(player);</span><br><span class="line">      player.teamColor = newTeamColor;</span><br><span class="line">      operations.addPlayer(player);</span><br><span class="line">    &#125;,</span><br><span class="line">    playerDead: <span class="function"><span class="keyword">function</span>(<span class="params">player</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> teamColor = player.teamColor;</span><br><span class="line">      <span class="keyword">var</span> teamPlayers = players[teamColor];</span><br><span class="line">      <span class="keyword">var</span> allDead = <span class="literal">true</span>;</span><br><span class="line">      player.state = <span class="string">'dead'</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>,len=teamPlayers.length; index &lt; len; index++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(teamPlayers[index].state!=<span class="string">'dead'</span>) &#123;</span><br><span class="line">          allDead = <span class="literal">false</span>;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(allDead) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>,len=teamPlayers.length; index &lt; len; index++) &#123;</span><br><span class="line">          teamPlayers[index].lose();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> color <span class="keyword">in</span> players) &#123;</span><br><span class="line">          <span class="keyword">if</span>(color!=teamColor) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>,len=players[color].length; index &lt; len; index++) &#123;</span><br><span class="line">              players[color][index].win();</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">var</span> ReceiveMessage = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> message = <span class="built_in">Array</span>.prototype.shift.call(<span class="built_in">arguments</span>);</span><br><span class="line">    operations[message].apply(<span class="keyword">this</span>,<span class="built_in">arguments</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    ReceiveMessage: ReceiveMessage</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"><span class="keyword">var</span> Player = <span class="function"><span class="keyword">function</span>(<span class="params">name,teamColor</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.teamColor = teamColor;</span><br><span class="line">  <span class="keyword">this</span>.state = <span class="string">'live'</span>;</span><br><span class="line">&#125;</span><br><span class="line">Player.prototype.win = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name+<span class="string">'胜利了'</span>);</span><br><span class="line">&#125;</span><br><span class="line">Player.prototype.lose = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name+<span class="string">'失败了'</span>);</span><br><span class="line">&#125;</span><br><span class="line">Player.prototype.remove = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name+<span class="string">'掉线了'</span>);</span><br><span class="line">  playerDirector.ReceiveMessage(<span class="string">'removePlayer'</span>,<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">Player.prototype.die = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name+<span class="string">'死亡'</span>);</span><br><span class="line">  playerDirector.ReceiveMessage(<span class="string">'playerDead'</span>,<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">Player.prototype.changeTeam = <span class="function"><span class="keyword">function</span>(<span class="params">color</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name+<span class="string">'换队'</span>);</span><br><span class="line">  playerDirector.ReceiveMessage(<span class="string">'changeTeam'</span>,<span class="keyword">this</span>,color);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 工厂模式创建玩家</span></span><br><span class="line"><span class="keyword">var</span> playerFactory = <span class="function"><span class="keyword">function</span>(<span class="params">name,teamColor</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> newPlayer = <span class="keyword">new</span> Player(name,teamColor);</span><br><span class="line">  playerDirector.ReceiveMessage(<span class="string">'addPlayer'</span>,newPlayer);</span><br><span class="line">  <span class="keyword">return</span> newPlayer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 红队</span></span><br><span class="line"><span class="keyword">var</span> player1 = playerFactory(<span class="string">'张三'</span>,<span class="string">'red'</span>),</span><br><span class="line">    player2 = playerFactory(<span class="string">'张四'</span>,<span class="string">'red'</span>),</span><br><span class="line">    player3 = playerFactory(<span class="string">'张五'</span>,<span class="string">'red'</span>),</span><br><span class="line">    player4 = playerFactory(<span class="string">'张六'</span>,<span class="string">'red'</span>);</span><br><span class="line"><span class="comment">// 蓝队</span></span><br><span class="line"><span class="keyword">var</span> player5 = playerFactory(<span class="string">'辰大'</span>,<span class="string">'blue'</span>),</span><br><span class="line">    player6 = playerFactory(<span class="string">'辰二'</span>,<span class="string">'blue'</span>),</span><br><span class="line">    player7 = playerFactory(<span class="string">'辰三'</span>,<span class="string">'blue'</span>),</span><br><span class="line">    player8 = playerFactory(<span class="string">'辰四'</span>,<span class="string">'blue'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 掉线</span></span><br><span class="line"><span class="comment">// 依次输出：张三掉线了 张四掉线了</span></span><br><span class="line">player1.remove();</span><br><span class="line">player2.remove();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更换队伍</span></span><br><span class="line"><span class="comment">// 依次输出：张五换队 张五死亡</span></span><br><span class="line">player3.changeTeam(<span class="string">'blue'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 阵亡</span></span><br><span class="line"><span class="comment">// 依次输出：辰大死亡 辰二死亡  辰三死亡 辰四死亡</span></span><br><span class="line"><span class="comment">// 辰大失败了 辰二失败了  辰三失败了 辰四失败了 张五失败了</span></span><br><span class="line"><span class="comment">// 张六胜利了</span></span><br><span class="line">player3.die();</span><br><span class="line">player5.die();</span><br><span class="line">player6.die();</span><br><span class="line">player7.die();</span><br><span class="line">player8.die();</span><br></pre></td></tr></table></figure><h3 id="装饰者模式"><a href="#装饰者模式" class="headerlink" title="装饰者模式"></a>装饰者模式</h3><p>::: tip 定义<br>装饰者模式可以动态的给某个对象添加一些额外的职责，而不会影响从这个类中派生的其他对象。<br>:::</p><h4 id="继承的问题"><a href="#继承的问题" class="headerlink" title="继承的问题"></a>继承的问题</h4><p>在传统的面向对象语言中，给对象添加功能常常使用继承的方式，但继承的方式并不灵活，还会带来许多问题</p><ol><li>超类和子类之间存在强耦合关系，当改变超类时，子类也会随之改变。</li><li>超类的内部细节对子类是可见的，继承常常被认为破坏了封装性。</li><li>在完成一些功能复用的同时，有可能创建出大量的子类，使子类的数量呈爆炸式增长。</li></ol><h4 id="模拟面向对象语言的装饰者模式"><a href="#模拟面向对象语言的装饰者模式" class="headerlink" title="模拟面向对象语言的装饰者模式"></a>模拟面向对象语言的装饰者模式</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 飞机大战案例: 面向对象版</span></span><br><span class="line"><span class="keyword">var</span> Plane = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> Missile = <span class="function"><span class="keyword">function</span>(<span class="params">plane</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.plane = plane;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> Atom = <span class="function"><span class="keyword">function</span>(<span class="params">plane</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.plane = plane;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Plane.prototype.fire = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'发射普通子弹'</span>);</span><br><span class="line">&#125;;</span><br><span class="line">Missile.prototype.fire = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.plane.fire();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'发射导弹'</span>);</span><br><span class="line">&#125;</span><br><span class="line">Atom.prototype.fire = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.plane.fire();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'发射原子弹'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line"><span class="keyword">var</span> plane = <span class="keyword">new</span> Plane();</span><br><span class="line">plane = <span class="keyword">new</span> Missile(plane);</span><br><span class="line">plane = <span class="keyword">new</span> Atom(plane);</span><br><span class="line">plane.fire(); <span class="comment">// 依次输出：发射普通子弹 发射导弹 发射原子弹</span></span><br></pre></td></tr></table></figure><h4 id="JavaScript中的装饰者"><a href="#JavaScript中的装饰者" class="headerlink" title="JavaScript中的装饰者"></a>JavaScript中的装饰者</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JavaScript版</span></span><br><span class="line"><span class="keyword">var</span> plane = &#123;</span><br><span class="line">  fire: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'发射普通子弹'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> missile = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'发射导弹'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> atom = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'发射原子弹'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fire1 = plane.fire;</span><br><span class="line">plane.fire = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  fire1();</span><br><span class="line">  missile();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> fire2 = plane.fire;</span><br><span class="line">plane.fire = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  fire2();</span><br><span class="line">  atom();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">plane.fire();<span class="comment">// 依次输出：发射普通子弹 发射导弹 发射原子弹</span></span><br></pre></td></tr></table></figure><p><strong>解析</strong>：这种给对象添加职责的方式，并没有真正的改动对象自身，而是将对象放入另外一个对象之中，这些对象以一条链的方式进行引用，形成一个聚合对象。</p><h4 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h4><p>用AOP装饰函数的技巧在实际开发中非常有用，无论是业务代码的编写，还是在框架层面，我们都可以把行为依照职责分成粒度更细的函数，随后通过装饰把他们合并在一起，这有助于我们编写一个松耦合和高复用性的系统。</p><h5 id="AOP的两个装饰函数"><a href="#AOP的两个装饰函数" class="headerlink" title="AOP的两个装饰函数"></a>AOP的两个装饰函数</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// before函数</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.before = <span class="function"><span class="keyword">function</span>(<span class="params">beforeFn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> _self = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    beforeFn.apply(<span class="keyword">this</span>,<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="keyword">return</span> _self.apply(<span class="keyword">this</span>,<span class="built_in">arguments</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// after函数</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.after = <span class="function"><span class="keyword">function</span>(<span class="params">afterFn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> _self = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ret = _self.apply(<span class="keyword">this</span>,<span class="built_in">arguments</span>);</span><br><span class="line">    afterFn.apply(<span class="keyword">this</span>,<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="AOP应用实例一：数据上报"><a href="#AOP应用实例一：数据上报" class="headerlink" title="AOP应用实例一：数据上报"></a>AOP应用实例一：数据上报</h5><p>分离业务代码和数据统计代码，无论在什么语言中，都是AOP的经典应用之一。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btnLogin"</span>&gt;</span>点击打开登录浮层<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数据上报</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.before = <span class="function"><span class="keyword">function</span> (<span class="params">beforeFn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> _self = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    beforeFn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">    <span class="keyword">return</span> _self.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Function</span>.prototype.after = <span class="function"><span class="keyword">function</span> (<span class="params">afterFn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> _self = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ret = _self.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">    afterFn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> showLogin = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'打开登录浮层'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 依次输出：按钮点击之前上报  打开登录浮层  按钮点击之后上报</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'btnLogin'</span>).onclick = showLogin.before(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'按钮点击之前上报'</span>);</span><br><span class="line">&#125;).after(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'按钮点击之后上报'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="AOP应用实例一：插件式表单"><a href="#AOP应用实例一：插件式表单" class="headerlink" title="AOP应用实例一：插件式表单"></a>AOP应用实例一：插件式表单</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"username"</span>&gt;</span></span><br><span class="line">密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">id</span>=<span class="string">"password"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"loginBtn"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 插件式表单</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.before = <span class="function"><span class="keyword">function</span> (<span class="params">beforeFn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> _self = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(beforeFn.apply(<span class="keyword">this</span>,<span class="built_in">arguments</span>)===<span class="literal">false</span>) &#123;</span><br><span class="line">      <span class="comment">// 未验证通过，不再执行原函数</span></span><br><span class="line">      <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _self.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> username = <span class="built_in">document</span>.getElementById(<span class="string">'username'</span>);</span><br><span class="line"><span class="keyword">var</span> password = <span class="built_in">document</span>.getElementById(<span class="string">'password'</span>);</span><br><span class="line"><span class="keyword">var</span> loginBtn = <span class="built_in">document</span>.getElementById(<span class="string">'loginBtn'</span>);</span><br><span class="line"><span class="comment">// 验证函数</span></span><br><span class="line"><span class="keyword">var</span> validate = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(username.value === <span class="string">''</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'用户名不能为空'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(password.value === <span class="string">''</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'密码不能为空'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 登录ajax</span></span><br><span class="line"><span class="keyword">var</span> formSubmit = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> params = &#123;</span><br><span class="line">    username: username,</span><br><span class="line">    password: password</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'登录ajax...'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 登录按钮点击</span></span><br><span class="line">formSubmit = formSubmit.before(validate);</span><br><span class="line">loginBtn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  formSubmit();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h3><p>::: tip<br>状态模式的关键是区分事物内部的状态，事物内部状态的改变往往会带来事物的行为改变。<br>:::</p><h4 id="初识状态模式"><a href="#初识状态模式" class="headerlink" title="初识状态模式"></a>初识状态模式</h4><p>我们想象这样一个场景：有一个电灯，电灯上面只有一个开关。当电灯开着的时候，我们按一下开关，电灯会切换到关闭状态;再按一次开关，电灯又将被打开。同一个开关按钮，在不同的状态下，表现出来的行为是不一样的。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 电灯类</span></span><br><span class="line"><span class="keyword">var</span> Light = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.state = <span class="string">'off'</span>;</span><br><span class="line">  <span class="keyword">this</span>.button = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 初始化方法</span></span><br><span class="line">Light.prototype.init = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> button = <span class="built_in">document</span>.createElement(<span class="string">'button'</span>);</span><br><span class="line">  <span class="keyword">var</span> _self = <span class="keyword">this</span>;</span><br><span class="line">  button.innerHTML = <span class="string">'开关'</span>;</span><br><span class="line">  <span class="keyword">this</span>.button = <span class="built_in">document</span>.body.appendChild(button);</span><br><span class="line">  <span class="keyword">this</span>.button.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    _self.buttonPresssed();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 开关点击</span></span><br><span class="line">Light.prototype.buttonPresssed = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.state == <span class="string">'off'</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.state = <span class="string">'on'</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'开灯'</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">this</span>.state == <span class="string">'on'</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.state = <span class="string">'off'</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'关灯'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> light = <span class="keyword">new</span> Light();</span><br><span class="line">light.init();</span><br></pre></td></tr></table></figure></p><p><strong>分析</strong>：现在看来，我们已经编写了一个强壮的状态机，这个状态机的逻辑既简单又缜密，看起来这段代码设计得无懈可击。但令人遗憾的是，这个世界上的电灯并非只有一种。许多酒店里有另外一种电灯，这种电灯也只有一种开关，但它的表现是：当第一次按下时，出现弱光;第二次按下时，出现强光；第三次按下时才是关闭电灯。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 改写开关点击事件</span></span><br><span class="line">Light.prototype.buttonPresssed = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.state == <span class="string">'off'</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.state = <span class="string">'weakLight'</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'弱光'</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">this</span>.state == <span class="string">'weakLight'</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.state = <span class="string">'strongLight'</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'强光'</span>);</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">this</span>.state == <span class="string">'strongLight'</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.state = <span class="string">'off'</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'关灯'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>再次分析</strong>：以上代码存在如下的缺点</p><ol><li>开关点击事件中的代码，违反了开放-封闭原则，每次新增或者修改<code>light</code>的状态，都要改动开关点击事件中的代码</li><li>所有跟状态有关的行为，都被封装在<code>buttonPresssed</code>方法里，后续如果再扩展一种灯光的话，将十分难以维护。</li><li>状态的切换不明显，仅仅表现在对<code>state</code>变量的赋值。</li><li><code>buttonPresssed</code>方法里，对于状态的判断，仅仅是<code>if-else</code>的堆砌，不利于后续的维护和扩展</li></ol><h4 id="状态模式改写电灯程序"><a href="#状态模式改写电灯程序" class="headerlink" title="状态模式改写电灯程序"></a>状态模式改写电灯程序</h4><p>::: tip<br>状态模式的核心是区分对象的状态，将电灯程序中三种状态分别设计成单独的一个类，与此种状态有关的行为被封装在这个类的内部。<br>:::<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 关闭</span></span><br><span class="line"><span class="keyword">var</span> OffLightState = <span class="function"><span class="keyword">function</span>(<span class="params">light</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.light = light;</span><br><span class="line">&#125;</span><br><span class="line">OffLightState.prototype.buttonPressed = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'弱光'</span>);</span><br><span class="line">  <span class="keyword">this</span>.light.setState(<span class="keyword">this</span>.light.weakLightState);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 弱光</span></span><br><span class="line"><span class="keyword">var</span> WeakLightState = <span class="function"><span class="keyword">function</span>(<span class="params">light</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.light = light;</span><br><span class="line">&#125;</span><br><span class="line">WeakLightState.prototype.buttonPressed = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'强光'</span>);</span><br><span class="line">  <span class="keyword">this</span>.light.setState(<span class="keyword">this</span>.light.strongLightState);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 强光</span></span><br><span class="line"><span class="keyword">var</span> StrongLightState = <span class="function"><span class="keyword">function</span>(<span class="params">light</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.light = light;</span><br><span class="line">&#125;</span><br><span class="line">StrongLightState.prototype.buttonPressed = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'关闭'</span>);</span><br><span class="line">  <span class="keyword">this</span>.light.setState(<span class="keyword">this</span>.light.offLightState);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 电灯类</span></span><br><span class="line"><span class="keyword">var</span> Light = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.offLightState = <span class="keyword">new</span> OffLightState(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">this</span>.weakLightState = <span class="keyword">new</span> WeakLightState(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">this</span>.strongLightState = <span class="keyword">new</span> StrongLightState(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">this</span>.button = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">Light.prototype.init = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> button = <span class="built_in">document</span>.createElement(<span class="string">'button'</span>);</span><br><span class="line">  <span class="keyword">var</span> _self = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">this</span>.button = <span class="built_in">document</span>.body.appendChild(button);</span><br><span class="line">  <span class="keyword">this</span>.button.innerHTML = <span class="string">'开关'</span>;</span><br><span class="line">  <span class="keyword">this</span>.currState = <span class="keyword">this</span>.offLightState;</span><br><span class="line">  <span class="keyword">this</span>.button.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    _self.currState.buttonPressed();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">Light.prototype.setState = <span class="function"><span class="keyword">function</span>(<span class="params">state</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.currState = state;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化测试</span></span><br><span class="line"><span class="keyword">var</span> light = <span class="keyword">new</span> Light();</span><br><span class="line">light.init();</span><br></pre></td></tr></table></figure></p><h4 id="状态模式的优缺点"><a href="#状态模式的优缺点" class="headerlink" title="状态模式的优缺点"></a>状态模式的优缺点</h4><p>现在我们已经大概掌握了状态模式，现在是时候来总结一下状态模式的优缺点了。<br><br><strong>优点</strong>：</p><ol><li>状态模式定义了状态和行为之间的关系，并将他们封装在一个类里。通过增加新的状态类，很容易增加新的状态和转换。</li><li>避免了<code>Context</code>无限膨胀，状态切换的逻辑被分布在状态类中，也去掉了<code>Context</code>中原本过多的条件分支</li><li>用对象代替字符串来记录当前状态，使得状态的切换更加一目了然。</li><li><code>Context</code>中的请求动作和状态类中封装的行为可以非常容易的独立变化而不影响。</li></ol><p><strong>缺点</strong>：</p><ol><li>状态模式会根据系统中多少种状态来定义多少个类，这将是一项枯燥和无味的过程</li><li>状态模式会将逻辑分散在各个状态类中，虽然可以避免条件分支语句判断，但也造成了逻辑分散，我们无法在一个地方就看出整个状态机的逻辑。<h3 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h3>:::tip<br>适配器模式的作用是解决两个软件实体间的接口不兼容的问题，使用适配器模式之后，原本由于接口不兼容而不能工作的两个软件实体可以一起工作。<br>:::</li></ol><h4 id="适配器运用-地图渲染"><a href="#适配器运用-地图渲染" class="headerlink" title="适配器运用:地图渲染"></a>适配器运用:地图渲染</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 谷歌地图</span></span><br><span class="line"><span class="keyword">var</span> googleMap = &#123;</span><br><span class="line">  show: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'开始渲染谷歌地图'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 百度地图</span></span><br><span class="line"><span class="keyword">var</span> baiduMap = &#123;</span><br><span class="line">  <span class="comment">// 地图渲染接口不兼容</span></span><br><span class="line">  display: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'开始渲染百度地图'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 百度地图适配器</span></span><br><span class="line"><span class="keyword">var</span> baiduMapAdapter = &#123;</span><br><span class="line">  show: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> baiduMap.display();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 地图渲染</span></span><br><span class="line"><span class="keyword">var</span> renderMap = <span class="function"><span class="keyword">function</span>(<span class="params">map</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(map.show <span class="keyword">instanceof</span> <span class="built_in">Function</span>) &#123;</span><br><span class="line">    map.show();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 测试地图渲染</span></span><br><span class="line">renderMap(googleMap);       <span class="comment">// 开始渲染谷歌地图</span></span><br><span class="line">renderMap(baiduMapAdapter); <span class="comment">// 开始渲染百度地图</span></span><br></pre></td></tr></table></figure><h2 id="设计原则和编程技巧"><a href="#设计原则和编程技巧" class="headerlink" title="设计原则和编程技巧"></a>设计原则和编程技巧</h2><p>前辈们总结的这些设计原则通常指<strong>单一职责原则</strong>、<strong>里氏转换原则</strong>、<strong>依赖倒置原则</strong>、<strong>接口隔离原则</strong>、<strong>合成复用原则</strong>和<strong>最少知识原则</strong>。</p><h3 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h3><p>::: tip<br>单一职责原则(SRP)体现为：一个对象(方法)只做一件事情，它被广泛运用在代理模式、迭代器模式、单例模式和装饰者模式中。<br>:::<br>单一职责原则被定义为”引起变化的原因”，如果我们有两个动机去改写一个方法，那么这个方法就具有两个职责。每一个职责的变化都是一个轴线，如果一个人承担了过多的职责，那么在需求变迁的过程中，需要改写这个方法的可能性就越大。</p><h4 id="何时应该分离职责"><a href="#何时应该分离职责" class="headerlink" title="何时应该分离职责"></a>何时应该分离职责</h4><p><code>SRP</code>原则是所有原则中最简单也是最难正确运用的原则之一，要明确的是，并不是所有的职责都应该一一分离。</p><ol><li>一方面，如果随着需求的变化，有两个职责总是同时变化，那就不比分离他们。比如Ajax请求时，创建xhr对象和发送xhr请求几乎总是在一起，那么创建xhr对象的职责和发送xhr请求的职责就没有必要分开。</li><li>另一方面，职责的变化轴线仅当他们确定会发生变化时才具有意义，即使两个职责已经被耦合在一起，但他们还没有发生改变的征兆，那么也许没有必要主动分离他们，在代码需要重构的时候再进行分离也不迟。</li></ol><h4 id="SRP原则的优缺点"><a href="#SRP原则的优缺点" class="headerlink" title="SRP原则的优缺点"></a>SRP原则的优缺点</h4><p><strong>优点</strong>：降低了单个类或者对象的复杂度，按照职责把对象分解成更小的粒度，这有助于代码的复用，也有利于进行单元测试。当一个职责需要变更的时候，不会影响到其他的职责。<br><br><strong>缺点</strong>：最明显的是会增加编写代码的复杂度，当我们按照职责把对象分解成更小的粒度之后，实际上也增大了这些对象之间相互联系的难度。</p><h3 id="最少知识原则"><a href="#最少知识原则" class="headerlink" title="最少知识原则"></a>最少知识原则</h3><p>::: tip<br>最少知识原则(LKP)说的是一个软件实体应当尽可能少的于其他实体发生相互作用，它常用在中介者模式和外观模式中。<br>:::</p><h4 id="指导思想"><a href="#指导思想" class="headerlink" title="指导思想"></a>指导思想</h4><p>最少知识原则要求我们在设计程序时，应当尽量减少对象之间的交互。<br><br>如果两个对象之间不必彼此通信，那么这两个对象就不要发生直接的相互联系，常见的做法是引入一个第三者对象，来承担这些对象之间的通信作用。如果一些对象需要向另一些对象发送请求，可以通过第三者对象来转发这些请求。</p><h3 id="开放-封闭原则"><a href="#开放-封闭原则" class="headerlink" title="开放-封闭原则"></a>开放-封闭原则</h3><p>::: tip<br>开放-封闭原则(OCP)是最重要的一条原则，它的定义是：软件实体(类，模块，函数)等应该是可以扩展的，但是不可修改。<br>:::</p><h4 id="指导思想-1"><a href="#指导思想-1" class="headerlink" title="指导思想"></a>指导思想</h4><p>当需要改变一个程序的功能或者给这个程序增加新功能的时候，可以使用增加代码的方式，但是不允许改动程序的源代码。</p><h4 id="设计模式中的开放-封闭原则"><a href="#设计模式中的开放-封闭原则" class="headerlink" title="设计模式中的开放-封闭原则"></a>设计模式中的开放-封闭原则</h4><ol><li>发布-订阅模式</li><li>模板方法模式</li><li>策略模式</li><li>代理模式</li><li>职责连模式</li></ol><h3 id="代码重构"><a href="#代码重构" class="headerlink" title="代码重构"></a>代码重构</h3><p>::: tip<br>模式和重构之间有着一种与生俱来的关系，从某种角度来看，设计模式的目的就是为许多重构行为提供目标。<br>:::</p><h4 id="提炼函数"><a href="#提炼函数" class="headerlink" title="提炼函数"></a>提炼函数</h4><p>如果在函数中有一段代码可以被独立出来，那我们最好把这些代码放进另一个独立的函数中，这是一种很常见的优化工作，这样做的好处主要有以下几点：</p><ol><li>避免出现超大的函数</li><li>独立出来的函数有助于代码复用</li><li>独立出来的函数更容易被覆写。</li><li>独立出来的函数如果拥有一个良好的命名，它本身就起到了注释的作用。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 提炼函数</span></span><br><span class="line"><span class="keyword">var</span> getUserInfo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  ajax(<span class="string">'http://xxx.com/userInfo'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'userId:'</span> + data.userId);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'userName:'</span>+ data.userName);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'nickName:'</span>+data.nickName);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 改写成</span></span><br><span class="line"><span class="keyword">var</span> getUserInfo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  ajax(<span class="string">'http://xxx.com/userInfo'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    printDetails(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> printDetails = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'userId:'</span> + data.userId);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'userName:'</span>+ data.userName);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'nickName:'</span>+data.nickName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="合并重复的条件片段"><a href="#合并重复的条件片段" class="headerlink" title="合并重复的条件片段"></a>合并重复的条件片段</h4><p>如果一个函数体内有一些条件分支语句，而这些条件分支语句内部散步了一些重复的代码，那么就有必要进行合并去重工作。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> paging = <span class="function"><span class="keyword">function</span>(<span class="params">currPage</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(currPage&lt;<span class="number">0</span>) &#123;</span><br><span class="line">    currPage = <span class="number">0</span>;</span><br><span class="line">    jump(currPage);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(currPage &gt;= totalPage) &#123;</span><br><span class="line">    currPage = totalPage;</span><br><span class="line">    jump(currPage);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    jump(currPage);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 改写成</span></span><br><span class="line"><span class="keyword">var</span> paging = <span class="function"><span class="keyword">function</span>(<span class="params">currPage</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(currPage&lt;<span class="number">0</span>) &#123;</span><br><span class="line">    currPage = <span class="number">0</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(currPage &gt;= totalPage) &#123;</span><br><span class="line">    currPage = totalPage;</span><br><span class="line">  &#125;</span><br><span class="line">  jump(currPage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="把条件分支语句提炼成函数"><a href="#把条件分支语句提炼成函数" class="headerlink" title="把条件分支语句提炼成函数"></a>把条件分支语句提炼成函数</h4><p>在程序设计中，复杂的条件分支语句是导致程序难以阅读和理解的重要原因，而且容易导致一个庞大的函数。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据季节打折</span></span><br><span class="line"><span class="keyword">var</span> getPrice = <span class="function"><span class="keyword">function</span>(<span class="params">price</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  <span class="keyword">if</span>(data.getMonth() &gt;=<span class="number">6</span> &amp;&amp; data.getMonth() &lt;= <span class="number">9</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> price * <span class="number">0.8</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> price;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 改写成</span></span><br><span class="line"><span class="keyword">var</span> isSummer = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  <span class="keyword">return</span> data.getMonth() &gt;=<span class="number">6</span> &amp;&amp; data.getMonth() &lt;= <span class="number">9</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> getPrice = <span class="function"><span class="keyword">function</span>(<span class="params">price</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(isSummer()) &#123;</span><br><span class="line">    <span class="keyword">return</span> price * <span class="number">0.8</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> price;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="合理利用循环"><a href="#合理利用循环" class="headerlink" title="合理利用循环"></a>合理利用循环</h4><p>在函数体内，如果有些代码实际上负责的是一些重复性的工作，那么合理利用循环不仅可以完成同样的功能，还可以是代码量更少。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> createXHR = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> xhr;</span><br><span class="line">  <span class="keyword">try</span>&#123;</span><br><span class="line">    xhr = <span class="keyword">new</span> ActiveXObject(<span class="string">'MSXML2.XMLHttp.6.0'</span>);</span><br><span class="line">  &#125;<span class="keyword">catch</span>(e) &#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">      xhr = <span class="keyword">new</span> ActiveXObject(<span class="string">'MSXML2.XMLHttp.3.0'</span>);</span><br><span class="line">    &#125;<span class="keyword">catch</span>(e) &#123;</span><br><span class="line">      xhr = <span class="keyword">new</span> ActiveXObject(<span class="string">'MSXML2.XMLHttp'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> xhr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 改写成</span></span><br><span class="line"><span class="keyword">var</span> createXHR = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> versions = [<span class="string">'MSXML2.XMLHttp.6.0'</span>,<span class="string">'MSXML2.XMLHttp.3.0'</span>,<span class="string">'MSXML2.XMLHttp'</span>];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>,version;version = version[i++];) &#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject(version); </span><br><span class="line">    &#125;<span class="keyword">catch</span>(e) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="提前让函数退出代替嵌套条件分支"><a href="#提前让函数退出代替嵌套条件分支" class="headerlink" title="提前让函数退出代替嵌套条件分支"></a>提前让函数退出代替嵌套条件分支</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> del = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> ret;</span><br><span class="line">  <span class="keyword">if</span>(!obj.isReadOnly) &#123;</span><br><span class="line">    <span class="keyword">if</span>(obj.isFolder) &#123;</span><br><span class="line">      ret = deleteFolder(obj);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(obj.isFile) &#123;</span><br><span class="line">      ret = deleteFile(obj);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 改写成</span></span><br><span class="line"><span class="keyword">var</span> del = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(obj.isReadOnly) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(obj.isFolder) &#123;</span><br><span class="line">    <span class="keyword">return</span> deleteFolder(obj);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(obj.isFile) &#123;</span><br><span class="line">    <span class="keyword">return</span> deleteFile(obj);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="传递对象参数代替过长的参数列表"><a href="#传递对象参数代替过长的参数列表" class="headerlink" title="传递对象参数代替过长的参数列表"></a>传递对象参数代替过长的参数列表</h4><p>有时候一个函数有可能接受多个参数，而参数的数量越多，函数就越难理解和使用。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> setUserInfo = <span class="function"><span class="keyword">function</span>(<span class="params">id,name,address,sex,mobile,qq</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'id='</span>+id);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'name='</span>+name);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'address='</span>+address);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'sex='</span>+sex);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'mobile='</span>+mobile);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'qq='</span>+qq);</span><br><span class="line">&#125;</span><br><span class="line">setUserInfo(<span class="number">1314</span>,<span class="string">'sven'</span>,<span class="string">'shenzhen'</span>,<span class="string">'male'</span>,<span class="string">'13886867272'</span>,<span class="string">'33223311'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 改写成</span></span><br><span class="line"><span class="keyword">var</span> setUserInfo = <span class="function"><span class="keyword">function</span>(<span class="params">userInfo</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'id='</span>+userInfo.id);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'name='</span>+userInfo.name);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'address='</span>+userInfo.address);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'sex='</span>+userInfo.sex);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'mobile='</span>+userInfo.mobile);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'qq='</span>+userInfo.qq);</span><br><span class="line">&#125;</span><br><span class="line">setUserInfo(&#123;</span><br><span class="line">  id:<span class="number">1314</span>,</span><br><span class="line">  name:<span class="string">'sven'</span>,</span><br><span class="line">  address:<span class="string">'shenzhen'</span>,</span><br><span class="line">  sex:<span class="string">'male'</span>,</span><br><span class="line">  mobile:<span class="string">'13886867272'</span>,</span><br><span class="line">  qq:<span class="string">'33223311'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h4 id="合理使用链式调用"><a href="#合理使用链式调用" class="headerlink" title="合理使用链式调用"></a>合理使用链式调用</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> User = &#123;</span><br><span class="line">  id: <span class="literal">null</span>,</span><br><span class="line">  name: <span class="literal">null</span>,</span><br><span class="line">  setId: <span class="function"><span class="keyword">function</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.id = id;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  setName: <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(User.setId(<span class="number">1314</span>).setName(<span class="string">'sven'</span>));</span><br></pre></td></tr></table></figure><p><strong>代码分析</strong>：链式调用的方式并不会造成太多阅读上的困难，也确实能省下一些字符和中间变量，但节省下来的字符数量同样是微不足道的。<br><br>链式调用带来的坏处就是在调试的时候非常不方便，如果有一条链有错误出现，必须得先把这条链拆开才能加上一些调试log或者断点，这样才能定位错误出现的地方。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JavaScript设计模式与开发实践&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
    
      <category term="基础知识" scheme="/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>js工具库licia（二）</title>
    <link href="/2022/02/17/js%E5%B7%A5%E5%85%B7%E5%BA%93licia%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>/2022/02/17/js工具库licia（二）/</id>
    <published>2022-02-17T01:34:21.000Z</published>
    <updated>2022-02-17T01:59:23.876Z</updated>
    
    <content type="html"><![CDATA[<p>licia使用文档(1.34.0)<br><a id="more"></a></p><h2 id><a href="#" class="headerlink" title="$"></a>$</h2><p>类似 jQuery 的 dom 操作库。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">namespace $ {<br>    class $ extends Select {<br>        find(selector: string): $;<br>        each(fn: types.AnyFn): $;<br>        offset(): $offset.IOffset;<br>        hide(): $;<br>        show(): $;<br>        first(): $;<br>        last(): $;<br>        get(index: number): Element;<br>        eq(index: number): $;<br>        on(event: string, selector: string, handler: types.AnyFn): $;<br>        on(event: string, handler: types.AnyFn): $;<br>        off(event: string, selector: string, handler: types.AnyFn): $;<br>        off(event: string, handler: types.AnyFn): $;<br>        html(): string;<br>        html(value: string): $;<br>        text(): string;<br>        text(value: string): $;<br>        val(): string;<br>        val(value: string): $;<br>        css(name: string): string;<br>        css(name: string, value: string): $;<br>        css(properties: types.PlainObj&lt;string | number&gt;): $;<br>        attr(name: string): string;<br>        attr(name: string, value: string): $;<br>        attr(attributes: types.PlainObj&lt;string&gt;): $;<br>        data(name: string): string;<br>        data(name: string, value: string): $;<br>        data(attributes: types.PlainObj&lt;string&gt;): $;<br>        rmAttr(name: string): $;<br>        remove(): $;<br>        addClass(name: string | string[]): $;<br>        rmClass(name: string): $;<br>        toggleClass(name: string): $;<br>        hasClass(name: string): boolean;<br>        parent(): $;<br>        append(content: string | Element): $;<br>        prepend(content: string | Element): $;<br>        before(content: string | Element): $;<br>        after(content: string | Element): $;<br>    }<br>}<br>declare function $(selector: string | Element | Document): $.$;</code><br></pre><br></details><h3 id="支持方法列表"><a href="#支持方法列表" class="headerlink" title="支持方法列表"></a>支持方法列表</h3><p>offset, hide, show, first, last, get, eq, on, off, html, text, val, css, attr,<br>data, rmAttr, remove, addClass, rmClass, toggleClass, hasClass, append, prepend,<br>before, after</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> $btn = $(<span class="string">'#btn'</span>);</span><br><span class="line">$btn.html(<span class="string">'eustia'</span>);</span><br><span class="line">$btn.addClass(<span class="string">'btn'</span>);</span><br><span class="line">$btn.show();</span><br><span class="line">$btn.on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Do something...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="attr"><a href="#attr" class="headerlink" title="$attr"></a>$attr</h2><p>操作元素属性。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">namespace $attr {<br>    function remove(element: $safeEls.El, name: string): void;<br>}<br>function $attr(<br>    element: $safeEls.El,<br>    name: string,<br>    value: string<br>): void;<br>function $attr(<br>    element: $safeEls.El,<br>    attributes: types.PlainObj&lt;string&gt;<br>): void;<br>function $attr(element: $safeEls.El, name: string): string;</code><br></pre><br></details><p>获取元素集中第一个元素的指定属性值。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>element</td><td>目标元素集</td></tr><tr><td>name</td><td>属性名</td></tr><tr><td>返回值</td><td>第一个元素的属性值</td></tr></tbody></table><p>设置元素集中一个或多个属性的值。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>element</td><td>目标元素集</td></tr><tr><td>name</td><td>属性名</td></tr><tr><td>val</td><td>属性值</td></tr></tbody></table><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>element</td><td>目标元素集</td></tr><tr><td>attributes</td><td>包含多个要设置属性-值对的对象</td></tr></tbody></table><h3 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h3><p>对元素集中的所有元素，移除指定的属性。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>element</td><td>目标元素集</td></tr><tr><td>name</td><td>属性名</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$attr(<span class="string">'#test'</span>, <span class="string">'attr1'</span>, <span class="string">'test'</span>);</span><br><span class="line">$attr(<span class="string">'#test'</span>, <span class="string">'attr1'</span>); <span class="comment">// -&gt; test</span></span><br><span class="line">$attr.remove(<span class="string">'#test'</span>, <span class="string">'attr1'</span>);</span><br><span class="line">$attr(<span class="string">'#test'</span>, &#123;</span><br><span class="line">    attr1: <span class="string">'test'</span>,</span><br><span class="line">    attr2: <span class="string">'test'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="class"><a href="#class" class="headerlink" title="$class"></a>$class</h2><p>操作元素 class。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">const $class: {<br>    add(element: $safeEls.El, name: string | string[]): void;<br>    has(element: $safeEls.El, name: string): boolean;<br>    toggle(element: $safeEls.El, name: string): void;<br>    remove(element: $safeEls.El, name: string): void;<br>};</code><br></pre><br></details><h3 id="add"><a href="#add" class="headerlink" title="add"></a>add</h3><p>对元素集中的所有元素，添加指定的 class。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>element</td><td>目标元素集</td></tr><tr><td>names</td><td>添加的 class</td></tr></tbody></table><h3 id="has"><a href="#has" class="headerlink" title="has"></a>has</h3><p>判断元素集中是否有元素含有指定的 class。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>element</td><td>目标元素集</td></tr><tr><td>name</td><td>class 值</td></tr><tr><td>返回值</td><td>如果有，返回真</td></tr></tbody></table><h3 id="toggle"><a href="#toggle" class="headerlink" title="toggle"></a>toggle</h3><p>对于元素集中的每个元素，如果含有指定的 class 就将其删除，反之则添加。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>element</td><td>目标元素集</td></tr><tr><td>name</td><td>class 值</td></tr></tbody></table><h3 id="remove-1"><a href="#remove-1" class="headerlink" title="remove"></a>remove</h3><p>对于元素集中的所有元素，移除指定的 class。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>element</td><td>目标元素集</td></tr><tr><td>name</td><td>class 值</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$<span class="class"><span class="keyword">class</span>.<span class="title">add</span>('#<span class="title">test</span>', '<span class="title">class1</span>')</span>;</span><br><span class="line">$class.add('#test', ['class1', 'class2']);</span><br><span class="line">$<span class="class"><span class="keyword">class</span>.<span class="title">has</span>('#<span class="title">test</span>', '<span class="title">class1</span>')</span>; <span class="comment">// -&gt; true</span></span><br><span class="line">$<span class="class"><span class="keyword">class</span>.<span class="title">remove</span>('#<span class="title">test</span>', '<span class="title">class1</span>')</span>;</span><br><span class="line">$<span class="class"><span class="keyword">class</span>.<span class="title">has</span>('#<span class="title">test</span>', '<span class="title">class1</span>')</span>; <span class="comment">// -&gt; false</span></span><br><span class="line">$<span class="class"><span class="keyword">class</span>.<span class="title">toggle</span>('#<span class="title">test</span>', '<span class="title">class1</span>')</span>;</span><br><span class="line">$<span class="class"><span class="keyword">class</span>.<span class="title">has</span>('#<span class="title">test</span>', '<span class="title">class1</span>')</span>; <span class="comment">// -&gt; true</span></span><br></pre></td></tr></table></figure><h2 id="css"><a href="#css" class="headerlink" title="$css"></a>$css</h2><p>操作元素样式。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function $css(element: $safeEls.El, name: string): string;<br>function $css(<br>    element: $safeEls.El,<br>    name: string,<br>    val: string<br>): void;<br>function $css(<br>    element: $safeEls.El,<br>    properties: types.PlainObj&lt;string | number&gt;<br>): void;</code><br></pre><br></details><p>获取元素集中第一个元素的指定样式。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>element</td><td>目标元素集</td></tr><tr><td>name</td><td>样式名</td></tr><tr><td>返回值</td><td>样式值</td></tr></tbody></table><p>设置元素集中一个或多个样式的值。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>element</td><td>目标元素集</td></tr><tr><td>name</td><td>样式名</td></tr><tr><td>val</td><td>样式值</td></tr></tbody></table><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>element</td><td>目标元素集</td></tr><tr><td>properties</td><td>包含多个要设置样式-值对的对象</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$css(<span class="string">'#test'</span>, &#123;</span><br><span class="line">    color: <span class="string">'#fff'</span>,</span><br><span class="line">    background: <span class="string">'black'</span>,</span><br><span class="line">    opacity: <span class="number">0.5</span></span><br><span class="line">&#125;);</span><br><span class="line">$css(<span class="string">'#test'</span>, <span class="string">'display'</span>, <span class="string">'block'</span>);</span><br><span class="line">$css(<span class="string">'#test'</span>, <span class="string">'color'</span>); <span class="comment">// -&gt; #fff</span></span><br></pre></td></tr></table></figure><h2 id="data"><a href="#data" class="headerlink" title="$data"></a>$data</h2><p>同 $attr，自动给属性名加 data- 前缀。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function $data(<br>    element: $safeEls.El,<br>    name: string,<br>    value: string<br>): void;<br>function $data(<br>    element: $safeEls.El,<br>    attributes: types.PlainObj&lt;string&gt;<br>): void;<br>function $data(element: $safeEls.El, name: string): string;</code><br></pre><br></details><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$data(<span class="string">'#test'</span>, <span class="string">'attr1'</span>, <span class="string">'eustia'</span>);</span><br></pre></td></tr></table></figure><h2 id="event"><a href="#event" class="headerlink" title="$event"></a>$event</h2><p>给指定 dom 元素绑定事件。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">const $event: {<br>    on(<br>        element: $safeEls.El,<br>        event: string,<br>        selector: string,<br>        handler: types.AnyFn<br>    ): void;<br>    on(element: $safeEls.El, event: string, handler: types.AnyFn): void;<br>    off(<br>        element: $safeEls.El,<br>        event: string,<br>        selector: string,<br>        handler: types.AnyFn<br>    ): void;<br>    off(element: $safeEls.El, event: string, handler: types.AnyFn): void;<br>};</code><br></pre><br></details><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clickHandler</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Do something...</span></span><br><span class="line">&#125;</span><br><span class="line">$event.on(<span class="string">'#test'</span>, <span class="string">'click'</span>, clickHandler);</span><br><span class="line">$event.off(<span class="string">'#test'</span>, <span class="string">'click'</span>, clickHandler);</span><br></pre></td></tr></table></figure><h2 id="insert"><a href="#insert" class="headerlink" title="$insert"></a>$insert</h2><p>插入 html 到不同位置。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">namespace $insert {<br>    type IInsert = (element: $safeEls.El, content: string | Element) =&gt; void;<br>}<br>const $insert: {<br>    before: $insert.IInsert;<br>    after: $insert.IInsert;<br>    append: $insert.IInsert;<br>    prepend: $insert.IInsert;<br>};</code><br></pre><br></details><h3 id="before"><a href="#before" class="headerlink" title="before"></a>before</h3><p>插入 html 到元素前。</p><h3 id="after"><a href="#after" class="headerlink" title="after"></a>after</h3><p>插入 html 到元素后。</p><h3 id="prepend"><a href="#prepend" class="headerlink" title="prepend"></a>prepend</h3><p>插入 html 到元素内部前。</p><h3 id="append"><a href="#append" class="headerlink" title="append"></a>append</h3><p>插入 html 到元素内部后。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>element</td><td>目标元素集</td></tr><tr><td>content</td><td>html 字符串或元素</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &lt;div id="test"&gt;&lt;div class="mark"&gt;&lt;/div&gt;&lt;/div&gt;</span></span><br><span class="line">$insert.before(<span class="string">'#test'</span>, <span class="string">'&lt;div&gt;licia&lt;/div&gt;'</span>);</span><br><span class="line"><span class="comment">// -&gt; &lt;div&gt;licia&lt;/div&gt;&lt;div id="test"&gt;&lt;div class="mark"&gt;&lt;/div&gt;&lt;/div&gt;</span></span><br><span class="line">$insert.after(<span class="string">'#test'</span>, <span class="string">'&lt;div&gt;licia&lt;/div&gt;'</span>);</span><br><span class="line"><span class="comment">// -&gt; &lt;div id="test"&gt;&lt;div class="mark"&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;licia&lt;/div&gt;</span></span><br><span class="line">$insert.prepend(<span class="string">'#test'</span>, <span class="string">'&lt;div&gt;licia&lt;/div&gt;'</span>);</span><br><span class="line"><span class="comment">// -&gt; &lt;div id="test"&gt;&lt;div&gt;licia&lt;/div&gt;&lt;div class="mark"&gt;&lt;/div&gt;&lt;/div&gt;</span></span><br><span class="line">$insert.append(<span class="string">'#test'</span>, <span class="string">'&lt;div&gt;licia&lt;/div&gt;'</span>);</span><br><span class="line"><span class="comment">// -&gt; &lt;div id="test"&gt;&lt;div class="mark"&gt;&lt;/div&gt;&lt;div&gt;licia&lt;/div&gt;&lt;/div&gt;</span></span><br></pre></td></tr></table></figure><h2 id="offset"><a href="#offset" class="headerlink" title="$offset"></a>$offset</h2><p>获取元素在文档中的位置。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">namespace $offset {<br>    interface IOffset {<br>        left: number;<br>        top: number;<br>        width: number;<br>        height: number;<br>    }<br>}<br>function $offset(element: $safeEls.El): $offset.IOffset;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>element</td><td>目标元素集</td></tr><tr><td>返回值</td><td>元素位置</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$offset(<span class="string">'#test'</span>); <span class="comment">// -&gt; &#123;left: 0, top: 0, width: 0, height: 0&#125;</span></span><br></pre></td></tr></table></figure><h2 id="property"><a href="#property" class="headerlink" title="$property"></a>$property</h2><p>设置或获取元素的 html， text，val 等值。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">namespace $property {<br>    interface IProperty {<br>        (element: $safeEls.El, value: string): void;<br>        (element: $safeEls.El): string;<br>    }<br>}<br>const $property: {<br>    html: $property.IProperty;<br>    val: $property.IProperty;<br>    text: $property.IProperty;<br>};</code><br></pre><br></details><h3 id="html"><a href="#html" class="headerlink" title="html"></a>html</h3><p>设置或获取元素的 html 值。</p><h3 id="text"><a href="#text" class="headerlink" title="text"></a>text</h3><p>设置或获取元素的 text 值。</p><h3 id="val"><a href="#val" class="headerlink" title="val"></a>val</h3><p>设置或获取元素的 val 值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$property.html(<span class="string">'#test'</span>, <span class="string">'licia'</span>);</span><br><span class="line">$property.html(<span class="string">'#test'</span>); <span class="comment">// -&gt; licia</span></span><br></pre></td></tr></table></figure><h2 id="remove-2"><a href="#remove-2" class="headerlink" title="$remove"></a>$remove</h2><p>移除指定元素集。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function $remove(element: $safeEls.El);</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>element</td><td>目标元素集</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$remove(<span class="string">'#test'</span>);</span><br></pre></td></tr></table></figure><h2 id="safeEls"><a href="#safeEls" class="headerlink" title="$safeEls"></a>$safeEls</h2><p>将值转换为数组，如果值为字符串，使用 querySelector 获取元素集。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">namespace $safeEls {<br>    type El = Element | Element[] | NodeListOf&lt;Element&gt; | string;<br>}<br>function $safeEls(val: $safeEls.El): Element[];</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>val</td><td>要转换的值</td></tr><tr><td>返回值</td><td>元素集</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$safeEls(<span class="built_in">document</span>.querySelector(<span class="string">'.test'</span>));</span><br><span class="line">$safeEls(<span class="built_in">document</span>.querySelectorAll(<span class="string">'.test'</span>));</span><br><span class="line">$safeEls(<span class="string">'.test'</span>); <span class="comment">// -&gt; Array of elements with test class</span></span><br></pre></td></tr></table></figure><h2 id="show"><a href="#show" class="headerlink" title="$show"></a>$show</h2><p>显示元素。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function $show(element: $safeEls.El): void;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>element</td><td>目标元素集</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$show(<span class="string">'#test'</span>);</span><br></pre></td></tr></table></figure><h2 id="Benchmark"><a href="#Benchmark" class="headerlink" title="Benchmark"></a>Benchmark</h2><p>JavaScript 基准测试。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">namespace Benchmark {<br>    interface IOptions {<br>        minTime?: number;<br>        maxTime?: number;<br>        minSamples?: number;<br>        delay?: number;<br>        name?: string;<br>    }<br>    interface IResult {<br>        name: string;<br>        mean: number;<br>        variance: number;<br>        deviation: number;<br>        sem: number;<br>        moe: number;<br>        rme: number;<br>        hz: number;<br>        sample: number[];<br>    }<br>}<br>class Benchmark {<br>    constructor(fn: types.AnyFn, options?: Benchmark.IOptions);<br>    run(): Promise&lt;Benchmark.IResult&gt;;<br>    static all(<br>        benches: Array&lt;types.AnyFn | Benchmark&gt;,<br>        options?: Benchmark.IOptions<br>    ): Promise&lt;Benchmark.IResult[]&gt;;<br>}</code><br></pre><br></details><h3 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h3><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>fn</td><td>要测试的代码</td></tr><tr><td>options</td><td>测试选项</td></tr></tbody></table><p>可用选项：</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>minTime=50</td><td>用于减少误差的时间</td></tr><tr><td>maxTime=5000</td><td>测试运行最大时间</td></tr><tr><td>minSamples=5</td><td>最小样本数量</td></tr><tr><td>delay=5</td><td>测试周期间隔</td></tr><tr><td>name</td><td>测试名称</td></tr></tbody></table><h3 id="run"><a href="#run" class="headerlink" title="run"></a>run</h3><p>运行基准测试，返回 promise。</p><h3 id="all"><a href="#all" class="headerlink" title="all"></a>all</h3><p>[static] 运行多个基准测试。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> benchmark = <span class="keyword">new</span> Benchmark(</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        !!<span class="string">'Hello World!'</span>.match(<span class="regexp">/o/</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        maxTime: <span class="number">1500</span></span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line">benchmark.run().then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">String</span>(result));</span><br><span class="line">&#125;);</span><br><span class="line">Benchmark.all([</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">regExp</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        /o/.test(<span class="string">'Hello World!'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">indexOf</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="string">'Hello World!'</span>.indexOf(<span class="string">'o'</span>) &gt; <span class="number">-1</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">match</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        !!<span class="string">'Hello World!'</span>.match(<span class="regexp">/o/</span>);</span><br><span class="line">    &#125;</span><br><span class="line">]).then(<span class="function"><span class="params">results</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">String</span>(results));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Blob"><a href="#Blob" class="headerlink" title="Blob"></a>Blob</h2><p>如果支持 Blob，直接返回 Blob，否则使用 BlobBuilder 进行兼容。</p><h3 id="constructor"><a href="#constructor" class="headerlink" title="constructor"></a>constructor</h3><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>parts</td><td>Blob 分片</td></tr><tr><td>options</td><td>选项</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> blob = <span class="keyword">new</span> Blob([]);</span><br></pre></td></tr></table></figure><h2 id="BloomFilter"><a href="#BloomFilter" class="headerlink" title="BloomFilter"></a>BloomFilter</h2><p>布隆过滤器实现。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">class BloomFilter {<br>    constructor(size?: number, k?: number);<br>    add(val: string): void;<br>    test(val: string): boolean;<br>}</code><br></pre><br></details><h3 id="constructor-1"><a href="#constructor-1" class="headerlink" title="constructor"></a>constructor</h3><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>size=1024</td><td>桶数目</td></tr><tr><td>k=3</td><td>哈希函数数目</td></tr></tbody></table><h3 id="add-1"><a href="#add-1" class="headerlink" title="add"></a>add</h3><p>添加元素。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>val</td><td>要加的值</td></tr></tbody></table><h3 id="test"><a href="#test" class="headerlink" title="test"></a>test</h3><p>检测元素是否在过滤器中。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>val</td><td>要检查的值</td></tr><tr><td>返回值</td><td>如果可能在返回真，如果绝对不在返回假</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bloom = <span class="keyword">new</span> BloomFilter(<span class="number">256</span>, <span class="number">3</span>);</span><br><span class="line">bloom.add(<span class="string">'Bruce Wayne'</span>);</span><br><span class="line">bloom.add(<span class="string">'Clark Kent'</span>);</span><br><span class="line">bloom.test(<span class="string">'Clark Kent'</span>); <span class="comment">// -&gt; true</span></span><br><span class="line">bloom.test(<span class="string">'Bruce Wayne'</span>); <span class="comment">// -&gt; true</span></span><br><span class="line">bloom.test(<span class="string">'Tony Stark'</span>); <span class="comment">// -&gt; false</span></span><br></pre></td></tr></table></figure><h2 id="Caseless"><a href="#Caseless" class="headerlink" title="Caseless"></a>Caseless</h2><p>修复对象的属性值时，无需关心键值的大小写情况。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">class Caseless {<br>    constructor(obj: any);<br>    getKey(key: string): string | void;<br>    set(key: string, val: any): void;<br>    get(key: string): any;<br>    remove(key: string): void;<br>    has(key: string): boolean;<br>}</code><br></pre><br></details><h3 id="constructor-2"><a href="#constructor-2" class="headerlink" title="constructor"></a>constructor</h3><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>obj</td><td>目标对象</td></tr></tbody></table><h3 id="getKey"><a href="#getKey" class="headerlink" title="getKey"></a>getKey</h3><p>获取原始键值。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>key</td><td>不区分大小写的键名</td></tr><tr><td>返回值</td><td>原始键值</td></tr></tbody></table><h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><p>设置值。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>key</td><td>不区分大小写的键名</td></tr><tr><td>val</td><td>要设置的值</td></tr></tbody></table><h3 id="get"><a href="#get" class="headerlink" title="get"></a>get</h3><p>获取值。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>key</td><td>不区分大小写的键名</td></tr><tr><td>返回值</td><td>键值</td></tr></tbody></table><h3 id="remove-3"><a href="#remove-3" class="headerlink" title="remove"></a>remove</h3><p>移除值。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>key</td><td>不区分大小写的键名</td></tr></tbody></table><h3 id="has-1"><a href="#has-1" class="headerlink" title="has"></a>has</h3><p>判断是否存在给定的键名。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>key</td><td>不区分大小写的键名</td></tr><tr><td>返回值</td><td>如果有，返回真</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> headers = &#123; <span class="string">'Content-Type'</span>: <span class="string">'text/javascript'</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> c = <span class="keyword">new</span> Caseless(headers);</span><br><span class="line">c.set(<span class="string">'content-type'</span>, <span class="string">'text/css'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(headers); <span class="comment">// -&gt; &#123; 'Content-Type': 'text/css' &#125;</span></span><br><span class="line">c.getKey(<span class="string">'content-type'</span>); <span class="comment">// -&gt; 'Content-Type'</span></span><br><span class="line">c.remove(<span class="string">'content-type'</span>);</span><br><span class="line">c.has(<span class="string">'content-type'</span>); <span class="comment">// -&gt; false</span></span><br></pre></td></tr></table></figure><h2 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h2><p>创建 JavaScript 类。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">namespace Class {<br>    class Base {<br>        toString(): string;<br>    }<br>    class IConstructor extends Base {<br>        constructor(…args: any[]);<br>        static extend(methods: any, statics: any): IConstructor;<br>        static inherits(Class: types.AnyFn): void;<br>        static methods(methods: any): IConstructor;<br>        static statics(statics: any): IConstructor;<br>        [method: string]: any;<br>    }<br>}<br>function Class(methods: any, statics?: any): Class.IConstructor;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>methods</td><td>公有方法</td></tr><tr><td>statics</td><td>静态方法</td></tr><tr><td>返回值</td><td>用于创建实例的函数</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> People = Class(&#123;</span><br><span class="line">    initialize: <span class="function"><span class="keyword">function</span> <span class="title">People</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;,</span><br><span class="line">    introduce: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'I am '</span> + <span class="keyword">this</span>.name + <span class="string">', '</span> + <span class="keyword">this</span>.age + <span class="string">' years old.'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Student = People.extend(</span><br><span class="line">    &#123;</span><br><span class="line">        initialize: <span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name, age, school</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.callSuper(People, <span class="string">'initialize'</span>, <span class="built_in">arguments</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.school = school;</span><br><span class="line">        &#125;,</span><br><span class="line">        introduce: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="keyword">this</span>.callSuper(People, <span class="string">'introduce'</span>) +</span><br><span class="line">                <span class="string">'\n I study at '</span> +</span><br><span class="line">                <span class="keyword">this</span>.school +</span><br><span class="line">                <span class="string">'.'</span></span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        is: <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> obj <span class="keyword">instanceof</span> Student;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = <span class="keyword">new</span> Student(<span class="string">'allen'</span>, <span class="number">17</span>, <span class="string">'Hogwarts'</span>);</span><br><span class="line">a.introduce(); <span class="comment">// -&gt; 'I am allen, 17 years old. \n I study at Hogwarts.'</span></span><br><span class="line">Student.is(a); <span class="comment">// -&gt; true</span></span><br></pre></td></tr></table></figure><h2 id="Color"><a href="#Color" class="headerlink" title="Color"></a>Color</h2><p>颜色转换。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">namespace Color {<br>    interface IColor {<br>        val: number[];<br>        model: string;<br>    }<br>}<br>class Color {<br>    constructor(color: string | Color.IColor);<br>    toRgb(): string;<br>    toHex(): string;<br>    toHsl(): string;<br>    static parse(colorStr: string): Color.IColor;<br>}</code><br></pre><br></details><h3 id="constructor-3"><a href="#constructor-3" class="headerlink" title="constructor"></a>constructor</h3><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>color</td><td>要转换的颜色</td></tr></tbody></table><h3 id="toRgb"><a href="#toRgb" class="headerlink" title="toRgb"></a>toRgb</h3><p>获取颜色 rgb 格式。</p><h3 id="toHex"><a href="#toHex" class="headerlink" title="toHex"></a>toHex</h3><p>获取颜色十六进制格式。</p><h3 id="toHsl"><a href="#toHsl" class="headerlink" title="toHsl"></a>toHsl</h3><p>获取颜色 hsl 格式。</p><h3 id="parse"><a href="#parse" class="headerlink" title="parse"></a>parse</h3><p>【静态】将颜色字符串转换为含有值及颜色模型的对象。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>color</td><td>颜色字符串</td></tr><tr><td>返回值</td><td>含有值及颜色模型的对象</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Color.parse(<span class="string">'rgb(170, 287, 204, 0.5)'</span>); <span class="comment">// -&gt; &#123;val: [170, 187, 204, 0.5], model: 'rgb'&#125;</span></span><br><span class="line"><span class="keyword">const</span> color = <span class="keyword">new</span> Color(<span class="string">'#abc'</span>);</span><br><span class="line">color.toRgb(); <span class="comment">// -&gt; 'rgb(170, 187, 204)'</span></span><br><span class="line">color.toHsl(); <span class="comment">// -&gt; 'hsl(210, 25%, 73%)'</span></span><br></pre></td></tr></table></figure><h2 id="Delegator"><a href="#Delegator" class="headerlink" title="Delegator"></a>Delegator</h2><p>对象委托。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">class Delegator {<br>    constructor(host: object, target: object | string);<br>    method(name: string, target?: string): Delegator;<br>    getter(name: string, target?: string): Delegator;<br>    setter(name: string, target?: string): Delegator;<br>    access(name: string, target?: string): Delegator;<br>}</code><br></pre><br></details><h3 id="constructor-4"><a href="#constructor-4" class="headerlink" title="constructor"></a>constructor</h3><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>host</td><td>宿主对象</td></tr><tr><td>target</td><td>委托目标</td></tr></tbody></table><h3 id="method"><a href="#method" class="headerlink" title="method"></a>method</h3><p>允许在宿主对象上访问目标方法。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>name</td><td>宿主方法名</td></tr><tr><td>target=name</td><td>目标方法名</td></tr></tbody></table><h3 id="getter"><a href="#getter" class="headerlink" title="getter"></a>getter</h3><p>创建 getter。</p><h3 id="setter"><a href="#setter" class="headerlink" title="setter"></a>setter</h3><p>创建 setter。</p><h3 id="access"><a href="#access" class="headerlink" title="access"></a>access</h3><p>创建 accessor，效果等于同时调用 setter 和 getter。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> host = &#123;</span><br><span class="line">    target: &#123;</span><br><span class="line">        a() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'a'</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        b: <span class="string">'b'</span>,</span><br><span class="line">        c: <span class="string">'c'</span>,</span><br><span class="line">        d: <span class="string">'d'</span>,</span><br><span class="line">        e() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'e'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> delegator = <span class="keyword">new</span> Delegator(host, <span class="string">'target'</span>);</span><br><span class="line">delegator</span><br><span class="line">    .method(<span class="string">'a'</span>)</span><br><span class="line">    .getter(<span class="string">'b'</span>)</span><br><span class="line">    .setter(<span class="string">'c'</span>)</span><br><span class="line">    .access(<span class="string">'d'</span>);</span><br><span class="line">host.a(); <span class="comment">// -&gt; 'a'</span></span><br><span class="line">host.b; <span class="comment">// -&gt; 'b'</span></span><br><span class="line">host.c = <span class="number">5</span>;</span><br><span class="line">host.target.c; <span class="comment">// -&gt; 5</span></span><br><span class="line">host.d; <span class="comment">// -&gt; 'd'</span></span><br><span class="line">host.d = <span class="number">5</span>;</span><br><span class="line">host.d; <span class="comment">// -&gt; 5</span></span><br></pre></td></tr></table></figure><h2 id="Dispatcher"><a href="#Dispatcher" class="headerlink" title="Dispatcher"></a>Dispatcher</h2><p>Flux 调度器。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">class Dispatcher {<br>    dispatch(payload: any);<br>    register(cb: types.AnyFn): void;<br>    waitFor(ids: string[]): void;<br>    unregister(id: string): void;<br>    isDispatching(): boolean;<br>}</code><br></pre><br></details><p><a href="https://facebook.github.io/flux/docs/dispatcher.html" target="_blank" rel="noopener">相关文档</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dispatcher = <span class="keyword">new</span> Dispatcher();</span><br><span class="line"></span><br><span class="line">dispatcher.register(<span class="function"><span class="keyword">function</span>(<span class="params">payload</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (</span><br><span class="line">        payload.actionType</span><br><span class="line">        <span class="comment">// Do something</span></span><br><span class="line">    ) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">dispatcher.dispatch(&#123;</span><br><span class="line">    actionType: <span class="string">'action'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Emitter"><a href="#Emitter" class="headerlink" title="Emitter"></a>Emitter</h2><p>提供观察者模式的 Event emitter 类。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">class Emitter {<br>    on(event: string, listener: types.AnyFn): Emitter;<br>    off(event: string, listener: types.AnyFn): Emitter;<br>    once(event: string, listener: types.AnyFn): Emitter;<br>    emit(event: string, …args: any[]): Emitter;<br>    removeAllListeners(event?: string): Emitter;<br>    static mixin(obj: any): any;<br>}</code><br></pre><br></details><h3 id="on"><a href="#on" class="headerlink" title="on"></a>on</h3><p>绑定事件。</p><h3 id="off"><a href="#off" class="headerlink" title="off"></a>off</h3><p>解绑事件。</p><h3 id="once"><a href="#once" class="headerlink" title="once"></a>once</h3><p>绑定只触发一次的事件。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>event</td><td>事件名称</td></tr><tr><td>listener</td><td>事件监听器</td></tr></tbody></table><h3 id="emit"><a href="#emit" class="headerlink" title="emit"></a>emit</h3><p>触发事件。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>event</td><td>事件名称</td></tr><tr><td>…args</td><td>传递给监听器的参数</td></tr></tbody></table><h3 id="removeAllListeners"><a href="#removeAllListeners" class="headerlink" title="removeAllListeners"></a>removeAllListeners</h3><p>解绑所有事件。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>event</td><td>事件名称</td></tr></tbody></table><h3 id="mixin"><a href="#mixin" class="headerlink" title="mixin"></a>mixin</h3><p>【静态】 将 Emitter 类的方法绑定到指定对象上去。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>obj</td><td>目标对象</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> event = <span class="keyword">new</span> Emitter();</span><br><span class="line">event.on(<span class="string">'test'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(name);</span><br><span class="line">&#125;);</span><br><span class="line">event.emit(<span class="string">'test'</span>, <span class="string">'licia'</span>); <span class="comment">// Logs out 'licia'.</span></span><br><span class="line">Emitter.mixin(&#123;&#125;);</span><br></pre></td></tr></table></figure><h2 id="Enum"><a href="#Enum" class="headerlink" title="Enum"></a>Enum</h2><p>Enum 类实现。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">class Enum {<br>    size: number;<br>    constructor(map: string[] | { [member: string]: any });<br>    [key: string]: any;<br>}</code><br></pre><br></details><h3 id="constructor-5"><a href="#constructor-5" class="headerlink" title="constructor"></a>constructor</h3><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>arr</td><td>字符串数组</td></tr></tbody></table><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>obj</td><td>键值对</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> importance = <span class="keyword">new</span> Enum([</span><br><span class="line">    <span class="string">'NONE'</span>,</span><br><span class="line">    <span class="string">'TRIVIAL'</span>,</span><br><span class="line">    <span class="string">'REGULAR'</span>,</span><br><span class="line">    <span class="string">'IMPORTANT'</span>,</span><br><span class="line">    <span class="string">'CRITICAL'</span></span><br><span class="line">]);</span><br><span class="line"><span class="keyword">const</span> val = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (val === importance.CRITICAL) &#123;</span><br><span class="line">    <span class="comment">// Do something.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="FileBlobStore"><a href="#FileBlobStore" class="headerlink" title="FileBlobStore"></a>FileBlobStore</h2><p>二进制文件存储。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">class FileBlobStore extends Emitter {<br>    constructor(path: string, data?: types.PlainObj&lt;Buffer&gt;);<br>    set(key: string, buf: Buffer): void;<br>    set(values: types.PlainObj&lt;Buffer&gt;): void;<br>    get(key: string): Buffer | void;<br>    get(keys: string[]): types.PlainObj&lt;Buffer&gt;;<br>    remove(key: string): void;<br>    remove(keys: string[]): void;<br>    clear(): void;<br>    each(fn: (val: Buffer, key: string) =&gt; void): void;<br>    save(): void;<br>}</code><br></pre><br></details><p>API 基本与 Store 模块一致，主要不同点是只接收 Buffer 类型。</p><h3 id="save"><a href="#save" class="headerlink" title="save"></a>save</h3><p>保存内容到磁盘。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> FileBlobStore(<span class="string">'path/to/file'</span>);</span><br><span class="line">store.set(<span class="string">'name'</span>, Buffer.from(<span class="string">'licia'</span>));</span><br><span class="line">process.on(<span class="string">'exit'</span>, () =&gt; store.save());</span><br></pre></td></tr></table></figure><h2 id="FileStore"><a href="#FileStore" class="headerlink" title="FileStore"></a>FileStore</h2><h3 id="constructor-6"><a href="#constructor-6" class="headerlink" title="constructor"></a>constructor</h3><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">class FileStore extends Store {<br>    constructor(path: string, data?: any);<br>}</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>path</td><td>存储文件路径</td></tr><tr><td>data</td><td>默认数据</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> FileStore(<span class="string">'path/to/file'</span>);</span><br><span class="line">store.set(<span class="string">'name'</span>, <span class="string">'licia'</span>);</span><br></pre></td></tr></table></figure><h2 id="HashTable"><a href="#HashTable" class="headerlink" title="HashTable"></a>HashTable</h2><p>哈希表实现。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">class HashTable {<br>    constructor(size?: number);<br>    set(key: string, val: any): void;<br>    get(key: string): any;<br>    has(key: string): boolean;<br>    delete(key: string): void;<br>}</code><br></pre><br></details><h3 id="constructor-7"><a href="#constructor-7" class="headerlink" title="constructor"></a>constructor</h3><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>size=32</td><td>桶数目</td></tr></tbody></table><h3 id="set-1"><a href="#set-1" class="headerlink" title="set"></a>set</h3><p>设置值。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>key</td><td>键名</td></tr><tr><td>val</td><td>键值</td></tr></tbody></table><h3 id="get-1"><a href="#get-1" class="headerlink" title="get"></a>get</h3><p>获取值。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>key</td><td>键名</td></tr><tr><td>返回值</td><td>键值</td></tr></tbody></table><h3 id="has-2"><a href="#has-2" class="headerlink" title="has"></a>has</h3><p>检查是否有指定值。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>key</td><td>键名</td></tr><tr><td>返回值</td><td>如果值存在，返回真</td></tr></tbody></table><h3 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h3><p>删除值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> hashTable = <span class="keyword">new</span> HashTable(<span class="number">128</span>);</span><br><span class="line">hashTable.set(<span class="string">'name'</span>, <span class="string">'redhoodsu'</span>);</span><br><span class="line">hashTable.get(<span class="string">'name'</span>); <span class="comment">// -&gt; 'redhoodsu'</span></span><br><span class="line">hashTable.has(<span class="string">'name'</span>); <span class="comment">// -&gt; true</span></span><br><span class="line">hashTable.delete(<span class="string">'name'</span>);</span><br><span class="line">hashTable.has(<span class="string">'name'</span>); <span class="comment">// -&gt; false</span></span><br></pre></td></tr></table></figure><h2 id="Heap"><a href="#Heap" class="headerlink" title="Heap"></a>Heap</h2><p>堆实现。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">class Heap {<br>    size: number;<br>    constructor(cmp?: types.AnyFn);<br>    clear(): void;<br>    add(item: any): number;<br>    poll(): any;<br>    peek(): any;<br>}</code><br></pre><br></details><h3 id="size"><a href="#size" class="headerlink" title="size"></a>size</h3><p>堆大小。</p><h3 id="constructor-8"><a href="#constructor-8" class="headerlink" title="constructor"></a>constructor</h3><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>cmp</td><td>比较器</td></tr></tbody></table><h3 id="clear"><a href="#clear" class="headerlink" title="clear"></a>clear</h3><p>清空堆数据。</p><h3 id="add-2"><a href="#add-2" class="headerlink" title="add"></a>add</h3><p>往堆里添加元素。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>item</td><td>入堆元素</td></tr><tr><td>返回值</td><td>当前大小</td></tr></tbody></table><h3 id="poll"><a href="#poll" class="headerlink" title="poll"></a>poll</h3><p>获取并删除堆的根元素。</p><h3 id="peek"><a href="#peek" class="headerlink" title="peek"></a>peek</h3><p>与 poll 一样，只是不删除。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> heap = <span class="keyword">new</span> Heap(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b - a;</span><br><span class="line">&#125;);</span><br><span class="line">heap.add(<span class="number">2</span>);</span><br><span class="line">heap.add(<span class="number">1</span>);</span><br><span class="line">heap.add(<span class="number">4</span>);</span><br><span class="line">heap.add(<span class="number">5</span>);</span><br><span class="line">heap.poll(); <span class="comment">// -&gt; 5</span></span><br><span class="line"><span class="built_in">console</span>.log(heap.size); <span class="comment">// -&gt; 4</span></span><br></pre></td></tr></table></figure><h2 id="HeapSnapshot"><a href="#HeapSnapshot" class="headerlink" title="HeapSnapshot"></a>HeapSnapshot</h2><p>V8 内存快照操作库。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">class HeapSnapshot {<br>    nodes: LinkedList;<br>    edges: LinkedList;<br>    constructor(profile: any);<br>}</code><br></pre><br></details><h3 id="constructor-9"><a href="#constructor-9" class="headerlink" title="constructor"></a>constructor</h3><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>profile</td><td>要解析的内存快照</td></tr></tbody></table><h3 id="nodes"><a href="#nodes" class="headerlink" title="nodes"></a>nodes</h3><p>解析后的节点信息。</p><h3 id="edges"><a href="#edges" class="headerlink" title="edges"></a>edges</h3><p>解析后的边信息。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> data = fs.readFileSync(<span class="string">'path/to/heapsnapshot'</span>, <span class="string">'utf8'</span>);</span><br><span class="line"><span class="keyword">const</span> heapSnapshot = <span class="keyword">new</span> HeapSnapshot(data);</span><br><span class="line"><span class="keyword">let</span> totalSize = <span class="number">0</span>;</span><br><span class="line">heapSnapshot.nodes.forEach(<span class="function"><span class="params">node</span> =&gt;</span> (totalSize += node.selfSize));</span><br><span class="line"><span class="built_in">console</span>.log(totalSize);</span><br></pre></td></tr></table></figure><h2 id="I18n"><a href="#I18n" class="headerlink" title="I18n"></a>I18n</h2><p>简单国际化库。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">class I18n {<br>    constructor(locale: string, langs: types.PlainObj&lt;any&gt;);<br>    set(locale: string, lang: types.PlainObj&lt;any&gt;): void;<br>    t(path: string | string[], data?: types.PlainObj&lt;any&gt;): string;<br>    locale(locale: string): void;<br>}</code><br></pre><br></details><h3 id="constructor-10"><a href="#constructor-10" class="headerlink" title="constructor"></a>constructor</h3><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>locale</td><td>地区代码</td></tr><tr><td>langs</td><td>语言数据</td></tr></tbody></table><h3 id="set-2"><a href="#set-2" class="headerlink" title="set"></a>set</h3><p>添加语言或者向已有的语言新增键值。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>locale</td><td>地区代码</td></tr><tr><td>lang</td><td>语言数据</td></tr></tbody></table><h3 id="locale"><a href="#locale" class="headerlink" title="locale"></a>locale</h3><p>设置当前地区。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>locale</td><td>地区代码</td></tr></tbody></table><h3 id="t"><a href="#t" class="headerlink" title="t"></a>t</h3><p>获取翻译文本。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>path</td><td>要获取文本的键值</td></tr><tr><td>data</td><td>要传递的数据</td></tr><tr><td>返回值</td><td>翻译文本</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> i18n = <span class="keyword">new</span> I18n(<span class="string">'en'</span>, &#123;</span><br><span class="line">    en: &#123;</span><br><span class="line">        welcome: <span class="string">'Hello, &#123;&#123;name&#125;&#125;!'</span>,</span><br><span class="line">        curTime(data) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'Current time is '</span> + data.time;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    cn: &#123;</span><br><span class="line">        welcome: <span class="string">'你好，&#123;&#123;name&#125;&#125;！'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">i18n.set(<span class="string">'cn'</span>, &#123;</span><br><span class="line">    curTime(data) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'当前时间是 '</span> + data.time;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">i18n.t(<span class="string">'welcome'</span>, &#123; <span class="attr">name</span>: <span class="string">'licia'</span> &#125;); <span class="comment">// -&gt; 'Hello, licia!'</span></span><br><span class="line">i18n.locale(<span class="string">'cn'</span>);</span><br><span class="line">i18n.t(<span class="string">'curTime'</span>, &#123; <span class="attr">time</span>: <span class="string">'5:47 pm'</span> &#125;); <span class="comment">// -&gt; '当前时间是 5:47 pm'</span></span><br></pre></td></tr></table></figure><h2 id="JsonTransformer"><a href="#JsonTransformer" class="headerlink" title="JsonTransformer"></a>JsonTransformer</h2><p>JSON 转换器。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">class JsonTransformer {<br>    constructor(data: any);<br>    set(key: string, val: any): JsonTransformer;<br>    get(key?: string): any;<br>    map(from: string, to: string, fn: types.AnyFn): JsonTransformer;<br>    map(from: string, fn: types.AnyFn): JsonTransformer;<br>    filter(from: string, to: string, fn: types.AnyFn): JsonTransformer;<br>    filter(from: string, fn: types.AnyFn): JsonTransformer;<br>    remove(keys: string | string[]): JsonTransformer;<br>    compute(<br>        from: string | string[],<br>        to: string,<br>        fn: types.AnyFn<br>    ): JsonTransformer;<br>    compute(from: string, fn: types.AnyFn): JsonTransformer;<br>    toString(): string;<br>}</code><br></pre><br></details><h3 id="constructor-11"><a href="#constructor-11" class="headerlink" title="constructor"></a>constructor</h3><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>data={}</td><td>目标 JSON 对象</td></tr></tbody></table><h3 id="set-3"><a href="#set-3" class="headerlink" title="set"></a>set</h3><p>设置属性值。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>key</td><td>属性路径</td></tr><tr><td>val</td><td>值</td></tr></tbody></table><p>如果属性路径为空，整个对象将被值替换。</p><h3 id="get-2"><a href="#get-2" class="headerlink" title="get"></a>get</h3><p>获取属性值。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>key</td><td>属性路径</td></tr><tr><td>返回值</td><td>指定值或整个对象</td></tr></tbody></table><h3 id="remove-4"><a href="#remove-4" class="headerlink" title="remove"></a>remove</h3><p>移除属性值。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>key</td><td>属性路径</td></tr></tbody></table><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p>数组 map 的快捷方式。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>from</td><td>源对象路径</td></tr><tr><td>to</td><td>目标对象路径</td></tr><tr><td>fn</td><td>真值检测函数</td></tr></tbody></table><h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><p>数组 filter 的快捷方式。</p><h3 id="compute"><a href="#compute" class="headerlink" title="compute"></a>compute</h3><p>从多个属性值计算新值。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>from</td><td>源属性路径</td></tr><tr><td>to</td><td>目标属性路径</td></tr><tr><td>fn</td><td>计算函数</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> data = <span class="keyword">new</span> JsonTransformer(&#123;</span><br><span class="line">    books: [</span><br><span class="line">        &#123;</span><br><span class="line">            title: <span class="string">'Book 1'</span>,</span><br><span class="line">            price: <span class="number">5</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            title: <span class="string">'Book 2'</span>,</span><br><span class="line">            price: <span class="number">10</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    author: &#123;</span><br><span class="line">        lastname: <span class="string">'Su'</span>,</span><br><span class="line">        firstname: <span class="string">'RedHood'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">data.filter(<span class="string">'books'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">book</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> book.price &gt; <span class="number">5</span>;</span><br><span class="line">&#125;);</span><br><span class="line">data.compute(<span class="string">'author'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">author</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> author.firstname + author.lastname;</span><br><span class="line">&#125;);</span><br><span class="line">data.set(<span class="string">'count'</span>, data.get(<span class="string">'books'</span>).length);</span><br><span class="line">data.get(); <span class="comment">// -&gt; &#123;books: [&#123;title: 'Book 2', price: 10&#125;], author: 'RedHoodSu', count: 1&#125;</span></span><br></pre></td></tr></table></figure><h2 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h2><p>双向链表实现。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">namespace LinkedList {<br>    class Node {<br>        value: any;<br>        prev: Node | null;<br>        next: Node | null;<br>    }<br>}<br>class LinkedList {<br>    size: number;<br>    head: LinkedList.Node;<br>    tail: LinkedList.Node;<br>    push(val: any): number;<br>    pop(): any;<br>    unshift(val: any): number;<br>    shift(): any;<br>    find(fn: types.AnyFn): LinkedList.Node | void;<br>    delNode(node: LinkedList.Node): void;<br>    forEach(iterator: types.AnyFn, ctx?: any);<br>    toArr(): any[];<br>}</code><br></pre><br></details><h3 id="size-1"><a href="#size-1" class="headerlink" title="size"></a>size</h3><p>链表大小。</p><h3 id="head"><a href="#head" class="headerlink" title="head"></a>head</h3><p>链表首结点。</p><h3 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h3><p>链表尾结点。</p><h3 id="push"><a href="#push" class="headerlink" title="push"></a>push</h3><p>向链表尾部添加值。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>val</td><td>要添加的值</td></tr><tr><td>返回值</td><td>链表大小</td></tr></tbody></table><h3 id="pop"><a href="#pop" class="headerlink" title="pop"></a>pop</h3><p>获取链表尾部值。</p><h3 id="unshift"><a href="#unshift" class="headerlink" title="unshift"></a>unshift</h3><p>向链表头部添加值。</p><h3 id="shift"><a href="#shift" class="headerlink" title="shift"></a>shift</h3><p>获取链表头部值。</p><h3 id="rmNode"><a href="#rmNode" class="headerlink" title="rmNode"></a>rmNode</h3><p>删除节点。</p><h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><p>查找节点。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>fn</td><td>真值检测函数</td></tr><tr><td>返回值</td><td>第一个通过的节点</td></tr></tbody></table><h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h3><p>遍历链表。</p><h3 id="toArr"><a href="#toArr" class="headerlink" title="toArr"></a>toArr</h3><p>将链表转换成 JavaScript 数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> linkedList = <span class="keyword">new</span> LinkedList();</span><br><span class="line">linkedList.push(<span class="number">5</span>);</span><br><span class="line">linkedList.pop(); <span class="comment">// -&gt; 5</span></span><br></pre></td></tr></table></figure><h2 id="LocalStore"><a href="#LocalStore" class="headerlink" title="LocalStore"></a>LocalStore</h2><p>LocalStorage 存储。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">class LocalStore extends Store {<br>    constructor(name: string, data?: {});<br>}</code><br></pre><br></details><p>继承自 Store 类。</p><h3 id="constructor-12"><a href="#constructor-12" class="headerlink" title="constructor"></a>constructor</h3><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>name</td><td>LocalStorage 存储名</td></tr><tr><td>data</td><td>默认数据</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> LocalStore(<span class="string">'licia'</span>);</span><br><span class="line">store.set(<span class="string">'name'</span>, <span class="string">'licia'</span>);</span><br></pre></td></tr></table></figure><h2 id="Logger"><a href="#Logger" class="headerlink" title="Logger"></a>Logger</h2><p>带日志级别的简单日志库。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">class Logger extends Emitter {<br>    name: string;<br>    formatter(type: string, argList: any[]): any[];<br>    constructor(name: string, level?: string | number);<br>    setLevel(level: string | number): Logger;<br>    getLevel(): number;<br>    trace(…args: any[]): Logger;<br>    debug(…args: any[]): Logger;<br>    info(…args: any[]): Logger;<br>    warn(…args: any[]): Logger;<br>    error(…args: any[]): Logger;<br>    static level: Enum;<br>}</code><br></pre><br></details><h3 id="constructor-13"><a href="#constructor-13" class="headerlink" title="constructor"></a>constructor</h3><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>name</td><td>日志名称</td></tr><tr><td>level=DEBUG</td><td>日志级别</td></tr></tbody></table><h3 id="setLevel"><a href="#setLevel" class="headerlink" title="setLevel"></a>setLevel</h3><p>设置日志级别。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>level</td><td>日志级别</td></tr></tbody></table><h3 id="getLevel"><a href="#getLevel" class="headerlink" title="getLevel"></a>getLevel</h3><p>获取当前日志级别。</p><h3 id="trace，debug，info，warn，error"><a href="#trace，debug，info，warn，error" class="headerlink" title="trace，debug，info，warn，error"></a>trace，debug，info，warn，error</h3><p>打日志方法。</p><h3 id="日志级别"><a href="#日志级别" class="headerlink" title="日志级别"></a>日志级别</h3><p>TRACE，DEBUG，INFO，WARN，ERROR 和 SILENT。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> logger = <span class="keyword">new</span> Logger(<span class="string">'licia'</span>, Logger.level.ERROR);</span><br><span class="line">logger.trace(<span class="string">'test'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Format output.</span></span><br><span class="line">logger.formatter = <span class="function"><span class="keyword">function</span>(<span class="params">type, argList</span>) </span>&#123;</span><br><span class="line">    argList.push(<span class="keyword">new</span> <span class="built_in">Date</span>().getTime());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> argList;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">logger.on(<span class="string">'all'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">type, argList</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// It's not affected by log level.</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">logger.on(<span class="string">'debug'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">argList</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Affected by log level.</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Lru"><a href="#Lru" class="headerlink" title="Lru"></a>Lru</h2><p>简单 LRU 缓存。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">class Lru {<br>    constructor(max: number);<br>    has(key: string): boolean;<br>    remove(key: string): void;<br>    get(key: string): any;<br>    set(key: string, val: any): void;<br>    clear(): void;<br>}</code><br></pre><br></details><h3 id="constructor-14"><a href="#constructor-14" class="headerlink" title="constructor"></a>constructor</h3><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>max</td><td>最大缓存数</td></tr></tbody></table><h3 id="has-3"><a href="#has-3" class="headerlink" title="has"></a>has</h3><p>检查是否有缓存。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>key</td><td>缓存键名</td></tr><tr><td>返回值</td><td>如果有，返回真</td></tr></tbody></table><h3 id="remove-5"><a href="#remove-5" class="headerlink" title="remove"></a>remove</h3><p>删除缓存。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>key</td><td>缓存键名</td></tr></tbody></table><h3 id="get-3"><a href="#get-3" class="headerlink" title="get"></a>get</h3><p>获取缓存。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>key</td><td>缓存键名</td></tr><tr><td>返回值</td><td>缓存值</td></tr></tbody></table><h3 id="set-4"><a href="#set-4" class="headerlink" title="set"></a>set</h3><p>设置缓存。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>key</td><td>缓存键名</td></tr><tr><td>val</td><td>缓存值</td></tr></tbody></table><h3 id="clear-1"><a href="#clear-1" class="headerlink" title="clear"></a>clear</h3><p>清除所有缓存。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cache = <span class="keyword">new</span> Lru(<span class="number">50</span>);</span><br><span class="line">cache.set(<span class="string">'test'</span>, <span class="string">'licia'</span>);</span><br><span class="line">cache.get(<span class="string">'test'</span>); <span class="comment">// -&gt; 'licia'</span></span><br></pre></td></tr></table></figure><h2 id="MediaQuery"><a href="#MediaQuery" class="headerlink" title="MediaQuery"></a>MediaQuery</h2><p>CSS 媒体查询监听器。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">class MediaQuery extends Emitter {<br>    constructor(query: string);<br>    isMatch(): boolean;<br>}</code><br></pre><br></details><p>继承自 Emitter 类。</p><h3 id="constructor-15"><a href="#constructor-15" class="headerlink" title="constructor"></a>constructor</h3><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>query</td><td>媒体查询字符串</td></tr></tbody></table><h3 id="isMatch"><a href="#isMatch" class="headerlink" title="isMatch"></a>isMatch</h3><p>如果媒体查询匹配，返回真。</p><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><h4 id="match"><a href="#match" class="headerlink" title="match"></a>match</h4><p>当媒体查询匹配时触发。</p><h4 id="unmatch"><a href="#unmatch" class="headerlink" title="unmatch"></a>unmatch</h4><p>与 match 事件相反。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mediaQuery = <span class="keyword">new</span> MediaQuery(<span class="string">'screen and (max-width:1000px)'</span>);</span><br><span class="line">mediaQuery.isMatch(); <span class="comment">// -&gt; false</span></span><br><span class="line">mediaQuery.on(<span class="string">'match'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="comment">// Do something...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="MutationObserver"><a href="#MutationObserver" class="headerlink" title="MutationObserver"></a>MutationObserver</h2><p>MutationObserver 安全版本，如果不支持，则什么也不做。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> observer = <span class="keyword">new</span> MutationObserver(<span class="function"><span class="keyword">function</span>(<span class="params">mutations</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Do something.</span></span><br><span class="line">&#125;);</span><br><span class="line">observer.observe(<span class="built_in">document</span>.documentElement);</span><br><span class="line">observer.disconnect();</span><br></pre></td></tr></table></figure><h2 id="PriorityQueue"><a href="#PriorityQueue" class="headerlink" title="PriorityQueue"></a>PriorityQueue</h2><p>优先队列实现。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">class PriorityQueue {<br>    size: number;<br>    constructor(cmp?: types.AnyFn);<br>    clear(): void;<br>    enqueue(item: any): number;<br>    dequeue(): any;<br>    peek(): any;<br>}</code><br></pre><br></details><h3 id="size-2"><a href="#size-2" class="headerlink" title="size"></a>size</h3><p>队列大小。</p><h3 id="constructor-16"><a href="#constructor-16" class="headerlink" title="constructor"></a>constructor</h3><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>cmp</td><td>比较器</td></tr></tbody></table><h3 id="clear-2"><a href="#clear-2" class="headerlink" title="clear"></a>clear</h3><p>清空队列。</p><h3 id="enqueue"><a href="#enqueue" class="headerlink" title="enqueue"></a>enqueue</h3><p>元素入列。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>item</td><td>入列元素</td></tr><tr><td>返回值</td><td>当前大小</td></tr></tbody></table><h3 id="dequeue"><a href="#dequeue" class="headerlink" title="dequeue"></a>dequeue</h3><p>获取并删除队列中拥有最高优先级的元素。</p><h3 id="peek-1"><a href="#peek-1" class="headerlink" title="peek"></a>peek</h3><p>同 dequeue，只是不删除。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> queue = <span class="keyword">new</span> PriorityQueue(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a.priority &gt; b.priority) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (a.priority === b.priority) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;);</span><br><span class="line">queue.enqueue(&#123;</span><br><span class="line">    priority: <span class="number">1000</span>,</span><br><span class="line">    value: <span class="string">'apple'</span></span><br><span class="line">&#125;);</span><br><span class="line">queue.enqueue(&#123;</span><br><span class="line">    priority: <span class="number">500</span>,</span><br><span class="line">    value: <span class="string">'orange'</span></span><br><span class="line">&#125;);</span><br><span class="line">queue.dequeue(); <span class="comment">// -&gt; &#123; priority: 1000, value: 'apple' &#125;</span></span><br></pre></td></tr></table></figure><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><p>轻量 Promise 实现。</p><p><a href="https://github.com/promises-aplus/promises-spec" target="_blank" rel="noopener">Promises 标准</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> req = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">        req.open(<span class="string">'GET'</span>, url);</span><br><span class="line">        req.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            req.status == <span class="number">200</span></span><br><span class="line">                ? resolve(req.response)</span><br><span class="line">                : reject(<span class="built_in">Error</span>(req.statusText));</span><br><span class="line">        &#125;;</span><br><span class="line">        req.onerror = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            reject(<span class="built_in">Error</span>(<span class="string">'Network Error'</span>));</span><br><span class="line">        &#125;;</span><br><span class="line">        req.send();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">get</span>('test.json').then(function(result) &#123;</span><br><span class="line">    <span class="comment">// Do something...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="PseudoMap"><a href="#PseudoMap" class="headerlink" title="PseudoMap"></a>PseudoMap</h2><p>类似 es6 的 Map，不支持遍历器。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">const PseudoMap: typeof Map;</code><br></pre><br></details><p>只支持字符串键名，当 Map 存在时会直接使用 Map。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> PseudoMap();</span><br><span class="line">map.set(<span class="string">'1'</span>, <span class="number">1</span>);</span><br><span class="line">map.get(<span class="string">'1'</span>); <span class="comment">// -&gt; 1</span></span><br></pre></td></tr></table></figure><h2 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h2><p>队列数据结构。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">class Queue {<br>    size: number;<br>    clear(): void;<br>    enqueue(item: any): number;<br>    dequeue(): any;<br>    peek(): any;<br>    forEach(iterator: types.AnyFn, context?: any): void;<br>    toArr(): any[];<br>}</code><br></pre><br></details><h3 id="size-3"><a href="#size-3" class="headerlink" title="size"></a>size</h3><p>队列大小。</p><h3 id="clear-3"><a href="#clear-3" class="headerlink" title="clear"></a>clear</h3><p>清空队列。</p><h3 id="enqueue-1"><a href="#enqueue-1" class="headerlink" title="enqueue"></a>enqueue</h3><p>元素入列。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>item</td><td>入列元素</td></tr><tr><td>返回值</td><td>当前大小</td></tr></tbody></table><h3 id="dequeue-1"><a href="#dequeue-1" class="headerlink" title="dequeue"></a>dequeue</h3><p>元素出列。</p><h3 id="peek-2"><a href="#peek-2" class="headerlink" title="peek"></a>peek</h3><p>获取第一个元素但不移除它。</p><h3 id="forEach-1"><a href="#forEach-1" class="headerlink" title="forEach"></a>forEach</h3><p>遍历队列。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>iterator</td><td>调用函数</td></tr><tr><td>ctx</td><td>*</td><td>函数上下文</td></tr></tbody></table><h3 id="toArr-1"><a href="#toArr-1" class="headerlink" title="toArr"></a>toArr</h3><p>将队列转换为 JavaScript 数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> queue = <span class="keyword">new</span> Queue();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(queue.size); <span class="comment">// -&gt; 0</span></span><br><span class="line">queue.enqueue(<span class="number">2</span>);</span><br><span class="line">queue.enqueue(<span class="number">3</span>);</span><br><span class="line">queue.dequeue(); <span class="comment">// -&gt; 2</span></span><br><span class="line"><span class="built_in">console</span>.log(queue.size); <span class="comment">// -&gt; 1</span></span><br><span class="line">queue.peek(); <span class="comment">// -&gt; 3</span></span><br><span class="line"><span class="built_in">console</span>.log(queue.size); <span class="comment">// -&gt; 1</span></span><br></pre></td></tr></table></figure><h2 id="QuickLru"><a href="#QuickLru" class="headerlink" title="QuickLru"></a>QuickLru</h2><p>不使用链表的 LRU 实现。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">class QuickLru {<br>    constructor(max: number);<br>    has(key: string): boolean;<br>    remove(key: string): void;<br>    get(key: string): any;<br>    set(key: string, val: any): void;<br>    clear(): void;<br>}</code><br></pre><br></details><p>参考 <a href="https://github.com/dominictarr/hashlru#algorithm" target="_blank" rel="noopener">hashlru 算法</a>，空间占用相比使用链表更多。</p><p>API 与 Lru 模块保持一致。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cache = <span class="keyword">new</span> QuickLru(<span class="number">50</span>);</span><br><span class="line">cache.set(<span class="string">'test'</span>, <span class="string">'licia'</span>);</span><br><span class="line">cache.get(<span class="string">'test'</span>); <span class="comment">// -&gt; 'licia'</span></span><br></pre></td></tr></table></figure><h2 id="Readiness"><a href="#Readiness" class="headerlink" title="Readiness"></a>Readiness</h2><p>任务就绪回调管理。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">class Readiness {<br>    signal(tasks: string | string[]): void;<br>    isReady(tasks: string | string[]): boolean;<br>    ready(tasks: string | string[], fn?: types.AnyFn): Promise&lt;void&gt;;<br>}</code><br></pre><br></details><h3 id="signal"><a href="#signal" class="headerlink" title="signal"></a>signal</h3><p>设置任务为就绪状态。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>tasks</td><td>就绪任务</td></tr></tbody></table><h3 id="ready"><a href="#ready" class="headerlink" title="ready"></a>ready</h3><p>注册任务就绪回调。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>tasks</td><td>要监听的任务</td></tr><tr><td>fn</td><td>任务就绪时触发的回调函数</td></tr><tr><td>返回值</td><td>任务就绪时 resolve 的 Promise</td></tr></tbody></table><h3 id="isReady"><a href="#isReady" class="headerlink" title="isReady"></a>isReady</h3><p>检查任务是否准备就绪。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>tasks</td><td>要检查的任务</td></tr><tr><td>返回值</td><td>任务准备就绪，返回真</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> readiness = <span class="keyword">new</span> Readiness();</span><br><span class="line">readiness.ready(<span class="string">'serverCreated'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Do something.</span></span><br><span class="line">&#125;);</span><br><span class="line">readiness.signal(<span class="string">'serverCreated'</span>);</span><br><span class="line">readiness.isReady(<span class="string">'serverCreated'</span>); <span class="comment">// -&gt; true</span></span><br></pre></td></tr></table></figure><h2 id="ReduceStore"><a href="#ReduceStore" class="headerlink" title="ReduceStore"></a>ReduceStore</h2><p>简单类 redux 状态管理。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">class ReduceStore {<br>    constructor(reducer: types.AnyFn, initialState: any);<br>    subscribe(listener: types.AnyFn): types.AnyFn;<br>    dispatch(action: any): any;<br>    getState(): any;<br>}</code><br></pre><br></details><h3 id="constructor-17"><a href="#constructor-17" class="headerlink" title="constructor"></a>constructor</h3><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>reducer</td><td>生成下一个状态的函数</td></tr><tr><td>initialState</td><td>初始状态</td></tr></tbody></table><h3 id="subscribe"><a href="#subscribe" class="headerlink" title="subscribe"></a>subscribe</h3><p>订阅状态改变事件。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>listener</td><td>回调函数</td></tr><tr><td>返回值</td><td>取消订阅函数</td></tr></tbody></table><h3 id="dispatch"><a href="#dispatch" class="headerlink" title="dispatch"></a>dispatch</h3><p>发出动作。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>action</td><td>描述改变内容的对象</td></tr><tr><td>返回值</td><td>传入对象</td></tr></tbody></table><h3 id="getState"><a href="#getState" class="headerlink" title="getState"></a>getState</h3><p>获取当前状态。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> ReduceStore(<span class="function"><span class="keyword">function</span>(<span class="params">state, action</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'INCREMENT'</span>:</span><br><span class="line">            <span class="keyword">return</span> state + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'DECREMENT'</span>:</span><br><span class="line">            <span class="keyword">return</span> state - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">store.subscribe(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(store.getState());</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">store.dispatch(&#123; <span class="attr">type</span>: <span class="string">'INCREMENT'</span> &#125;); <span class="comment">// 1</span></span><br><span class="line">store.dispatch(&#123; <span class="attr">type</span>: <span class="string">'INCREMENT'</span> &#125;); <span class="comment">// 2</span></span><br><span class="line">store.dispatch(&#123; <span class="attr">type</span>: <span class="string">'DECREMENT'</span> &#125;); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h2 id="ResizeSensor"><a href="#ResizeSensor" class="headerlink" title="ResizeSensor"></a>ResizeSensor</h2><p>检查元素的大小是否发生变化。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">class ResizeSensor extends SingleEmitter {<br>    constructor(el: HTMLElement);<br>    destroy(): void;<br>}</code><br></pre><br></details><h3 id="constructor-18"><a href="#constructor-18" class="headerlink" title="constructor"></a>constructor</h3><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>element</td><td>要监听大小的元素</td></tr></tbody></table><h3 id="destroy"><a href="#destroy" class="headerlink" title="destroy"></a>destroy</h3><p>停止监听大小变化事件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> target = <span class="built_in">document</span>.getElementById(<span class="string">'test'</span>);</span><br><span class="line"><span class="keyword">const</span> sensor = <span class="keyword">new</span> ResizeSensor(target);</span><br><span class="line">sensor.addListener(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Trigger if element's size changed.</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Select"><a href="#Select" class="headerlink" title="Select"></a>Select</h2><p>querySelectorAll 的简单包装类。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">class Select {<br>    constructor(selector: string | Element | Document);<br>    find(selector: string): Select;<br>    each(fn: types.AnyFn): Select;<br>}</code><br></pre><br></details><h3 id="constructor-19"><a href="#constructor-19" class="headerlink" title="constructor"></a>constructor</h3><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>selector</td><td>选择器</td></tr></tbody></table><h3 id="find-1"><a href="#find-1" class="headerlink" title="find"></a>find</h3><p>查找子元素。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>selector</td><td>选择器</td></tr></tbody></table><h3 id="each"><a href="#each" class="headerlink" title="each"></a>each</h3><p>遍历匹配的元素。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>fn</td><td>调用函数</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> $test = <span class="keyword">new</span> Select(<span class="string">'#test'</span>);</span><br><span class="line">$test.find(<span class="string">'.test'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">idx, element</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Manipulate dom nodes</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore"></a>Semaphore</h2><p>限制资源同时访问次数。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">class Semaphore {<br>    constructor(counter?: number);<br>    wait(fn: () =&gt; void): void;<br>    signal(): void;<br>}</code><br></pre><br></details><h3 id="constructor-20"><a href="#constructor-20" class="headerlink" title="constructor"></a>constructor</h3><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>counter=1</td><td>初始计数</td></tr></tbody></table><h3 id="wait"><a href="#wait" class="headerlink" title="wait"></a>wait</h3><p>等待计数器大于 0 时，执行函数。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>fn</td><td>要执行的函数</td></tr></tbody></table><h3 id="signal-1"><a href="#signal-1" class="headerlink" title="signal"></a>signal</h3><p>执行队列中未执行任务。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sem = <span class="keyword">new</span> Semaphore(<span class="number">10</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line">    .createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">        sem.wait(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            res.end(<span class="string">'.'</span>);</span><br><span class="line">            setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> sem.signal(), <span class="number">500</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">    .listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><h2 id="SessionStore"><a href="#SessionStore" class="headerlink" title="SessionStore"></a>SessionStore</h2><p>SessionStorage 存储。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">class SessionStore extends Store {<br>    constructor(name: string, data?: any);<br>}</code><br></pre><br></details><p>继承自 Store 类。</p><h3 id="constructor-21"><a href="#constructor-21" class="headerlink" title="constructor"></a>constructor</h3><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>name</td><td>SessionStorage 存储名</td></tr><tr><td>data</td><td>默认数据</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> SessionStore(<span class="string">'licia'</span>);</span><br><span class="line">store.set(<span class="string">'name'</span>, <span class="string">'licia'</span>);</span><br></pre></td></tr></table></figure><h2 id="SingleEmitter"><a href="#SingleEmitter" class="headerlink" title="SingleEmitter"></a>SingleEmitter</h2><p>与 Event emitter 类似，但仅有一种事件类型。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">class SingleEmitter {<br>    addListener(listener: types.AnyFn): void;<br>    rmListener(listener: types.AnyFn): void;<br>    emit(…args: any[]): void;<br>    rmAllListeners(): void;<br>    static mixin(obj: any): void;<br>}</code><br></pre><br></details><h3 id="addListener"><a href="#addListener" class="headerlink" title="addListener"></a>addListener</h3><p>添加监听器。</p><h3 id="rmListener"><a href="#rmListener" class="headerlink" title="rmListener"></a>rmListener</h3><p>移除监听器。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>listener</td><td>事件监听器</td></tr></tbody></table><h3 id="rmAllListeners"><a href="#rmAllListeners" class="headerlink" title="rmAllListeners"></a>rmAllListeners</h3><p>移除所有监听器。</p><h3 id="emit-1"><a href="#emit-1" class="headerlink" title="emit"></a>emit</h3><p>触发监听器。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>…args</td><td>传递给监听器的参数</td></tr></tbody></table><h3 id="mixin-1"><a href="#mixin-1" class="headerlink" title="mixin"></a>mixin</h3><p>【静态】将 SingleEmitter 类的方法绑定到指定对象上去。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>obj</td><td>目标对象</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> event = <span class="keyword">new</span> SingleEmitter();</span><br><span class="line">event.addListener(<span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(name);</span><br><span class="line">&#125;);</span><br><span class="line">event.emit(<span class="string">'licia'</span>); <span class="comment">// Logs out 'licia'.</span></span><br></pre></td></tr></table></figure><h2 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h2><p>WebSocket 类的简单包装。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">class Socket extends Emitter {<br>    constructor(<br>        url: string,<br>        options?: {<br>            protocols?: string | string[];<br>            reconnect?: boolean;<br>        }<br>    );<br>    send(message: any): void;<br>    close(code?: number, reason?: string): void;<br>    connect(): void;<br>}</code><br></pre><br></details><p>继续自 Emitter 类。</p><h3 id="constructor-22"><a href="#constructor-22" class="headerlink" title="constructor"></a>constructor</h3><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>url</td><td>WebSocket 地址</td></tr><tr><td>options</td><td>连接选项</td></tr></tbody></table><p>可用选项：</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>protocols</td><td>协议</td></tr><tr><td>reconnect=true</td><td>是否尝试重新连接</td></tr></tbody></table><h3 id="send"><a href="#send" class="headerlink" title="send"></a>send</h3><p>发送数据。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>message</td><td>要发送的数据</td></tr></tbody></table><h3 id="close"><a href="#close" class="headerlink" title="close"></a>close</h3><p>关闭 WebSocket 连接。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>code</td><td>状态码</td></tr><tr><td>reason</td><td>关闭原因</td></tr></tbody></table><h3 id="connect"><a href="#connect" class="headerlink" title="connect"></a>connect</h3><p>连接 WebSocket，初始化时就会被调用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ws = <span class="keyword">new</span> Socket(<span class="string">'ws://localhost:8001'</span>);</span><br><span class="line">ws.on(<span class="string">'open'</span>, e =&gt; ws.send(<span class="string">'Hello'</span>));</span><br></pre></td></tr></table></figure><h2 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h2><p>栈数据结构。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">class Stack {<br>    size: number;<br>    clear(): void;<br>    push(item: any): number;<br>    pop(): any;<br>    peek(): any;<br>    forEach(iterator: types.AnyFn, context?: any): void;<br>    toArr(): any[];<br>}</code><br></pre><br></details><h3 id="size-4"><a href="#size-4" class="headerlink" title="size"></a>size</h3><p>栈大小。</p><h3 id="clear-4"><a href="#clear-4" class="headerlink" title="clear"></a>clear</h3><p>清空栈。</p><h3 id="push-1"><a href="#push-1" class="headerlink" title="push"></a>push</h3><p>元素入栈。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>item</td><td>入栈元素</td></tr><tr><td>返回值</td><td>当前大小</td></tr></tbody></table><h3 id="pop-1"><a href="#pop-1" class="headerlink" title="pop"></a>pop</h3><p>元素出栈。</p><h3 id="peek-3"><a href="#peek-3" class="headerlink" title="peek"></a>peek</h3><p>获取最后一个元素但不移除它。</p><h3 id="forEach-2"><a href="#forEach-2" class="headerlink" title="forEach"></a>forEach</h3><p>遍历栈。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>iterator</td><td>调用函数</td></tr><tr><td>ctx</td><td>函数上下文</td></tr></tbody></table><h3 id="toArr-2"><a href="#toArr-2" class="headerlink" title="toArr"></a>toArr</h3><p>将栈转换为 JavaScript 数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> stack = <span class="keyword">new</span> Stack();</span><br><span class="line"></span><br><span class="line">stack.push(<span class="number">2</span>); <span class="comment">// -&gt; 1</span></span><br><span class="line">stack.push(<span class="number">3</span>); <span class="comment">// -&gt; 2</span></span><br><span class="line">stack.pop(); <span class="comment">// -&gt; 3</span></span><br></pre></td></tr></table></figure><h2 id="State"><a href="#State" class="headerlink" title="State"></a>State</h2><p>简单状态机。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">class State extends Emitter {<br>    constructor(initial: string, events: any);<br>    is(state: string): boolean;<br>    [event: string]: any;<br>}</code><br></pre><br></details><p>继承自 Emitter 类。</p><h3 id="constructor-23"><a href="#constructor-23" class="headerlink" title="constructor"></a>constructor</h3><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>initial</td><td>初始状态</td></tr><tr><td>events</td><td>改变状态的事件</td></tr></tbody></table><h3 id="is"><a href="#is" class="headerlink" title="is"></a>is</h3><p>检查当前状态是否是指定状态。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>state</td><td>要检查的状态</td></tr><tr><td>返回值</td><td>如果是，返回真</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> state = <span class="keyword">new</span> State(<span class="string">'empty'</span>, &#123;</span><br><span class="line">    load: &#123; <span class="attr">from</span>: <span class="string">'empty'</span>, <span class="attr">to</span>: <span class="string">'pause'</span> &#125;,</span><br><span class="line">    play: &#123; <span class="attr">from</span>: <span class="string">'pause'</span>, <span class="attr">to</span>: <span class="string">'play'</span> &#125;,</span><br><span class="line">    pause: &#123; <span class="attr">from</span>: [<span class="string">'play'</span>, <span class="string">'empty'</span>], <span class="attr">to</span>: <span class="string">'pause'</span> &#125;,</span><br><span class="line">    unload: &#123; <span class="attr">from</span>: [<span class="string">'play'</span>, <span class="string">'pause'</span>], <span class="attr">to</span>: <span class="string">'empty'</span> &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">state.is(<span class="string">'empty'</span>); <span class="comment">// -&gt; true</span></span><br><span class="line">state.load();</span><br><span class="line">state.is(<span class="string">'pause'</span>); <span class="comment">// -&gt; true</span></span><br><span class="line">state.on(<span class="string">'play'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">src</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(src); <span class="comment">// -&gt; 'eustia'</span></span><br><span class="line">&#125;);</span><br><span class="line">state.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, event</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Error handler</span></span><br><span class="line">&#125;);</span><br><span class="line">state.play(<span class="string">'eustia'</span>);</span><br></pre></td></tr></table></figure><h2 id="Store"><a href="#Store" class="headerlink" title="Store"></a>Store</h2><p>内存存储。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">class Store extends Emitter {<br>    constructor(data?: {});<br>    set(key: string, val: any): void;<br>    set(values: {}): void;<br>    get(key: string): any;<br>    get(keys: string[]): {};<br>    remove(key: string): void;<br>    remove(keys: string[]): void;<br>    clear(): void;<br>    each(fn: (…args: any[]) =&gt; void): void;<br>}</code><br></pre><br></details><p>继承自 Emitter 类。</p><h3 id="constructor-24"><a href="#constructor-24" class="headerlink" title="constructor"></a>constructor</h3><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>data</td><td>初始数据</td></tr></tbody></table><h3 id="set-5"><a href="#set-5" class="headerlink" title="set"></a>set</h3><p>设置值。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>key</td><td>键名</td></tr><tr><td>val</td><td>键值</td></tr></tbody></table><p>设置多个值。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>values</td><td>包含多个键值对的对象</td></tr></tbody></table><p>该方法被调用时发触发 change 事件。</p><h3 id="get-4"><a href="#get-4" class="headerlink" title="get"></a>get</h3><p>获取值。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>key</td><td>键名</td></tr><tr><td>返回值</td><td>键值</td></tr></tbody></table><p>获取多个值。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>keys</td><td>键名列表</td></tr><tr><td>返回值</td><td>包含多个键值对的对象</td></tr></tbody></table><h3 id="remove-6"><a href="#remove-6" class="headerlink" title="remove"></a>remove</h3><p>移除值。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>key</td><td>键名</td></tr></tbody></table><h3 id="clear-5"><a href="#clear-5" class="headerlink" title="clear"></a>clear</h3><p>清空数据。</p><h3 id="each-1"><a href="#each-1" class="headerlink" title="each"></a>each</h3><p>遍历数据。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>fn</td><td>遍历函数</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Store(<span class="string">'test'</span>);</span><br><span class="line">store.set(<span class="string">'user'</span>, &#123; <span class="attr">name</span>: <span class="string">'licia'</span> &#125;);</span><br><span class="line">store.get(<span class="string">'user'</span>).name; <span class="comment">// -&gt; 'licia'</span></span><br><span class="line">store.clear();</span><br><span class="line">store.each(<span class="function"><span class="keyword">function</span>(<span class="params">val, key</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Do something.</span></span><br><span class="line">&#125;);</span><br><span class="line">store.on(<span class="string">'change'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">key, newVal, oldVal</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// It triggers whenever set is called.</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Trace"><a href="#Trace" class="headerlink" title="Trace"></a>Trace</h2><p>解析、处理和生成 Chrome Trace 格式数据。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">namespace Trace {<br>    interface IEvent {<br>        name: string;<br>        cat: string;<br>        ph: string;<br>        ts: number;<br>        pid: number;<br>        tid: number;<br>        args: any;<br>        [key: string]: any;<br>    }<br>    class Process {<br>        constructor(id);<br>        id(): string;<br>        name(): string;<br>        addEvent(IEvent): void;<br>        rmEvent(IEvent): void;<br>        getThread(id: number): Thread;<br>        rmThread(id: number): void;<br>        threads(): Thread[];<br>        toJSON(): IEvent[];<br>    }<br>    class Thread {<br>        constructor(id, pid);<br>        id(): string;<br>        name(): string;<br>        addEvent(IEvent): void;<br>        rmEvent(IEvent): void;<br>        events(): IEvent[];<br>        toJSON(): IEvent[];<br>    }<br>}<br>class Trace {<br>    constructor(events: Trace.IEvent[]);<br>    addEvent(event: Trace.IEvent);<br>    rmEvent(event: Trace.IEvent);<br>    getProcess(id: number): Trace.Process;<br>    rmProcess(id: number): void;<br>    processes(): Trace.Process[];<br>    toJSON(): Trace.IEvent[];<br>}</code><br></pre><br></details><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> data = fs.readFileSync(<span class="string">'path/to/trace'</span>, <span class="string">'utf8'</span>);</span><br><span class="line"><span class="keyword">const</span> trace = <span class="keyword">new</span> Trace(<span class="built_in">JSON</span>.parse(data));</span><br><span class="line">trace.rmProcess(<span class="number">627</span>);</span><br><span class="line">fs.writeFileSync(</span><br><span class="line">    <span class="string">'path/to/trace'</span>,</span><br><span class="line">    <span class="built_in">JSON</span>.stringify(trace.toJSON()),</span><br><span class="line">    <span class="string">'utf8'</span>,</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="Tracing"><a href="#Tracing" class="headerlink" title="Tracing"></a>Tracing</h2><p>创建 chrome trace 格式数据。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">class Tracing {<br>    constructor(options?: {<br>        pid?: number;<br>        tid?: number;<br>        processName?: string;<br>        threadName?: string;<br>    });<br>    start(cat?: string): void;<br>    stop(): Trace.IEvent[];<br>    metadata(name: string, args: any): void;<br>    begin(cat: string, name: string, args?: any): void;<br>    end(args?: any): void;<br>    asyncBegin(cat: string, name: string, id?: string, args?: any): string;<br>    asyncEnd(id: string, args?: any): void;<br>    instant(<br>        cat: string,<br>        name: string,<br>        scope?: &#x27;g&#x27; | &#x27;p&#x27; | &#x27;t&#x27;,<br>        args?: any<br>    ): void;<br>    id(): string;<br>}</code><br></pre><br></details><h3 id="constructor-25"><a href="#constructor-25" class="headerlink" title="constructor"></a>constructor</h3><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>options</td><td>录制选项</td></tr></tbody></table><p>可用选项：</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>pid</td><td>进程 id</td></tr><tr><td>tid</td><td>线程 id</td></tr><tr><td>processName</td><td>进程名称</td></tr><tr><td>threadName</td><td>线程名称</td></tr></tbody></table><h3 id="start"><a href="#start" class="headerlink" title="start"></a>start</h3><p>开始录制。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>cat</td><td>开启类别</td></tr></tbody></table><h3 id="stop"><a href="#stop" class="headerlink" title="stop"></a>stop</h3><p>停止录制并获取事件列表。</p><h3 id="begin"><a href="#begin" class="headerlink" title="begin"></a>begin</h3><p>记录开始事件。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>cat</td><td>事件类别</td></tr><tr><td>name</td><td>事件名称</td></tr><tr><td>args</td><td>参数</td></tr></tbody></table><h3 id="end"><a href="#end" class="headerlink" title="end"></a>end</h3><p>记录结束事件。</p><h3 id="asyncBegin"><a href="#asyncBegin" class="headerlink" title="asyncBegin"></a>asyncBegin</h3><p>记录异步开始事件。</p><h3 id="asyncEnd"><a href="#asyncEnd" class="headerlink" title="asyncEnd"></a>asyncEnd</h3><p>记录异步结束事件。</p><h3 id="instant"><a href="#instant" class="headerlink" title="instant"></a>instant</h3><p>记录 instant 事件。</p><h3 id="id"><a href="#id" class="headerlink" title="id"></a>id</h3><p>获取一个唯一 id。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> tracing = <span class="keyword">new</span> Tracing();</span><br><span class="line">tracing.start();</span><br><span class="line">tracing.begin(<span class="string">'cat'</span>, <span class="string">'name'</span>);</span><br><span class="line"><span class="comment">// Do something...</span></span><br><span class="line">tracing.end();</span><br><span class="line">fs.writeFileSync(</span><br><span class="line">    <span class="string">'path/to/trace'</span>,</span><br><span class="line">    <span class="built_in">JSON</span>.stringify(tracing.stop()),</span><br><span class="line">    <span class="string">'utf8'</span>,</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="Trie"><a href="#Trie" class="headerlink" title="Trie"></a>Trie</h2><p>字典树数据结构。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">class Trie {<br>    add(word: string): void;<br>    remove(word: string): void;<br>    has(word: string): boolean;<br>    words(prefix: string): string[];<br>    clear(): void;<br>}</code><br></pre><br></details><h3 id="add-3"><a href="#add-3" class="headerlink" title="add"></a>add</h3><p>添加单词到字典数。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>word</td><td>要添加的单词</td></tr></tbody></table><h3 id="remove-7"><a href="#remove-7" class="headerlink" title="remove"></a>remove</h3><p>从字典树中移除单词。</p><h3 id="has-4"><a href="#has-4" class="headerlink" title="has"></a>has</h3><p>检查字典树中是否存在单词。</p><h3 id="words"><a href="#words" class="headerlink" title="words"></a>words</h3><p>获取所有带指定前缀的单词。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>prefix</td><td>单词前缀</td></tr><tr><td>返回值</td><td>所有带指定前缀的单词</td></tr></tbody></table><h3 id="clear-6"><a href="#clear-6" class="headerlink" title="clear"></a>clear</h3><p>清除字典树中的所有单词。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> trie = <span class="keyword">new</span> Trie();</span><br><span class="line">trie.add(<span class="string">'carpet'</span>);</span><br><span class="line">trie.add(<span class="string">'car'</span>);</span><br><span class="line">trie.add(<span class="string">'cat'</span>);</span><br><span class="line">trie.add(<span class="string">'cart'</span>);</span><br><span class="line">trie.has(<span class="string">'cat'</span>); <span class="comment">// -&gt; true</span></span><br><span class="line">trie.remove(<span class="string">'carpet'</span>);</span><br><span class="line">trie.has(<span class="string">'carpet'</span>); <span class="comment">// -&gt; false</span></span><br><span class="line">trie.words(<span class="string">'car'</span>); <span class="comment">// -&gt; ['car', 'cart']</span></span><br><span class="line">trie.clear();</span><br></pre></td></tr></table></figure><h2 id="Tween"><a href="#Tween" class="headerlink" title="Tween"></a>Tween</h2><p>JavaScript 补间动画库。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">class Tween extends Emitter {<br>    constructor(target: any);<br>    to(props: any, duration?: number, ease?: string | Function): Tween;<br>    progress(): number;<br>    progress(progress: number): Tween;<br>    play(): Tween;<br>    pause(): Tween;<br>    paused(): boolean;<br>}</code><br></pre><br></details><p>继承自 Emitter 类。</p><h3 id="constructor-26"><a href="#constructor-26" class="headerlink" title="constructor"></a>constructor</h3><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>obj</td><td>要补间的对象</td></tr></tbody></table><h3 id="to"><a href="#to" class="headerlink" title="to"></a>to</h3><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>destination</td><td>目标属性值</td></tr><tr><td>duration</td><td>补间时长</td></tr><tr><td>ease</td><td>缓动函数</td></tr></tbody></table><h3 id="play"><a href="#play" class="headerlink" title="play"></a>play</h3><p>开始播放。</p><h3 id="pause"><a href="#pause" class="headerlink" title="pause"></a>pause</h3><p>暂停动画。</p><h3 id="paused"><a href="#paused" class="headerlink" title="paused"></a>paused</h3><p>检查动画是否暂停。</p><h3 id="progress"><a href="#progress" class="headerlink" title="progress"></a>progress</h3><p>设置或获取动画进度。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>progress</td><td>介于 0 到 1 之间的数字</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pos = &#123; <span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> tween = <span class="keyword">new</span> Tween(pos);</span><br><span class="line">tween</span><br><span class="line">    .on(<span class="string">'update'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(target.x, target.y);</span><br><span class="line">    &#125;)</span><br><span class="line">    .on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(target.x, target.y); <span class="comment">// -&gt; 100, 100</span></span><br><span class="line">    &#125;);</span><br><span class="line">tween.to(&#123; <span class="attr">x</span>: <span class="number">100</span>, <span class="attr">y</span>: <span class="number">100</span> &#125;, <span class="number">1000</span>, <span class="string">'inElastic'</span>).play();</span><br></pre></td></tr></table></figure><h2 id="Url"><a href="#Url" class="headerlink" title="Url"></a>Url</h2><p>简单 url 操作库。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">namespace Url {<br>    interface IUrl {<br>        protocol: string;<br>        auth: string;<br>        hostname: string;<br>        hash: string;<br>        query: any;<br>        port: string;<br>        pathname: string;<br>        slashes: boolean;<br>    }<br>}<br>class Url {<br>    protocol: string;<br>    auth: string;<br>    hostname: string;<br>    hash: string;<br>    query: any;<br>    port: string;<br>    pathname: string;<br>    slashes: boolean;<br>    constructor(url?: string);<br>    setQuery(name: string, val: string | number): Url;<br>    setQuery(query: types.PlainObj&lt;string | number&gt;): Url;<br>    rmQuery(name: string | string[]): Url;<br>    toString(): string;<br>    static parse(url: string): Url.IUrl;<br>    static stringify(object: Url.IUrl): string;<br>}</code><br></pre><br></details><h3 id="constructor-27"><a href="#constructor-27" class="headerlink" title="constructor"></a>constructor</h3><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>url=location</td><td>url 地址</td></tr></tbody></table><h3 id="setQuery"><a href="#setQuery" class="headerlink" title="setQuery"></a>setQuery</h3><p>设置 query 值。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>name</td><td>query 名</td></tr><tr><td>val</td><td>query 值</td></tr><tr><td>返回值</td><td>this</td></tr></tbody></table><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>query</td><td>query 对象</td></tr><tr><td>返回值</td><td>this</td></tr></tbody></table><h3 id="rmQuery"><a href="#rmQuery" class="headerlink" title="rmQuery"></a>rmQuery</h3><p>移除 query 值。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>name</td><td>query 名</td></tr><tr><td>返回值</td><td>this</td></tr></tbody></table><h3 id="parse-1"><a href="#parse-1" class="headerlink" title="parse"></a>parse</h3><p>【静态】将 url 解析成对象。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>url</td><td>url 地址</td></tr><tr><td>返回值</td><td>url 对象</td></tr></tbody></table><h3 id="stringify"><a href="#stringify" class="headerlink" title="stringify"></a>stringify</h3><p>【静态】将 url 对象转换为 url 地址。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>url</td><td>url 对象</td></tr><tr><td>返回值</td><td>url 地址</td></tr></tbody></table><p>url 对象包含以下属性值：</p><table><thead><tr><th>属性名</th><th>说明</th></tr></thead><tbody><tr><td>protocol</td><td>协议名，（如 http:）</td></tr><tr><td>slashes</td><td>协议名后是否有双斜杠</td></tr><tr><td>auth</td><td>身份验证（例如 用户名:密码）</td></tr><tr><td>hostname</td><td>Host 名，不带端口号</td></tr><tr><td>port</td><td>端口号</td></tr><tr><td>pathname</td><td>URL 路径</td></tr><tr><td>query</td><td>query 对象</td></tr><tr><td>hash</td><td>URL # 字符后边的部分，# 包含在内</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> url = <span class="keyword">new</span> Url(<span class="string">'http://example.com:8080?eruda=true'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(url.port); <span class="comment">// -&gt; '8080'</span></span><br><span class="line">url.query.foo = <span class="string">'bar'</span>;</span><br><span class="line">url.rmQuery(<span class="string">'eruda'</span>);</span><br><span class="line">url.toString(); <span class="comment">// -&gt; 'http://example.com:8080/?foo=bar'</span></span><br></pre></td></tr></table></figure><h2 id="Validator"><a href="#Validator" class="headerlink" title="Validator"></a>Validator</h2><p>对象属性值校验。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">class Validator {<br>    constructor(options: types.PlainObj&lt;any&gt;);<br>    validate(object: any): string | boolean;<br>    static plugins: any;<br>    static addPlugin(name: string, plugin: types.AnyFn): void;<br>}</code><br></pre><br></details><h3 id="constructor-28"><a href="#constructor-28" class="headerlink" title="constructor"></a>constructor</h3><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>options</td><td>校验配置</td></tr></tbody></table><h3 id="validate"><a href="#validate" class="headerlink" title="validate"></a>validate</h3><p>校验对象。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>obj</td><td>目标对象</td></tr><tr><td>返回值</td><td>校验结果，true 表示通过</td></tr></tbody></table><h3 id="addPlugin"><a href="#addPlugin" class="headerlink" title="addPlugin"></a>addPlugin</h3><p>【静态】添加插件。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>name</td><td>插件名</td></tr><tr><td>plugin</td><td>校验函数</td></tr></tbody></table><h3 id="默认插件"><a href="#默认插件" class="headerlink" title="默认插件"></a>默认插件</h3><p>required，number，boolean，string 和 regexp。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Validator.addPlugin(<span class="string">'custom'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">val, key, config</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> val === <span class="string">'string'</span> &amp;&amp; val.length === <span class="number">5</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> key + <span class="string">' should be a string with length 5'</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> validator = <span class="keyword">new</span> Validator(&#123;</span><br><span class="line">    test: &#123;</span><br><span class="line">        required: <span class="literal">true</span>,</span><br><span class="line">        custom: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">validator.validate(&#123;&#125;); <span class="comment">// -&gt; 'test is required'</span></span><br><span class="line">validator.validate(&#123; <span class="attr">test</span>: <span class="number">1</span> &#125;); <span class="comment">// -&gt; 'test should be a string with length 5';</span></span><br><span class="line">validator.validate(&#123; <span class="attr">test</span>: <span class="string">'licia'</span> &#125;); <span class="comment">// -&gt; true</span></span><br></pre></td></tr></table></figure><h2 id="Wrr"><a href="#Wrr" class="headerlink" title="Wrr"></a>Wrr</h2><p>加权轮询调度算法实现。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">class Wrr {<br>    size: number;<br>    set(val: any, weight: number): void;<br>    get(val: any): number | void;<br>    remove(val: any): void;<br>    clear(): void;<br>    next(): any;<br>}</code><br></pre><br></details><h3 id="size-5"><a href="#size-5" class="headerlink" title="size"></a>size</h3><p>池大小。</p><h3 id="set-6"><a href="#set-6" class="headerlink" title="set"></a>set</h3><p>设置值和权重，如果值已存在则更新其权重。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>val</td><td>要设置的值</td></tr><tr><td>weight</td><td>值的权重</td></tr></tbody></table><h3 id="get-5"><a href="#get-5" class="headerlink" title="get"></a>get</h3><p>获取指定值的权重。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>val</td><td>要获取的值</td></tr><tr><td>返回值</td><td>值的权重</td></tr></tbody></table><h3 id="remove-8"><a href="#remove-8" class="headerlink" title="remove"></a>remove</h3><p>移除指定值。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>val</td><td>要移除的值</td></tr></tbody></table><h3 id="next"><a href="#next" class="headerlink" title="next"></a>next</h3><p>从池中获取下一个值。</p><h3 id="clear-7"><a href="#clear-7" class="headerlink" title="clear"></a>clear</h3><p>清除所有值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pool = <span class="keyword">new</span> Wrr();</span><br><span class="line">pool.set(<span class="string">'A'</span>, <span class="number">4</span>);</span><br><span class="line">pool.set(<span class="string">'B'</span>, <span class="number">8</span>);</span><br><span class="line">pool.set(<span class="string">'C'</span>, <span class="number">2</span>);</span><br><span class="line">pool.next();</span><br><span class="line">pool.remove(<span class="string">'A'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(pool.size); <span class="comment">// -&gt; 2</span></span><br></pre></td></tr></table></figure><h2 id="abbrev"><a href="#abbrev" class="headerlink" title="abbrev"></a>abbrev</h2><p>计算字符串集的缩写集合。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function abbrev(…names: string[]): types.PlainObj&lt;string&gt;;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>names</td><td>字符串集</td></tr><tr><td>返回值</td><td>缩写集合</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">abbrev(<span class="string">'lina'</span>, <span class="string">'luna'</span>);</span><br><span class="line"><span class="comment">// -&gt; &#123;li: 'lina', lin: 'lina', lina: 'lina', lu: 'luna', lun: 'luna', luna: 'luna'&#125;</span></span><br></pre></td></tr></table></figure><h2 id="after-1"><a href="#after-1" class="headerlink" title="after"></a>after</h2><p>创建一个函数，只有在调用 n 次后才会调用一次。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function after&lt;T extends types.AnyFn&gt;(n: number, fn: T): T;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>n</td><td>调用次数</td></tr><tr><td>fn</td><td>源函数</td></tr><tr><td>返回值</td><td>输出函数</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fn = after(<span class="number">5</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// -&gt; Only invoke after fn is called 5 times.</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="ajax"><a href="#ajax" class="headerlink" title="ajax"></a>ajax</h2><p>执行异步 HTTP 请求。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">namespace ajax {<br>    function get(<br>        url: string,<br>        data: string | {},<br>        success: types.AnyFn,<br>        dataType?: string<br>    ): XMLHttpRequest;<br>    function get(<br>        url: string,<br>        success: types.AnyFn,<br>        dataType?: string<br>    ): XMLHttpRequest;<br>    function post(<br>        url: string,<br>        data: string | {},<br>        success: types.AnyFn,<br>        dataType?: string<br>    ): XMLHttpRequest;<br>    function post(<br>        url: string,<br>        success: types.AnyFn,<br>        dataType?: string<br>    ): XMLHttpRequest;<br>}<br>function ajax(options: {<br>    type?: string;<br>    url: string;<br>    data?: string | {};<br>    dataType?: string;<br>    contentType?: string;<br>    success?: types.AnyFn;<br>    error?: types.AnyFn;<br>    complete?: types.AnyFn;<br>    timeout?: number;<br>}): XMLHttpRequest;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>options</td><td>Ajax 选项</td></tr></tbody></table><p>可用选项：</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>type</td><td>请求类型</td></tr><tr><td>url</td><td>请求地址</td></tr><tr><td>data</td><td>请求数据</td></tr><tr><td>dataType=json</td><td>响应类型（json，xml）</td></tr><tr><td>contentType=application/x-www-form-urlencoded</td><td>请求内容类型</td></tr><tr><td>success</td><td>成功回调</td></tr><tr><td>error</td><td>失败回调</td></tr><tr><td>complete</td><td>结束回调</td></tr><tr><td>timeout</td><td>请求超时</td></tr></tbody></table><h3 id="get-6"><a href="#get-6" class="headerlink" title="get"></a>get</h3><p>type = GET 的快捷方式。</p><h3 id="post"><a href="#post" class="headerlink" title="post"></a>post</h3><p>type = POST 的快捷方式。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>url</td><td>请求地址</td></tr><tr><td>data</td><td>请求数据</td></tr><tr><td>success</td><td>成功回调</td></tr><tr><td>dataType</td><td>响应类型</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ajax(&#123;</span><br><span class="line">    url: <span class="string">'http://example.com'</span>,</span><br><span class="line">    data: &#123; <span class="attr">test</span>: <span class="string">'true'</span> &#125;,</span><br><span class="line">    error() &#123;&#125;,</span><br><span class="line">    success(data) &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;,</span><br><span class="line">    dataType: <span class="string">'json'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">ajax.get(<span class="string">'http://example.com'</span>, &#123;&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="allKeys"><a href="#allKeys" class="headerlink" title="allKeys"></a>allKeys</h2><p>获取对象的所有键名，包括自身的及继承的。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">namespace allKeys {<br>    interface IOptions {<br>        prototype?: boolean;<br>        unenumerable?: boolean;<br>    }<br>}<br>function allKeys(<br>    obj: any,<br>    options: { symbol: true } &amp; allKeys.IOptions<br>): Array&lt;string | Symbol&gt;;<br>function allKeys(<br>    obj: any,<br>    options?: ({ symbol: false } &amp; allKeys.IOptions) | allKeys.IOptions<br>): string[];</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>obj</td><td>目标对象</td></tr><tr><td>options</td><td>选项</td></tr><tr><td>返回值</td><td>包含所有键名的数组</td></tr></tbody></table><p>可用选项：</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>prototype=true</td><td>包含原型键名</td></tr><tr><td>unenumerable=false</td><td>包含不可枚举键名</td></tr><tr><td>symbol=false</td><td>包含 Symbol 键名</td></tr></tbody></table><p>Object 对象原型上的方法不会被获取到。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = <span class="built_in">Object</span>.create(&#123; <span class="attr">zero</span>: <span class="number">0</span> &#125;);</span><br><span class="line">obj.one = <span class="number">1</span>;</span><br><span class="line">allKeys(obj); <span class="comment">// -&gt; ['zero', 'one']</span></span><br></pre></td></tr></table></figure><h2 id="ansiColor"><a href="#ansiColor" class="headerlink" title="ansiColor"></a>ansiColor</h2><p>控制台颜色。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">namespace ansiColor {<br>    type IFn = (str: string) =&gt; string;<br>}<br>const ansiColor: {<br>    black: ansiColor.IFn;<br>    red: ansiColor.IFn;<br>    green: ansiColor.IFn;<br>    yellow: ansiColor.IFn;<br>    blue: ansiColor.IFn;<br>    magenta: ansiColor.IFn;<br>    cyan: ansiColor.IFn;<br>    white: ansiColor.IFn;<br>    gray: ansiColor.IFn;<br>    grey: ansiColor.IFn;<br>    bgBlack: ansiColor.IFn;<br>    bgRed: ansiColor.IFn;<br>    bgGreen: ansiColor.IFn;<br>    bgYellow: ansiColor.IFn;<br>    bgBlue: ansiColor.IFn;<br>    bgMagenta: ansiColor.IFn;<br>    bgCyan: ansiColor.IFn;<br>    bgWhite: ansiColor.IFn;<br>    blackBright: ansiColor.IFn;<br>    redBright: ansiColor.IFn;<br>    greenBright: ansiColor.IFn;<br>    yellowBright: ansiColor.IFn;<br>    blueBright: ansiColor.IFn;<br>    magentaBright: ansiColor.IFn;<br>    cyanBright: ansiColor.IFn;<br>    whiteBright: ansiColor.IFn;<br>    bgBlackBright: ansiColor.IFn;<br>    bgRedBright: ansiColor.IFn;<br>    bgGreenBright: ansiColor.IFn;<br>    bgYellowBright: ansiColor.IFn;<br>    bgBlueBright: ansiColor.IFn;<br>    bgMagentaBright: ansiColor.IFn;<br>    bgCyanBright: ansiColor.IFn;<br>    bgWhiteBright: ansiColor.IFn;<br>};</code><br></pre><br></details><h3 id="支持颜色"><a href="#支持颜色" class="headerlink" title="支持颜色"></a>支持颜色</h3><p>black, red, green, yellow, blue, magenta, cyan, white, gray, grey</p><p>bgBlack, bgRed, bgGreen, bgYellow, bgBlue, bgMagenta, bgCyan, bgWhite,</p><p>blackBright, redBright, greenBright, yellowBright, blueBright, magentaBright, cyanBright, whiteBright</p><p>bgBlackBright, bgRedBright, bgGreenBright, bgYellowBright, bgBlueBright, bgMagentaBright, bgCyanBright, bgWhiteBright</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansiColor.red(<span class="string">'Warning'</span>);</span><br></pre></td></tr></table></figure><h2 id="arrToMap"><a href="#arrToMap" class="headerlink" title="arrToMap"></a>arrToMap</h2><p>将字符串列表转换为映射。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function arrToMap&lt;T&gt;(<br>    arr: string[],<br>    val?: T<br>): { [key: string]: T };</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>arr</td><td>字符串列表</td></tr><tr><td>val=true</td><td>键值</td></tr><tr><td>返回值</td><td>映射</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> needPx = arrToMap([</span><br><span class="line">    <span class="string">'column-count'</span>,</span><br><span class="line">    <span class="string">'columns'</span>,</span><br><span class="line">    <span class="string">'font-weight'</span>,</span><br><span class="line">    <span class="string">'line-weight'</span>,</span><br><span class="line">    <span class="string">'opacity'</span>,</span><br><span class="line">    <span class="string">'z-index'</span>,</span><br><span class="line">    <span class="string">'zoom'</span></span><br><span class="line">]);</span><br><span class="line"><span class="keyword">const</span> key = <span class="string">'column-count'</span>;</span><br><span class="line"><span class="keyword">let</span> val = <span class="string">'5'</span>;</span><br><span class="line"><span class="keyword">if</span> (needPx[key]) val += <span class="string">'px'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(val); <span class="comment">// -&gt; '5px'</span></span><br></pre></td></tr></table></figure><h2 id="atob"><a href="#atob" class="headerlink" title="atob"></a>atob</h2><p>window.atob，运行在 node 环境时使用 Buffer 进行模拟。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function atob(str: string): string;</code><br></pre><br></details><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">atob(<span class="string">'SGVsbG8gV29ybGQ='</span>); <span class="comment">// -&gt; 'Hello World'</span></span><br></pre></td></tr></table></figure><h2 id="average"><a href="#average" class="headerlink" title="average"></a>average</h2><p>获取数字的平均值。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function average(…numbers: number[]): number;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>numbers</td><td>要计算的数字</td></tr><tr><td>返回值</td><td>平均值</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">average(<span class="number">5</span>, <span class="number">3</span>, <span class="number">1</span>); <span class="comment">// -&gt; 3</span></span><br></pre></td></tr></table></figure><h2 id="base64"><a href="#base64" class="headerlink" title="base64"></a>base64</h2><p>base64 编解码。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">const base64: {<br>    encode(bytes: number[]): string;<br>    decode(str: string): number[];<br>};</code><br></pre><br></details><h3 id="encode"><a href="#encode" class="headerlink" title="encode"></a>encode</h3><p>将字节数组编码为 base64 字符串。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>bytes</td><td>字节数组</td></tr><tr><td>返回值</td><td>base64 编码的字符串</td></tr></tbody></table><h3 id="decode"><a href="#decode" class="headerlink" title="decode"></a>decode</h3><p>将 base64 字符串解码为字节数组。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>str</td><td>base64 编码的字符串</td></tr><tr><td>返回值</td><td>字节数组</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">base64.encode([<span class="number">168</span>, <span class="number">174</span>, <span class="number">155</span>, <span class="number">255</span>]); <span class="comment">// -&gt; 'qK6b/w=='</span></span><br><span class="line">base64.decode(<span class="string">'qK6b/w=='</span>); <span class="comment">// -&gt; [168, 174, 155, 255]</span></span><br></pre></td></tr></table></figure><h2 id="before-1"><a href="#before-1" class="headerlink" title="before"></a>before</h2><p>创建一个函数，只能调用少于 n 次。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function before&lt;T extends types.AnyFn&gt;(n: number, fn: T): T;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>n</td><td>调用次数</td></tr><tr><td>fn</td><td>源函数</td></tr><tr><td>返回值</td><td>输出函数</td></tr></tbody></table><p>超过 n 次后再次调用函数将直接返回最后一次函数的调用结果。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fn = before(<span class="number">5</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;);</span><br><span class="line">fn(); <span class="comment">// Allow function to be call 4 times at last.</span></span><br></pre></td></tr></table></figure><h2 id="binarySearch"><a href="#binarySearch" class="headerlink" title="binarySearch"></a>binarySearch</h2><p>二分查找实现。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function binarySearch(<br>    array: any[],<br>    val: any,<br>    cmp?: types.AnyFn<br>): number;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>array</td><td>目标数组</td></tr><tr><td>val</td><td>要查找的值</td></tr><tr><td>cmp</td><td>比较器</td></tr><tr><td>返回值</td><td>第一次出现的位置，如果没有，返回 -1</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">binarySearch([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">2</span>); <span class="comment">// -&gt; 1</span></span><br><span class="line">binarySearch([<span class="number">1</span>, <span class="number">2</span>], <span class="number">3</span>); <span class="comment">// -&gt; -1</span></span><br><span class="line">binarySearch(</span><br><span class="line">    [</span><br><span class="line">        &#123;</span><br><span class="line">            key: <span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            key: <span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    &#123; <span class="attr">key</span>: <span class="number">1</span> &#125;,</span><br><span class="line">    (a, b) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (a.key === b.key) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a.key &lt; b.key ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">); <span class="comment">// -&gt; 0</span></span><br></pre></td></tr></table></figure><h2 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h2><p>创建一个绑定到指定对象的函数。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function bind(<br>    fn: types.AnyFn,<br>    ctx: any,<br>    …args: any[]<br>): types.AnyFn;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>fn</td><td>源函数</td></tr><tr><td>ctx</td><td>绑定对象</td></tr><tr><td>args</td><td>可选参数</td></tr><tr><td>返回值</td><td>输出函数</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fn = bind(</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">':'</span> + msg);</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'eustia'</span> &#125;,</span><br><span class="line">    <span class="string">'I am a utility library.'</span></span><br><span class="line">);</span><br><span class="line">fn(); <span class="comment">// -&gt; 'eustia: I am a utility library.'</span></span><br></pre></td></tr></table></figure><h2 id="btoa"><a href="#btoa" class="headerlink" title="btoa"></a>btoa</h2><p>window.btoa，运行在 node 环境时使用 Buffer 进行模拟。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function btoa(str: string): string;</code><br></pre><br></details><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">btoa(<span class="string">'Hello World'</span>); <span class="comment">// -&gt; 'SGVsbG8gV29ybGQ='</span></span><br></pre></td></tr></table></figure><h2 id="bubbleSort"><a href="#bubbleSort" class="headerlink" title="bubbleSort"></a>bubbleSort</h2><p>冒泡排序实现。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function bubbleSort(arr: any[], cmp?: types.AnyFn): any[];</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>arr</td><td>要排序的数组</td></tr><tr><td>cmp</td><td>比较器</td></tr><tr><td>返回值</td><td>有序数组</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bubbleSort([<span class="number">2</span>, <span class="number">1</span>]); <span class="comment">// -&gt; [1, 2]</span></span><br></pre></td></tr></table></figure><h2 id="bytesToStr"><a href="#bytesToStr" class="headerlink" title="bytesToStr"></a>bytesToStr</h2><p>将字节数组转换为字符串。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function bytesToStr(bytes: number[], encoding?: string): string;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>bytes</td><td>字节数组</td></tr><tr><td>encoding=utf8</td><td>字符串编码</td></tr><tr><td>返回值</td><td>目标字符串</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bytesToStr([<span class="number">108</span>, <span class="number">105</span>, <span class="number">99</span>, <span class="number">105</span>, <span class="number">97</span>]); <span class="comment">// -&gt; 'licia'</span></span><br></pre></td></tr></table></figure><h2 id="bytesToWords"><a href="#bytesToWords" class="headerlink" title="bytesToWords"></a>bytesToWords</h2><p>将字节数组转换为 32 位字长数组。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function bytesToWords(bytes: number[]): number[];</code><br></pre><br></details><p>在使用 CryptoJS 时会派上用处。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>bytes</td><td>字节数组</td></tr><tr><td>返回值</td><td>字长数组</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bytesToWords([<span class="number">0x12</span>, <span class="number">0x34</span>, <span class="number">0x56</span>, <span class="number">0x78</span>]); <span class="comment">// -&gt; [0x12345678]</span></span><br></pre></td></tr></table></figure><h2 id="cacheRequire"><a href="#cacheRequire" class="headerlink" title="cacheRequire"></a>cacheRequire</h2><p>缓存模块加载，提高应用启动速度。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function cacheRequire(options?: {<br>    dir?: string;<br>    requirePath?: boolean;<br>    code?: boolean;<br>    compileCache?: boolean;<br>}): void;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>options</td><td>缓存选项</td></tr></tbody></table><p>可用选项：</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>dir</td><td>缓存文件夹</td></tr><tr><td>requirePath=true</td><td>Whether require path should be cached</td></tr><tr><td>code=false</td><td>Whether js code should be cached</td></tr><tr><td>compileCache=true</td><td>Whether compile cache should be used</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cacheRequire(&#123;</span><br><span class="line">    dir: <span class="string">'path/to/cache/dir'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="callbackify"><a href="#callbackify" class="headerlink" title="callbackify"></a>callbackify</h2><p>将返回 Promise 的函数转换为使用回调的函数。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function callbackify(fn: types.AnyFn): types.AnyFn;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>fn</td><td>返回 Promise 的函数</td></tr><tr><td>返回值</td><td>使用回调的函数</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cbFn = callbackify(fn);</span><br><span class="line"></span><br><span class="line">cbFn(<span class="function"><span class="keyword">function</span>(<span class="params">err, value</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="camelCase"><a href="#camelCase" class="headerlink" title="camelCase"></a>camelCase</h2><p>将字符串转换为驼峰式。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function camelCase(str: string): string;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>str</td><td>源字符串</td></tr><tr><td>返回值</td><td>驼峰式字符串</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">camelCase(<span class="string">'foo-bar'</span>); <span class="comment">// -&gt; fooBar</span></span><br><span class="line">camelCase(<span class="string">'foo bar'</span>); <span class="comment">// -&gt; fooBar</span></span><br><span class="line">camelCase(<span class="string">'foo_bar'</span>); <span class="comment">// -&gt; fooBar</span></span><br><span class="line">camelCase(<span class="string">'foo.bar'</span>); <span class="comment">// -&gt; fooBar</span></span><br></pre></td></tr></table></figure><h2 id="capitalize"><a href="#capitalize" class="headerlink" title="capitalize"></a>capitalize</h2><p>将字符串的第一个字符转换为大写，其余字符转换为小写。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function capitalize(str: string): string;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>str</td><td>源字符串</td></tr><tr><td>返回值</td><td>目标字符串</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">capitalize(<span class="string">'rED'</span>); <span class="comment">// -&gt; Red</span></span><br></pre></td></tr></table></figure><h2 id="castPath"><a href="#castPath" class="headerlink" title="castPath"></a>castPath</h2><p>将值转换为属性路径数组。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function castPath(path: string | string[], obj?: any): string[];</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>path</td><td>要转换的值</td></tr><tr><td>obj</td><td>目标对象</td></tr><tr><td>返回值</td><td>属性路径数组</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">castPath(<span class="string">'a.b.c'</span>); <span class="comment">// -&gt; ['a', 'b', 'c']</span></span><br><span class="line">castPath([<span class="string">'a'</span>]); <span class="comment">// -&gt; ['a']</span></span><br><span class="line">castPath(<span class="string">'a[0].b'</span>); <span class="comment">// -&gt; ['a', '0', 'b']</span></span><br><span class="line">castPath(<span class="string">'a.b.c'</span>, &#123; <span class="string">'a.b.c'</span>: <span class="literal">true</span> &#125;); <span class="comment">// -&gt; ['a.b.c']</span></span><br></pre></td></tr></table></figure><h2 id="centerAlign"><a href="#centerAlign" class="headerlink" title="centerAlign"></a>centerAlign</h2><p>字符串居中。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function centerAlign(<br>    str: string | string[],<br>    width?: number<br>): string;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>str</td><td>源字符串</td></tr><tr><td>width</td><td>每行宽度</td></tr><tr><td>返回值</td><td>居中字符串</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">centerAlign(<span class="string">'test'</span>, <span class="number">8</span>); <span class="comment">// -&gt; '  test'</span></span><br><span class="line">centerAlign(<span class="string">'test\nlines'</span>, <span class="number">8</span>); <span class="comment">// -&gt; '  test\n lines'</span></span><br><span class="line">centerAlign([<span class="string">'test'</span>, <span class="string">'lines'</span>], <span class="number">8</span>); <span class="comment">// -&gt; '  test\n lines'</span></span><br></pre></td></tr></table></figure><h2 id="char"><a href="#char" class="headerlink" title="char"></a>char</h2><p>根据指定的整数返回 unicode 编码为该整数的字符。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function char(num: number): string;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>num</td><td>要转换的整数</td></tr><tr><td>返回值</td><td>对应字符</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">char(<span class="number">65</span>); <span class="comment">// -&gt; 'A'</span></span><br><span class="line">char(<span class="number">97</span>); <span class="comment">// -&gt; 'a'</span></span><br></pre></td></tr></table></figure><h2 id="chunk"><a href="#chunk" class="headerlink" title="chunk"></a>chunk</h2><p>将数组拆分为指定长度的子数组。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function chunk(arr: any[], size?: number): Array&lt;any[]&gt;;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>arr</td><td>源数组</td></tr><tr><td>size=1</td><td>子数组的长度</td></tr><tr><td>返回值</td><td>目标数组</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chunk([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], <span class="number">2</span>); <span class="comment">// -&gt; [[1, 2], [3, 4]]</span></span><br><span class="line">chunk([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], <span class="number">3</span>); <span class="comment">// -&gt; [[1, 2, 3], [4]]</span></span><br><span class="line">chunk([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]); <span class="comment">// -&gt; [[1], [2], [3], [4]]</span></span><br></pre></td></tr></table></figure><h2 id="clamp"><a href="#clamp" class="headerlink" title="clamp"></a>clamp</h2><p>将数字限定于指定区间。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function clamp(n: number, lower: number, upper: number): number;<br>function clamp(n: number, upper: number): number;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>n</td><td>要处理的数字</td></tr><tr><td>lower</td><td>下限</td></tr><tr><td>upper</td><td>上限</td></tr><tr><td>返回值</td><td>限定后的数字</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">clamp(<span class="number">-10</span>, <span class="number">-5</span>, <span class="number">5</span>); <span class="comment">// -&gt; -5</span></span><br><span class="line">clamp(<span class="number">10</span>, <span class="number">-5</span>, <span class="number">5</span>); <span class="comment">// -&gt; 5</span></span><br><span class="line">clamp(<span class="number">2</span>, <span class="number">-5</span>, <span class="number">5</span>); <span class="comment">// -&gt; 2</span></span><br><span class="line">clamp(<span class="number">10</span>, <span class="number">5</span>); <span class="comment">// -&gt; 5</span></span><br><span class="line">clamp(<span class="number">2</span>, <span class="number">5</span>); <span class="comment">// -&gt; 2</span></span><br></pre></td></tr></table></figure><h2 id="className"><a href="#className" class="headerlink" title="className"></a>className</h2><p>合并 class。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function className(…names: any[]): string;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>names</td><td>要合并的 class</td></tr><tr><td>返回值</td><td>合并后的 class 字符串</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">className(<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>); <span class="comment">// -&gt; 'a b c'</span></span><br><span class="line">className(<span class="string">'a'</span>, <span class="literal">false</span>, <span class="string">'b'</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="string">'c'</span>); <span class="comment">// -&gt; 'a b 1 c'</span></span><br><span class="line">className(<span class="string">'a'</span>, [<span class="string">'b'</span>, <span class="string">'c'</span>]); <span class="comment">// -&gt; 'a b c'</span></span><br><span class="line">className(<span class="string">'a'</span>, &#123; <span class="attr">b</span>: <span class="literal">false</span>, <span class="attr">c</span>: <span class="literal">true</span> &#125;); <span class="comment">// -&gt; 'a c'</span></span><br><span class="line">className(<span class="string">'a'</span>, [<span class="string">'b'</span>, <span class="string">'c'</span>, &#123; <span class="attr">d</span>: <span class="literal">true</span>, <span class="attr">e</span>: <span class="literal">false</span> &#125;]); <span class="comment">// -&gt; 'a b c d';</span></span><br></pre></td></tr></table></figure><h2 id="cliHelp"><a href="#cliHelp" class="headerlink" title="cliHelp"></a>cliHelp</h2><p>输出命令行帮助。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">namespace cliHelp {<br>    interface IOption {<br>        name: string;<br>        shorthand?: string;<br>        desc: string;<br>    }<br>    interface ICommand {<br>        name: string;<br>        desc: string;<br>        usage: string | string[];<br>        options?: IOption[];<br>    }<br>    interface IData {<br>        name: string;<br>        usage: string | string[];<br>        commands: ICommand[];<br>    }<br>}<br>function cliHelp(data: cliHelp.IData | cliHelp.ICommand): string;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>data</td><td>帮助数据</td></tr><tr><td>返回值</td><td>命令行帮助</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> test = &#123;</span><br><span class="line">    name: <span class="string">'test'</span>,</span><br><span class="line">    desc: <span class="string">'Generate test files'</span>,</span><br><span class="line">    usage: [<span class="string">'&lt;module-name&gt; [options]'</span>, <span class="string">'lpad --browser'</span>],</span><br><span class="line">    options: [</span><br><span class="line">        &#123;</span><br><span class="line">            name: <span class="string">'browser'</span>,</span><br><span class="line">            shorthand: <span class="string">'b'</span>,</span><br><span class="line">            desc: <span class="string">'True if test should run in a browser'</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> data = &#123;</span><br><span class="line">    name: <span class="string">'licia'</span>,</span><br><span class="line">    usage: <span class="string">'&lt;command&gt; [options]'</span>,</span><br><span class="line">    commands: [test]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">cliHelp(data);</span><br><span class="line">cliHelp(test);</span><br></pre></td></tr></table></figure><h2 id="clone"><a href="#clone" class="headerlink" title="clone"></a>clone</h2><p>对指定对象进行浅复制。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function clone&lt;T&gt;(val: T): T;</code><br></pre><br></details><p>任何嵌套的对象或数组只会拷贝其引用。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>val</td><td>要克隆的值</td></tr><tr><td>返回值</td><td>克隆值</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clone(&#123; <span class="attr">name</span>: <span class="string">'eustia'</span> &#125;); <span class="comment">// -&gt; &#123;name: 'eustia'&#125;</span></span><br></pre></td></tr></table></figure><h2 id="cloneDeep"><a href="#cloneDeep" class="headerlink" title="cloneDeep"></a>cloneDeep</h2><p>深复制。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function cloneDeep&lt;T&gt;(val: T): T;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>val</td><td>要克隆的值</td></tr><tr><td>返回值</td><td>克隆值</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = [&#123; <span class="attr">a</span>: <span class="number">1</span> &#125;, &#123; <span class="attr">a</span>: <span class="number">2</span> &#125;];</span><br><span class="line"><span class="keyword">const</span> obj2 = cloneDeep(obj);</span><br><span class="line"><span class="built_in">console</span>.log(obj[<span class="number">0</span>] === obj2[<span class="number">1</span>]); <span class="comment">// -&gt; false</span></span><br></pre></td></tr></table></figure><h2 id="cmpVersion"><a href="#cmpVersion" class="headerlink" title="cmpVersion"></a>cmpVersion</h2><p>比较版本号。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function cmpVersion(v1: string, v2: string): number;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>v1</td><td>版本号</td></tr><tr><td>v2</td><td>版本号</td></tr><tr><td>返回值</td><td>比较结果</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cmpVersion(<span class="string">'1.1.8'</span>, <span class="string">'1.0.4'</span>); <span class="comment">// -&gt; 1</span></span><br><span class="line">cmpVersion(<span class="string">'1.0.2'</span>, <span class="string">'1.0.2'</span>); <span class="comment">// -&gt; 0</span></span><br><span class="line">cmpVersion(<span class="string">'2.0'</span>, <span class="string">'2.0.0'</span>); <span class="comment">// -&gt; 0</span></span><br><span class="line">cmpVersion(<span class="string">'3.0.1'</span>, <span class="string">'3.0.0.2'</span>); <span class="comment">// -&gt; 1</span></span><br><span class="line">cmpVersion(<span class="string">'1.1.1'</span>, <span class="string">'1.2.3'</span>); <span class="comment">// -&gt; -1</span></span><br></pre></td></tr></table></figure><h2 id="combine"><a href="#combine" class="headerlink" title="combine"></a>combine</h2><p>创建一个数组，用一个数组的值作为其键名，另一个数组的值作为其值。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function combine(keys: string[], values: any[]): any;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>keys</td><td>键名数组</td></tr><tr><td>values</td><td>键值数组</td></tr><tr><td>返回值</td><td>目标对象</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">combine([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]); <span class="comment">// -&gt; &#123;a: 1, b: 2, c: 3&#125;</span></span><br></pre></td></tr></table></figure><h2 id="compact"><a href="#compact" class="headerlink" title="compact"></a>compact</h2><p>返回数组的拷贝并移除其中的虚值。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function compact(arr: any[]): any[];</code><br></pre><br></details><p>虚值包括 false，null，0，空字符串，undefined 和 NaN。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>arr</td><td>源数组</td></tr><tr><td>返回值</td><td>目标数组</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compact([<span class="number">0</span>, <span class="number">1</span>, <span class="literal">false</span>, <span class="number">2</span>, <span class="string">''</span>, <span class="number">3</span>]); <span class="comment">// -&gt; [1, 2, 3]</span></span><br></pre></td></tr></table></figure><h2 id="compose"><a href="#compose" class="headerlink" title="compose"></a>compose</h2><p>将多个函数组合成一个函数。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function compose(…fn: types.AnyFn[]): types.AnyFn;</code><br></pre><br></details><p>每个函数使用下一个函数的返回值作为参数。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>…fn</td><td>要组合的函数</td></tr><tr><td>返回值</td><td>目标函数</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> welcome = compose(</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'hi: '</span> + name;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name.toUpperCase() + <span class="string">'!'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">welcome(<span class="string">'licia'</span>); <span class="comment">// -&gt; 'hi: LICIA!'</span></span><br></pre></td></tr></table></figure><h2 id="compressImg"><a href="#compressImg" class="headerlink" title="compressImg"></a>compressImg</h2><p>使用 canvas 对图像进行压缩。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function compressImg(<br>    file: File | Blob | string,<br>    cb: types.AnyFn<br>): void;<br>function compressImg(<br>    file: File | Blob | string,<br>    options?: {<br>        maxWidth?: number;<br>        maxHeight?: number;<br>        width?: number;<br>        height?: number;<br>        mimeType?: string;<br>        quality?: number;<br>    },<br>    cb?: types.AnyFn<br>): void;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>file</td><td>图片文件或 url</td></tr><tr><td>options</td><td>选项</td></tr><tr><td>cb</td><td>回调</td></tr></tbody></table><p>可用选项：</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>maxWidth</td><td>最大宽度</td></tr><tr><td>maxHeight</td><td>最大高度</td></tr><tr><td>width</td><td>输出图片宽度</td></tr><tr><td>height</td><td>输出图片高度</td></tr><tr><td>mimeType</td><td>Mine 类型</td></tr><tr><td>quality=0.8</td><td>图片质量，从 0 到 1</td></tr></tbody></table><p>为了保持图片比例，当宽度设置时高度将被忽略。</p><p>如果设置了宽高，最大宽度跟最大高度将被忽略。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> file = <span class="keyword">new</span> Blob([]);</span><br><span class="line">compressImg(</span><br><span class="line">    file,</span><br><span class="line">    &#123;</span><br><span class="line">        maxWidth: <span class="number">200</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">err, file</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h2><p>将多个数组合并成一个数组。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function concat(…args: Array&lt;any[]&gt;): any[];</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>…arr</td><td>要合并的数组</td></tr><tr><td>返回值</td><td>合并后的数组</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">concat([<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>]); <span class="comment">// -&gt; [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><h2 id="contain"><a href="#contain" class="headerlink" title="contain"></a>contain</h2><p>检查数组中是否有指定值。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function contain(arr: any[] | {} | string, val: any): boolean;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>target</td><td>目标对象</td></tr><tr><td>val</td><td>要检查的值</td></tr><tr><td>返回值</td><td>如果有，返回真</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">contain([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">1</span>); <span class="comment">// -&gt; true</span></span><br><span class="line">contain(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;, <span class="number">1</span>); <span class="comment">// -&gt; true</span></span><br><span class="line">contain(<span class="string">'abc'</span>, <span class="string">'a'</span>); <span class="comment">// -&gt; true</span></span><br></pre></td></tr></table></figure><h2 id="convertBase"><a href="#convertBase" class="headerlink" title="convertBase"></a>convertBase</h2><p>对数字进行进制转换。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function convertBase(<br>    num: number | string,<br>    from: number,<br>    to: number<br>): string;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>num</td><td>要转换的数字</td></tr><tr><td>from</td><td>源进制</td></tr><tr><td>to</td><td>目标进制</td></tr><tr><td>返回值</td><td>转换后的数字</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">convertBase(<span class="string">'10'</span>, <span class="number">2</span>, <span class="number">10</span>); <span class="comment">// -&gt; '2'</span></span><br><span class="line">convertBase(<span class="string">'ff'</span>, <span class="number">16</span>, <span class="number">2</span>); <span class="comment">// -&gt; '11111111'</span></span><br></pre></td></tr></table></figure><h2 id="convertBin"><a href="#convertBin" class="headerlink" title="convertBin"></a>convertBin</h2><p>二进制数据格式转换。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">namespace convertBin {<br>    function blobToArrBuffer(blob: any): Promise&lt;ArrayBuffer&gt;;<br>}<br>function convertBin(bin: any, type: string): any;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>bin</td><td>源二进制数据</td></tr><tr><td>type</td><td>二进制类型</td></tr><tr><td>返回值</td><td>目标二进制数据</td></tr></tbody></table><h3 id="支持格式"><a href="#支持格式" class="headerlink" title="支持格式"></a>支持格式</h3><p>base64, ArrayBuffer, Array, Uint8Array, Blob(browser), Buffer(node)</p><p>因为将 Blob 转换为其它格式是个异步过程，所以你不能直接对它进行转换。</p><h3 id="blobToArrBuffer"><a href="#blobToArrBuffer" class="headerlink" title="blobToArrBuffer"></a>blobToArrBuffer</h3><p>将 Blob 类型转换为 ArrayBuffer 类型。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>blob</td><td>Blob 数据</td></tr><tr><td>返回值</td><td>ArrayBuffer promise</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">convertBin(<span class="string">'qK6b/w=='</span>, <span class="string">'Uint8Array'</span>); <span class="comment">// -&gt; [168, 174, 155, 255]</span></span><br><span class="line">convertBin.blobToArrBuffer(<span class="keyword">new</span> Blob([])).then(<span class="function"><span class="params">arrBuffer</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// Do something...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><p>浏览器 cookie 操作库。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">namespace cookie {<br>    interface IOptions {<br>        path?: string;<br>        expires?: number;<br>        domain?: string;<br>        secure?: boolean;<br>    }<br>    interface ICookie {<br>        get(key: string, options?: cookie.IOptions): string;<br>        set(key: string, val: string, options?: cookie.IOptions): ICookie;<br>        remove(key: string, options?: cookie.IOptions): ICookie;<br>    }<br>}<br>const cookie: cookie.ICookie;</code><br></pre><br></details><h3 id="get-7"><a href="#get-7" class="headerlink" title="get"></a>get</h3><p>获取 cookie 值。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>key</td><td>Cookie 键名</td></tr><tr><td>返回值</td><td>对应的 cookie 值</td></tr></tbody></table><h3 id="set-7"><a href="#set-7" class="headerlink" title="set"></a>set</h3><p>设置 cookie 值。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>key</td><td>cookie 键名</td></tr><tr><td>val</td><td>cookie 值</td></tr><tr><td>options</td><td>cookie 选项</td></tr><tr><td>返回值</td><td>cookie 模块</td></tr></tbody></table><h3 id="remove-9"><a href="#remove-9" class="headerlink" title="remove"></a>remove</h3><p>移除 cookie 值。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>key</td><td>Cookie 键名</td></tr><tr><td>options</td><td>Cookie 选项</td></tr><tr><td>返回值</td><td>cookie 模块</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cookie.set(<span class="string">'a'</span>, <span class="string">'1'</span>, &#123; <span class="attr">path</span>: <span class="string">'/'</span> &#125;);</span><br><span class="line">cookie.get(<span class="string">'a'</span>); <span class="comment">// -&gt; '1'</span></span><br><span class="line">cookie.remove(<span class="string">'a'</span>);</span><br></pre></td></tr></table></figure><h2 id="copy"><a href="#copy" class="headerlink" title="copy"></a>copy</h2><p>使用 document.execCommand 将文本拷贝到剪贴板。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function copy(text: string, cb?: types.AnyFn): void;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>text</td><td>要拷贝的文本</td></tr><tr><td>cb</td><td>可选回调</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">copy(<span class="string">'text'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Handle errors.</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="crc1"><a href="#crc1" class="headerlink" title="crc1"></a>crc1</h2><p>CRC1 算法实现。 </p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function crc1(<br>    input: string | number[],<br>    previous?: number<br>): number;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>input</td><td>信息码</td></tr><tr><td>previous</td><td>用于累积计算的 CRC1 校验码</td></tr><tr><td>返回值</td><td>CRC1 校验码</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crc1(<span class="string">'1234567890'</span>).toString(<span class="number">16</span>); <span class="comment">// -&gt; 'd'</span></span><br></pre></td></tr></table></figure><h2 id="crc16"><a href="#crc16" class="headerlink" title="crc16"></a>crc16</h2><p>CRC16 算法实现。 </p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function crc16(<br>    input: string | number[],<br>    previous?: number<br>): number;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>input</td><td>信息码</td></tr><tr><td>previous</td><td>用于累积计算的 CRC16 校验码</td></tr><tr><td>返回值</td><td>CRC16 校验码</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crc16(<span class="string">'1234567890'</span>).toString(<span class="number">16</span>); <span class="comment">// -&gt; 'c57a'</span></span><br></pre></td></tr></table></figure><h2 id="crc32"><a href="#crc32" class="headerlink" title="crc32"></a>crc32</h2><p>CRC32 算法实现。 </p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function crc32(<br>    input: string | number[],<br>    previous?: number<br>): number;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>input</td><td>信息码</td></tr><tr><td>previous</td><td>用于累积计算的 CRC32 校验码</td></tr><tr><td>返回值</td><td>CRC32 校验码</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crc32(<span class="string">'1234567890'</span>).toString(<span class="number">16</span>); <span class="comment">// -&gt; '261daee5'</span></span><br></pre></td></tr></table></figure><h2 id="crc8"><a href="#crc8" class="headerlink" title="crc8"></a>crc8</h2><p>CRC8 算法实现。 </p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function crc8(<br>    input: string | number[],<br>    previous?: number<br>): number;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>input</td><td>信息码</td></tr><tr><td>previous</td><td>用于累积计算的 CRC8 校验码</td></tr><tr><td>返回值</td><td>CRC8 校验码</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crc8(<span class="string">'1234567890'</span>).toString(<span class="number">16</span>); <span class="comment">// -&gt; '52'</span></span><br></pre></td></tr></table></figure><h2 id="create"><a href="#create" class="headerlink" title="create"></a>create</h2><p>创建对象并指定它的原型。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function create(proto?: object): any;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>proto</td><td>新对象原型</td></tr><tr><td>返回值</td><td>目标对象</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = create(&#123; <span class="attr">a</span>: <span class="number">1</span> &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(obj.a); <span class="comment">// -&gt; 1</span></span><br></pre></td></tr></table></figure><h2 id="createAssigner"><a href="#createAssigner" class="headerlink" title="createAssigner"></a>createAssigner</h2><p>用于创建 extend，extendOwn 和 defaults 等模块。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function createAssigner(<br>    keysFn: types.AnyFn,<br>    defaults: boolean<br>): types.AnyFn;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>keysFn</td><td>获取对象键名的函数</td></tr><tr><td>defaults</td><td>设置为真时不对值进行覆盖</td></tr><tr><td>返回值</td><td>目标函数</td></tr></tbody></table><h2 id="createUrl"><a href="#createUrl" class="headerlink" title="createUrl"></a>createUrl</h2><p>CreateObjectURL 的包裹函数。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function createUrl(<br>    data: any,<br>    options?: { type?: string }<br>): string;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>data</td><td>数据</td></tr><tr><td>options</td><td>当数据不是 File 或者 Blob 对象时使用</td></tr><tr><td>返回值</td><td>Blob 地址</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">createUrl(<span class="string">'test'</span>, &#123; <span class="attr">type</span>: <span class="string">'text/plain'</span> &#125;); <span class="comment">// -&gt; Blob url</span></span><br><span class="line">createUrl([<span class="string">'test'</span>, <span class="string">'test'</span>]);</span><br><span class="line">createUrl(<span class="keyword">new</span> Blob([]));</span><br><span class="line">createUrl(<span class="keyword">new</span> File([<span class="string">'test'</span>], <span class="string">'test.txt'</span>));</span><br></pre></td></tr></table></figure><h2 id="css-1"><a href="#css-1" class="headerlink" title="css"></a>css</h2><p>CSS 解析器。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">const css: {<br>    parse(css: string): object;<br>    stringify(stylesheet: object, options?: { indent?: string }): string;<br>};</code><br></pre><br></details><p>注释会被移除掉。</p><h3 id="parse-2"><a href="#parse-2" class="headerlink" title="parse"></a>parse</h3><p>将 CSS 字符串转换为 js 对象。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>css</td><td>CSS 字符串</td></tr><tr><td>返回值</td><td>js 对象</td></tr></tbody></table><h3 id="stringify-1"><a href="#stringify-1" class="headerlink" title="stringify"></a>stringify</h3><p>将 js 对象序列化成 CSS 字符串。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>stylesheet</td><td>要序列化的对象</td></tr><tr><td>options</td><td>序列化选项</td></tr><tr><td>返回值</td><td>CSS 字符串</td></tr></tbody></table><p>选项：</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>indent=’  ‘</td><td>缩进</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> stylesheet = css.parse(<span class="string">'.name &#123; background: #000; color: red; &#125;'</span>);</span><br><span class="line"><span class="comment">// &#123;type: 'stylesheet', rules: [&#123;type: 'rule', selector: '.name', declarations: [...]&#125;]&#125;</span></span><br><span class="line">css.stringify(stylesheet);</span><br></pre></td></tr></table></figure><h2 id="cssPriority"><a href="#cssPriority" class="headerlink" title="cssPriority"></a>cssPriority</h2><p>计算与比较 CSS 选择器/样式的优先级。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">namespace cssPriority {<br>    function compare(p1: number[], p2: number[]): number;<br>}<br>function cssPriority(<br>    selector: string,<br>    options?: {<br>        important?: boolean;<br>        inlineStyle?: boolean;<br>        position?: number;<br>    }<br>): number[];</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>selector</td><td>CSS 选择器</td></tr><tr><td>options</td><td>样式额外信息</td></tr><tr><td>返回值</td><td>优先级数组</td></tr></tbody></table><p>优先级数组包括六个数字值。</p><ol><li>important 标识 </li><li>内联样式</li><li>ID 选择器</li><li>类选择器</li><li>类型选择器</li><li>样式位置</li></ol><h3 id="compare"><a href="#compare" class="headerlink" title="compare"></a>compare</h3><p>比较优先级。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>p1</td><td>优先级数组</td></tr><tr><td>p2</td><td>优先级数组</td></tr><tr><td>返回值</td><td>比较结果</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cssPriority(<span class="string">'a.button &gt; i.icon:before'</span>, &#123;</span><br><span class="line">    important: <span class="literal">true</span>,</span><br><span class="line">    inlineStyle: <span class="literal">false</span>,</span><br><span class="line">    position: <span class="number">100</span></span><br><span class="line">&#125;); <span class="comment">// -&gt; [1, 0, 0, 2, 3, 100]</span></span><br></pre></td></tr></table></figure><h2 id="cssSupports"><a href="#cssSupports" class="headerlink" title="cssSupports"></a>cssSupports</h2><p>检查浏览器是否支持某项 CSS 特性。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function cssSupports(name: string, val?: string): boolean;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>name</td><td>Css 属性名</td></tr><tr><td>val</td><td>Css 属性值</td></tr><tr><td>返回值</td><td>如果支持，返回真</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cssSupports(<span class="string">'display'</span>, <span class="string">'flex'</span>); <span class="comment">// -&gt; true</span></span><br><span class="line">cssSupports(<span class="string">'display'</span>, <span class="string">'invalid'</span>); <span class="comment">// -&gt; false</span></span><br><span class="line">cssSupports(<span class="string">'text-decoration-line'</span>, <span class="string">'underline'</span>); <span class="comment">// -&gt; true</span></span><br><span class="line">cssSupports(<span class="string">'grid'</span>); <span class="comment">// -&gt; true</span></span><br><span class="line">cssSupports(<span class="string">'invalid'</span>); <span class="comment">// -&gt; false</span></span><br></pre></td></tr></table></figure><h2 id="curry"><a href="#curry" class="headerlink" title="curry"></a>curry</h2><p>函数柯里化。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function curry(fn: types.AnyFn): types.AnyFn;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>fn</td><td>源函数</td></tr><tr><td>返回值</td><td>目标函数</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> add = curry(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> add1 = add(<span class="number">1</span>);</span><br><span class="line">add1(<span class="number">2</span>); <span class="comment">// -&gt; 3</span></span><br></pre></td></tr></table></figure><h2 id="dateFormat"><a href="#dateFormat" class="headerlink" title="dateFormat"></a>dateFormat</h2><p>简单日期格式化。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function dateFormat(<br>    date: Date,<br>    mask: string,<br>    utc?: boolean,<br>    gmt?: boolean<br>): string;<br>function dateFormat(<br>    mask: string,<br>    utc?: boolean,<br>    gmt?: boolean<br>): string;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>date=new Date</td><td>要格式化的日期对象</td></tr><tr><td>mask</td><td>日期掩码</td></tr><tr><td>utc=false</td><td>是否是 UTC</td></tr><tr><td>gmt=false</td><td>是否是 GMT</td></tr><tr><td>返回值</td><td>格式化日期</td></tr></tbody></table><table><thead><tr><th>掩码</th><th>说明</th></tr></thead><tbody><tr><td>d</td><td>月份天数，不补零</td></tr><tr><td>dd</td><td>月份天数，不足两位补零</td></tr><tr><td>ddd</td><td>星期几，简称</td></tr><tr><td>dddd</td><td>星期几，全称</td></tr><tr><td>m</td><td>月份，数字，不补零</td></tr><tr><td>mm</td><td>月份，数字，不足两位补零</td></tr><tr><td>mmm</td><td>月份，简称</td></tr><tr><td>mmmm</td><td>月份，全称</td></tr><tr><td>yy</td><td>年份，只显示后两位数字，不足两位补零</td></tr><tr><td>yyyy</td><td>年份，显示四位数字</td></tr><tr><td>h</td><td>小时，不补零 (12 小时制)</td></tr><tr><td>hh</td><td>小时，不足两位补零（12 小时制）</td></tr><tr><td>H</td><td>小时，不补零（24 小时制）</td></tr><tr><td>HH</td><td>小时，不足两位补零（24 小时制）</td></tr><tr><td>M</td><td>分钟，不补零</td></tr><tr><td>MM</td><td>分钟，不足两位补零</td></tr><tr><td>s</td><td>秒数，不补零</td></tr><tr><td>ss</td><td>秒数，不足两位补零</td></tr><tr><td>l L</td><td>毫秒，l 显示 3 位， L 显示 2 位</td></tr><tr><td>t</td><td>小写显示上午下午，a 或 p</td></tr><tr><td>tt</td><td>小写显示上午下午，am 或 pm</td></tr><tr><td>T</td><td>大写显示上午下午，A 或 P</td></tr><tr><td>TT</td><td>大写显示上午下午，AM 或 PM</td></tr><tr><td>Z</td><td>美国时区缩写，比如 EST 或 MDT</td></tr><tr><td>o</td><td>GMT/UTC 时区时差，比如 -0500 或 +0230</td></tr><tr><td>S</td><td>月份天数序数后缀 （st，nd，rd，或 th）</td></tr><tr><td>UTC:</td><td>是否是 UTC，必须写在最前面</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dateFormat(<span class="string">'isoDate'</span>); <span class="comment">// -&gt; 2016-11-19</span></span><br><span class="line">dateFormat(<span class="string">'yyyy-mm-dd HH:MM:ss'</span>); <span class="comment">// -&gt; 2016-11-19 19:00:04</span></span><br><span class="line">dateFormat(<span class="keyword">new</span> <span class="built_in">Date</span>(), <span class="string">'yyyy-mm-dd'</span>); <span class="comment">// -&gt; 2016-11-19</span></span><br></pre></td></tr></table></figure><h2 id="debounce"><a href="#debounce" class="headerlink" title="debounce"></a>debounce</h2><p>返回函数的防反跳版本。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function debounce&lt;T extends types.AnyFn&gt;(fn: T, wait: number): T;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>fn</td><td>源函数</td></tr><tr><td>wait</td><td>延迟毫秒数</td></tr><tr><td>返回值</td><td>目标函数</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> calLayout = debounce(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;, <span class="number">300</span>);</span><br><span class="line"><span class="comment">// $(window).resize(calLayout);</span></span><br></pre></td></tr></table></figure><h2 id="debug"><a href="#debug" class="headerlink" title="debug"></a>debug</h2><p>简单的 JavaScript 输出 debug 日志函数。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function debug(name: string): any;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>name</td><td>名称</td></tr><tr><td>返回值</td><td>打印格式化日志的函数</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> d = debug(<span class="string">'test'</span>);</span><br><span class="line">d(<span class="string">'doing lots of uninteresting work'</span>);</span><br><span class="line">d.enabled = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><h2 id="deburr"><a href="#deburr" class="headerlink" title="deburr"></a>deburr</h2><p>转换拉丁语-1补充字母和拉丁语扩展字母-A为基本拉丁字母，并且去除组合变音标记。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function deburr(str: string): string;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>str</td><td>要处理的字符串</td></tr><tr><td>返回值</td><td>目标字符串</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deburr(<span class="string">'déjà vu'</span>); <span class="comment">// -&gt; 'deja vu'</span></span><br></pre></td></tr></table></figure><h2 id="decodeUriComponent"><a href="#decodeUriComponent" class="headerlink" title="decodeUriComponent"></a>decodeUriComponent</h2><p>类似 decodeURIComponent 函数，只是输入不合法时不抛出错误并尽可能地对其进行解码。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function decodeUriComponent(str: string): string;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>str</td><td>要解码的字符串</td></tr><tr><td>返回值</td><td>解码后的字符串</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">decodeUriComponent(<span class="string">'%%25%'</span>); <span class="comment">// -&gt; '%%%'</span></span><br><span class="line">decodeUriComponent(<span class="string">'%E0%A4%A'</span>); <span class="comment">// -&gt; '\xE0\xA4%A'</span></span><br></pre></td></tr></table></figure><h2 id="defaults"><a href="#defaults" class="headerlink" title="defaults"></a>defaults</h2><p>填充对象的默认值。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function defaults(obj: any, …src: any[]): any;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>obj</td><td>目标对象</td></tr><tr><td>…src</td><td>提供默认值对象</td></tr><tr><td>返回值</td><td>目标对象</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">defaults(&#123; <span class="attr">name</span>: <span class="string">'RedHood'</span> &#125;, &#123; <span class="attr">name</span>: <span class="string">'Unknown'</span>, <span class="attr">age</span>: <span class="number">24</span> &#125;); <span class="comment">// -&gt; &#123;name: 'RedHood', age: 24&#125;</span></span><br></pre></td></tr></table></figure><h2 id="define"><a href="#define" class="headerlink" title="define"></a>define</h2><p>定义一个模块，需要跟 use 模块配合使用。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function define(<br>    name: string,<br>    requires: string[],<br>    method: types.AnyFn<br>): void;<br>function define(name: string, method: types.AnyFn): void;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>name</td><td>模块名</td></tr><tr><td>requires</td><td>依赖</td></tr><tr><td>method</td><td>模块主体函数</td></tr></tbody></table><p>模块主体函数只有被 use 模块使用时才会被执行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">define(<span class="string">'A'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'A'</span>;</span><br><span class="line">&#125;);</span><br><span class="line">define(<span class="string">'B'</span>, [<span class="string">'A'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">A</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'B'</span> + A;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="defineProp"><a href="#defineProp" class="headerlink" title="defineProp"></a>defineProp</h2><p>Object.defineProperty(defineProperties) 的快捷方式。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function defineProp&lt;T&gt;(<br>    obj: T,<br>    prop: string,<br>    descriptor: PropertyDescriptor<br>): T;<br>function defineProp&lt;T&gt;(<br>    obj: T,<br>    descriptor: PropertyDescriptorMap<br>): T;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>obj</td><td>要定义的对象</td></tr><tr><td>prop</td><td>属性路径</td></tr><tr><td>descriptor</td><td>属性描述</td></tr><tr><td>返回值</td><td>传入对象</td></tr></tbody></table><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>obj</td><td>要定义的对象</td></tr><tr><td>prop</td><td>属性描述</td></tr><tr><td>返回值</td><td>传入对象</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">b</span>: &#123; <span class="attr">c</span>: <span class="number">3</span> &#125;, <span class="attr">d</span>: <span class="number">4</span>, <span class="attr">e</span>: <span class="number">5</span> &#125;;</span><br><span class="line">defineProp(obj, <span class="string">'a'</span>, &#123;</span><br><span class="line">    <span class="keyword">get</span>: function() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.e * <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// obj.a is equal to 10</span></span><br><span class="line">defineProp(obj, <span class="string">'b.c'</span>, &#123;</span><br><span class="line">    <span class="keyword">set</span>: function(val) &#123;</span><br><span class="line">        <span class="comment">// this is pointed to obj.b</span></span><br><span class="line">        <span class="keyword">this</span>.e = val;</span><br><span class="line">    &#125;.bind(obj)</span><br><span class="line">&#125;);</span><br><span class="line">obj.b.c = <span class="number">2</span>;</span><br><span class="line"><span class="comment">// obj.a is equal to 4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj2 = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;;</span><br><span class="line">defineProp(obj2, &#123;</span><br><span class="line">    a: &#123;</span><br><span class="line">        <span class="keyword">get</span>: function() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.c;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    b: &#123;</span><br><span class="line">        <span class="keyword">set</span>: function(val) &#123;</span><br><span class="line">            <span class="keyword">this</span>.c = val / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// obj2.a is equal to 3</span></span><br><span class="line">obj2.b = <span class="number">4</span>;</span><br><span class="line"><span class="comment">// obj2.a is equal to 2</span></span><br></pre></td></tr></table></figure><h2 id="defined"><a href="#defined" class="headerlink" title="defined"></a>defined</h2><p>返回第一个不是未定义的参数。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function defined(…args: any[]): any;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>…args</td><td>参数列表</td></tr><tr><td>返回值</td><td>第一个定义了的参数</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">defined(<span class="literal">false</span>, <span class="number">2</span>, <span class="keyword">void</span> <span class="number">0</span>, <span class="number">100</span>); <span class="comment">// -&gt; false</span></span><br></pre></td></tr></table></figure><h2 id="delRequireCache"><a href="#delRequireCache" class="headerlink" title="delRequireCache"></a>delRequireCache</h2><p>删除 node.js require 缓存。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function delRequireCache(id: string): void;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>id</td><td>模块名或路径</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> licia = <span class="built_in">require</span>(<span class="string">'licia'</span>);</span><br><span class="line">licia.a = <span class="number">5</span>;</span><br><span class="line">delRequireCache(<span class="string">'licia'</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">'licia'</span>).a; <span class="comment">// -&gt; undefined</span></span><br></pre></td></tr></table></figure><h2 id="delay"><a href="#delay" class="headerlink" title="delay"></a>delay</h2><p>在指定时长后执行函数。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function delay(<br>    fn: types.AnyFn,<br>    wait: number,<br>    …args: any[]<br>): void;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>fn</td><td>源函数</td></tr><tr><td>wait</td><td>延迟的毫秒数</td></tr><tr><td>…args</td><td>绑定参数</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">delay(</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">text</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(text);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="number">1000</span>,</span><br><span class="line">    <span class="string">'later'</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">// -&gt; Logs 'later' after one second</span></span><br></pre></td></tr></table></figure><h2 id="delegate"><a href="#delegate" class="headerlink" title="delegate"></a>delegate</h2><p>事件委托。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">const delegate: {<br>    add(el: Element, type: string, selector: string, cb: types.AnyFn): void;<br>    remove(el: Element, type: string, selector: string, cb: types.AnyFn): void;<br>};</code><br></pre><br></details><h3 id="add-4"><a href="#add-4" class="headerlink" title="add"></a>add</h3><p>添加事件委托。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>el</td><td>父元素</td></tr><tr><td>type</td><td>事件类型</td></tr><tr><td>selector</td><td>匹配选择器</td></tr><tr><td>cb</td><td>事件回调</td></tr></tbody></table><h3 id="remove-10"><a href="#remove-10" class="headerlink" title="remove"></a>remove</h3><p>移除事件委托。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> container = <span class="built_in">document</span>.getElementById(<span class="string">'container'</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clickHandler</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Do something...</span></span><br><span class="line">&#125;</span><br><span class="line">delegate.add(container, <span class="string">'click'</span>, <span class="string">'.children'</span>, clickHandler);</span><br><span class="line">delegate.remove(container, <span class="string">'click'</span>, <span class="string">'.children'</span>, clickHandler);</span><br></pre></td></tr></table></figure><h2 id="deprecate"><a href="#deprecate" class="headerlink" title="deprecate"></a>deprecate</h2><p>Node.js util.deprecate 方法，支持浏览器。 </p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function deprecate(fn: types.AnyFn, msg: string): types.AnyFn;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>fn</td><td>即将废弃的方法</td></tr><tr><td>msg</td><td>调用警告</td></tr><tr><td>返回值</td><td>废弃方法，调用时会打印警告</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fn = <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> obsoleteFn = deprecate(fn, <span class="string">'obsoleteFn is deprecated.'</span>);</span><br><span class="line">obsoleteFn();</span><br></pre></td></tr></table></figure><h2 id="detectBrowser"><a href="#detectBrowser" class="headerlink" title="detectBrowser"></a>detectBrowser</h2><p>使用 ua 检测浏览器信息。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function detectBrowser(<br>    ua?: string<br>): {<br>    name: string;<br>    version: number;<br>};</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>ua=navigator.userAgent</td><td>浏览器用户代理</td></tr><tr><td>返回值</td><td>包含名称和版本的对象</td></tr></tbody></table><p>支持浏览器：ie，chrome，edge，firefox，opera，safari，ios（mobile safari），android（android browser）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> browser = detectBrowser();</span><br><span class="line"><span class="keyword">if</span> (browser.name === <span class="string">'ie'</span> &amp;&amp; browser.version &lt; <span class="number">9</span>) &#123;</span><br><span class="line">    <span class="comment">// Do something about old IE...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="detectMocha"><a href="#detectMocha" class="headerlink" title="detectMocha"></a>detectMocha</h2><p>检测是否有 mocha 测试框架在运行。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function detectMocha(): boolean;</code><br></pre><br></details><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">detectMocha(); <span class="comment">// -&gt; True if mocha is running.</span></span><br></pre></td></tr></table></figure><h2 id="detectOs"><a href="#detectOs" class="headerlink" title="detectOs"></a>detectOs</h2><p>使用 ua 检测操作系统。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function detectOs(ua?: string): string;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>ua=navigator.userAgent</td><td>浏览器用户代理</td></tr><tr><td>返回值</td><td>操作系统名称</td></tr></tbody></table><p>支持操作系统: windows, os x, linux, ios, android, windows phone</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (detectOs() === <span class="string">'ios'</span>) &#123;</span><br><span class="line">    <span class="comment">// Do something about ios...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="difference"><a href="#difference" class="headerlink" title="difference"></a>difference</h2><p>创建一个数组，该数组的元素不存在于给定的其它数组中。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function difference(arr: any[], …args: any[]): any[];</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>arr</td><td>源数组</td></tr><tr><td>…args</td><td>要排除的元素</td></tr><tr><td>返回值</td><td>目标数组</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">difference([<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>], [<span class="number">4</span>, <span class="number">2</span>]); <span class="comment">// -&gt; [3, 1]</span></span><br></pre></td></tr></table></figure><h2 id="dotCase"><a href="#dotCase" class="headerlink" title="dotCase"></a>dotCase</h2><p>将字符串转换为点式。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function dotCase(str: string): string;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>str</td><td>源字符串</td></tr><tr><td>返回值</td><td>点式字符串</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dotCase(<span class="string">'fooBar'</span>); <span class="comment">// -&gt; foo.bar</span></span><br><span class="line">dotCase(<span class="string">'foo bar'</span>); <span class="comment">// -&gt; foo.bar</span></span><br></pre></td></tr></table></figure><h2 id="download"><a href="#download" class="headerlink" title="download"></a>download</h2><p>在浏览器端触发文件下载。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function download(<br>    data: Blob | File | string | any[],<br>    name: string,<br>    type?: string<br>): void;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>data</td><td>下载的数据</td></tr><tr><td>name</td><td>文件名</td></tr><tr><td>type=text/plain</td><td>数据类型</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">download(<span class="string">'test'</span>, <span class="string">'test.txt'</span>);</span><br></pre></td></tr></table></figure><h2 id="durationFormat"><a href="#durationFormat" class="headerlink" title="durationFormat"></a>durationFormat</h2><p>简单时间格式化。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function durationFormat(duration: number, mask?: string): string;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>duration</td><td>要格式化的时间，单位为毫秒</td></tr><tr><td>mask=’hh:mm:ss’</td><td>时间掩码</td></tr><tr><td>返回值</td><td>格式化时间</td></tr></tbody></table><table><thead><tr><th>掩码</th><th>说明</th></tr></thead><tbody><tr><td>d</td><td>天数</td></tr><tr><td>h</td><td>小时数</td></tr><tr><td>m</td><td>分钟数</td></tr><tr><td>s</td><td>秒数</td></tr><tr><td>l</td><td>毫秒数</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">durationFormat(<span class="number">12345678</span>); <span class="comment">// -&gt; '03:25:45'</span></span><br><span class="line">durationFormat(<span class="number">12345678</span>, <span class="string">'h:m:s:l'</span>); <span class="comment">// -&gt; '3:25:45:678'</span></span><br></pre></td></tr></table></figure><h2 id="each-2"><a href="#each-2" class="headerlink" title="each"></a>each</h2><p>遍历集合中的所有元素，用每个元素当做参数调用迭代器。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function each&lt;T&gt;(<br>    list: types.List&lt;T&gt;,<br>    iterator: types.ListIterator&lt;T, void&gt;,<br>    ctx?: any<br>): types.List&lt;T&gt;;<br>function each&lt;T&gt;(<br>    object: types.Dictionary&lt;T&gt;,<br>    iterator: types.ObjectIterator&lt;T, void&gt;,<br>    ctx?: any<br>): types.Collection&lt;T&gt;;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>obj</td><td>目标集合</td></tr><tr><td>iterator</td><td>迭代器</td></tr><tr><td>ctx</td><td>函数上下文</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">each(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">val, key</span>) </span>&#123;&#125;);</span><br></pre></td></tr></table></figure><h2 id="easing"><a href="#easing" class="headerlink" title="easing"></a>easing</h2><p>缓动函数，参考 <a href="http://jqueryui.com/" target="_blank" rel="noopener">http://jqueryui.com/</a> 。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">const easing: {<br>    linear(percent: number): number;<br>    inQuad(percent: number): number;<br>    outQuad(percent: number): number;<br>    inOutQuad(percent: number): number;<br>    outInQuad(percent: number): number;<br>    inCubic(percent: number): number;<br>    outCubic(percent: number): number;<br>    inQuart(percent: number): number;<br>    outQuart(percent: number): number;<br>    inQuint(percent: number): number;<br>    outQuint(percent: number): number;<br>    inExpo(percent: number): number;<br>    outExpo(percent: number): number;<br>    inSine(percent: number): number;<br>    outSine(percent: number): number;<br>    inCirc(percent: number): number;<br>    outCirc(percent: number): number;<br>    inElastic(percent: number, elasticity?: number): number;<br>    outElastic(percent: number, elasticity?: number): number;<br>    inBack(percent: number): number;<br>    outBack(percent: number): number;<br>    inOutBack(percent: number): number;<br>    outInBack(percent: number): number;<br>    inBounce(percent: number): number;<br>    outBounce(percent: number): number;<br>};</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>percent</td><td>位于 0 到 1 之前的数字</td></tr><tr><td>返回值</td><td>计算结果</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">easing.linear(<span class="number">0.5</span>); <span class="comment">// -&gt; 0.5</span></span><br><span class="line">easing.inElastic(<span class="number">0.5</span>, <span class="number">500</span>); <span class="comment">// -&gt; 0.03125</span></span><br></pre></td></tr></table></figure><h2 id="emulateTouch"><a href="#emulateTouch" class="headerlink" title="emulateTouch"></a>emulateTouch</h2><p>在桌面端浏览器模拟 touch 事件。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function emulateTouch(el: Element): void;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>el</td><td>目标元素</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> el = <span class="built_in">document</span>.querySelector(<span class="string">'#test'</span>);</span><br><span class="line">emulateTouch(el);</span><br><span class="line">el.addEventListener(<span class="string">'touchstart'</span>, () =&gt; &#123;&#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><h2 id="endWith"><a href="#endWith" class="headerlink" title="endWith"></a>endWith</h2><p>检查字符串是否以指定字符串结尾。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function endWith(str: string, suffix: string): boolean;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>str</td><td>目标字符串</td></tr><tr><td>suffix</td><td>字符串后缀</td></tr><tr><td>返回值</td><td>如果是后缀，返回真</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">endWith(<span class="string">'ab'</span>, <span class="string">'b'</span>); <span class="comment">// -&gt; true</span></span><br></pre></td></tr></table></figure><h2 id="escape"><a href="#escape" class="headerlink" title="escape"></a>escape</h2><p>转义 HTML 字符串，替换 &amp;，&lt;，&gt;，”，`，和 ‘ 字符。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function escape(str: string): string;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>str</td><td>源字符串</td></tr><tr><td>返回值</td><td>目标字符串</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">escape</span>(<span class="string">'You &amp; Me'</span>); <span class="comment">// -&gt; 'You &amp;amp; Me'</span></span><br></pre></td></tr></table></figure><h2 id="escapeJsStr"><a href="#escapeJsStr" class="headerlink" title="escapeJsStr"></a>escapeJsStr</h2><p>转义字符串为合法的 JavaScript 字符串字面量。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function escapeJsStr(str: string): string;</code><br></pre><br></details><p><a href="http://www.ecma-international.org/ecma-262/5.1/#sec-7.8.4" target="_blank" rel="noopener">http://www.ecma-international.org/ecma-262/5.1/#sec-7.8.4</a></p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>str</td><td>源字符串</td></tr><tr><td>返回值</td><td>目标字符串</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">escapeJsStr(<span class="string">'"\n'</span>); <span class="comment">// -&gt; '\\"\\\\n'</span></span><br></pre></td></tr></table></figure><h2 id="escapeRegExp"><a href="#escapeRegExp" class="headerlink" title="escapeRegExp"></a>escapeRegExp</h2><p>转义特殊字符用于 RegExp 构造函数。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function escapeRegExp(str: string): string;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>str</td><td>源字符串</td></tr><tr><td>返回值</td><td>目标字符串</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">escapeRegExp(<span class="string">'[licia]'</span>); <span class="comment">// -&gt; '\\[licia\\]'</span></span><br></pre></td></tr></table></figure><h2 id="evalCss"><a href="#evalCss" class="headerlink" title="evalCss"></a>evalCss</h2><p>加载 css 到页面中。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function evalCss(css: string): HTMLStyleElement;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>css</td><td>css 代码</td></tr><tr><td>返回值</td><td>style 节点</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">evalCss(<span class="string">'body&#123;background:#08c&#125;'</span>);</span><br></pre></td></tr></table></figure><h2 id="evalJs"><a href="#evalJs" class="headerlink" title="evalJs"></a>evalJs</h2><p>在指定的上下文执行 js 代码。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function evalJs(js: string, ctx?: any): void;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>js</td><td>JavaScript 代码</td></tr><tr><td>ctx=global</td><td>上下文</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">evalJs(<span class="string">'5+2'</span>); <span class="comment">// -&gt; 7</span></span><br><span class="line">evalJs(<span class="string">'this.a'</span>, &#123; <span class="attr">a</span>: <span class="number">2</span> &#125;); <span class="comment">// -&gt; 2</span></span><br></pre></td></tr></table></figure><h2 id="every"><a href="#every" class="headerlink" title="every"></a>every</h2><p>检查是否集合中的所有元素都能通过真值检测。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function every&lt;T&gt;(<br>    object: types.List&lt;T&gt;,<br>    iterator?: types.ListIterator&lt;T, boolean&gt;,<br>    context?: any<br>): boolean;<br>function every&lt;T&gt;(<br>    object: types.Dictionary&lt;T&gt;,<br>    iterator?: types.ObjectIterator&lt;T, boolean&gt;,<br>    context?: any<br>): boolean;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>object</td><td>目标集合</td></tr><tr><td>iterator</td><td>真值检测函数</td></tr><tr><td>context</td><td>函数上下文</td></tr><tr><td>返回值</td><td>如果都能通过，返回真</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">every([<span class="number">2</span>, <span class="number">4</span>], <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> val % <span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line">&#125;); <span class="comment">// -&gt; true</span></span><br></pre></td></tr></table></figure><h2 id="extend"><a href="#extend" class="headerlink" title="extend"></a>extend</h2><p>复制多个对象中的所有属性到目标对象上。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function extend(destination: any, …sources: any[]): any;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>destination</td><td>目标对象</td></tr><tr><td>…sources</td><td>源对象</td></tr><tr><td>返回值</td><td>目标对象</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">extend(&#123; <span class="attr">name</span>: <span class="string">'RedHood'</span> &#125;, &#123; <span class="attr">age</span>: <span class="number">24</span> &#125;); <span class="comment">// -&gt; &#123;name: 'RedHood', age: 24&#125;</span></span><br></pre></td></tr></table></figure><h2 id="extendDeep"><a href="#extendDeep" class="headerlink" title="extendDeep"></a>extendDeep</h2><p>类似 extend，但会递归进行扩展。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function extendDeep(destination: any, …sources: any[]): any;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>destination</td><td>目标对象</td></tr><tr><td>…sources</td><td>源对象</td></tr><tr><td>返回值</td><td>目标对象</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">extendDeep(</span><br><span class="line">    &#123;</span><br><span class="line">        name: <span class="string">'RedHood'</span>,</span><br><span class="line">        family: &#123;</span><br><span class="line">            mother: <span class="string">'Jane'</span>,</span><br><span class="line">            father: <span class="string">'Jack'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        family: &#123;</span><br><span class="line">            brother: <span class="string">'Bruce'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line"><span class="comment">// -&gt; &#123;name: 'RedHood', family: &#123;mother: 'Jane', father: 'Jack', brother: 'Bruce'&#125;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="extendOwn"><a href="#extendOwn" class="headerlink" title="extendOwn"></a>extendOwn</h2><p>类似 extend，但只复制自己的属性，不包括原型链上的属性。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function extendOwn(destination: any, …sources: any[]): any;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>obj</td><td>目标对象</td></tr><tr><td>…sources</td><td>源对象</td></tr><tr><td>返回值</td><td>目标对象</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">extendOwn(&#123; <span class="attr">name</span>: <span class="string">'RedHood'</span> &#125;, &#123; <span class="attr">age</span>: <span class="number">24</span> &#125;); <span class="comment">// -&gt; &#123;name: 'RedHood', age: 24&#125;</span></span><br></pre></td></tr></table></figure><h2 id="extractBlockCmts"><a href="#extractBlockCmts" class="headerlink" title="extractBlockCmts"></a>extractBlockCmts</h2><p>从源码中提取块注释。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function extractBlockCmts(str: string): string[];</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>str</td><td>源码</td></tr><tr><td>返回值</td><td>块注释</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">extractBlockCmts(<span class="string">'\/*licia*\/'</span>); <span class="comment">// -&gt; ['licia']</span></span><br></pre></td></tr></table></figure><h2 id="extractUrls"><a href="#extractUrls" class="headerlink" title="extractUrls"></a>extractUrls</h2><p>从文本中提取 url。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function extractUrls(str: string): string[];</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>str</td><td>文本</td></tr><tr><td>返回值</td><td>url 列表</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str =</span><br><span class="line">    <span class="string">'[Official site: http://eustia.liriliri.io](http://eustia.liriliri.io)'</span>;</span><br><span class="line">extractUrls(str); <span class="comment">// -&gt; ['http://eustia.liriliri.io']</span></span><br></pre></td></tr></table></figure><h2 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h2><p>将 XMLHttpRequest 转换为 promise 的形式。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">namespace fetch {<br>    interface IResult {<br>        ok: boolean;<br>        status: number;<br>        statusText: string;<br>        url: string;<br>        clone(): IResult;<br>        text(): Promise&lt;string&gt;;<br>        json(): Promise&lt;any&gt;;<br>        xml(): Promise&lt;Document | null&gt;;<br>        blob(): Promise&lt;Blob&gt;;<br>        headers: {<br>            keys(): string[];<br>            entries(): Array&lt;string[]&gt;;<br>            get(name: string): string;<br>            has(name: string): boolean;<br>        };<br>    }<br>}<br>function fetch(<br>    url: string,<br>    options?: {<br>        method?: string;<br>        timeout?: number;<br>        headers?: types.PlainObj&lt;string&gt;;<br>        body?: any;<br>    }<br>): Promise&lt;fetch.IResult&gt;;</code><br></pre><br></details><p>注意：这并不是 fetch 的 pollyfill。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>url</td><td>请求地址</td></tr><tr><td>options</td><td>请求选项</td></tr><tr><td>返回值</td><td>请求 promise</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">'test.json'</span>, &#123;</span><br><span class="line">    method: <span class="string">'GET'</span>,</span><br><span class="line">    timeout: <span class="number">3000</span>,</span><br><span class="line">    headers: &#123;&#125;,</span><br><span class="line">    body: <span class="string">''</span></span><br><span class="line">&#125;)</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> res.json();</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h2 id="fibonacci"><a href="#fibonacci" class="headerlink" title="fibonacci"></a>fibonacci</h2><p>计算斐波那契数列中某位数字。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function fibonacci(n: number): number;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>n</td><td>序号 n</td></tr><tr><td>返回值</td><td>斐波那契数列 n 位的数字</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fibonacci(<span class="number">1</span>); <span class="comment">// -&gt; 1</span></span><br><span class="line">fibonacci(<span class="number">3</span>); <span class="comment">// -&gt; 2</span></span><br></pre></td></tr></table></figure><h2 id="fileSize"><a href="#fileSize" class="headerlink" title="fileSize"></a>fileSize</h2><p>将字节数转换为易于阅读的形式。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function fileSize(bytes: number): string;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>bytes</td><td>文件字节大小</td></tr><tr><td>返回值</td><td>易于阅读的文件大小</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fileSize(<span class="number">5</span>); <span class="comment">// -&gt; '5'</span></span><br><span class="line">fileSize(<span class="number">1500</span>); <span class="comment">// -&gt; '1.46K'</span></span><br><span class="line">fileSize(<span class="number">1500000</span>); <span class="comment">// -&gt; '1.43M'</span></span><br><span class="line">fileSize(<span class="number">1500000000</span>); <span class="comment">// -&gt; '1.4G'</span></span><br><span class="line">fileSize(<span class="number">1500000000000</span>); <span class="comment">// -&gt; '1.36T'</span></span><br></pre></td></tr></table></figure><h2 id="fileType"><a href="#fileType" class="headerlink" title="fileType"></a>fileType</h2><p>使用幻数检测文件类型。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function fileType(<br>    input: Buffer | ArrayBuffer | Uint8Array<br>):<br>    | {<br>          ext: string;<br>          mime: string;<br>      }<br>    | undefined;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>input</td><td>文件输入</td></tr><tr><td>返回值</td><td>包括扩展名和 mime 类型的对象</td></tr></tbody></table><h3 id="支持的文件类型"><a href="#支持的文件类型" class="headerlink" title="支持的文件类型"></a>支持的文件类型</h3><p>jpg, png, gif, webp, bmp, gz, zip, rar, pdf, exe</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> file = fs.readFileSync(<span class="string">'path/to/file'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(fileType(file)); <span class="comment">// -&gt; &#123; ext: 'jpg', mime: 'image/jpeg' &#125;</span></span><br></pre></td></tr></table></figure><h2 id="fill"><a href="#fill" class="headerlink" title="fill"></a>fill</h2><p>在数组指定位置填充指定值。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function fill(<br>    list: any[],<br>    val: any,<br>    start?: number,<br>    end?: number<br>): any[];</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>list</td><td>源数组</td></tr><tr><td>val</td><td>填充数组的值</td></tr><tr><td>start=0</td><td>起始位置</td></tr><tr><td>end=arr.length</td><td>结束位置，不包括</td></tr><tr><td>返回值</td><td>目标数组</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fill([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="string">'*'</span>); <span class="comment">// -&gt; ['*', '*', '*']</span></span><br><span class="line">fill([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="string">'*'</span>, <span class="number">1</span>, <span class="number">2</span>); <span class="comment">// -&gt; [1, '*', 3]</span></span><br></pre></td></tr></table></figure><h2 id="filter-1"><a href="#filter-1" class="headerlink" title="filter"></a>filter</h2><p>遍历集合中的每个元素，返回所有通过真值检测的元素组成的数组。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function filter&lt;T&gt;(<br>    list: types.List&lt;T&gt;,<br>    iterator: types.ListIterator&lt;T, boolean&gt;,<br>    context?: any<br>): T[];<br>function filter&lt;T&gt;(<br>    object: types.Dictionary&lt;T&gt;,<br>    iterator: types.ObjectIterator&lt;T, boolean&gt;,<br>    context?: any<br>): T[];</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>obj</td><td>要遍历的集合</td></tr><tr><td>predicate</td><td>真值检测函数</td></tr><tr><td>ctx</td><td>函数上下文</td></tr><tr><td>返回值</td><td>包含所有通过真值检测元素的数组</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">filter([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> val % <span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line">&#125;); <span class="comment">// -&gt; [2, 4]</span></span><br></pre></td></tr></table></figure><h2 id="find-2"><a href="#find-2" class="headerlink" title="find"></a>find</h2><p>找到集合中第一个通过真值检测的元素。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function find&lt;T&gt;(<br>    object: types.List&lt;T&gt;,<br>    iterator: types.ListIterator&lt;T, boolean&gt;,<br>    context?: any<br>): T | undefined;<br>function find&lt;T&gt;(<br>    object: types.Dictionary&lt;T&gt;,<br>    iterator: types.ObjectIterator&lt;T, boolean&gt;,<br>    context?: any<br>): T | undefined;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>object</td><td>目标集合</td></tr><tr><td>iterator</td><td>真值检测函数</td></tr><tr><td>context</td><td>函数上下文</td></tr><tr><td>返回值</td><td>第一个通过的元素</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">find(</span><br><span class="line">    [</span><br><span class="line">        &#123;</span><br><span class="line">            name: <span class="string">'john'</span>,</span><br><span class="line">            age: <span class="number">24</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            name: <span class="string">'jane'</span>,</span><br><span class="line">            age: <span class="number">23</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> val.age === <span class="number">23</span>;</span><br><span class="line">    &#125;</span><br><span class="line">); <span class="comment">// -&gt; &#123;name: 'jane', age: 23&#125;</span></span><br></pre></td></tr></table></figure><h2 id="findIdx"><a href="#findIdx" class="headerlink" title="findIdx"></a>findIdx</h2><p>返回第一个通过真值检测元素在数组中的位置。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function findIdx(arr: any[], predicate: types.AnyFn): number;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>arr</td><td>目标集合</td></tr><tr><td>predicate</td><td>真值检测函数</td></tr><tr><td>返回值</td><td>第一个符合条件元素的位置</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">findIdx(</span><br><span class="line">    [</span><br><span class="line">        &#123;</span><br><span class="line">            name: <span class="string">'john'</span>,</span><br><span class="line">            age: <span class="number">24</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            name: <span class="string">'jane'</span>,</span><br><span class="line">            age: <span class="number">23</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> val.age === <span class="number">23</span>;</span><br><span class="line">    &#125;</span><br><span class="line">); <span class="comment">// -&gt; 1</span></span><br></pre></td></tr></table></figure><h2 id="findKey"><a href="#findKey" class="headerlink" title="findKey"></a>findKey</h2><p>返回对象中第一个通过真值检测的属性键名。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function findKey(<br>    obj: any,<br>    predicate: types.AnyFn,<br>    ctx?: any<br>): string | void;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>obj</td><td>目标对象</td></tr><tr><td>predicate</td><td>真值检测函数</td></tr><tr><td>ctx</td><td>函数上下文</td></tr><tr><td>返回值</td><td>符合条件的键名</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">findKey(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> val === <span class="number">1</span>;</span><br><span class="line">&#125;); <span class="comment">// -&gt; a</span></span><br></pre></td></tr></table></figure><h2 id="findLastIdx"><a href="#findLastIdx" class="headerlink" title="findLastIdx"></a>findLastIdx</h2><p>同 findIdx，只是查找顺序改为从后往前。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function findLastIdx(arr: any[], predicate: types.AnyFn): number;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>arr</td><td>目标集合</td></tr><tr><td>predicate</td><td>真值检测函数</td></tr><tr><td>返回值</td><td>从后往前，第一个符合条件元素的位置</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">findLastIdx(</span><br><span class="line">    [</span><br><span class="line">        &#123;</span><br><span class="line">            name: <span class="string">'john'</span>,</span><br><span class="line">            age: <span class="number">24</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            name: <span class="string">'jane'</span>,</span><br><span class="line">            age: <span class="number">23</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            name: <span class="string">'kitty'</span>,</span><br><span class="line">            age: <span class="number">24</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> val.age === <span class="number">24</span>;</span><br><span class="line">    &#125;</span><br><span class="line">); <span class="comment">// -&gt; 2</span></span><br></pre></td></tr></table></figure><h2 id="flatten"><a href="#flatten" class="headerlink" title="flatten"></a>flatten</h2><p>递归拍平数组。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function flatten(arr: any[]): any[];</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>arr</td><td>源数组</td></tr><tr><td>返回值</td><td>目标数组</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flatten([<span class="string">'a'</span>, [<span class="string">'b'</span>, [<span class="string">'c'</span>]], <span class="string">'d'</span>, [<span class="string">'e'</span>]]); <span class="comment">// -&gt; ['a', 'b', 'c', 'd', 'e']</span></span><br></pre></td></tr></table></figure><h2 id="fnArgs"><a href="#fnArgs" class="headerlink" title="fnArgs"></a>fnArgs</h2><p>检验函数参数。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function fnArgs(types: string[], args: any): void;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>types</td><td>参数类型</td></tr><tr><td>args</td><td>Argument 对象</td></tr></tbody></table><p>如果检验失败，抛出异常。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">    fnArgs([<span class="string">'number|string'</span>, <span class="string">'?Function'</span>, <span class="string">'...number'</span>], <span class="built_in">arguments</span>);</span><br><span class="line">    <span class="comment">// Do something.</span></span><br><span class="line">&#125;</span><br><span class="line">test(<span class="number">15</span>);</span><br><span class="line">test(<span class="string">'test'</span>, () =&gt; &#123;&#125;);</span><br><span class="line">test(<span class="string">'test'</span>, () =&gt; &#123;&#125;, <span class="number">5</span>);</span><br><span class="line">test(); <span class="comment">// Throw error</span></span><br><span class="line">test(<span class="string">'test'</span>, <span class="string">'test'</span>); <span class="comment">// Throw error</span></span><br><span class="line">test(<span class="string">'test'</span>, () =&gt; &#123;&#125;, <span class="number">5</span>, <span class="string">'test'</span>); <span class="comment">// Throw error</span></span><br></pre></td></tr></table></figure><h2 id="fnParams"><a href="#fnParams" class="headerlink" title="fnParams"></a>fnParams</h2><p>获取函数的参数名列表。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function fnParams(fn: types.AnyFn | string): string[];</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>fn</td><td>目标函数</td></tr><tr><td>返回值</td><td>参数名</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fnParams(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;&#125;); <span class="comment">// -&gt; ['a', 'b']</span></span><br></pre></td></tr></table></figure><h2 id="fnv1a"><a href="#fnv1a" class="headerlink" title="fnv1a"></a>fnv1a</h2><p>简单 FNV-1a 哈希算法实现。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function fnv1a(str: string): number;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>str</td><td>目标字符串</td></tr><tr><td>返回值</td><td>哈希结果</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fnv1a(<span class="string">'test'</span>); <span class="comment">// -&gt; 2949673445</span></span><br></pre></td></tr></table></figure><h2 id="format"><a href="#format" class="headerlink" title="format"></a>format</h2><p>使用类似于 printf 的方式来格式化字符串。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function format(str: string, …values: any[]): string;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>str</td><td>源字符串</td></tr><tr><td>…values</td><td>替换占位符的值</td></tr><tr><td>返回值</td><td>目标字符串</td></tr></tbody></table><h3 id="格式占位符"><a href="#格式占位符" class="headerlink" title="格式占位符"></a>格式占位符</h3><table><thead><tr><th>占位符</th><th>说明</th></tr></thead><tbody><tr><td>%s</td><td>字符串</td></tr><tr><td>%d, %i</td><td>整数</td></tr><tr><td>%f</td><td>浮点数</td></tr><tr><td>%o</td><td>对象</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">format(<span class="string">'%s_%s'</span>, <span class="string">'foo'</span>, <span class="string">'bar'</span>); <span class="comment">// -&gt; 'foo_bar'</span></span><br></pre></td></tr></table></figure><h2 id="fraction"><a href="#fraction" class="headerlink" title="fraction"></a>fraction</h2><p>转换数字为分数形式。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function fraction(num: number): string;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>num</td><td>数字</td></tr><tr><td>返回值</td><td>对应的分数</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fraction(<span class="number">1.2</span>); <span class="comment">// -&gt; '6/5'</span></span><br></pre></td></tr></table></figure><h2 id="freeze"><a href="#freeze" class="headerlink" title="freeze"></a>freeze</h2><p>Object.freeze 的快捷方式。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function freeze&lt;T&gt;(obj: T): T;</code><br></pre><br></details><p>如果不支持 Object.freeze，使用 Object.defineProperties 进行模拟。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>obj</td><td>目标对象</td></tr><tr><td>返回值</td><td>目标对象</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = &#123; <span class="attr">b</span>: <span class="number">1</span> &#125;;</span><br><span class="line">freeze(a);</span><br><span class="line">a.b = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// -&gt; &#123;b: 1&#125;</span></span><br></pre></td></tr></table></figure><h2 id="freezeDeep"><a href="#freezeDeep" class="headerlink" title="freezeDeep"></a>freezeDeep</h2><p>递归进行 Object.freeze。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function freezeDeep&lt;T&gt;(obj: T): T;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>obj</td><td>目标对象</td></tr><tr><td>返回值</td><td>目标对象</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = &#123; <span class="attr">b</span>: &#123; <span class="attr">c</span>: <span class="number">1</span> &#125; &#125;;</span><br><span class="line">freezeDeep(a);</span><br><span class="line">a.b.c = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// -&gt; &#123;b: &#123;c: 1&#125;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="fs"><a href="#fs" class="headerlink" title="fs"></a>fs</h2><p>node.js fs 模块的 promise 版本。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">const fs: {<br>    readFile(path: string, encoding: string): Promise&lt;string&gt;;<br>    readFile(path: string): Promise&lt;Buffer&gt;;<br>    exists(path: string): Promise&lt;boolean&gt;;<br>    unlink(path: string): Promise&lt;void&gt;;<br>    writeFile(path: string, data: string, options?: string): Promise&lt;void&gt;;<br>    writeFile(path: string, data: Buffer): Promise&lt;void&gt;;<br>    readdir(path: string): Promise&lt;string[]&gt;;<br>    rmdir(path: string): Promise&lt;void&gt;;<br>    [key: string]: any;<br>};</code><br></pre><br></details><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fs.readFile(<span class="string">'test.js'</span>)</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// Do something</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// Handle errors</span></span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h2 id="fullscreen"><a href="#fullscreen" class="headerlink" title="fullscreen"></a>fullscreen</h2><p>全屏接口封装。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">namespace fullscreen {<br>    interface IFullscreen extends Emitter {<br>        request(el?: Element): void;<br>        exit(): void;<br>        toggle(el?: Element): void;<br>        isActive(): boolean;<br>        getEl(): Element | null;<br>        isEnabled(): boolean;<br>    }<br>}<br>const fullscreen: fullscreen.IFullscreen;</code><br></pre><br></details><h3 id="request"><a href="#request" class="headerlink" title="request"></a>request</h3><p>进入全屏。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>el</td><td>Element</td><td>全屏元素</td></tr></tbody></table><h3 id="exit"><a href="#exit" class="headerlink" title="exit"></a>exit</h3><p>退出全屏。</p><h3 id="toggle-1"><a href="#toggle-1" class="headerlink" title="toggle"></a>toggle</h3><p>切换全屏。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>el</td><td>全屏元素</td></tr></tbody></table><h3 id="isActive"><a href="#isActive" class="headerlink" title="isActive"></a>isActive</h3><p>是否全屏。</p><h3 id="getEl"><a href="#getEl" class="headerlink" title="getEl"></a>getEl</h3><p>获取全屏元素。</p><h3 id="isEnabled"><a href="#isEnabled" class="headerlink" title="isEnabled"></a>isEnabled</h3><p>是否可以进入全屏。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fullscreen.request();</span><br><span class="line">fullscreen.isActive(); <span class="comment">// -&gt; false, not a synchronous api</span></span><br><span class="line">fullscreen.on(<span class="string">'error'</span>, () =&gt; &#123;&#125;);</span><br><span class="line">fullscreen.on(<span class="string">'change'</span>, () =&gt; &#123;&#125;);</span><br></pre></td></tr></table></figure><h2 id="fuzzySearch"><a href="#fuzzySearch" class="headerlink" title="fuzzySearch"></a>fuzzySearch</h2><p>模糊搜索。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function fuzzySearch(<br>    needle: string,<br>    haystack: any[],<br>    options?: {<br>        caseSensitive?: boolean;<br>        key?: string | string[];<br>    }<br>): any[];</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>needle</td><td>搜索字符串</td></tr><tr><td>haystacks</td><td>搜索集合</td></tr><tr><td>options</td><td>搜索选项</td></tr></tbody></table><p>可用选项：</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>caseSensitive=false</td><td>是否大小写敏感</td></tr><tr><td>key</td><td>搜索项是对象时的字符串路径</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">fuzzySearch(<span class="string">'lic'</span>, [<span class="string">'licia'</span>, <span class="string">'ll'</span>, <span class="string">'lic'</span>]); <span class="comment">// -&gt; ['lic', 'licia']</span></span><br><span class="line">fuzzySearch(</span><br><span class="line">    <span class="string">'alpha-test'</span>,</span><br><span class="line">    [</span><br><span class="line">        &#123;</span><br><span class="line">            name: <span class="string">'alpha-test-1'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            name: <span class="string">'beta-test'</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    &#123;</span><br><span class="line">        key: <span class="string">'name'</span></span><br><span class="line">    &#125;</span><br><span class="line">); <span class="comment">// -&gt; [&#123; name: 'alpha-test-1' &#125;]</span></span><br></pre></td></tr></table></figure><h2 id="gcd"><a href="#gcd" class="headerlink" title="gcd"></a>gcd</h2><p>使用欧几里德算法求最大公约数。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function gcd(a: number, b: number): number;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>a</td><td>要计算的数字</td></tr><tr><td>b</td><td>要计算的数字</td></tr><tr><td>返回值</td><td>最大公约数</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcd(<span class="number">121</span>, <span class="number">44</span>); <span class="comment">// -&gt; 11</span></span><br></pre></td></tr></table></figure><h2 id="getPort"><a href="#getPort" class="headerlink" title="getPort"></a>getPort</h2><p>获取有效的 TCP 端口。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function getPort(<br>    port?: number | number[],<br>    host?: string<br>): Promise&lt;number&gt;;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>port</td><td>首选端口</td></tr><tr><td>host</td><td>地址</td></tr><tr><td>返回值</td><td>有效端口</td></tr></tbody></table><p>如果首选端口无法使用，将会返回一个有效的随机端口。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">getPort([<span class="number">3000</span>, <span class="number">3001</span>], <span class="string">'127.0.0.1'</span>).then(<span class="function"><span class="params">port</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(port);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="getProto"><a href="#getProto" class="headerlink" title="getProto"></a>getProto</h2><p>获取对象的原型。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function getProto(obj: any): any;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>obj</td><td>目标对象</td></tr><tr><td>返回值</td><td>对象原型，如果不存在，返回 null</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = &#123;&#125;;</span><br><span class="line">getProto(<span class="built_in">Object</span>.create(a)); <span class="comment">// -&gt; a</span></span><br></pre></td></tr></table></figure><h2 id="getUrlParam"><a href="#getUrlParam" class="headerlink" title="getUrlParam"></a>getUrlParam</h2><p>获取 url 参数值。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function getUrlParam(<br>    name: string,<br>    url?: string<br>): string | undefined;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>name</td><td>参数名</td></tr><tr><td>url=location</td><td>目标 url</td></tr><tr><td>返回值</td><td>参数值</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getUrlParam(<span class="string">'test'</span>, <span class="string">'http://example.com/?test=true'</span>); <span class="comment">// -&gt; 'true'</span></span><br></pre></td></tr></table></figure><h2 id="golangify"><a href="#golangify" class="headerlink" title="golangify"></a>golangify</h2><p>像 Go 一样处理错误。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function golangify&lt;T, U = Error&gt;(<br>    fn: (…args: any[]) =&gt; Promise&lt;T&gt;<br>): (…args: any[]) =&gt; Promise&lt;[T | undefined, U | null]&gt;;<br>function golangify&lt;T, U = Error&gt;(<br>    p: Promise&lt;T&gt;<br>): Promise&lt;[T | undefined, U | null]&gt;;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>fn</td><td>返回 Promise 的函数</td></tr><tr><td>返回值</td><td>同上，但 Promise 的结果形式为 [result, error]</td></tr></tbody></table><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>p</td><td>要转换的 Promise</td></tr><tr><td>返回值</td><td>目标 Promise，结果形式为 [result, error]</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> fnA = golangify(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="built_in">Error</span>(<span class="string">'err'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">await</span> fnA(); <span class="comment">// -&gt; [undefined, Error]</span></span><br><span class="line">    <span class="keyword">let</span> fnB = golangify(<span class="keyword">async</span> num =&gt; num * <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">await</span> fnB(<span class="number">2</span>); <span class="comment">// -&gt; [4, null]</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> golangify(<span class="built_in">Promise</span>.reject(<span class="built_in">Error</span>(<span class="string">'err'</span>))); <span class="comment">// -&gt; [undefined, Error]</span></span><br><span class="line">    <span class="keyword">await</span> golangify(<span class="built_in">Promise</span>.resolve(<span class="number">4</span>)); <span class="comment">// -&gt; [4, null]</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h2 id="h"><a href="#h" class="headerlink" title="h"></a>h</h2><p>创建 HTML 元素。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function h(<br>    tag: string,<br>    attrs?: types.PlainObj&lt;any&gt;,<br>    …child: Array&lt;string | HTMLElement&gt;<br>): HTMLElement;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>tag</td><td>标签名</td></tr><tr><td>attrs</td><td>属性</td></tr><tr><td>…child</td><td>子节点</td></tr><tr><td>返回值</td><td>目标元素</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> el = h(</span><br><span class="line">    <span class="string">'div#test.title'</span>,</span><br><span class="line">    &#123;</span><br><span class="line">        onclick: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">        title: <span class="string">'test'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'inner text'</span></span><br><span class="line">);</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(el);</span><br></pre></td></tr></table></figure><h2 id="has-5"><a href="#has-5" class="headerlink" title="has"></a>has</h2><p>检查属性是否是对象自身的属性（原型链上的不算）。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function has(obj: {}, key: string): boolean;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>obj</td><td>目标对象</td></tr><tr><td>key</td><td>键名</td></tr><tr><td>返回值</td><td>如果是自身的属性，返回真</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">has(&#123; <span class="attr">one</span>: <span class="number">1</span> &#125;, <span class="string">'one'</span>); <span class="comment">// -&gt; true</span></span><br></pre></td></tr></table></figure><h2 id="heapSort"><a href="#heapSort" class="headerlink" title="heapSort"></a>heapSort</h2><p>堆排序实现。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function heapSort(arr: any[], cmp?: types.AnyFn): any[];</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>arr</td><td>要排序的数组</td></tr><tr><td>cmp</td><td>比较器</td></tr><tr><td>返回值</td><td>有序数组</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">heapSort([<span class="number">2</span>, <span class="number">1</span>]); <span class="comment">// -&gt; [1, 2]</span></span><br></pre></td></tr></table></figure><h2 id="hex"><a href="#hex" class="headerlink" title="hex"></a>hex</h2><p>hex 编解码。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">const hex: {<br>    encode(bytes: number[]): string;<br>    decode(str: string): number[];<br>};</code><br></pre><br></details><h3 id="encode-1"><a href="#encode-1" class="headerlink" title="encode"></a>encode</h3><p>将字节数组编码为 hex 字符串。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>bytes</td><td>字节数组</td></tr><tr><td>返回值</td><td>hex 编码的字符串</td></tr></tbody></table><h3 id="decode-1"><a href="#decode-1" class="headerlink" title="decode"></a>decode</h3><p>将 hex 字符串解码为字节数组。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>str</td><td>hex 编码的字符串</td></tr><tr><td>返回值</td><td>字节数组</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hex.encode([<span class="number">168</span>, <span class="number">174</span>, <span class="number">155</span>, <span class="number">255</span>]); <span class="comment">// -&gt; 'a8ae9bff'</span></span><br><span class="line">hex.decode(<span class="string">'a8ae9bff'</span>); <span class="comment">// -&gt; [168, 174, 155, 255]</span></span><br></pre></td></tr></table></figure><h2 id="highlight"><a href="#highlight" class="headerlink" title="highlight"></a>highlight</h2><p>高亮代码。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function highlight(<br>    str: string,<br>    lang?: string,<br>    style?: {<br>        comment?: string;<br>        string?: string;<br>        number?: string;<br>        keyword?: string;<br>        operator?: string;<br>    }<br>): string;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>str</td><td>代码字符串</td></tr><tr><td>lang=js</td><td>语言，js，html 或者 css</td></tr><tr><td>style</td><td>高亮样式</td></tr><tr><td>返回值</td><td>高亮后的 html 代码字符串</td></tr></tbody></table><p>可设置样式：</p><p>comment，string，number，keyword，operator</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">highlight(<span class="string">'const a = 5;'</span>, <span class="string">'js'</span>, &#123;</span><br><span class="line">    keyword: <span class="string">'color:#569cd6;'</span></span><br><span class="line">&#125;); <span class="comment">// -&gt; '&lt;span class="keyword" style="color:#569cd6;"&gt;const&lt;/span&gt; a &lt;span class="operator" style="color:#994500;"&gt;=&lt;/span&gt; &lt;span class="number" style="color:#0086b3;"&gt;5&lt;/span&gt;;'</span></span><br></pre></td></tr></table></figure><h2 id="hookFn"><a href="#hookFn" class="headerlink" title="hookFn"></a>hookFn</h2><p>监听，修改函数参数和结果。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function hookFn&lt;T&gt;(<br>    fn: T,<br>    options: {<br>        before?: types.AnyFn;<br>        after?: types.AnyFn;<br>        error?: types.AnyFn;<br>    }<br>): T;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>fn</td><td>要监听修改的函数</td></tr><tr><td>options</td><td>监听选项</td></tr><tr><td>返回值</td><td>包装后的函数</td></tr></tbody></table><p>可用选项：</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>before</td><td>参数处理函数</td></tr><tr><td>after</td><td>结果处理函数</td></tr><tr><td>error</td><td>异常处理函数</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sum = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a &gt; <span class="number">100</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="built_in">Error</span>(<span class="string">'a is bigger than 100'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> totalSum = <span class="number">0</span>;</span><br><span class="line">sum = hookFn(sum, &#123;</span><br><span class="line">    before(a, b) &#123;</span><br><span class="line">        <span class="keyword">return</span> [+a, +b];</span><br><span class="line">    &#125;,</span><br><span class="line">    after(result) &#123;</span><br><span class="line">        totalSum += result;</span><br><span class="line">        <span class="keyword">return</span> totalSum;</span><br><span class="line">    &#125;,</span><br><span class="line">    error() &#123;</span><br><span class="line">        <span class="keyword">return</span> totalSum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">sum(<span class="string">'2'</span>, <span class="string">'5'</span>); <span class="comment">// -&gt; 7</span></span><br></pre></td></tr></table></figure><h2 id="hotkey"><a href="#hotkey" class="headerlink" title="hotkey"></a>hotkey</h2><p>监听键盘触发对应的事件。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">const hotkey: {<br>    on(key: string, listener: types.AnyFn): void;<br>    off(key: string, listener: types.AnyFn): void;<br>};</code><br></pre><br></details><h3 id="on-1"><a href="#on-1" class="headerlink" title="on"></a>on</h3><p>注册键盘按键监听器。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>key</td><td>按键</td></tr><tr><td>listener</td><td>监听器</td></tr></tbody></table><h3 id="off-1"><a href="#off-1" class="headerlink" title="off"></a>off</h3><p>注销监听器。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">hotkey.on(<span class="string">'k'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'k is pressed'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">keyDown</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">hotkey.on(<span class="string">'shift+a, shift+b'</span>, keyDown);</span><br><span class="line">hotkey.off(<span class="string">'shift+a'</span>, keyDown);</span><br></pre></td></tr></table></figure><h2 id="hslToRgb"><a href="#hslToRgb" class="headerlink" title="hslToRgb"></a>hslToRgb</h2><p>将 hsl 格式的颜色值转换为 rgb 格式。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function hslToRgb(hsl: number[]): number[];</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>hsl</td><td>hsl 值</td></tr><tr><td>返回值</td><td>rgb 值</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hslToRgb([<span class="number">165</span>, <span class="number">59</span>, <span class="number">50</span>, <span class="number">0.8</span>]); <span class="comment">// -&gt; [52, 203, 165, 0.8]</span></span><br></pre></td></tr></table></figure><h2 id="html-1"><a href="#html-1" class="headerlink" title="html"></a>html</h2><p>HTML 解析器。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">const html: {<br>    parse(html: string): any[];<br>    stringify(tree: any[]): string;<br>};</code><br></pre><br></details><h3 id="parse-3"><a href="#parse-3" class="headerlink" title="parse"></a>parse</h3><p>将 HTML 字符串转换为 js 对象。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>html</td><td>HTML 字符串</td></tr><tr><td>返回值</td><td>js 对象</td></tr></tbody></table><h3 id="stringify-2"><a href="#stringify-2" class="headerlink" title="stringify"></a>stringify</h3><p>将 js 对象序列化成 HTML 字符串。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>tree</td><td>要序列化的对象</td></tr><tr><td>返回值</td><td>HTML 字符串</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> tree = html.parse(<span class="string">'&lt;div id="name"&gt;licia&lt;/div&gt;'</span>);</span><br><span class="line"><span class="comment">// -&gt; [&#123;tag: 'div', attrs: &#123;id: 'name'&#125;, content: ['licia']&#125;]</span></span><br><span class="line">html.stringify(tree);</span><br></pre></td></tr></table></figure><h2 id="identity"><a href="#identity" class="headerlink" title="identity"></a>identity</h2><p>返回传入的第一个参数。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function identity&lt;T&gt;(val: T): T;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>val</td><td>任何值</td></tr><tr><td>返回值</td><td>第一个参数</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">identity(<span class="string">'a'</span>); <span class="comment">// -&gt; 'a'</span></span><br></pre></td></tr></table></figure><h2 id="idxOf"><a href="#idxOf" class="headerlink" title="idxOf"></a>idxOf</h2><p>返回指定值第一次在数组中出现的位置。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function idxOf(arr: any[], val: any, fromIdx?: number): number;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>arr</td><td>目标数组</td></tr><tr><td>val</td><td>要查找的值</td></tr><tr><td>fromIdx=0</td><td>查找起始位置</td></tr><tr><td>返回值</td><td>第一次出现的位置，如果没有，返回 -1</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">idxOf([<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>], <span class="number">2</span>, <span class="number">2</span>); <span class="comment">// -&gt; 3</span></span><br></pre></td></tr></table></figure><h2 id="indent"><a href="#indent" class="headerlink" title="indent"></a>indent</h2><p>对文本的每一行进行缩进处理。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function indent(<br>    str: string,<br>    char?: string,<br>    len?: number<br>): string;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>str</td><td>源字符串</td></tr><tr><td>char</td><td>缩进字符</td></tr><tr><td>len</td><td>缩进长度</td></tr><tr><td>返回值</td><td>目标字符串</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">indent(<span class="string">'foo\nbar'</span>, <span class="string">' '</span>, <span class="number">4</span>); <span class="comment">// -&gt; '    foo\n    bar'</span></span><br></pre></td></tr></table></figure><h2 id="inherits"><a href="#inherits" class="headerlink" title="inherits"></a>inherits</h2><p>使构造函数继承另一个构造函数原型链上的方法。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function inherits(<br>    Class: types.AnyFn,<br>    SuperClass: types.AnyFn<br>): void;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>Class</td><td>子类</td></tr><tr><td>SuperClass</td><td>父类</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">People</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>._name = name;</span><br><span class="line">&#125;</span><br><span class="line">People.prototype = &#123;</span><br><span class="line">    getName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>._name = name;</span><br><span class="line">&#125;</span><br><span class="line">inherits(Student, People);</span><br><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> Student(<span class="string">'RedHood'</span>);</span><br><span class="line">s.getName(); <span class="comment">// -&gt; 'RedHood'</span></span><br></pre></td></tr></table></figure><h2 id="ini"><a href="#ini" class="headerlink" title="ini"></a>ini</h2><p>ini 文件解析器。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">const ini: {<br>    parse(ini: string): any;<br>    stringify(<br>        obj: any,<br>        options?: {<br>            section?: string;<br>            whitespace: boolean;<br>        }<br>    ): string;<br>};</code><br></pre><br></details><h3 id="parse-4"><a href="#parse-4" class="headerlink" title="parse"></a>parse</h3><p>将 ini 文件转换为 js 对象。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>ini</td><td>ini 文件</td></tr><tr><td>返回值</td><td>js 对象</td></tr></tbody></table><h3 id="stringify-3"><a href="#stringify-3" class="headerlink" title="stringify"></a>stringify</h3><p>将 js 对象序列化成 ini 文件格式。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>obj</td><td>要序列化的对象</td></tr><tr><td>options</td><td>序列化选项</td></tr><tr><td>返回值</td><td>ini 文件</td></tr></tbody></table><p>选项：</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>section</td><td>顶部名称</td></tr><tr><td>whitespace=false</td><td>是否在 = 周围添加空格</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> config = ini.parse(<span class="string">`</span></span><br><span class="line"><span class="string">; This is a comment</span></span><br><span class="line"><span class="string">library = licia</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[user.info]</span></span><br><span class="line"><span class="string">name = surunzi</span></span><br><span class="line"><span class="string">alias[] = redhoodsu</span></span><br><span class="line"><span class="string">alias[] = red</span></span><br><span class="line"><span class="string">`</span>); <span class="comment">// -&gt; &#123;library: 'licia', user: &#123;info: &#123;name: 'surunzi', alias: ['redhoodsu', 'red']&#125;&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">ini.stringify(config);</span><br></pre></td></tr></table></figure><h2 id="insertionSort"><a href="#insertionSort" class="headerlink" title="insertionSort"></a>insertionSort</h2><p>插入排序实现。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function insertionSort(arr: any[], cmp?: types.AnyFn): any[];</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>arr</td><td>要排序的数组</td></tr><tr><td>cmp</td><td>比较器</td></tr><tr><td>返回值</td><td>有序数组</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insertionSort([<span class="number">2</span>, <span class="number">1</span>]); <span class="comment">// -&gt; [1, 2]</span></span><br></pre></td></tr></table></figure><h2 id="intersect"><a href="#intersect" class="headerlink" title="intersect"></a>intersect</h2><p>计算所有数组的交集。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function intersect(…arr: Array&lt;any[]&gt;): any[];</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>…arr</td><td>源数组</td></tr><tr><td>返回值</td><td>交集</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">intersect([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], [<span class="number">2</span>, <span class="number">1</span>, <span class="number">10</span>], [<span class="number">2</span>, <span class="number">1</span>]); <span class="comment">// -&gt; [1, 2]</span></span><br></pre></td></tr></table></figure><h2 id="intersectRange"><a href="#intersectRange" class="headerlink" title="intersectRange"></a>intersectRange</h2><p>计算两个区间的交集。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">namespace intersectRange {<br>    interface IRange {<br>        start: number;<br>        end: number;<br>    }<br>}<br>function intersectRange(<br>    a: intersectRange.IRange,<br>    b: intersectRange.IRange<br>): intersectRange.IRange | void;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>a</td><td>区间 a</td></tr><tr><td>b</td><td>区间 b</td></tr><tr><td>返回值</td><td>如果存在区间交集，返回它</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">intersectRange(&#123; <span class="attr">start</span>: <span class="number">0</span>, <span class="attr">end</span>: <span class="number">12</span> &#125;, &#123; <span class="attr">start</span>: <span class="number">11</span>, <span class="attr">end</span>: <span class="number">13</span> &#125;);</span><br><span class="line"><span class="comment">// -&gt; &#123;start: 11, end: 12&#125;</span></span><br><span class="line">intersectRange(&#123; <span class="attr">start</span>: <span class="number">0</span>, <span class="attr">end</span>: <span class="number">5</span> &#125;, &#123; <span class="attr">start</span>: <span class="number">6</span>, <span class="attr">end</span>: <span class="number">7</span> &#125;);</span><br><span class="line"><span class="comment">// -&gt; undefined</span></span><br></pre></td></tr></table></figure><h2 id="invariant"><a href="#invariant" class="headerlink" title="invariant"></a>invariant</h2><p>Facebook 的 invariant 模块。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function invariant(<br>    condition: boolean,<br>    format?: string,<br>    a?: string,<br>    b?: string,<br>    c?: string,<br>    d?: string,<br>    e?: string,<br>    f?: string<br>): void;</code><br></pre><br></details><p><a href="https://github.com/zertosh/invariant" target="_blank" rel="noopener">相关文档</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">invariant(<span class="literal">true</span>, <span class="string">'This will not throw'</span>);</span><br><span class="line"><span class="comment">// No errors</span></span><br><span class="line">invariant(<span class="literal">false</span>, <span class="string">'This will throw an error with this message'</span>);</span><br><span class="line"><span class="comment">// Error: Invariant Violation: This will throw an error with this message</span></span><br></pre></td></tr></table></figure><h2 id="invert"><a href="#invert" class="headerlink" title="invert"></a>invert</h2><p>生成一个新对象，该对象的键名和键值进行调换。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function invert(obj: any): any;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>obj</td><td>源对象</td></tr><tr><td>返回值</td><td>目标对象</td></tr></tbody></table><p>如果对象存在重复的键值，后面的值会覆盖前面的值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">invert(&#123; <span class="attr">a</span>: <span class="string">'b'</span>, <span class="attr">c</span>: <span class="string">'d'</span>, <span class="attr">e</span>: <span class="string">'f'</span> &#125;); <span class="comment">// -&gt; &#123;b: 'a', d: 'c', f: 'e'&#125;</span></span><br></pre></td></tr></table></figure><h2 id="isAbsoluteUrl"><a href="#isAbsoluteUrl" class="headerlink" title="isAbsoluteUrl"></a>isAbsoluteUrl</h2><p>检查 url 是否是绝对地址。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function isAbsoluteUrl(url: string): boolean;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>url</td><td>目标 url</td></tr><tr><td>返回值</td><td>如果是绝对地址，返回真</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">isAbsoluteUrl(<span class="string">'http://www.surunzi.com'</span>); <span class="comment">// -&gt; true</span></span><br><span class="line">isAbsoluteUrl(<span class="string">'//www.surunzi.com'</span>); <span class="comment">// -&gt; false</span></span><br><span class="line">isAbsoluteUrl(<span class="string">'surunzi.com'</span>); <span class="comment">// -&gt; false</span></span><br></pre></td></tr></table></figure><h2 id="isArgs"><a href="#isArgs" class="headerlink" title="isArgs"></a>isArgs</h2><p>检查值是否是参数类型。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function isArgs(val: any): boolean;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>val</td><td>要检查的值</td></tr><tr><td>返回值</td><td>如果是参数类型，返回真</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">isArgs(</span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">arguments</span>;</span><br><span class="line">    &#125;)()</span><br><span class="line">); <span class="comment">// -&gt; true</span></span><br></pre></td></tr></table></figure><h2 id="isArr"><a href="#isArr" class="headerlink" title="isArr"></a>isArr</h2><p>检查值是否是数组类型。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function isArr(val: any): boolean;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>val</td><td>要检查的值</td></tr><tr><td>返回值</td><td>如果是数组类型，返回真</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">isArr([]); <span class="comment">// -&gt; true</span></span><br><span class="line">isArr(&#123;&#125;); <span class="comment">// -&gt; false</span></span><br></pre></td></tr></table></figure><h2 id="isArrBuffer"><a href="#isArrBuffer" class="headerlink" title="isArrBuffer"></a>isArrBuffer</h2><p>检查值是否是 ArrayBuffer 类型。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function isArrBuffer(val: any): boolean;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>val</td><td>要检查的值</td></tr><tr><td>返回值</td><td>如果是 ArrayBuffer 类型，返回真</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">isArrBuffer(<span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">8</span>)); <span class="comment">// -&gt; true</span></span><br></pre></td></tr></table></figure><h2 id="isArrLike"><a href="#isArrLike" class="headerlink" title="isArrLike"></a>isArrLike</h2><p>检查值是否是类数组对象。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function isArrLike(val: any): boolean;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>val</td><td>要检查的值</td></tr><tr><td>返回值</td><td>如果是类数组对象，返回真</td></tr></tbody></table><p>对于函数，返回假。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">isArrLike(<span class="string">'test'</span>); <span class="comment">// -&gt; true</span></span><br><span class="line">isArrLike(<span class="built_in">document</span>.body.children); <span class="comment">// -&gt; true;</span></span><br><span class="line">isArrLike([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]); <span class="comment">// -&gt; true</span></span><br></pre></td></tr></table></figure><h2 id="isAsyncFn"><a href="#isAsyncFn" class="headerlink" title="isAsyncFn"></a>isAsyncFn</h2><p>检查值是否是 Async 函数。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function isAsyncFn(val: any): boolean;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>val</td><td>要检查的值</td></tr><tr><td>返回值</td><td>如果是 Async 函数，返回真</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">isAsyncFn(<span class="function"><span class="keyword">function</span>*(<span class="params"></span>) </span>&#123;&#125;); <span class="comment">// -&gt; false</span></span><br><span class="line">isAsyncFn(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;); <span class="comment">// -&gt; false</span></span><br><span class="line">isAsyncFn(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;); <span class="comment">// -&gt; true</span></span><br></pre></td></tr></table></figure><h2 id="isBlob"><a href="#isBlob" class="headerlink" title="isBlob"></a>isBlob</h2><p>检查值是否是 Blob 类型。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function isBlob(val: any): boolean;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>val</td><td>要检查的值</td></tr><tr><td>返回值</td><td>如果是 Blob 类型，返回真</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">isBlob(<span class="keyword">new</span> Blob([])); <span class="comment">// -&gt; true;</span></span><br><span class="line">isBlob([]); <span class="comment">// -&gt; false</span></span><br></pre></td></tr></table></figure><h2 id="isBool"><a href="#isBool" class="headerlink" title="isBool"></a>isBool</h2><p>检查值是否是布尔类型。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function isBool(val: any): boolean;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>val</td><td>要检查的值</td></tr><tr><td>返回值</td><td>如果是布尔类型，返回真</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">isBool(<span class="literal">true</span>); <span class="comment">// -&gt; true</span></span><br><span class="line">isBool(<span class="literal">false</span>); <span class="comment">// -&gt; true</span></span><br><span class="line">isBool(<span class="number">1</span>); <span class="comment">// -&gt; false</span></span><br></pre></td></tr></table></figure><h2 id="isBrowser"><a href="#isBrowser" class="headerlink" title="isBrowser"></a>isBrowser</h2><p>检测是否运行于浏览器环境。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">const isBrowser: boolean;</code><br></pre><br></details><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(isBrowser); <span class="comment">// -&gt; true if running in a browser</span></span><br></pre></td></tr></table></figure><h2 id="isBuffer"><a href="#isBuffer" class="headerlink" title="isBuffer"></a>isBuffer</h2><p>检查值是否是 Buffer 类型。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function isBuffer(val: any): boolean;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>val</td><td>要检查的值</td></tr><tr><td>返回值</td><td>如果是 Buffer 类型，返回真</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">isBuffer(<span class="keyword">new</span> Buffer(<span class="number">4</span>)); <span class="comment">// -&gt; true</span></span><br></pre></td></tr></table></figure><h2 id="isClose"><a href="#isClose" class="headerlink" title="isClose"></a>isClose</h2><p>检查两个数字是否近似相等。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function isClose(<br>    a: number,<br>    b: number,<br>    relTol?: number,<br>    absTol?: number<br>): boolean;</code><br></pre><br></details><p><code>abs(a-b) &lt;= max(relTol * max(abs(a), abs(b)), absTol)</code></p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>a</td><td>要比较的数字</td></tr><tr><td>b</td><td>要比较的数字</td></tr><tr><td>relTol=1e-9</td><td>相对误差</td></tr><tr><td>absTol=0</td><td>绝对误差</td></tr><tr><td>返回值</td><td>如果近似相等，返回真</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">isClose(<span class="number">1</span>, <span class="number">1.0000000001</span>); <span class="comment">// -&gt; true</span></span><br><span class="line">isClose(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// -&gt; false</span></span><br><span class="line">isClose(<span class="number">1</span>, <span class="number">1.2</span>, <span class="number">0.3</span>); <span class="comment">// -&gt; true</span></span><br><span class="line">isClose(<span class="number">1</span>, <span class="number">1.2</span>, <span class="number">0.1</span>, <span class="number">0.3</span>); <span class="comment">// -&gt; true</span></span><br></pre></td></tr></table></figure><h2 id="isCyclic"><a href="#isCyclic" class="headerlink" title="isCyclic"></a>isCyclic</h2><p>检查值是否存在循环引用。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function isCyclic(val: any): boolean;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>val</td><td>要检查的值</td></tr><tr><td>返回值</td><td>如果存在循环引用，返回真</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">isCyclic(&#123;&#125;); <span class="comment">// -&gt; false</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</span><br><span class="line">obj.b = obj;</span><br><span class="line">isCyclic(obj); <span class="comment">// -&gt; true</span></span><br></pre></td></tr></table></figure><h2 id="isDarkMode"><a href="#isDarkMode" class="headerlink" title="isDarkMode"></a>isDarkMode</h2><p>检测是否暗黑模式。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function isDarkMode(): boolean;</code><br></pre><br></details><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(isDarkMode()); <span class="comment">// true if dark mode</span></span><br></pre></td></tr></table></figure><h2 id="isDataUrl"><a href="#isDataUrl" class="headerlink" title="isDataUrl"></a>isDataUrl</h2><p>检查字符串是否是有效的 Data Url。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function isDataUrl(str: string): boolean;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>str</td><td>要检查的字符串</td></tr><tr><td>返回值</td><td>如果是有效的 Data Url，返回真</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">isDataUrl(<span class="string">'http://eustia.liriliri.io'</span>); <span class="comment">// -&gt; false</span></span><br><span class="line">isDataUrl(<span class="string">'data:text/plain;base64,SGVsbG8sIFdvcmxkIQ%3D%3D'</span>); <span class="comment">// -&gt; true</span></span><br></pre></td></tr></table></figure><h2 id="isDate"><a href="#isDate" class="headerlink" title="isDate"></a>isDate</h2><p>检查值是否是 Date 类型。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function isDate(val: any): boolean;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>val</td><td>要检查的值</td></tr><tr><td>返回值</td><td>如果是 Date 类型，返回真</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">isDate(<span class="keyword">new</span> <span class="built_in">Date</span>()); <span class="comment">// -&gt; true</span></span><br></pre></td></tr></table></figure><h2 id="isDir"><a href="#isDir" class="headerlink" title="isDir"></a>isDir</h2><p>检查路径是否是文件夹。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function isDir(path: string): Promise&lt;boolean&gt;;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>path</td><td>要检查的路径</td></tr><tr><td>返回值</td><td>如果是文件夹，返回真</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">isDir(<span class="string">'/foo/bar'</span>);</span><br></pre></td></tr></table></figure><h2 id="isEl"><a href="#isEl" class="headerlink" title="isEl"></a>isEl</h2><p>检查值是否是 DOM 元素。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function isEl(val: any): boolean;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>val</td><td>要检查的值</td></tr><tr><td>返回值</td><td>如果是 DOM 元素，返回真</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">isEl(<span class="built_in">document</span>.body); <span class="comment">// -&gt; true</span></span><br></pre></td></tr></table></figure><h2 id="isEmail"><a href="#isEmail" class="headerlink" title="isEmail"></a>isEmail</h2><p>简单检查值是否是合法的邮件地址。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function isEmail(val: string): boolean;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>val</td><td>要检查的值</td></tr><tr><td>返回值</td><td>如果是合法的邮件地址，返回真</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">isEmail(<span class="string">'surunzi@foxmail.com'</span>); <span class="comment">// -&gt; true</span></span><br></pre></td></tr></table></figure><h2 id="isEmpty"><a href="#isEmpty" class="headerlink" title="isEmpty"></a>isEmpty</h2><p>检查值是否是空对象或空数组。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function isEmpty(val: any): boolean;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>val</td><td>要检查的值</td></tr><tr><td>返回值</td><td>如果为空，返回真</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">isEmpty([]); <span class="comment">// -&gt; true</span></span><br><span class="line">isEmpty(&#123;&#125;); <span class="comment">// -&gt; true</span></span><br><span class="line">isEmpty(<span class="string">''</span>); <span class="comment">// -&gt; true</span></span><br></pre></td></tr></table></figure><h2 id="isEqual"><a href="#isEqual" class="headerlink" title="isEqual"></a>isEqual</h2><p>对两个对象进行深度比较，如果相等，返回真。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function isEqual(val: any, other: any): boolean;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>val</td><td>要比较的对象</td></tr><tr><td>other</td><td>要比较的对象</td></tr><tr><td>返回值</td><td>如果相等，返回真</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">isEqual([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]); <span class="comment">// -&gt; true</span></span><br></pre></td></tr></table></figure><h2 id="isErr"><a href="#isErr" class="headerlink" title="isErr"></a>isErr</h2><p>检查值是否是 Error 类型。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function isErr(val: any): boolean;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>val</td><td>要检查的值</td></tr><tr><td>返回值</td><td>如果是 Error 类型，返回真</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">isErr(<span class="keyword">new</span> <span class="built_in">Error</span>()); <span class="comment">// -&gt; true</span></span><br></pre></td></tr></table></figure><h2 id="isEven"><a href="#isEven" class="headerlink" title="isEven"></a>isEven</h2><p>检查数字是否是偶数。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function isEven(num: number): boolean;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>num</td><td>要检查的数字</td></tr><tr><td>返回值</td><td>如果是偶数，返回真</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">isEven(<span class="number">0</span>); <span class="comment">// -&gt; true</span></span><br><span class="line">isEven(<span class="number">1</span>); <span class="comment">// -&gt; false</span></span><br><span class="line">isEven(<span class="number">2</span>); <span class="comment">// -&gt; true</span></span><br></pre></td></tr></table></figure><h2 id="isFile"><a href="#isFile" class="headerlink" title="isFile"></a>isFile</h2><p>检查值是否是 File 类型。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function isFile(val: any): boolean;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>val</td><td>要检查的值</td></tr><tr><td>返回值</td><td>如果是 File 类型，返回真</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">isFile(<span class="keyword">new</span> File([<span class="string">'test'</span>], <span class="string">'test.txt'</span>, &#123; <span class="attr">type</span>: <span class="string">'text/plain'</span> &#125;)); <span class="comment">// -&gt; true</span></span><br></pre></td></tr></table></figure><h2 id="isFinite"><a href="#isFinite" class="headerlink" title="isFinite"></a>isFinite</h2><p>检查值是否是有限数字。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function isFinite(val: any): boolean;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>val</td><td>要检查的值</td></tr><tr><td>返回值</td><td>如果是有限数字，返回真</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">isFinite</span>(<span class="number">3</span>); <span class="comment">// -&gt; true</span></span><br><span class="line"><span class="built_in">isFinite</span>(<span class="literal">Infinity</span>); <span class="comment">// -&gt; false</span></span><br></pre></td></tr></table></figure><h2 id="isFn"><a href="#isFn" class="headerlink" title="isFn"></a>isFn</h2><p>检查值是否是函数。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function isFn(val: any): boolean;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>val</td><td>要检查的值</td></tr><tr><td>返回值</td><td>如果是函数，返回真</td></tr></tbody></table><p>Generator 函数返回真。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">isFn(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;); <span class="comment">// -&gt; true</span></span><br><span class="line">isFn(<span class="function"><span class="keyword">function</span>*(<span class="params"></span>) </span>&#123;&#125;); <span class="comment">// -&gt; true</span></span><br><span class="line">isFn(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;); <span class="comment">// -&gt; true</span></span><br></pre></td></tr></table></figure><h2 id="isFullWidth"><a href="#isFullWidth" class="headerlink" title="isFullWidth"></a>isFullWidth</h2><p>检查值是否是全角字符。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function isFullWidth(codePoint: number): boolean;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>codePoint</td><td>Unicode 码点</td></tr><tr><td>返回值</td><td>如果字符是全角，返回真</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">isFullWidth(<span class="string">'a'</span>.codePointAt(<span class="number">0</span>)); <span class="comment">// -&gt; false</span></span><br><span class="line">isFullWidth(<span class="string">','</span>.codePointAt(<span class="number">0</span>)); <span class="comment">// -&gt; false</span></span><br><span class="line">isFullWidth(<span class="string">'我'</span>.codePointAt(<span class="number">0</span>)); <span class="comment">// -&gt; true</span></span><br><span class="line">isFullWidth(<span class="string">'，'</span>.codePointAt(<span class="number">0</span>)); <span class="comment">// -&gt; true</span></span><br></pre></td></tr></table></figure><h2 id="isGeneratorFn"><a href="#isGeneratorFn" class="headerlink" title="isGeneratorFn"></a>isGeneratorFn</h2><p>检查值是否是 Generator 函数。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function isGeneratorFn(val: any): boolean;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>val</td><td>要检查的值</td></tr><tr><td>返回值</td><td>如果是 Generator 函数，返回真</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">isGeneratorFn(<span class="function"><span class="keyword">function</span>*(<span class="params"></span>) </span>&#123;&#125;); <span class="comment">// -&gt; true</span></span><br><span class="line">isGeneratorFn(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;); <span class="comment">// -&gt; false</span></span><br></pre></td></tr></table></figure><h2 id="isHidden"><a href="#isHidden" class="headerlink" title="isHidden"></a>isHidden</h2><p>检查元素是否隐藏。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function isHidden(<br>    el: Element,<br>    options?: {<br>        display?: boolean;<br>        visibility?: boolean;<br>        opacity?: boolean;<br>        size?: boolean;<br>        viewport?: boolean;<br>        overflow?: boolean;<br>    }<br>): boolean;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>el</td><td>目标元素</td></tr><tr><td>options</td><td>检查选项</td></tr><tr><td>返回值</td><td>如果元素隐藏，返回真</td></tr></tbody></table><p>可用选项：</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>display=true</td><td>检查是否显示</td></tr><tr><td>visibility=false</td><td>检查 visibility css 属性</td></tr><tr><td>opacity=false</td><td>检查 opacity css 属性</td></tr><tr><td>size=false</td><td>检查宽高</td></tr><tr><td>viewport=false</td><td>检查是否在可视区域</td></tr><tr><td>overflow=false</td><td>检查是否因 overflow 隐藏</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">isHidden(<span class="built_in">document</span>.createElement(<span class="string">'div'</span>)); <span class="comment">// -&gt; true</span></span><br></pre></td></tr></table></figure><h2 id="isInt"><a href="#isInt" class="headerlink" title="isInt"></a>isInt</h2><p>检查值是否是整数。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function isInt(val: any): boolean;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>val</td><td>要检查的值</td></tr><tr><td>返回值</td><td>如果是整数，返回真</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">isInt(<span class="number">5</span>); <span class="comment">// -&gt; true</span></span><br><span class="line">isInt(<span class="number">5.1</span>); <span class="comment">// -&gt; false</span></span><br><span class="line">isInt(&#123;&#125;); <span class="comment">// -&gt; false</span></span><br></pre></td></tr></table></figure><h2 id="isIp"><a href="#isIp" class="headerlink" title="isIp"></a>isIp</h2><p>检查值是否是 IP 地址。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">namespace isIp {<br>    function v4(str: string): boolean;<br>    function v6(str: string): boolean;<br>}<br>function isIp(str: string): boolean;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>str</td><td>要检查的字符串</td></tr><tr><td>返回值</td><td>如果是 IP 地址，返回真</td></tr></tbody></table><h3 id="v4"><a href="#v4" class="headerlink" title="v4"></a>v4</h3><p>检查值是否是 IPv4 地址。</p><h3 id="v6"><a href="#v6" class="headerlink" title="v6"></a>v6</h3><p>检查值是否是 IPv6 地址。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">isIp(<span class="string">'192.168.191.1'</span>); <span class="comment">// -&gt; true</span></span><br><span class="line">isIp(<span class="string">'1:2:3:4:5:6:7:8'</span>); <span class="comment">// -&gt; true</span></span><br><span class="line">isIp(<span class="string">'test'</span>); <span class="comment">// -&gt; false</span></span><br><span class="line">isIp.v4(<span class="string">'192.168.191.1'</span>); <span class="comment">// -&gt; true</span></span><br><span class="line">isIp.v6(<span class="string">'1:2:3:4:5:6:7:8'</span>); <span class="comment">// -&gt; true</span></span><br></pre></td></tr></table></figure><h2 id="isJson"><a href="#isJson" class="headerlink" title="isJson"></a>isJson</h2><p>检查值是否是有效的 JSON。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function isJson(val: string): boolean;</code><br></pre><br></details><p>该模块使用 <code>JSON.parse()</code> 和 <code>try... catch</code> 进行检测。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>val</td><td>JSON 字符串</td></tr><tr><td>返回值</td><td>如果是有效的 JSON，返回真</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">isJson(<span class="string">'&#123;"a": 5&#125;'</span>); <span class="comment">// -&gt; true</span></span><br><span class="line">isJson(<span class="string">"&#123;'a': 5&#125;"</span>); <span class="comment">// -&gt; false</span></span><br></pre></td></tr></table></figure><h2 id="isLeapYear"><a href="#isLeapYear" class="headerlink" title="isLeapYear"></a>isLeapYear</h2><p>检查年份是否是闰年。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function isLeapYear(year: number): boolean;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>year</td><td>要检查的年份</td></tr><tr><td>返回值</td><td>如果是闰年，返回真</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">isLeapYear(<span class="number">2000</span>); <span class="comment">// -&gt; true</span></span><br><span class="line">isLeapYear(<span class="number">2002</span>); <span class="comment">// -&gt; false</span></span><br></pre></td></tr></table></figure><h2 id="isMap"><a href="#isMap" class="headerlink" title="isMap"></a>isMap</h2><p>检查值是否是 Map 对象。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function isMap(val: any): boolean;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>val</td><td>要检查的值</td></tr><tr><td>返回值</td><td>如果是 Map 类型，返回真</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">isMap(<span class="keyword">new</span> <span class="built_in">Map</span>()); <span class="comment">// -&gt; true</span></span><br><span class="line">isMap(<span class="keyword">new</span> <span class="built_in">WeakMap</span>()); <span class="comment">// -&gt; false</span></span><br></pre></td></tr></table></figure><h2 id="isMatch-1"><a href="#isMatch-1" class="headerlink" title="isMatch"></a>isMatch</h2><p>检查对象所有键名和键值是否在指定的对象中。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function isMatch(obj: any, src: any): boolean;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>obj</td><td>目标对象</td></tr><tr><td>src</td><td>进行匹配的对象</td></tr><tr><td>返回值</td><td>如果匹配，返回真</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">isMatch(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;, &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;); <span class="comment">// -&gt; true</span></span><br></pre></td></tr></table></figure><h2 id="isMiniProgram"><a href="#isMiniProgram" class="headerlink" title="isMiniProgram"></a>isMiniProgram</h2><p>检测是否运行于微信小程序环境中。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">const isMiniProgram: boolean;</code><br></pre><br></details><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(isMiniProgram); <span class="comment">// -&gt; true if running in mini program.</span></span><br></pre></td></tr></table></figure><h2 id="isMobile"><a href="#isMobile" class="headerlink" title="isMobile"></a>isMobile</h2><p>使用 ua 检测是否运行于移动端浏览器。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function isMobile(ua?: string): boolean;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>ua=navigator.userAgent</td><td>浏览器用户代理</td></tr><tr><td>返回值</td><td>如果是移动端浏览器，返回真</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">isMobile(navigator.userAgent);</span><br></pre></td></tr></table></figure><h2 id="isNaN"><a href="#isNaN" class="headerlink" title="isNaN"></a>isNaN</h2><p>检测值是否是 NaN。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function isNaN(val: any): boolean;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>val</td><td>要检查的值</td></tr><tr><td>返回值</td><td>如果是 NaN，返回真</td></tr></tbody></table><p>跟全局 isNaN 不同的是，Undefined 不是 NaN。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">isNaN</span>(<span class="number">0</span>); <span class="comment">// -&gt; false</span></span><br><span class="line"><span class="built_in">isNaN</span>(<span class="literal">NaN</span>); <span class="comment">// -&gt; true</span></span><br></pre></td></tr></table></figure><h2 id="isNative"><a href="#isNative" class="headerlink" title="isNative"></a>isNative</h2><p>检查值是否是原生函数。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function isNative(val: any): boolean;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>val</td><td>要检查的值</td></tr><tr><td>返回值</td><td>如果是原生函数，返回真</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">isNative(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;); <span class="comment">// -&gt; false</span></span><br><span class="line">isNative(<span class="built_in">Math</span>.min); <span class="comment">// -&gt; true</span></span><br></pre></td></tr></table></figure><h2 id="isNil"><a href="#isNil" class="headerlink" title="isNil"></a>isNil</h2><p>检查值是否是 null 或 undefined，等价于 value == null。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function isNil(val: any): boolean;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>val</td><td>要检查的值</td></tr><tr><td>返回值</td><td>如果是 null 或 undefined，返回真</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">isNil(<span class="literal">null</span>); <span class="comment">// -&gt; true</span></span><br><span class="line">isNil(<span class="keyword">void</span> <span class="number">0</span>); <span class="comment">// -&gt; true</span></span><br><span class="line">isNil(<span class="literal">undefined</span>); <span class="comment">// -&gt; true</span></span><br><span class="line">isNil(<span class="literal">false</span>); <span class="comment">// -&gt; false</span></span><br><span class="line">isNil(<span class="number">0</span>); <span class="comment">// -&gt; false</span></span><br><span class="line">isNil([]); <span class="comment">// -&gt; false</span></span><br></pre></td></tr></table></figure><h2 id="isNode"><a href="#isNode" class="headerlink" title="isNode"></a>isNode</h2><p>检测是否运行于 node 环境中。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">const isNode: boolean;</code><br></pre><br></details><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(isNode); <span class="comment">// -&gt; true if running in node</span></span><br></pre></td></tr></table></figure><h2 id="isNull"><a href="#isNull" class="headerlink" title="isNull"></a>isNull</h2><p>检查值是否是 Null 类型。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function isNull(val: any): boolean;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>val</td><td>要检查的值</td></tr><tr><td>返回值</td><td>如果是 Null 类型，返回真</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">isNull(<span class="literal">null</span>); <span class="comment">// -&gt; true</span></span><br></pre></td></tr></table></figure><h2 id="isNum"><a href="#isNum" class="headerlink" title="isNum"></a>isNum</h2><p>检测值是否是数字类型。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function isNum(val: any): boolean;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>val</td><td>要检查的值</td></tr><tr><td>返回值</td><td>如果是数字，返回真</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">isNum(<span class="number">5</span>); <span class="comment">// -&gt; true</span></span><br><span class="line">isNum(<span class="number">5.1</span>); <span class="comment">// -&gt; true</span></span><br><span class="line">isNum(&#123;&#125;); <span class="comment">// -&gt; false</span></span><br></pre></td></tr></table></figure><h2 id="isNumeric"><a href="#isNumeric" class="headerlink" title="isNumeric"></a>isNumeric</h2><p>检查值是否是数字，包括数字字符串。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function isNumeric(val: any): boolean;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>val</td><td>要检查的值</td></tr><tr><td>返回值</td><td>如果是数字，返回真</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">isNumeric(<span class="number">1</span>); <span class="comment">// -&gt; true</span></span><br><span class="line">isNumeric(<span class="string">'1'</span>); <span class="comment">// -&gt; true</span></span><br><span class="line">isNumeric(<span class="built_in">Number</span>.MAX_VALUE); <span class="comment">// -&gt; true</span></span><br><span class="line">isNumeric(<span class="number">0xff</span>); <span class="comment">// -&gt; true</span></span><br><span class="line">isNumeric(<span class="string">''</span>); <span class="comment">// -&gt; false</span></span><br><span class="line">isNumeric(<span class="string">'1.1.1'</span>); <span class="comment">// -&gt; false</span></span><br><span class="line">isNumeric(<span class="literal">NaN</span>); <span class="comment">// -&gt; false</span></span><br></pre></td></tr></table></figure><h2 id="isObj"><a href="#isObj" class="headerlink" title="isObj"></a>isObj</h2><p>检查值是否是对象。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function isObj(val: any): boolean;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>val</td><td>要检查的值</td></tr><tr><td>返回值</td><td>如果是对象，返回真</td></tr></tbody></table><p><a href="http://www.ecma-international.org/ecma-262/6.0/#sec-ecmascript-language-types" target="_blank" rel="noopener">标准定义</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">isObj(&#123;&#125;); <span class="comment">// -&gt; true</span></span><br><span class="line">isObj([]); <span class="comment">// -&gt; true</span></span><br></pre></td></tr></table></figure><h2 id="isOdd"><a href="#isOdd" class="headerlink" title="isOdd"></a>isOdd</h2><p>检查数字是否是奇数。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function isOdd(num: number): boolean;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>num</td><td>要检查的数字</td></tr><tr><td>返回值</td><td>如果是奇数，返回真</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">isOdd(<span class="number">0</span>); <span class="comment">// -&gt; false</span></span><br><span class="line">isOdd(<span class="number">1</span>); <span class="comment">// -&gt; true</span></span><br><span class="line">isOdd(<span class="number">2</span>); <span class="comment">// -&gt; false</span></span><br></pre></td></tr></table></figure><h2 id="isPlainObj"><a href="#isPlainObj" class="headerlink" title="isPlainObj"></a>isPlainObj</h2><p>检查值是否是用 Object 构造函数创建的对象。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function isPlainObj(val: any): boolean;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>val</td><td>要检查的值</td></tr><tr><td>返回值</td><td>如果是 plain object，返回真</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">isPlainObj(&#123;&#125;); <span class="comment">// -&gt; true</span></span><br><span class="line">isPlainObj([]); <span class="comment">// -&gt; false</span></span><br><span class="line">isPlainObj(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;); <span class="comment">// -&gt; false</span></span><br></pre></td></tr></table></figure><h2 id="isPortFree"><a href="#isPortFree" class="headerlink" title="isPortFree"></a>isPortFree</h2><p>检查 TCP 端口是否可用。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function isPortFree(<br>    port: number,<br>    host?: string<br>): Promise&lt;boolean&gt;;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>port</td><td>TCP 端口</td></tr><tr><td>host</td><td>地址</td></tr><tr><td>返回值</td><td>如果端口可用，返回真</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">isPortFree(<span class="number">3000</span>).then(<span class="function"><span class="params">isFree</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// Do something.</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="isPrime"><a href="#isPrime" class="headerlink" title="isPrime"></a>isPrime</h2><p>检查整数是否是质数。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function isPrime(num: number): boolean;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>num</td><td>要检查的数字</td></tr><tr><td>返回值</td><td>如果是质数，返回真</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">isPrime(<span class="number">11</span>); <span class="comment">// -&gt; true</span></span><br><span class="line">isPrime(<span class="number">8</span>); <span class="comment">// -&gt; false</span></span><br></pre></td></tr></table></figure><h2 id="isPrimitive"><a href="#isPrimitive" class="headerlink" title="isPrimitive"></a>isPrimitive</h2><p>检测值是否是字符串，数字，布尔值或 null。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function isPrimitive(val: any): boolean;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>val</td><td>要检查的值</td></tr><tr><td>返回值</td><td>如果是原始类型，返回真</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">isPrimitive(<span class="number">5</span>); <span class="comment">// -&gt; true</span></span><br><span class="line">isPrimitive(<span class="string">'abc'</span>); <span class="comment">// -&gt; true</span></span><br><span class="line">isPrimitive(<span class="literal">false</span>); <span class="comment">// -&gt; true</span></span><br></pre></td></tr></table></figure><h2 id="isPromise"><a href="#isPromise" class="headerlink" title="isPromise"></a>isPromise</h2><p>检查值是否是类 promise 对象。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function isPromise(val: any): boolean;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>val</td><td>要检查的值</td></tr><tr><td>返回值</td><td>如果是类 promise 对象，返回真</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">isPromise(<span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;)); <span class="comment">// -&gt; true</span></span><br><span class="line">isPromise(&#123;&#125;); <span class="comment">// -&gt; false</span></span><br></pre></td></tr></table></figure><h2 id="isRegExp"><a href="#isRegExp" class="headerlink" title="isRegExp"></a>isRegExp</h2><p>检查值是否是正则类型。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function isRegExp(val: any): boolean;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>val</td><td>要检查的值</td></tr><tr><td>返回值</td><td>如果是正则类型，返回真</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">isRegExp(<span class="regexp">/a/</span>); <span class="comment">// -&gt; true</span></span><br></pre></td></tr></table></figure><h2 id="isRelative"><a href="#isRelative" class="headerlink" title="isRelative"></a>isRelative</h2><p>检查路径是否是相对路径。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function isRelative(path: string): boolean;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>path</td><td>要检查的路径</td></tr><tr><td>返回值</td><td>如果是相对路径，返回真</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">isRelative(<span class="string">'README.md'</span>); <span class="comment">// -&gt; true</span></span><br></pre></td></tr></table></figure><h2 id="isRetina"><a href="#isRetina" class="headerlink" title="isRetina"></a>isRetina</h2><p>判断是否运行在 retina 屏幕的设备上。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">const isRetina: boolean;</code><br></pre><br></details><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(isRetina); <span class="comment">// -&gt; true if high DPR</span></span><br></pre></td></tr></table></figure><h2 id="isRunning"><a href="#isRunning" class="headerlink" title="isRunning"></a>isRunning</h2><p>检查进程是否运行中。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function isRunning(pid: number): boolean;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>pid</td><td>进程 id</td></tr><tr><td>返回值</td><td>如果进程运行中，返回真</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">isRunning(<span class="number">123456</span>); <span class="comment">// true if running</span></span><br></pre></td></tr></table></figure><h2 id="isSet"><a href="#isSet" class="headerlink" title="isSet"></a>isSet</h2><p>检查值是否是 Set 类型。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function isSet(val: any): boolean;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>val</td><td>要检查的值</td></tr><tr><td>返回值</td><td>如果是 Set 类型，返回真</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">isSet(<span class="keyword">new</span> <span class="built_in">Set</span>()); <span class="comment">// -&gt; true</span></span><br><span class="line">isSet(<span class="keyword">new</span> <span class="built_in">WeakSet</span>()); <span class="comment">// -&gt; false</span></span><br></pre></td></tr></table></figure><h2 id="isSorted"><a href="#isSorted" class="headerlink" title="isSorted"></a>isSorted</h2><p>检查数组是否有序。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function isSorted(arr: any[], cmp?: types.AnyFn): boolean;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>arr</td><td>目标数组</td></tr><tr><td>cmp</td><td>比较器</td></tr><tr><td>返回值</td><td>如果数组有序，返回真</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">isSorted([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]); <span class="comment">// -&gt; true</span></span><br><span class="line">isSorted([<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]); <span class="comment">// -&gt; false</span></span><br></pre></td></tr></table></figure><h2 id="isStr"><a href="#isStr" class="headerlink" title="isStr"></a>isStr</h2><p>检查值是否是字符串。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function isStr(val: any): boolean;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>val</td><td>要检查的值</td></tr><tr><td>返回值</td><td>如果是字符串，返回真</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">isStr(<span class="string">'licia'</span>); <span class="comment">// -&gt; true</span></span><br></pre></td></tr></table></figure><h2 id="isStream"><a href="#isStream" class="headerlink" title="isStream"></a>isStream</h2><p>检查值是否是 Node.js Stream 类型。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function isStream(val: any): boolean;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>val</td><td>要检查的值</td></tr><tr><td>返回值</td><td>如果是 Node.js Stream 类型，返回真</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> stream = <span class="built_in">require</span>(<span class="string">'stream'</span>);</span><br><span class="line"></span><br><span class="line">isStream(<span class="keyword">new</span> stream.Stream()); <span class="comment">// -&gt; true</span></span><br></pre></td></tr></table></figure><h2 id="isSymbol"><a href="#isSymbol" class="headerlink" title="isSymbol"></a>isSymbol</h2><p>检查值是否是 Symbol 类型。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function isSymbol(val: any): boolean;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>val</td><td>要检查的值</td></tr><tr><td>返回值</td><td>如果是 Symbol 类型，返回真</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">isSymbol(<span class="built_in">Symbol</span>(<span class="string">'test'</span>)); <span class="comment">// -&gt; true</span></span><br></pre></td></tr></table></figure><h2 id="isTypedArr"><a href="#isTypedArr" class="headerlink" title="isTypedArr"></a>isTypedArr</h2><p>检查值是否 TypedArray 类型。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function isTypedArr(val: any): boolean;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>val</td><td>要检查的值</td></tr><tr><td>返回值</td><td>如果值是 TypedArray 类型，返回真</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">isTypedArr([]); <span class="comment">// -&gt; false</span></span><br><span class="line">isTypedArr(<span class="keyword">new</span> <span class="built_in">Uint8Array</span>(<span class="number">8</span>)); <span class="comment">// -&gt; true</span></span><br></pre></td></tr></table></figure><h2 id="isUndef"><a href="#isUndef" class="headerlink" title="isUndef"></a>isUndef</h2><p>检查值是否是 undefined。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function isUndef(val: any): boolean;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>val</td><td>要检查的值</td></tr><tr><td>返回值</td><td>如果是 undefined，返回真</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">isUndef(<span class="keyword">void</span> <span class="number">0</span>); <span class="comment">// -&gt; true</span></span><br><span class="line">isUndef(<span class="literal">null</span>); <span class="comment">// -&gt; false</span></span><br></pre></td></tr></table></figure><h2 id="isUrl"><a href="#isUrl" class="headerlink" title="isUrl"></a>isUrl</h2><p>简单检查值是否是有效的 url 地址。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function isUrl(val: string): boolean;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>val</td><td>要检查的值</td></tr><tr><td>返回值</td><td>如果是有效的 url 地址，返回真</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">isUrl(<span class="string">'http://www.example.com?foo=bar&amp;param=test'</span>); <span class="comment">// -&gt; true</span></span><br></pre></td></tr></table></figure><h2 id="isWeakMap"><a href="#isWeakMap" class="headerlink" title="isWeakMap"></a>isWeakMap</h2><p>检查值是否是 WeakMap 类型。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function isWeakMap(val: any): boolean;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>val</td><td>要检查的值</td></tr><tr><td>返回值</td><td>如果是 WeakMap 类型，返回真</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">isWeakMap(<span class="keyword">new</span> <span class="built_in">Map</span>()); <span class="comment">// -&gt; false</span></span><br><span class="line">isWeakMap(<span class="keyword">new</span> <span class="built_in">WeakMap</span>()); <span class="comment">// -&gt; true</span></span><br></pre></td></tr></table></figure><h2 id="isWeakSet"><a href="#isWeakSet" class="headerlink" title="isWeakSet"></a>isWeakSet</h2><p>检查值是否是 WeakSet 类型。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function isWeakSet(val: any): boolean;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>val</td><td>要检查的值</td></tr><tr><td>返回值</td><td>如果是 WeakSet 类型，返回真</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">isWeakSet(<span class="keyword">new</span> <span class="built_in">Set</span>()); <span class="comment">// -&gt; false</span></span><br><span class="line">isWeakSet(<span class="keyword">new</span> <span class="built_in">WeakSet</span>()); <span class="comment">// -&gt; true</span></span><br></pre></td></tr></table></figure><h2 id="isWindows"><a href="#isWindows" class="headerlink" title="isWindows"></a>isWindows</h2><p>检测是否运行在 windows 操作系统上。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">const isWindows: boolean;</code><br></pre><br></details><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(isWindows); <span class="comment">// -&gt; true if running on windows</span></span><br></pre></td></tr></table></figure><h2 id="jsonClone"><a href="#jsonClone" class="headerlink" title="jsonClone"></a>jsonClone</h2><p>使用 JSON parse 和 stringify 方法对指定对象进行复制。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function jsonClone&lt;T&gt;(val: T): T;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>val</td><td>要克隆的值</td></tr><tr><td>返回值</td><td>克隆值</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jsonClone(&#123; <span class="attr">name</span>: <span class="string">'licia'</span> &#125;); <span class="comment">// -&gt; &#123; name: 'licia' &#125;</span></span><br></pre></td></tr></table></figure><h2 id="jsonp"><a href="#jsonp" class="headerlink" title="jsonp"></a>jsonp</h2><p>简单 jsonp 实现。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function jsonp(options: {<br>    url: string;<br>    data?: any;<br>    success?: types.AnyFn;<br>    param?: string;<br>    name?: string;<br>    error?: types.AnyFn;<br>    complete?: types.AnyFn;<br>    timeout?: number;<br>}): void;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>options</td><td>jsonp 选项</td></tr></tbody></table><p>可用选项：</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>url</td><td>请求地址</td></tr><tr><td>data</td><td>请求数据</td></tr><tr><td>success</td><td>成功回调</td></tr><tr><td>param=callback</td><td>回调参数名</td></tr><tr><td>name</td><td>回调函数名</td></tr><tr><td>error</td><td>失败回调</td></tr><tr><td>complete</td><td>结束回调</td></tr><tr><td>timeout</td><td>请求超时</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">jsonp(&#123;</span><br><span class="line">    url: <span class="string">'http://example.com'</span>,</span><br><span class="line">    data: &#123; <span class="attr">test</span>: <span class="string">'true'</span> &#125;,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="kebabCase"><a href="#kebabCase" class="headerlink" title="kebabCase"></a>kebabCase</h2><p>将字符串转换为短横线式。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function kebabCase(str: string): string;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>str</td><td>源字符串</td></tr><tr><td>返回值</td><td>短横线式字符串</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kebabCase(<span class="string">'fooBar'</span>); <span class="comment">// -&gt; foo-bar</span></span><br><span class="line">kebabCase(<span class="string">'foo bar'</span>); <span class="comment">// -&gt; foo-bar</span></span><br><span class="line">kebabCase(<span class="string">'foo_bar'</span>); <span class="comment">// -&gt; foo-bar</span></span><br><span class="line">kebabCase(<span class="string">'foo.bar'</span>); <span class="comment">// -&gt; foo-bar</span></span><br></pre></td></tr></table></figure><h2 id="keyCode"><a href="#keyCode" class="headerlink" title="keyCode"></a>keyCode</h2><p>键码键名转换。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function keyCode(name: string): number;<br>function keyCode(code: number): string;</code><br></pre><br></details><p>获取键码对应的键名。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>code</td><td>键码</td></tr><tr><td>返回值</td><td>对应的键名</td></tr></tbody></table><p>获取键名对应的键码。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>name</td><td>键名</td></tr><tr><td>返回值</td><td>对应的键码</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">keyCode(<span class="number">13</span>); <span class="comment">// -&gt; 'enter'</span></span><br><span class="line">keyCode(<span class="string">'enter'</span>); <span class="comment">// -&gt; 13</span></span><br></pre></td></tr></table></figure><h2 id="keys"><a href="#keys" class="headerlink" title="keys"></a>keys</h2><p>返回包含对象自身可遍历所有键名的数组。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function keys(obj: any): string[];</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>obj</td><td>目标对象</td></tr><tr><td>返回值</td><td>所有键名</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keys(&#123; <span class="attr">a</span>: <span class="number">1</span> &#125;); <span class="comment">// -&gt; ['a']</span></span><br></pre></td></tr></table></figure><h2 id="kill"><a href="#kill" class="headerlink" title="kill"></a>kill</h2><p>杀死进程。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function kill(pid: number): void;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>pid</td><td>进程 ID</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill(<span class="number">9420</span>);</span><br></pre></td></tr></table></figure><h2 id="last"><a href="#last" class="headerlink" title="last"></a>last</h2><p>获取数组的最后一个元素。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function last(arr: any[]): any;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>arr</td><td>目标数组</td></tr><tr><td>返回值</td><td>数组的最后一个元素</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">last([<span class="number">1</span>, <span class="number">2</span>]); <span class="comment">// -&gt; 2</span></span><br></pre></td></tr></table></figure><h2 id="lazyImport"><a href="#lazyImport" class="headerlink" title="lazyImport"></a>lazyImport</h2><p>模块懒加载，底层使用 Proxy。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function lazyImport&lt;T&gt;(<br>    importFn: (moduleId: string) =&gt; T,<br>    dirname?: string<br>): (moduleId: string) =&gt; T;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>importFn</td><td>实际引入模块的方法</td></tr><tr><td>dirname</td><td>当前脚本所在目录</td></tr><tr><td>返回值</td><td>用于引入模块的新方法</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> r = lazyImport(<span class="built_in">require</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> _ = r(<span class="string">'underscore'</span>);</span><br><span class="line"></span><br><span class="line">_.isNumber(<span class="number">5</span>);</span><br></pre></td></tr></table></figure><h2 id="lazyRequire"><a href="#lazyRequire" class="headerlink" title="lazyRequire"></a>lazyRequire</h2><p>模块懒加载。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function lazyRequire&lt;T&gt;(<br>    requireFn: (moduleId: string) =&gt; T<br>): (moduleId: string) =&gt; T;</code><br></pre><br></details><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> r = lazyRequire(<span class="built_in">require</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> _ = r(<span class="string">'underscore'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// underscore is required only when _ is called.</span></span><br><span class="line">_().isNumber(<span class="number">5</span>);</span><br></pre></td></tr></table></figure><h2 id="levenshtein"><a href="#levenshtein" class="headerlink" title="levenshtein"></a>levenshtein</h2><p>计算字符串编辑距离，使用 levenshtein 算法。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function levenshtein(a: string, b: string): number;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>a</td><td>字符串 a</td></tr><tr><td>b</td><td>字符串 b</td></tr><tr><td>返回值</td><td>a 和 b 的字符串编辑距离</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">levenshtein(<span class="string">'cat'</span>, <span class="string">'cake'</span>); <span class="comment">// -&gt; 2</span></span><br></pre></td></tr></table></figure><h2 id="linkify"><a href="#linkify" class="headerlink" title="linkify"></a>linkify</h2><p>将文本中的 url 地址转换为超链接。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function linkify(str: string, hyperlink?: types.AnyFn): string;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>str</td><td>源字符串</td></tr><tr><td>hyperlink</td><td>转换超链接函数</td></tr><tr><td>返回值</td><td>目标字符串</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">'Official site: http://eustia.liriliri.io'</span>;</span><br><span class="line">linkify(str); <span class="comment">// -&gt; 'Official site: &lt;a href="http://eustia.liriliri.io"&gt;http://eustia.liriliri.io&lt;/a&gt;'</span></span><br><span class="line">linkify(str, <span class="function"><span class="keyword">function</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'&lt;a href="'</span> + url + <span class="string">'" target="_blank"&gt;'</span> + url + <span class="string">'&lt;/a&gt;'</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="loadCss"><a href="#loadCss" class="headerlink" title="loadCss"></a>loadCss</h2><p>往页面插入样式链接。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function loadCss(src: string, cb?: types.AnyFn): void;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>src</td><td>样式文件地址</td></tr><tr><td>cb</td><td>加载完回调</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">loadCss(<span class="string">'style.css'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">isLoaded</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Do something...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="loadImg"><a href="#loadImg" class="headerlink" title="loadImg"></a>loadImg</h2><p>加载指定地址的图片。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function loadImg(src: string, cb?: types.AnyFn): void;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>src</td><td>图片地址</td></tr><tr><td>cb</td><td>加载完回调</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">loadImg(<span class="string">'http://eustia.liriliri.io/img.jpg'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, img</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(img.width, img.height);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="loadJs"><a href="#loadJs" class="headerlink" title="loadJs"></a>loadJs</h2><p>往页面插入脚本链接。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function loadJs(src: string, cb?: types.AnyFn): void;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>src</td><td>脚本地址</td></tr><tr><td>cb</td><td>加载完回调</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">loadJs(<span class="string">'main.js'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">isLoaded</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Do something...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="longest"><a href="#longest" class="headerlink" title="longest"></a>longest</h2><p>获取数组中最长的一项。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function longest(arr: string[]): string;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>arr</td><td>目标数组</td></tr><tr><td>返回值</td><td>最长的一项</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">longest([<span class="string">'a'</span>, <span class="string">'abcde'</span>, <span class="string">'abc'</span>]); <span class="comment">// -&gt; 'abcde'</span></span><br></pre></td></tr></table></figure><h2 id="lowerCase"><a href="#lowerCase" class="headerlink" title="lowerCase"></a>lowerCase</h2><p>转换字符串为小写。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function lowerCase(str: string): string;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>str</td><td>源字符串</td></tr><tr><td>返回值</td><td>目标字符串</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lowerCase(<span class="string">'TEST'</span>); <span class="comment">// -&gt; 'test'</span></span><br></pre></td></tr></table></figure><h2 id="lpad"><a href="#lpad" class="headerlink" title="lpad"></a>lpad</h2><p>对字符串进行左填充。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function lpad(str: string, len: number, chars?: string): string;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>str</td><td>源字符串</td></tr><tr><td>len</td><td>填充长度</td></tr><tr><td>chars</td><td>填充字符串</td></tr><tr><td>返回值</td><td>目标字符串</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lpad(<span class="string">'a'</span>, <span class="number">5</span>); <span class="comment">// -&gt; '    a'</span></span><br><span class="line">lpad(<span class="string">'a'</span>, <span class="number">5</span>, <span class="string">'-'</span>); <span class="comment">// -&gt; '----a'</span></span><br><span class="line">lpad(<span class="string">'abc'</span>, <span class="number">3</span>, <span class="string">'-'</span>); <span class="comment">// -&gt; 'abc'</span></span><br><span class="line">lpad(<span class="string">'abc'</span>, <span class="number">5</span>, <span class="string">'ab'</span>); <span class="comment">// -&gt; 'ababc'</span></span><br></pre></td></tr></table></figure><h2 id="ltrim"><a href="#ltrim" class="headerlink" title="ltrim"></a>ltrim</h2><p>删除字符串头部指定字符或空格。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function ltrim(str: string, chars?: string | string[]): string;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>str</td><td>源字符串</td></tr><tr><td>chars</td><td>删除字符</td></tr><tr><td>返回值</td><td>目标字符串</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ltrim(<span class="string">' abc  '</span>); <span class="comment">// -&gt; 'abc  '</span></span><br><span class="line">ltrim(<span class="string">'_abc_'</span>, <span class="string">'_'</span>); <span class="comment">// -&gt; 'abc_'</span></span><br><span class="line">ltrim(<span class="string">'_abc_'</span>, [<span class="string">'a'</span>, <span class="string">'_'</span>]); <span class="comment">// -&gt; 'bc_'</span></span><br></pre></td></tr></table></figure><h2 id="map-1"><a href="#map-1" class="headerlink" title="map"></a>map</h2><p>对集合的每个元素调用转换函数生成与之对应的数组。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function map&lt;T, TResult&gt;(<br>    list: types.List&lt;T&gt;,<br>    iterator: types.ListIterator&lt;T, TResult&gt;,<br>    context?: any<br>): TResult[];<br>function map&lt;T, TResult&gt;(<br>    object: types.Dictionary&lt;T&gt;,<br>    iterator: types.ObjectIterator&lt;T, TResult&gt;,<br>    context?: any<br>): TResult[];</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>object</td><td>源集合</td></tr><tr><td>iterator</td><td>转换函数</td></tr><tr><td>context</td><td>函数上下文</td></tr><tr><td>返回值</td><td>目标集合</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">map([<span class="number">4</span>, <span class="number">8</span>], <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n * n;</span><br><span class="line">&#125;); <span class="comment">// -&gt; [16, 64]</span></span><br></pre></td></tr></table></figure><h2 id="mapObj"><a href="#mapObj" class="headerlink" title="mapObj"></a>mapObj</h2><p>类似 map，但针对对象，生成一个新对象。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function mapObj&lt;T, TResult&gt;(<br>    object: types.Dictionary&lt;T&gt;,<br>    iterator: types.ObjectIterator&lt;T, TResult&gt;,<br>    context?: any<br>): types.Dictionary&lt;TResult&gt;;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>object</td><td>源对象</td></tr><tr><td>iterator</td><td>转换函数</td></tr><tr><td>context</td><td>函数上下文</td></tr><tr><td>返回值</td><td>目标对象</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mapObj(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">val, key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> val + <span class="number">1</span>;</span><br><span class="line">&#125;); <span class="comment">// -&gt; &#123;a: 2, b: 3&#125;</span></span><br></pre></td></tr></table></figure><h2 id="matcher"><a href="#matcher" class="headerlink" title="matcher"></a>matcher</h2><p>传入对象返回函数，如果传入参数中包含该对象则返回真。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function matcher(attrs: any): types.AnyFn;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>attrs</td><td>要匹配的对象</td></tr><tr><td>返回值</td><td>真值检测函数</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> filter = <span class="built_in">require</span>(<span class="string">'licia/filter'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> objects = [</span><br><span class="line">    &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">a</span>: <span class="number">4</span>, <span class="attr">b</span>: <span class="number">5</span>, <span class="attr">c</span>: <span class="number">6</span> &#125;</span><br><span class="line">];</span><br><span class="line">filter(objects, matcher(&#123; <span class="attr">a</span>: <span class="number">4</span>, <span class="attr">c</span>: <span class="number">6</span> &#125;)); <span class="comment">// -&gt; [&#123;a: 4, b: 5, c: 6&#125;]</span></span><br></pre></td></tr></table></figure><h2 id="max"><a href="#max" class="headerlink" title="max"></a>max</h2><p>获取数字中的最大值。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function max(…num: number[]): number;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>…num</td><td>要计算的数字</td></tr><tr><td>返回值</td><td>最大值</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">max(<span class="number">2.3</span>, <span class="number">1</span>, <span class="number">4.5</span>, <span class="number">2</span>); <span class="comment">// 4.5</span></span><br></pre></td></tr></table></figure><h2 id="md5"><a href="#md5" class="headerlink" title="md5"></a>md5</h2><p>MD5 算法实现。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function md5(msg: string | number[]): string;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>msg</td><td>密文</td></tr><tr><td>返回值</td><td>MD5 摘要</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">md5(<span class="string">'licia'</span>); <span class="comment">// -&gt; 'e59f337d85e9a467f1783fab282a41d0'</span></span><br></pre></td></tr></table></figure><h2 id="memStorage"><a href="#memStorage" class="headerlink" title="memStorage"></a>memStorage</h2><p>Web Storage 接口的纯内存实现。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">const memStorage: typeof window.localStorage;</code><br></pre><br></details><p>当 localStorage 或者 sessionStorage 无法使用时可以使用其作为替代。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> localStorage = <span class="built_in">window</span>.localStorage || memStorage;</span><br><span class="line">localStorage.setItem(<span class="string">'test'</span>, <span class="string">'licia'</span>);</span><br></pre></td></tr></table></figure><h2 id="memoize"><a href="#memoize" class="headerlink" title="memoize"></a>memoize</h2><p>缓存函数计算结果。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function memoize(<br>    fn: types.AnyFn,<br>    hashFn?: types.AnyFn<br>): types.AnyFn;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>fn</td><td>源函数</td></tr><tr><td>hashFn</td><td>计算缓存键名函数</td></tr><tr><td>返回值</td><td>目标函数</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fibonacci = memoize(<span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n &lt; <span class="number">2</span> ? n : fibonacci(n - <span class="number">1</span>) + fibonacci(n - <span class="number">2</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="mergeArr"><a href="#mergeArr" class="headerlink" title="mergeArr"></a>mergeArr</h2><p>将数组合并到第一个数组里。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function mergeArr&lt;T, U&gt;(<br>    first: ArrayLike&lt;T&gt;,<br>    …arrays: ArrayLike&lt;U&gt;[]<br>): ArrayLike&lt;T | U&gt;;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>first</td><td>要修改的数组</td></tr><tr><td>arrays</td><td>合并到第一个数组的数组</td></tr><tr><td>返回值</td><td>第一个数组</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">mergeArr(a, [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// -&gt; [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure><h2 id="mergeSort"><a href="#mergeSort" class="headerlink" title="mergeSort"></a>mergeSort</h2><p>归并排序实现。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function mergeSort(arr: any[], cmp?: types.AnyFn): any[];</code><br></pre><br></details><p>注意：它不改变原数组。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>arr</td><td>要排序的数组</td></tr><tr><td>cmp</td><td>比较器</td></tr><tr><td>返回值</td><td>有序数组</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mergeSort([<span class="number">2</span>, <span class="number">1</span>]); <span class="comment">// -&gt; [1, 2]</span></span><br></pre></td></tr></table></figure><h2 id="meta"><a href="#meta" class="headerlink" title="meta"></a>meta</h2><p>meta 操作库，将 name 和 content 属性值转换为键值对。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">namespace meta {<br>    function remove(nameList: string | string[]): void;<br>}<br>function meta(): {};<br>function meta(key: string): string;<br>function meta(keys: string[]): {};<br>function meta(key, value): void;<br>function meta(pairs: {}): void;</code><br></pre><br></details><p>获取指定 meta 值。如果忽略 meta 名，所有的 meta 键值对都被返回。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>name</td><td>meta 名</td></tr><tr><td>返回值</td><td>meta 值</td></tr></tbody></table><p>设置 meta 值。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>name</td><td>meta 名</td></tr><tr><td>content</td><td>meta 值</td></tr></tbody></table><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>metas</td><td>包含所有 meta 键值对的对象</td></tr></tbody></table><h3 id="remove-11"><a href="#remove-11" class="headerlink" title="remove"></a>remove</h3><p>移除指定 meta。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>name</td><td>meta 名</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &lt;meta name="a" content="1"/&gt; &lt;meta name="b" content="2"/&gt; &lt;meta name="c" content="3"/&gt;</span></span><br><span class="line">meta(); <span class="comment">// -&gt; &#123;a: '1', b: '2', c: '3'&#125;</span></span><br><span class="line">meta(<span class="string">'a'</span>); <span class="comment">// -&gt; '1'</span></span><br><span class="line">meta([<span class="string">'a'</span>, <span class="string">'c'</span>]); <span class="comment">// -&gt; &#123;a: '1', c: '3'&#125;</span></span><br><span class="line">meta(<span class="string">'d'</span>, <span class="string">'4'</span>);</span><br><span class="line">meta(&#123;</span><br><span class="line">    d: <span class="string">'5'</span>,</span><br><span class="line">    e: <span class="string">'6'</span>,</span><br><span class="line">    f: <span class="string">'7'</span></span><br><span class="line">&#125;);</span><br><span class="line">meta.remove(<span class="string">'d'</span>);</span><br><span class="line">meta.remove([<span class="string">'e'</span>, <span class="string">'f'</span>]);</span><br></pre></td></tr></table></figure><h2 id="methods"><a href="#methods" class="headerlink" title="methods"></a>methods</h2><p>获取对象中所有方法名。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function methods(obj: any): string[];</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>obj</td><td>目标对象</td></tr><tr><td>返回值</td><td>方法名列表</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">methods(<span class="built_in">console</span>); <span class="comment">// -&gt; ['Console', 'assert', 'dir', ...]</span></span><br></pre></td></tr></table></figure><h2 id="mime"><a href="#mime" class="headerlink" title="mime"></a>mime</h2><p>常用 mime 类型。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function mime(name: string): string | undefined;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>name</td><td>扩展名</td></tr><tr><td>返回值</td><td>mime 类型</td></tr></tbody></table><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>name</td><td>mime 类型</td></tr><tr><td>返回值</td><td>扩展名</td></tr></tbody></table><p>该模块只包含常用的文件类型。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mime(<span class="string">'jpg'</span>); <span class="comment">// -&gt; 'image/jpeg'</span></span><br><span class="line">mime(<span class="string">'bmp'</span>); <span class="comment">// -&gt; 'image/bmp'</span></span><br><span class="line">mime(<span class="string">'video/mp4'</span>); <span class="comment">// -&gt; 'mp4'</span></span><br><span class="line">mime(<span class="string">'test'</span>); <span class="comment">// -&gt; undefined</span></span><br></pre></td></tr></table></figure><h2 id="min"><a href="#min" class="headerlink" title="min"></a>min</h2><p>获取数字中的最小值。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function min(…num: number[]): number;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>…num</td><td>要计算的数字</td></tr><tr><td>返回值</td><td>最小值</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">min(<span class="number">2.3</span>, <span class="number">1</span>, <span class="number">4.5</span>, <span class="number">2</span>); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h2 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h2><p>递归地创建文件夹。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">namespace mkdir {<br>    function sync(dir: string, mode?: number): void;<br>}<br>function mkdir(<br>    dir: string,<br>    mode?: number,<br>    cb?: types.AnyFn<br>): void;<br>function mkdir(dir: string, cb?: types.AnyFn): void;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>dir</td><td>文件夹路径</td></tr><tr><td>mode=0777</td><td>文件夹模式</td></tr><tr><td>cb</td><td>回调</td></tr></tbody></table><h3 id="sync"><a href="#sync" class="headerlink" title="sync"></a>sync</h3><p>同步版本。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir(<span class="string">'/tmp/foo/bar/baz'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="built_in">console</span>.log(err);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">console</span>.log(<span class="string">'Done'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">mkdir.sync(<span class="string">'/tmp/foo2/bar/baz'</span>);</span><br></pre></td></tr></table></figure><h2 id="moment"><a href="#moment" class="headerlink" title="moment"></a>moment</h2><p>简单的类 moment.js 实现。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">namespace moment {<br>    class M {<br>        constructor(value: string | Date);<br>        format(mask: string): string;<br>        isValid(): boolean;<br>        isLeapYear(): boolean;<br>        isSame(that: M): boolean;<br>        valueOf(): number;<br>        isBefore(that: M): boolean;<br>        isAfter(that: M): boolean;<br>        year(): number;<br>        year(number): M;<br>        month(): number;<br>        month(number): M;<br>        date(): number;<br>        date(number): M;<br>        hour(): number;<br>        hour(number): M;<br>        minute(): number;<br>        minute(number): M;<br>        second(): number;<br>        second(number): M;<br>        millisecond(): number;<br>        millisecond(number): M;<br>        unix(): number;<br>        clone(): M;<br>        toDate(): Date;<br>        toArray(): number[];<br>        toJSON(): string;<br>        toISOString(): string;<br>        toObject(): any;<br>        toString(): string;<br>        set(unit: string, num: number): M;<br>        startOf(unit: string): M;<br>        endOf(unit: string): M;<br>        daysInMonth(): number;<br>        add(num: number, unit: string): M;<br>        subtract(num: number, unit: string): M;<br>        diff(input: M | string | Date, unit: string, asFloat: boolean): number;<br>    }<br>}<br>function moment(value: string | Date): moment.M;</code><br></pre><br></details><p>它只支持一小部分的 moment.js api。</p><h3 id="可用方法"><a href="#可用方法" class="headerlink" title="可用方法"></a>可用方法</h3><p>format，isValid，isLeapYear，isSame，isBefore，isAfter，year，<br>month，date，hour，minute，second，millisecond，unix，clone，<br>toDate，toArray，toJSON，toISOString，toObject，toString，set，<br>startOf，endOf，add，subtract，diff</p><h3 id="不支持特性"><a href="#不支持特性" class="headerlink" title="不支持特性"></a>不支持特性</h3><p>时区以及 quarter 和 week 单位。</p><p>注意：格式化功能使用 dateFormat 模块，所以掩码格式并不完全与 moment.js 一致。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">moment(<span class="string">'20180501'</span>).format(<span class="string">'yyyy-mm-dd'</span>); <span class="comment">// -&gt; '2018-05-01'</span></span><br></pre></td></tr></table></figure><h2 id="morphDom"><a href="#morphDom" class="headerlink" title="morphDom"></a>morphDom</h2><p>将 DOM 树变化成目标 DOM 树。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function morphDom(from: Node, to: Node | string): Node;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>from</td><td>原始 DOM 树</td></tr><tr><td>to</td><td>要变化的 DOM 树</td></tr><tr><td>返回值</td><td>变化后的 DOM 树</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> el1 = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">el1.className = <span class="string">'test'</span>;</span><br><span class="line"><span class="keyword">const</span> el2 = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">el2.className = <span class="string">'licia'</span>;</span><br><span class="line">morphDom(el1, el2);</span><br><span class="line"><span class="built_in">console</span>.log(el1.className); <span class="comment">// -&gt; 'licia'</span></span><br></pre></td></tr></table></figure><h2 id="morse"><a href="#morse" class="headerlink" title="morse"></a>morse</h2><p>摩尔斯电码编解码。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">const morse: {<br>    encode(txt: string): string;<br>    decode(morse: string): string;<br>};</code><br></pre><br></details><h3 id="encode-2"><a href="#encode-2" class="headerlink" title="encode"></a>encode</h3><p>将文本转换为摩尔斯电码。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>txt</td><td>要编码的文本</td></tr><tr><td>返回值</td><td>摩尔斯电码</td></tr></tbody></table><h3 id="decode-2"><a href="#decode-2" class="headerlink" title="decode"></a>decode</h3><p>将摩尔斯电码转换为文本。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>morse</td><td>摩尔斯电码</td></tr><tr><td>返回值</td><td>解码后的文本</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = morse.encode(<span class="string">'Hello, world.'</span>);</span><br><span class="line"><span class="comment">// -&gt; '.... . .-.. .-.. --- --..-- ....... .-- --- .-. .-.. -.. .-.-.-'</span></span><br><span class="line">morse.decode(str); <span class="comment">// -&gt; 'Hello, world.'</span></span><br></pre></td></tr></table></figure><h2 id="ms"><a href="#ms" class="headerlink" title="ms"></a>ms</h2><p>时长字符串与毫秒转换库。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function ms(str: string): number;<br>function ms(num: number): string;</code><br></pre><br></details><p>转换时长字符串为毫秒。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>str</td><td>字符串格式</td></tr><tr><td>返回值</td><td>毫秒</td></tr></tbody></table><p>转换毫秒为时长字符串。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>num</td><td>毫秒</td></tr><tr><td>返回值</td><td>字符串格式</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ms(<span class="string">'1s'</span>); <span class="comment">// -&gt; 1000</span></span><br><span class="line">ms(<span class="string">'1m'</span>); <span class="comment">// -&gt; 60000</span></span><br><span class="line">ms(<span class="string">'1.5h'</span>); <span class="comment">// -&gt; 5400000</span></span><br><span class="line">ms(<span class="string">'1d'</span>); <span class="comment">// -&gt; 86400000</span></span><br><span class="line">ms(<span class="string">'1y'</span>); <span class="comment">// -&gt; 31557600000</span></span><br><span class="line">ms(<span class="string">'1000'</span>); <span class="comment">// -&gt; 1000</span></span><br><span class="line">ms(<span class="number">1500</span>); <span class="comment">// -&gt; '1.5s'</span></span><br><span class="line">ms(<span class="number">60000</span>); <span class="comment">// -&gt; '1m'</span></span><br></pre></td></tr></table></figure><h2 id="naturalSort"><a href="#naturalSort" class="headerlink" title="naturalSort"></a>naturalSort</h2><p>以自然顺序排序数组。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function naturalSort&lt;T extends any[]&gt;(arr: T): T;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>arr</td><td>要排序的数组</td></tr><tr><td>返回值</td><td>有序数组</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">naturalSort([<span class="string">'img12'</span>, <span class="string">'img11'</span>, <span class="string">'$img'</span>, <span class="string">'_img'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'12'</span>]);</span><br><span class="line"><span class="comment">// -&gt; ['1', '2', '12', '$img', 'img11', 'img12', '_img']</span></span><br><span class="line">naturalSort([<span class="number">2</span>, <span class="string">'1'</span>, <span class="number">13</span>]); <span class="comment">// -&gt; ['1', 2, 13]</span></span><br></pre></td></tr></table></figure><h2 id="negate"><a href="#negate" class="headerlink" title="negate"></a>negate</h2><p>创建一个将原函数结果取反的函数。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function negate&lt;T extends types.AnyFn&gt;(predicate: T): T;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>predicate</td><td>源函数</td></tr><tr><td>返回值</td><td>目标函数</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">even</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n % <span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>].filter(negate(even)); <span class="comment">// -&gt; [1, 3, 5]</span></span><br></pre></td></tr></table></figure><h2 id="nextTick"><a href="#nextTick" class="headerlink" title="nextTick"></a>nextTick</h2><p>能够同时运行在 node 和浏览器端的 next tick 实现。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function nextTick(cb: types.AnyFn): void;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>cb</td><td>调用函数</td></tr></tbody></table><p>如果支持 process.nextTick，则调用它，否则使用 setImmediate 或 setTimeout 进行兼容。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Do something...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="noop"><a href="#noop" class="headerlink" title="noop"></a>noop</h2><p>一个什么也不做的空函数。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function noop(): void;</code><br></pre><br></details><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">noop(); <span class="comment">// Does nothing</span></span><br></pre></td></tr></table></figure><h2 id="normalizeHeader"><a href="#normalizeHeader" class="headerlink" title="normalizeHeader"></a>normalizeHeader</h2><p>标准化 HTTP 头部名。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function normalizeHeader(header: string): string;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>header</td><td>源头部名</td></tr><tr><td>返回值</td><td>目标头部名</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">normalizeHeader(<span class="string">'content-type'</span>); <span class="comment">// -&gt; 'Content-Type'</span></span><br><span class="line">normalizeHeader(<span class="string">'etag'</span>); <span class="comment">// -&gt; 'ETag'</span></span><br></pre></td></tr></table></figure><h2 id="normalizePath"><a href="#normalizePath" class="headerlink" title="normalizePath"></a>normalizePath</h2><p>标准化文件路径中的斜杠。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function normalizePath(path: string): string;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>path</td><td>源路径</td></tr><tr><td>返回值</td><td>目标路径</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">normalizePath(<span class="string">'\\foo\\bar\\'</span>); <span class="comment">// -&gt; '/foo/bar/'</span></span><br><span class="line">normalizePath(<span class="string">'./foo//bar'</span>); <span class="comment">// -&gt; './foo/bar'</span></span><br></pre></td></tr></table></figure><h2 id="normalizePhone"><a href="#normalizePhone" class="headerlink" title="normalizePhone"></a>normalizePhone</h2><p>标准化电话号码为 E.164 格式。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function normalizePhone(<br>    phone: string,<br>    options: {<br>        countryCode: number;<br>        trunkPrefix?: boolean;<br>    }<br>): string;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>phone</td><td>电话号码</td></tr><tr><td>options</td><td>标准化选项</td></tr><tr><td>返回值</td><td>E.164 格式电话号码</td></tr></tbody></table><p>可用选项：</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>countryCode</td><td>国家代码</td></tr><tr><td>trunkPrefix=false</td><td>如果本地格式有长途字冠，设为真</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">normalizePhone(<span class="string">'13512345678'</span>, &#123;</span><br><span class="line">    countryCode: <span class="number">86</span></span><br><span class="line">&#125;); <span class="comment">// -&gt; '+8613512345678'</span></span><br><span class="line">normalizePhone(<span class="string">'(415) 555-2671'</span>, &#123;</span><br><span class="line">    countryCode: <span class="number">1</span></span><br><span class="line">&#125;); <span class="comment">// -&gt; '+14155552671'</span></span><br><span class="line">normalizePhone(<span class="string">'020 7183 8750'</span>, &#123;</span><br><span class="line">    countryCode: <span class="number">44</span>,</span><br><span class="line">    trunkPrefix: <span class="literal">true</span></span><br><span class="line">&#125;); <span class="comment">// -&gt; '+442071838750'</span></span><br></pre></td></tr></table></figure><h2 id="notify"><a href="#notify" class="headerlink" title="notify"></a>notify</h2><p>Web Notifications 接口简单包装。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">namespace notify {<br>    class Notification extends Emitter {<br>        constructor(title: string, options?: object);<br>        show(): void;<br>    }<br>}<br>function notify(title: string, options?: object): void;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>title</td><td>通知标题</td></tr><tr><td>options</td><td>通知选项</td></tr></tbody></table><p>你可以传入所有在 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Notification/Notification" target="_blank" rel="noopener">Web Notification</a> 中支持的选项。</p><h3 id="Notification"><a href="#Notification" class="headerlink" title="Notification"></a>Notification</h3><p>如果你想要监听并处理像 close，show，click 或者 error 等事件，使用这个类创建实例。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">notify(<span class="string">'licia'</span>, &#123;</span><br><span class="line">    body: <span class="string">'This is the notification content'</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> notification = <span class="keyword">new</span> notify.Notification(<span class="string">'licia'</span>, &#123;</span><br><span class="line">    body: <span class="string">'This is the notification content'</span></span><br><span class="line">&#125;);</span><br><span class="line">notification.on(<span class="string">'error'</span>, err =&gt; <span class="built_in">console</span>.log(err));</span><br><span class="line">notification.on(<span class="string">'click'</span>, e =&gt; <span class="built_in">console</span>.log(e));</span><br><span class="line">notification.show();</span><br></pre></td></tr></table></figure><h2 id="now"><a href="#now" class="headerlink" title="now"></a>now</h2><p>获取当前时间戳。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function now(): number;</code><br></pre><br></details><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">now(); <span class="comment">// -&gt; 1468826678701</span></span><br></pre></td></tr></table></figure><h2 id="objToStr"><a href="#objToStr" class="headerlink" title="objToStr"></a>objToStr</h2><p>Object.prototype.toString 的别名。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function objToStr(val: any): string;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>val</td><td>目标值</td></tr><tr><td>返回值</td><td>字符串表示</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objToStr(<span class="number">5</span>); <span class="comment">// -&gt; '[object Number]'</span></span><br></pre></td></tr></table></figure><h2 id="omit"><a href="#omit" class="headerlink" title="omit"></a>omit</h2><p>类似 pick，但结果相反。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function omit(<br>    obj: any,<br>    filter: string | string[] | Function<br>): any;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>obj</td><td>源对象</td></tr><tr><td>filter</td><td>对象过滤器</td></tr><tr><td>返回值</td><td>目标对象</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">omit(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;, <span class="string">'a'</span>); <span class="comment">// -&gt; &#123;b: 2&#125;</span></span><br><span class="line">omit(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;, [<span class="string">'b'</span>, <span class="string">'c'</span>]); <span class="comment">// -&gt; &#123;a: 1&#125;</span></span><br><span class="line">omit(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">4</span> &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">val, key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> val % <span class="number">2</span>;</span><br><span class="line">&#125;); <span class="comment">// -&gt; &#123;b: 2, d: 4&#125;</span></span><br></pre></td></tr></table></figure><h2 id="once-1"><a href="#once-1" class="headerlink" title="once"></a>once</h2><p>创建只能调用一次的函数。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function once(fn: types.AnyFn): types.AnyFn;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>fn</td><td>源函数</td></tr><tr><td>返回值</td><td>目标函数</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">const</span> initOnce = once(init);</span><br><span class="line">initOnce();</span><br><span class="line">initOnce(); <span class="comment">// -&gt; init is invoked once</span></span><br></pre></td></tr></table></figure><h2 id="open"><a href="#open" class="headerlink" title="open"></a>open</h2><p>打开 url 地址或文件。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function open(target: string): any;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>target</td><td>要打开的目标</td></tr><tr><td>返回值</td><td>子进程对象</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open(<span class="string">'https://eustia.liriliri.io/'</span>);</span><br></pre></td></tr></table></figure><h2 id="openFile"><a href="#openFile" class="headerlink" title="openFile"></a>openFile</h2><p>在浏览器中打开文件选择框。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function openFile(options?: {<br>    accept?: string;<br>    multiple?: boolean;<br>}): Promise&lt;File[]&gt;;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>options</td><td>选项</td></tr><tr><td>返回值</td><td>文件列表</td></tr></tbody></table><p>可用选项：</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>accept</td><td>文件类型</td></tr><tr><td>multiple=false</td><td>是否支持多选</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">openFile(&#123; <span class="attr">multiple</span>: <span class="literal">true</span> &#125;).then(<span class="function"><span class="params">fileList</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(fileList);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="optimizeCb"><a href="#optimizeCb" class="headerlink" title="optimizeCb"></a>optimizeCb</h2><p>用于高效的函数上下文绑定。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function optimizeCb(<br>    fn: types.AnyFn,<br>    ctx: any,<br>    argCount?: number<br>): types.AnyFn;</code><br></pre><br></details><h2 id="ordinal"><a href="#ordinal" class="headerlink" title="ordinal"></a>ordinal</h2><p>转换数字为序数形式。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function ordinal(num: number): string;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>num</td><td>要转换的数字</td></tr><tr><td>返回值</td><td>目标序数</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ordinal(<span class="number">1</span>); <span class="comment">// -&gt; '1st'</span></span><br><span class="line">ordinal(<span class="number">2</span>); <span class="comment">// -&gt; '2nd'</span></span><br></pre></td></tr></table></figure><h2 id="orientation"><a href="#orientation" class="headerlink" title="orientation"></a>orientation</h2><p>屏幕方向工具库。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">namespace orientation {<br>    interface IOrientation extends Emitter {<br>        get(): string;<br>    }<br>}<br>const orientation: orientation.IOrientation;</code><br></pre><br></details><h3 id="on-2"><a href="#on-2" class="headerlink" title="on"></a>on</h3><p>绑定 change 事件。</p><h3 id="off-2"><a href="#off-2" class="headerlink" title="off"></a>off</h3><p>解绑 change 事件。</p><h3 id="get-8"><a href="#get-8" class="headerlink" title="get"></a>get</h3><p>获取当前屏幕方向（横屏 landscape 或 竖屏 portrait）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">orientation.on(<span class="string">'change'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">direction</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(direction); <span class="comment">// -&gt; 'portrait'</span></span><br><span class="line">&#125;);</span><br><span class="line">orientation.get(); <span class="comment">// -&gt; 'landscape'</span></span><br></pre></td></tr></table></figure><h2 id="pad"><a href="#pad" class="headerlink" title="pad"></a>pad</h2><p>对字符串进行左右填充。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function pad(str: string, len: number, chars?: string): string;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>str</td><td>源字符串</td></tr><tr><td>len</td><td>填充长度</td></tr><tr><td>chars</td><td>填充字符串</td></tr><tr><td>返回值</td><td>目标字符串</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pad(<span class="string">'a'</span>, <span class="number">5</span>); <span class="comment">// -&gt; '  a  '</span></span><br><span class="line">pad(<span class="string">'a'</span>, <span class="number">5</span>, <span class="string">'-'</span>); <span class="comment">// -&gt; '--a--'</span></span><br><span class="line">pad(<span class="string">'abc'</span>, <span class="number">3</span>, <span class="string">'-'</span>); <span class="comment">// -&gt; 'abc'</span></span><br><span class="line">pad(<span class="string">'abc'</span>, <span class="number">5</span>, <span class="string">'ab'</span>); <span class="comment">// -&gt; 'babca'</span></span><br><span class="line">pad(<span class="string">'ab'</span>, <span class="number">5</span>, <span class="string">'ab'</span>); <span class="comment">// -&gt; 'ababa'</span></span><br></pre></td></tr></table></figure><h2 id="pairs"><a href="#pairs" class="headerlink" title="pairs"></a>pairs</h2><p>将对象转换为包含【键名，键值】对的数组。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function pairs(obj: any): Array&lt;any[]&gt;;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>obj</td><td>目标对象</td></tr><tr><td>返回值</td><td>键值对数组</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pairs(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;); <span class="comment">// -&gt; [['a', 1], ['b', 2]]</span></span><br></pre></td></tr></table></figure><h2 id="parallel"><a href="#parallel" class="headerlink" title="parallel"></a>parallel</h2><p>同时执行多个函数。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function parallel(tasks: types.AnyFn[], cb?: types.AnyFn): void;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>tasks</td><td>函数数组</td></tr><tr><td>cb</td><td>结束回调</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">parallel(</span><br><span class="line">    [</span><br><span class="line">        <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">            setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                cb(<span class="literal">null</span>, <span class="string">'one'</span>);</span><br><span class="line">            &#125;, <span class="number">200</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">            setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                cb(<span class="literal">null</span>, <span class="string">'two'</span>);</span><br><span class="line">            &#125;, <span class="number">100</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">err, results</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// results -&gt; ['one', 'two']</span></span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="parseArgs"><a href="#parseArgs" class="headerlink" title="parseArgs"></a>parseArgs</h2><p>命令行参数简单解析。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function parseArgs(<br>    args: string[],<br>    options: {<br>        names: any;<br>        shorthands: any;<br>    }<br>): any;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>args</td><td>参数数组</td></tr><tr><td>options</td><td>解析选项</td></tr><tr><td>返回值</td><td>解析结果</td></tr></tbody></table><h3 id="options"><a href="#options" class="headerlink" title="options"></a>options</h3><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>names</td><td>选项名及类型</td></tr><tr><td>shorthands</td><td>选项名缩写</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">parseArgs([<span class="string">'eustia'</span>, <span class="string">'--output'</span>, <span class="string">'util.js'</span>, <span class="string">'-w'</span>], &#123;</span><br><span class="line">    names: &#123;</span><br><span class="line">        output: <span class="string">'string'</span>,</span><br><span class="line">        watch: <span class="string">'boolean'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    shorthands: &#123;</span><br><span class="line">        output: <span class="string">'o'</span>,</span><br><span class="line">        watch: <span class="string">'w'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// -&gt; &#123;remain: ['eustia'], output: 'util.js', watch: true&#125;</span></span><br></pre></td></tr></table></figure><h2 id="parseHtml"><a href="#parseHtml" class="headerlink" title="parseHtml"></a>parseHtml</h2><p>HTML 解析器。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function parseHtml(<br>    html: string,<br>    handlers: {<br>        start?: (tag: string, attrs: any, unary: boolean) =&gt; void;<br>        end?: (tag: string) =&gt; void;<br>        comment?: (text: string) =&gt; void;<br>        text?: (text: string) =&gt; void;<br>    }<br>): void;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>html</td><td>要解析的 HTML</td></tr><tr><td>handler</td><td>处理函数</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">parseHtml(<span class="string">'&lt;div&gt;licia&lt;/div&gt;'</span>, &#123;</span><br><span class="line">    start: <span class="function">(<span class="params">tag, attrs, unary</span>) =&gt;</span> &#123;&#125;,</span><br><span class="line">    end: <span class="function"><span class="params">tag</span> =&gt;</span> &#123;&#125;,</span><br><span class="line">    comment: <span class="function"><span class="params">text</span> =&gt;</span> &#123;&#125;,</span><br><span class="line">    text: <span class="function"><span class="params">text</span> =&gt;</span> &#123;&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="partial"><a href="#partial" class="headerlink" title="partial"></a>partial</h2><p>返回局部填充参数的函数，与 bind 模块相似。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function partial(<br>    fn: types.AnyFn,<br>    …partials: any[]<br>): types.AnyFn;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>fn</td><td>源函数</td></tr><tr><td>…partials</td><td>局部填充参数</td></tr><tr><td>返回值</td><td>目标函数</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sub5 = partial(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b - a;</span><br><span class="line">&#125;, <span class="number">5</span>);</span><br><span class="line">sub5(<span class="number">20</span>); <span class="comment">// -&gt; 15</span></span><br></pre></td></tr></table></figure><h2 id="pascalCase"><a href="#pascalCase" class="headerlink" title="pascalCase"></a>pascalCase</h2><p>将字符串转换为帕斯卡式。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function pascalCase(str: string): string;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>str</td><td>源字符串</td></tr><tr><td>返回值</td><td>帕斯卡式字符串</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pascalCase(<span class="string">'fooBar'</span>); <span class="comment">// -&gt; FooBar</span></span><br><span class="line">pascalCase(<span class="string">'foo bar'</span>); <span class="comment">// -&gt; FooBar</span></span><br><span class="line">pascalCase(<span class="string">'foo_bar'</span>); <span class="comment">// -&gt; FooBar</span></span><br><span class="line">pascalCase(<span class="string">'foo.bar'</span>); <span class="comment">// -&gt; FooBar</span></span><br></pre></td></tr></table></figure><h2 id="perfNow"><a href="#perfNow" class="headerlink" title="perfNow"></a>perfNow</h2><p>高精度时间戳。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function perfNow(): number;</code><br></pre><br></details><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> start = perfNow();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do something.</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(perfNow() - start);</span><br></pre></td></tr></table></figure><h2 id="pick"><a href="#pick" class="headerlink" title="pick"></a>pick</h2><p>过滤对象。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function pick(<br>    object: any,<br>    filter: string | string[] | Function<br>): any;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>object</td><td>源对象</td></tr><tr><td>filter</td><td>对象过滤器</td></tr><tr><td>返回值</td><td>目标对象</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pick(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;, <span class="string">'a'</span>); <span class="comment">// -&gt; &#123;a: 1&#125;</span></span><br><span class="line">pick(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;, [<span class="string">'b'</span>, <span class="string">'c'</span>]); <span class="comment">// -&gt; &#123;b: 2, c: 3&#125;</span></span><br><span class="line">pick(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">4</span> &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">val, key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> val % <span class="number">2</span>;</span><br><span class="line">&#125;); <span class="comment">// -&gt; &#123;a: 1, c: 3&#125;</span></span><br></pre></td></tr></table></figure><h2 id="pipe"><a href="#pipe" class="headerlink" title="pipe"></a>pipe</h2><p>将所有的 stream 流连接起来。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">import stream = require(&#x27;stream&#x27;);<br>function pipe(…streams: stream.Stream[]): void;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>…streams</td><td>要连接的 stream 流</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> through = <span class="built_in">require</span>(<span class="string">'licia/through'</span>);</span><br><span class="line">pipe(</span><br><span class="line">    fs.createReadStream(<span class="string">'in.txt'</span>),</span><br><span class="line">    through(<span class="function"><span class="keyword">function</span>(<span class="params">chunk, enc, cb</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.push(chunk);</span><br><span class="line">        cb();</span><br><span class="line">    &#125;),</span><br><span class="line">    fs.createWriteStream(<span class="string">'out.txt'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="pluck"><a href="#pluck" class="headerlink" title="pluck"></a>pluck</h2><p>提取数组对象中指定属性值，返回一个数组。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function pluck(object: any, key: string | string[]): any[];</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>obj</td><td>目标集合</td></tr><tr><td>key</td><td>属性路径</td></tr><tr><td>返回值</td><td>指定属性值列表</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> stooges = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'moe'</span>, <span class="attr">age</span>: <span class="number">40</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'larry'</span>, <span class="attr">age</span>: <span class="number">50</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'curly'</span>, <span class="attr">age</span>: <span class="number">60</span> &#125;</span><br><span class="line">];</span><br><span class="line">pluck(stooges, <span class="string">'name'</span>); <span class="comment">// -&gt; ['moe', 'larry', 'curly']</span></span><br></pre></td></tr></table></figure><h2 id="precision"><a href="#precision" class="headerlink" title="precision"></a>precision</h2><p>获取数字的精度。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function precision(num: number): number;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>num</td><td>要检查的数字</td></tr><tr><td>返回值</td><td>精度</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">precision(<span class="number">1.234</span>); <span class="comment">// -&gt; 3;</span></span><br></pre></td></tr></table></figure><h2 id="prefetch"><a href="#prefetch" class="headerlink" title="prefetch"></a>prefetch</h2><p>预获取指定的 url。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function prefetch(url: string): Promise&lt;void&gt;;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>url</td><td>目标 url</td></tr></tbody></table><p>如果支持，它将使用<code>&lt;link rel=prefetch&gt;</code>进行预加载。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">prefetch(<span class="string">'https://eustia.liriliri.io/'</span>);</span><br></pre></td></tr></table></figure><h2 id="prefix"><a href="#prefix" class="headerlink" title="prefix"></a>prefix</h2><p>给 css 属性名增加浏览器前缀。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">namespace prefix {<br>    function dash(name: string): string;<br>}<br>function prefix(name: string): string;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>name</td><td>源属性名</td></tr><tr><td>返回值</td><td>目标属性名</td></tr></tbody></table><h3 id="dash"><a href="#dash" class="headerlink" title="dash"></a>dash</h3><p>同上，但返回短横线命名方式的版本。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">prefix(<span class="string">'text-emphasis'</span>); <span class="comment">// -&gt; 'WebkitTextEmphasis'</span></span><br><span class="line">prefix.dash(<span class="string">'text-emphasis'</span>); <span class="comment">// -&gt; '-webkit-text-emphasis'</span></span><br><span class="line">prefix(<span class="string">'color'</span>); <span class="comment">// -&gt; 'color'</span></span><br></pre></td></tr></table></figure><h2 id="promisify"><a href="#promisify" class="headerlink" title="promisify"></a>promisify</h2><p>转换使用回调的异步函数，使其返回 Promise。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function promisify(<br>    fn: types.AnyFn,<br>    multiArgs?: boolean<br>): types.AnyFn;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>fn</td><td>源函数</td></tr><tr><td>multiArgs=false</td><td>回调是否有多个结果</td></tr><tr><td>返回值</td><td>目标函数</td></tr></tbody></table><p>如果 multiArgs 设为真，返回的 Promise 会将回调的结果合并成一个数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> readFile = promisify(fs.readFile);</span><br><span class="line">readFile(<span class="string">'test.js'</span>, <span class="string">'utf-8'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Do something with file content.</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="property-1"><a href="#property-1" class="headerlink" title="property"></a>property</h2><p>返回一个函数，该函数返回任何传入对象的指定属性。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function property(path: string | string[]): types.AnyFn;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>path</td><td>属性路径</td></tr><tr><td>返回值</td><td>目标函数</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>: &#123; <span class="attr">b</span>: <span class="number">1</span> &#125; &#125;;</span><br><span class="line">property(<span class="string">'a'</span>)(obj); <span class="comment">// -&gt; &#123;b: 1&#125;</span></span><br><span class="line">property([<span class="string">'a'</span>, <span class="string">'b'</span>])(obj); <span class="comment">// -&gt; 1</span></span><br></pre></td></tr></table></figure><h2 id="query"><a href="#query" class="headerlink" title="query"></a>query</h2><p>解析序列化 url 的 query 部分。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">const query: {<br>    parse(str: string): any;<br>    stringify(object: any): string;<br>};</code><br></pre><br></details><h3 id="parse-5"><a href="#parse-5" class="headerlink" title="parse"></a>parse</h3><p>将 query 字符串解析成对象。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>str</td><td>query 字符串</td></tr><tr><td>返回值</td><td>query 对象</td></tr></tbody></table><h3 id="stringify-4"><a href="#stringify-4" class="headerlink" title="stringify"></a>stringify</h3><p>将对象序列化成 query 字符串。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>obj</td><td>query 对象</td></tr><tr><td>返回值</td><td>query 字符串</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">query.parse(<span class="string">'foo=bar&amp;eruda=true'</span>); <span class="comment">// -&gt; &#123;foo: 'bar', eruda: 'true'&#125;</span></span><br><span class="line">query.stringify(&#123; <span class="attr">foo</span>: <span class="string">'bar'</span>, <span class="attr">eruda</span>: <span class="string">'true'</span> &#125;); <span class="comment">// -&gt; 'foo=bar&amp;eruda=true'</span></span><br><span class="line">query.parse(<span class="string">'name=eruda&amp;name=eustia'</span>); <span class="comment">// -&gt; &#123;name: ['eruda', 'eustia']&#125;</span></span><br></pre></td></tr></table></figure><h2 id="quickSort"><a href="#quickSort" class="headerlink" title="quickSort"></a>quickSort</h2><p>快排实现。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function quickSort(arr: any[], cmp?: types.AnyFn): any[];</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>arr</td><td>要排序的数组</td></tr><tr><td>cmp</td><td>比较器</td></tr><tr><td>返回值</td><td>有序数组</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">quickSort([<span class="number">2</span>, <span class="number">1</span>]); <span class="comment">// -&gt; [1, 2]</span></span><br></pre></td></tr></table></figure><h2 id="raf"><a href="#raf" class="headerlink" title="raf"></a>raf</h2><p>requestAnimationFrame 快捷方式。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">namespace raf {<br>    function cancel(id: number): void;<br>}<br>function raf(cb: types.AnyFn): number;</code><br></pre><br></details><p>如果原生 requestAnimationFrame 不支持，使用 setTimeout 进行兼容。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> id = raf(<span class="function"><span class="keyword">function</span> <span class="title">tick</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Animation stuff</span></span><br><span class="line">    raf(tick);</span><br><span class="line">&#125;);</span><br><span class="line">raf.cancel(id);</span><br></pre></td></tr></table></figure><h2 id="random"><a href="#random" class="headerlink" title="random"></a>random</h2><p>在给定区间内生成随机数。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function random(<br>    min: number,<br>    max?: number,<br>    floating?: boolean<br>): number;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>min</td><td>最小值</td></tr><tr><td>max</td><td>最大值</td></tr><tr><td>floating=false</td><td>是否允许浮点数</td></tr><tr><td>返回值</td><td>随机数</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">random(<span class="number">1</span>, <span class="number">5</span>); <span class="comment">// -&gt; an integer between 0 and 5</span></span><br><span class="line">random(<span class="number">5</span>); <span class="comment">// -&gt; an integer between 0 and 5</span></span><br><span class="line">random(<span class="number">1.2</span>, <span class="number">5.2</span>, <span class="literal">true</span>); <span class="comment">/// -&gt; a floating-point number between 1.2 and 5.2</span></span><br></pre></td></tr></table></figure><h2 id="randomBytes"><a href="#randomBytes" class="headerlink" title="randomBytes"></a>randomBytes</h2><p>随机字节序列生成器。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function randomBytes(size: number): Uint8Array;</code><br></pre><br></details><p>如果支持，使用 node 的 crypto 模块或浏览器的 crypto 对象。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>size</td><td>字节序列长度</td></tr><tr><td>返回值</td><td>随机字节序列</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">randomBytes(<span class="number">5</span>); <span class="comment">// -&gt; [55, 49, 153, 30, 122]</span></span><br></pre></td></tr></table></figure><h2 id="randomColor"><a href="#randomColor" class="headerlink" title="randomColor"></a>randomColor</h2><p>随机颜色生成器。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function randomColor(): string;<br>function randomColor(options: {<br>    count?: number;<br>    hue?: number;<br>    lightness?: number;<br>    format?: string;<br>    seed?: number;<br>}): string | string[];</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>options</td><td>随机选项</td></tr><tr><td>返回值</td><td>随机颜色</td></tr></tbody></table><p>可用选项：</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>count=1</td><td>生成数</td></tr><tr><td>hue</td><td>色调，取值为 0 - 360</td></tr><tr><td>lightness</td><td>亮度，取值为 0 - 1</td></tr><tr><td>format=hex</td><td>颜色格式，hex，hsl 或者 rgb</td></tr><tr><td>seed</td><td>随机种子</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">randomColor(&#123;</span><br><span class="line">    count: <span class="number">2</span></span><br><span class="line">&#125;); <span class="comment">// -&gt; ['#fed7f4', '#526498']</span></span><br></pre></td></tr></table></figure><h2 id="randomId"><a href="#randomId" class="headerlink" title="randomId"></a>randomId</h2><p>简单 id 生成器，类似于 nanoid。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function randomId(size?: number, symbols?: string): string;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>size=21</td><td>id 长度</td></tr><tr><td>symbols</td><td>生成 id 字符，默认为 a-zA-Z0-9_-</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">randomId(); <span class="comment">// -&gt; 'oKpy4HwU8E6IvU5I03gyQ'</span></span><br><span class="line">randomId(<span class="number">5</span>); <span class="comment">// -&gt; 'sM6E9'</span></span><br><span class="line">randomId(<span class="number">5</span>, <span class="string">'abc'</span>); <span class="comment">// -&gt; 'cbbcb'</span></span><br></pre></td></tr></table></figure><h2 id="randomItem"><a href="#randomItem" class="headerlink" title="randomItem"></a>randomItem</h2><p>随机获取数组中的某项。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function randomItem(arr: any[]): any;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>arr</td><td>目标数组</td></tr><tr><td>返回值</td><td>随机项</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">randomItem([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]); <span class="comment">// -&gt; 2</span></span><br></pre></td></tr></table></figure><h2 id="range"><a href="#range" class="headerlink" title="range"></a>range</h2><p>创建整数数组。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function range(<br>    start: number,<br>    end?: number,<br>    step?: number<br>): number[];</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>start</td><td>起始值</td></tr><tr><td>end</td><td>结束值</td></tr><tr><td>step=1</td><td>相邻差</td></tr><tr><td>返回值</td><td>整数数组</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">range(<span class="number">5</span>); <span class="comment">// -&gt; [0, 1, 2, 3, 4]</span></span><br><span class="line">range(<span class="number">0</span>, <span class="number">5</span>, <span class="number">2</span>); <span class="comment">// -&gt; [0, 2, 4]</span></span><br></pre></td></tr></table></figure><h2 id="rc4"><a href="#rc4" class="headerlink" title="rc4"></a>rc4</h2><p>RC4 对称加密算法实现。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">const rc4: {<br>    encrypt(key: string, str: string): string;<br>    decrypt(key: string, str: string): string;<br>};</code><br></pre><br></details><h3 id="encrypt"><a href="#encrypt" class="headerlink" title="encrypt"></a>encrypt</h3><p>RC4 加密，结果表示为 base64 字符串。</p><h3 id="decrypt"><a href="#decrypt" class="headerlink" title="decrypt"></a>decrypt</h3><p>RC4 解密，传入 base64 字符串。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>key</td><td>密钥</td></tr><tr><td>str</td><td>源字符串</td></tr><tr><td>返回值</td><td>目标字符串</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rc4.encrypt(<span class="string">'licia'</span>, <span class="string">'Hello world'</span>); <span class="comment">// -&gt; 'j9y2VpSfR3AdNN8='</span></span><br><span class="line">rc4.decrypt(<span class="string">'licia'</span>, <span class="string">'j9y2VpSfR3AdNN8='</span>); <span class="comment">// -&gt; 'Hello world'</span></span><br></pre></td></tr></table></figure><h2 id="ready-1"><a href="#ready-1" class="headerlink" title="ready"></a>ready</h2><p>dom 准备好时调用回调函数，类似于 jQuery 的 ready 方法。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function ready(fn: types.AnyFn): void;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>fn</td><td>回调函数</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// It's safe to manipulate dom here.</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h2><p>合并多个值成一个值。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function reduce&lt;T, TResult&gt;(<br>    list: types.List&lt;T&gt;,<br>    iterator: types.MemoIterator&lt;T, TResult&gt;,<br>    memo?: TResult,<br>    context?: any<br>): TResult;<br>function reduce&lt;T, TResult&gt;(<br>    list: types.Dictionary&lt;T&gt;,<br>    iterator: types.MemoObjectIterator&lt;T, TResult&gt;,<br>    memo?: TResult,<br>    context?: any<br>): TResult;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>obj</td><td>目标集合</td></tr><tr><td>iteratee=identity</td><td>合并函数</td></tr><tr><td>initial</td><td>初始值</td></tr><tr><td>ctx</td><td>函数上下文</td></tr><tr><td>返回值</td><td>合并值</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">reduce(</span><br><span class="line">    [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">sum, n</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sum + n;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="number">0</span></span><br><span class="line">); <span class="comment">// -&gt; 6</span></span><br></pre></td></tr></table></figure><h2 id="reduceRight"><a href="#reduceRight" class="headerlink" title="reduceRight"></a>reduceRight</h2><p>类似于 reduce，只是从后往前合并。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function reduceRight&lt;T, TResult&gt;(<br>    list: types.Collection&lt;T&gt;,<br>    iterator: types.MemoIterator&lt;T, TResult&gt;,<br>    memo?: TResult,<br>    context?: any<br>): TResult;</code><br></pre><br></details><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">reduceRight(</span><br><span class="line">    [[<span class="number">1</span>], [<span class="number">2</span>], [<span class="number">3</span>]],</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a.concat(b);</span><br><span class="line">    &#125;,</span><br><span class="line">    []</span><br><span class="line">); <span class="comment">// -&gt; [3, 2, 1]</span></span><br></pre></td></tr></table></figure><h2 id="reject"><a href="#reject" class="headerlink" title="reject"></a>reject</h2><p>类似 filter，但结果相反。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function reject&lt;T&gt;(<br>    list: types.List&lt;T&gt;,<br>    iterator: types.ListIterator&lt;T, boolean&gt;,<br>    context?: any<br>): T[];<br>function reject&lt;T&gt;(<br>    object: types.Dictionary&lt;T&gt;,<br>    iterator: types.ObjectIterator&lt;T, boolean&gt;,<br>    context?: any<br>): T[];</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>obj</td><td>要遍历的集合</td></tr><tr><td>predicate</td><td>真值检测函数</td></tr><tr><td>ctx</td><td>函数上下文</td></tr><tr><td>返回值</td><td>包含所有未通过真值检测元素的数组</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">reject([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> val % <span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line">&#125;); <span class="comment">// -&gt; [1, 3, 5]</span></span><br></pre></td></tr></table></figure><h2 id="remove-12"><a href="#remove-12" class="headerlink" title="remove"></a>remove</h2><p>移除集合中所有通过真值检测的元素，返回包含所有删除元素的数组。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function remove&lt;T, TResult&gt;(<br>    list: types.List&lt;T&gt;,<br>    iterator: types.ListIterator&lt;T, boolean&gt;,<br>    context?: any<br>): TResult[];</code><br></pre><br></details><p>与 filter 不同，该模块会改变原数组。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>list</td><td>要遍历的集合</td></tr><tr><td>iterator</td><td>真值检测函数</td></tr><tr><td>context</td><td>函数上下文</td></tr><tr><td>返回值</td><td>包含所有删除元素的数组</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> evens = remove(arr, <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> val % <span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// -&gt; [1, 3, 5]</span></span><br><span class="line"><span class="built_in">console</span>.log(evens); <span class="comment">// -&gt; [2, 4]</span></span><br></pre></td></tr></table></figure><h2 id="repeat"><a href="#repeat" class="headerlink" title="repeat"></a>repeat</h2><p>重复字符串指定次数。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function repeat(str: string, n: number): string;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>str</td><td>源字符串</td></tr><tr><td>n</td><td>重复次数</td></tr><tr><td>返回值</td><td>目标字符串</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">repeat(<span class="string">'a'</span>, <span class="number">3</span>); <span class="comment">// -&gt; 'aaa'</span></span><br><span class="line">repeat(<span class="string">'ab'</span>, <span class="number">2</span>); <span class="comment">// -&gt; 'abab'</span></span><br><span class="line">repeat(<span class="string">'*'</span>, <span class="number">0</span>); <span class="comment">// -&gt; ''</span></span><br></pre></td></tr></table></figure><h2 id="replaceAll"><a href="#replaceAll" class="headerlink" title="replaceAll"></a>replaceAll</h2><p>替换字符串中所有指定字符串。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function replaceAll(<br>    str: string,<br>    substr: string,<br>    newSubstr: string<br>): string;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>str</td><td>源字符串</td></tr><tr><td>substr</td><td>被替换的子串</td></tr><tr><td>newSubstr</td><td>替换的子串</td></tr><tr><td>返回值</td><td>所有子串被替换后的新字符串</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">replaceAll(<span class="string">'hello world goodbye world'</span>, <span class="string">'world'</span>, <span class="string">'licia'</span>); <span class="comment">// -&gt; 'hello licia goodbye licia'</span></span><br></pre></td></tr></table></figure><h2 id="restArgs"><a href="#restArgs" class="headerlink" title="restArgs"></a>restArgs</h2><p>将给定序号后的参数合并成一个数组。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function restArgs(<br>    fn: types.AnyFn,<br>    startIndex?: number<br>): types.AnyFn;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>function</td><td>源函数</td></tr><tr><td>startIndex</td><td>合并参数起始位置</td></tr><tr><td>返回值</td><td>目标函数</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> paramArr = restArgs(<span class="function"><span class="keyword">function</span>(<span class="params">rest</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> rest;</span><br><span class="line">&#125;);</span><br><span class="line">paramArr(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>); <span class="comment">// -&gt; [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure><h2 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h2><p>将数组元素颠倒，不改变原数组。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function reverse(arr: any[]): any[];</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>arr</td><td>源数组</td></tr><tr><td>返回值</td><td>目标数组</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reverse([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]); <span class="comment">// -&gt; [3, 2, 1]</span></span><br></pre></td></tr></table></figure><h2 id="rgbToHsl"><a href="#rgbToHsl" class="headerlink" title="rgbToHsl"></a>rgbToHsl</h2><p>将 rgb 格式的颜色值转换为 hsl 格式。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function rgbToHsl(rgb: number[]): number[];</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>rgb</td><td>rgb 值</td></tr><tr><td>返回值</td><td>hsl 值</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rgbToHsl([<span class="number">52</span>, <span class="number">203</span>, <span class="number">165</span>, <span class="number">0.8</span>]); <span class="comment">// -&gt; [165, 59, 50, 0.8]</span></span><br></pre></td></tr></table></figure><h2 id="ric"><a href="#ric" class="headerlink" title="ric"></a>ric</h2><p>requestIdleCallback 的快捷方式。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">namespace ric {<br>    function cancel(id: number): void;<br>}<br>function ric(cb: types.AnyFn): number;</code><br></pre><br></details><p>如果原生 requestIdleCallback 不支持，使用 setTimeout 进行兼容。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> id = ric(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Called during a browser's idle periods</span></span><br><span class="line">&#125;);</span><br><span class="line">ric.cancel(id);</span><br></pre></td></tr></table></figure><h2 id="rmCookie"><a href="#rmCookie" class="headerlink" title="rmCookie"></a>rmCookie</h2><p>遍历所有可能的路径和域名将 cookie 删除。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function rmCookie(key: string): void;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>key</td><td>cookie 名</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rmCookie(<span class="string">'test'</span>);</span><br></pre></td></tr></table></figure><h2 id="rmdir"><a href="#rmdir" class="headerlink" title="rmdir"></a>rmdir</h2><p>递归地删除文件夹。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function rmdir(dir: string, cb?: types.AnyFn): void;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>dir</td><td>文件夹路径</td></tr><tr><td>cb</td><td>回调</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rmdir(<span class="string">'/tmp/foo/bar/baz'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="built_in">console</span>.log(err);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">console</span>.log(<span class="string">'Done'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="root"><a href="#root" class="headerlink" title="root"></a>root</h2><p>根对象引用，对于 nodeJs，取 <code>global</code> 对象，对于浏览器，取 <code>window</code> 对象。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">const root: any;</code><br></pre><br></details><h2 id="rpad"><a href="#rpad" class="headerlink" title="rpad"></a>rpad</h2><p>对字符串进行右填充。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function rpad(str: string, len: number, chars?: string): string;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>str</td><td>源字符串</td></tr><tr><td>len</td><td>填充长度</td></tr><tr><td>chars</td><td>填充字符</td></tr><tr><td>返回值</td><td>目标字符串</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rpad(<span class="string">'a'</span>, <span class="number">5</span>); <span class="comment">// -&gt; 'a    '</span></span><br><span class="line">rpad(<span class="string">'a'</span>, <span class="number">5</span>, <span class="string">'-'</span>); <span class="comment">// -&gt; 'a----'</span></span><br><span class="line">rpad(<span class="string">'abc'</span>, <span class="number">3</span>, <span class="string">'-'</span>); <span class="comment">// -&gt; 'abc'</span></span><br><span class="line">rpad(<span class="string">'abc'</span>, <span class="number">5</span>, <span class="string">'ab'</span>); <span class="comment">// -&gt; 'abcab'</span></span><br></pre></td></tr></table></figure><h2 id="rtrim"><a href="#rtrim" class="headerlink" title="rtrim"></a>rtrim</h2><p>删除字符串尾部指定字符或空格。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function rtrim(str: string, chars?: string | string[]): string;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>str</td><td>源字符串</td></tr><tr><td>chars</td><td>删除字符</td></tr><tr><td>返回值</td><td>目标字符串</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rtrim(<span class="string">' abc  '</span>); <span class="comment">// -&gt; ' abc'</span></span><br><span class="line">rtrim(<span class="string">'_abc_'</span>, <span class="string">'_'</span>); <span class="comment">// -&gt; '_abc'</span></span><br><span class="line">rtrim(<span class="string">'_abc_'</span>, [<span class="string">'c'</span>, <span class="string">'_'</span>]); <span class="comment">// -&gt; '_ab'</span></span><br></pre></td></tr></table></figure><h2 id="safeCb"><a href="#safeCb" class="headerlink" title="safeCb"></a>safeCb</h2><p>创建回调函数，内部模块使用。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function safeCb(<br>    val?: any,<br>    ctx?: any,<br>    argCount?: number<br>): types.AnyFn;</code><br></pre><br></details><h2 id="safeDel"><a href="#safeDel" class="headerlink" title="safeDel"></a>safeDel</h2><p>删除对象属性。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function safeDel(obj: any, path: string | string[]): any;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>obj</td><td>目标对象</td></tr><tr><td>path</td><td>属性路径</td></tr><tr><td>返回值</td><td>删除值或 undefined</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>: &#123; <span class="attr">aa</span>: &#123; <span class="attr">aaa</span>: <span class="number">1</span> &#125; &#125; &#125;;</span><br><span class="line">safeDel(obj, <span class="string">'a.aa.aaa'</span>); <span class="comment">// -&gt; 1</span></span><br><span class="line">safeDel(obj, [<span class="string">'a'</span>, <span class="string">'aa'</span>]); <span class="comment">// -&gt; &#123;&#125;</span></span><br><span class="line">safeDel(obj, <span class="string">'a.b'</span>); <span class="comment">// -&gt; undefined</span></span><br></pre></td></tr></table></figure><h2 id="safeGet"><a href="#safeGet" class="headerlink" title="safeGet"></a>safeGet</h2><p>获取对象属性值，路径不存在时不报错。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function safeGet(obj: any, path: string | string[]): any;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>obj</td><td>目标对象</td></tr><tr><td>path</td><td>属性路径</td></tr><tr><td>返回值</td><td>属性值或 undefined</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>: &#123; <span class="attr">aa</span>: &#123; <span class="attr">aaa</span>: <span class="number">1</span> &#125; &#125; &#125;;</span><br><span class="line">safeGet(obj, <span class="string">'a.aa.aaa'</span>); <span class="comment">// -&gt; 1</span></span><br><span class="line">safeGet(obj, [<span class="string">'a'</span>, <span class="string">'aa'</span>]); <span class="comment">// -&gt; &#123;aaa: 1&#125;</span></span><br><span class="line">safeGet(obj, <span class="string">'a.b'</span>); <span class="comment">// -&gt; undefined</span></span><br></pre></td></tr></table></figure><h2 id="safeSet"><a href="#safeSet" class="headerlink" title="safeSet"></a>safeSet</h2><p>设置对象属性值。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function safeSet(<br>    obj: any,<br>    path: string | string[],<br>    val: any<br>): void;</code><br></pre><br></details><p>如果路径的某一层不存在，将会创建一个空对象。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>obj</td><td>目标对象</td></tr><tr><td>path</td><td>属性路径</td></tr><tr><td>val</td><td>要设置的值</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line">safeSet(obj, <span class="string">'a.aa.aaa'</span>, <span class="number">1</span>); <span class="comment">// obj = &#123;a: &#123;aa: &#123;aaa: 1&#125;&#125;&#125;</span></span><br><span class="line">safeSet(obj, [<span class="string">'a'</span>, <span class="string">'aa'</span>], <span class="number">2</span>); <span class="comment">// obj = &#123;a: &#123;aa: 2&#125;&#125;</span></span><br><span class="line">safeSet(obj, <span class="string">'a.b'</span>, <span class="number">3</span>); <span class="comment">// obj = &#123;a: &#123;aa: 2, b: 3&#125;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="safeStorage"><a href="#safeStorage" class="headerlink" title="safeStorage"></a>safeStorage</h2><p>安全地使用 storage，使其在旧浏览器及 safari 无痕模式下能正常运行。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function safeStorage(type?: string): typeof window.localStorage;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>type=’local’</td><td>模式，local 或 session</td></tr><tr><td>返回值</td><td>指定 storage</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> localStorage = safeStorage(<span class="string">'local'</span>);</span><br><span class="line">localStorage.setItem(<span class="string">'licia'</span>, <span class="string">'util'</span>);</span><br></pre></td></tr></table></figure><h2 id="sameOrigin"><a href="#sameOrigin" class="headerlink" title="sameOrigin"></a>sameOrigin</h2><p>检查两个 url 是否同源。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function sameOrigin(url1: string, url2: string): boolean;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>url1</td><td>要检查的 url</td></tr><tr><td>url2</td><td>要检查的 url</td></tr><tr><td>返回值</td><td>同源，返回真</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> url1 = <span class="string">'http://example.com/a.html'</span>;</span><br><span class="line"><span class="keyword">const</span> url2 = <span class="string">'http://example.com/b.html'</span>;</span><br><span class="line"><span class="keyword">const</span> url3 = <span class="string">'http://licia.liriliri.io'</span>;</span><br><span class="line">sameOrigin(url1, url2); <span class="comment">// -&gt; true</span></span><br><span class="line">sameOrigin(url1, url3); <span class="comment">// -&gt; false</span></span><br></pre></td></tr></table></figure><h2 id="sample"><a href="#sample" class="headerlink" title="sample"></a>sample</h2><p>从集合中随机抽取部分样本。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function sample(obj: any, n: number): any[];</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>obj</td><td>目标集合</td></tr><tr><td>n</td><td>样本数量</td></tr><tr><td>返回值</td><td>样本</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sample([<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>], <span class="number">2</span>); <span class="comment">// -&gt; [2, 3]</span></span><br><span class="line">sample(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;, <span class="number">1</span>); <span class="comment">// -&gt; [2]</span></span><br></pre></td></tr></table></figure><h2 id="scrollTo"><a href="#scrollTo" class="headerlink" title="scrollTo"></a>scrollTo</h2><p>以动画的形式滚动到指定目标。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function scrollTo(<br>    target: Element | string | number,<br>    options: {<br>        tolerance?: number;<br>        duration?: number;<br>        easing?: string | Function;<br>        callback?: types.AnyFn;<br>    }<br>);</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>target</td><td>滚动目标</td></tr><tr><td>options</td><td>滚动选项</td></tr></tbody></table><h3 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h3><table><thead><tr><th>选项名</th><th>说明</th></tr></thead><tbody><tr><td>tolerance=0</td><td>偏移</td></tr><tr><td>duration=800</td><td>时长</td></tr><tr><td>easing=outQuart</td><td>缓动函数</td></tr><tr><td>callback=noop</td><td>结束回调</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">scrollTo(<span class="string">'body'</span>, &#123;</span><br><span class="line">    tolerance: <span class="number">0</span>,</span><br><span class="line">    duration: <span class="number">800</span>,</span><br><span class="line">    easing: <span class="string">'outQuart'</span>,</span><br><span class="line">    callback: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="seedRandom"><a href="#seedRandom" class="headerlink" title="seedRandom"></a>seedRandom</h2><p>随机数生成器。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function seedRandom(<br>    seed: number,<br>    min?: number,<br>    max?: number,<br>    floating?: boolean<br>): () =&gt; number;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>seed</td><td>随机种子</td></tr><tr><td>min=0</td><td>最小值</td></tr><tr><td>max=1</td><td>最大值</td></tr><tr><td>floating=true</td><td>是否允许浮点数</td></tr><tr><td>返回值</td><td>生成随机数字序列的函数</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> random = seedRandom(<span class="number">19920719</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="literal">false</span>);</span><br><span class="line">random(); <span class="comment">// -&gt; 7</span></span><br><span class="line">random(); <span class="comment">// -&gt; 68</span></span><br></pre></td></tr></table></figure><h2 id="selectionSort"><a href="#selectionSort" class="headerlink" title="selectionSort"></a>selectionSort</h2><p>选择排序实现。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function selectionSort(arr: any[], cmp?: types.AnyFn): any[];</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>arr</td><td>要排序的数组</td></tr><tr><td>cmp</td><td>比较器</td></tr><tr><td>返回值</td><td>有序数组</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">selectionSort([<span class="number">2</span>, <span class="number">1</span>]); <span class="comment">// -&gt; [1, 2]</span></span><br></pre></td></tr></table></figure><h2 id="selector"><a href="#selector" class="headerlink" title="selector"></a>selector</h2><p>CSS 选择器解析器。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">namespace selector {<br>    interface IToken {<br>        type: string;<br>        value: string;<br>    }<br>}<br>const selector: {<br>    parse(selector: string): Array&lt;selector.IToken[]&gt;;<br>    stringify(selector: Array&lt;selector.IToken[]&gt;): string;<br>};</code><br></pre><br></details><h3 id="parse-6"><a href="#parse-6" class="headerlink" title="parse"></a>parse</h3><p>将 CSS 选择器转换为 js 对象。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>selector</td><td>CSS 选择器</td></tr><tr><td>返回值</td><td>js 对象</td></tr></tbody></table><h3 id="stringify-5"><a href="#stringify-5" class="headerlink" title="stringify"></a>stringify</h3><p>将 js 对象序列化成 CSS 选择器。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>groups</td><td>要序列化的对象</td></tr><tr><td>返回值</td><td>CSS 选择器</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> groups = selector.parse(<span class="string">'#test, input.user[name="licia"]'</span>);</span><br><span class="line"><span class="comment">// -&gt; [[&#123;type: 'id', value: 'test'&#125;],[&#123;type: 'tag', value: 'input'&#125;...]]</span></span><br><span class="line">selector.stringify(groups);</span><br></pre></td></tr></table></figure><h2 id="shebang"><a href="#shebang" class="headerlink" title="shebang"></a>shebang</h2><p>获取 shebang 命令。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function shebang(str: string): string | void;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>str</td><td>要获取命令的文本</td></tr><tr><td>返回值</td><td>Shebang 命令</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">shebang(<span class="string">'#!/usr/bin/env node'</span>); <span class="comment">// -&gt; '/usr/bin/env node'</span></span><br><span class="line">shebang(<span class="string">'#!/bin/bash'</span>); <span class="comment">// -&gt; '/bin/bash'</span></span><br><span class="line">shebang(<span class="string">'node'</span>); <span class="comment">// -&gt; undefined</span></span><br></pre></td></tr></table></figure><h2 id="shellSort"><a href="#shellSort" class="headerlink" title="shellSort"></a>shellSort</h2><p>希尔排序实现。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function shellSort(arr: any[], cmp?: types.AnyFn): any[];</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>arr</td><td>要排序的数组</td></tr><tr><td>cmp</td><td>比较器</td></tr><tr><td>返回值</td><td>有序数组</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shellSort([<span class="number">2</span>, <span class="number">1</span>]); <span class="comment">// -&gt; [1, 2]</span></span><br></pre></td></tr></table></figure><h2 id="shuffle"><a href="#shuffle" class="headerlink" title="shuffle"></a>shuffle</h2><p>将数组中元素的顺序打乱。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function shuffle(arr: any[]): any[];</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>arr</td><td>源数组</td></tr><tr><td>返回值</td><td>目标数组</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shuffle([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]); <span class="comment">// -&gt; [3, 1, 2]</span></span><br></pre></td></tr></table></figure><h2 id="size-6"><a href="#size-6" class="headerlink" title="size"></a>size</h2><p>获取对象的大小或类数组元素的长度。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function size(obj: any): number;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>obj</td><td>目标集合</td></tr><tr><td>返回值</td><td>集合大小</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">size(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;); <span class="comment">// -&gt; 2</span></span><br><span class="line">size([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]); <span class="comment">// -&gt; 3</span></span><br></pre></td></tr></table></figure><h2 id="sizeof"><a href="#sizeof" class="headerlink" title="sizeof"></a>sizeof</h2><p>计算 js 对象大概的内存占用。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function sizeof(obj: any): number;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>obj</td><td>要计算的对象</td></tr><tr><td>返回值</td><td>对象大小，单位是字节</td></tr></tbody></table><p>一个字符占用 2 字节，布尔值 4 字节，数字 8 字节。</p><p>对象键名当成字符串来计算。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sizeof(<span class="string">'a'</span>); <span class="comment">// -&gt; 2</span></span><br><span class="line">sizeof(<span class="number">8</span>); <span class="comment">// -&gt; 8</span></span><br><span class="line">sizeof(<span class="literal">false</span>); <span class="comment">// -&gt; 4</span></span><br><span class="line">sizeof(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;); <span class="comment">// -&gt; 0</span></span><br><span class="line">sizeof(&#123; <span class="attr">a</span>: <span class="string">'b'</span> &#125;); <span class="comment">// -&gt; 4</span></span><br></pre></td></tr></table></figure><h2 id="sleep"><a href="#sleep" class="headerlink" title="sleep"></a>sleep</h2><p>使用 Promise 模拟暂停方法。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function sleep(timeout: number): Promise&lt;void&gt;;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>timeout</td><td>暂停时长</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">await</span> sleep(<span class="number">2000</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h2 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h2><p>截取数组的一部分生成新数组。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function slice(<br>    array: any[],<br>    start?: number,<br>    end?: number<br>): any[];</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>array</td><td>目标数组</td></tr><tr><td>start=0</td><td>起始位置</td></tr><tr><td>end=array.length</td><td>结束位置，不包含</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slice([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], <span class="number">1</span>, <span class="number">2</span>); <span class="comment">// -&gt; [2]</span></span><br></pre></td></tr></table></figure><h2 id="slugify"><a href="#slugify" class="headerlink" title="slugify"></a>slugify</h2><p>Slug 化字符串。 </p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function slugify(<br>    str: string,<br>    replacement?: { [index: string]: string }<br>): string;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>str</td><td>源字符串</td></tr><tr><td>replacement</td><td>自定义替换</td></tr><tr><td>返回值</td><td>目标字符串</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">slugify(<span class="string">'I ♥ pony'</span>); <span class="comment">// -&gt; 'I-love-pony'</span></span><br><span class="line">slugify(<span class="string">'I ♥ pony'</span>, &#123; <span class="string">' '</span>: <span class="string">'_'</span> &#125;); <span class="comment">// -&gt; 'I_love_pony'</span></span><br></pre></td></tr></table></figure><h2 id="snakeCase"><a href="#snakeCase" class="headerlink" title="snakeCase"></a>snakeCase</h2><p>转换字符串为下划线式。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function snakeCase(str: string): string;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>str</td><td>源字符串</td></tr><tr><td>返回值</td><td>下划线式字符串</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">snakeCase(<span class="string">'fooBar'</span>); <span class="comment">// -&gt; foo_bar</span></span><br><span class="line">snakeCase(<span class="string">'foo bar'</span>); <span class="comment">// -&gt; foo_bar</span></span><br><span class="line">snakeCase(<span class="string">'foo.bar'</span>); <span class="comment">// -&gt; foo_bar</span></span><br></pre></td></tr></table></figure><h2 id="some"><a href="#some" class="headerlink" title="some"></a>some</h2><p>检查集合中是否有元素通过真值检测。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function some&lt;T&gt;(<br>    list: types.List&lt;T&gt;,<br>    iterator?: types.ListIterator&lt;T, boolean&gt;,<br>    context?: any<br>): boolean;<br>function some&lt;T&gt;(<br>    object: types.Dictionary&lt;T&gt;,<br>    iterator?: types.ObjectIterator&lt;T, boolean&gt;,<br>    context?: any<br>): boolean;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>obj</td><td>目标集合</td></tr><tr><td>predicate</td><td>真值检测函数</td></tr><tr><td>ctx</td><td>函数上下文</td></tr><tr><td>返回值</td><td>如果有元素通过真值检测，返回真</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">some([<span class="number">2</span>, <span class="number">5</span>], <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> val % <span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line">&#125;); <span class="comment">// -&gt; true</span></span><br></pre></td></tr></table></figure><h2 id="sortBy"><a href="#sortBy" class="headerlink" title="sortBy"></a>sortBy</h2><p>遍历集合中的元素，将其作为参数调用函数，并以得到的结果为依据对数组进行排序。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function sortBy(<br>    arr: any,<br>    iterator?: types.AnyFn,<br>    ctx?: any<br>): any[];</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>arr</td><td>源集合</td></tr><tr><td>iteratee=identity</td><td>排序依据生成函数</td></tr><tr><td>ctx</td><td>函数上下文</td></tr><tr><td>返回值</td><td>排序后的数组</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sortBy([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], <span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.sin(num);</span><br><span class="line">&#125;); <span class="comment">// -&gt; [5, 4, 6, 3, 1, 2]</span></span><br></pre></td></tr></table></figure><h2 id="sortKeys"><a href="#sortKeys" class="headerlink" title="sortKeys"></a>sortKeys</h2><p>排序对象的键名。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function sortKeys(<br>    obj: object,<br>    options?: {<br>        deep?: boolean;<br>        comparator?: types.AnyFn;<br>    }<br>): object;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>obj</td><td>要排序的对象</td></tr><tr><td>options</td><td>排序选项</td></tr><tr><td>返回值</td><td>排序后的对象</td></tr></tbody></table><p>可用选项：</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>deep=false</td><td>是否递归</td></tr><tr><td>comparator</td><td>比较器</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sortKeys(</span><br><span class="line">    &#123; <span class="attr">b</span>: &#123; <span class="attr">d</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">1</span> &#125;, <span class="attr">a</span>: <span class="number">0</span> &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        deep: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">); <span class="comment">// -&gt; &#123;a: 0, b: &#123;c: 1, d: 2&#125;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="spaceCase"><a href="#spaceCase" class="headerlink" title="spaceCase"></a>spaceCase</h2><p>将字符串转换为空格式。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function spaceCase(str: string): string;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>str</td><td>源字符串</td></tr><tr><td>返回值</td><td>空格式字符串</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spaceCase(<span class="string">'fooBar'</span>); <span class="comment">// -&gt; foo bar</span></span><br><span class="line">spaceCase(<span class="string">'foo.bar'</span>); <span class="comment">// -&gt; foo bar</span></span><br><span class="line">spaceCase(<span class="string">'foo.bar'</span>); <span class="comment">// -&gt; foo bar</span></span><br></pre></td></tr></table></figure><h2 id="splitCase"><a href="#splitCase" class="headerlink" title="splitCase"></a>splitCase</h2><p>将不同命名式的字符串拆分成数组。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function splitCase(str: string): string[];</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>str</td><td>目标字符串</td></tr><tr><td>返回值</td><td>拆分成的数组</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">splitCase(<span class="string">'foo-bar'</span>); <span class="comment">// -&gt; ['foo', 'bar']</span></span><br><span class="line">splitCase(<span class="string">'foo bar'</span>); <span class="comment">// -&gt; ['foo', 'bar']</span></span><br><span class="line">splitCase(<span class="string">'foo_bar'</span>); <span class="comment">// -&gt; ['foo', 'bar']</span></span><br><span class="line">splitCase(<span class="string">'foo.bar'</span>); <span class="comment">// -&gt; ['foo', 'bar']</span></span><br><span class="line">splitCase(<span class="string">'fooBar'</span>); <span class="comment">// -&gt; ['foo', 'bar']</span></span><br><span class="line">splitCase(<span class="string">'foo-Bar'</span>); <span class="comment">// -&gt; ['foo', 'bar']</span></span><br></pre></td></tr></table></figure><h2 id="splitPath"><a href="#splitPath" class="headerlink" title="splitPath"></a>splitPath</h2><p>将路径拆分为文件夹路径，文件名和扩展名。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function splitPath(<br>    path: string<br>): {<br>    dir: string;<br>    name: string;<br>    ext: string;<br>};</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>path</td><td>目标路径</td></tr><tr><td>返回值</td><td>包含文件夹路径，文件名和扩展名的对象</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">splitPath(<span class="string">'f:/foo/bar.txt'</span>); <span class="comment">// -&gt; &#123;dir: 'f:/foo/', name: 'bar.txt', ext: '.txt'&#125;</span></span><br><span class="line">splitPath(<span class="string">'/home/foo/bar.txt'</span>); <span class="comment">// -&gt; &#123;dir: '/home/foo/', name: 'bar.txt', ext: '.txt'&#125;</span></span><br></pre></td></tr></table></figure><h2 id="stackTrace"><a href="#stackTrace" class="headerlink" title="stackTrace"></a>stackTrace</h2><p>获取 v8 的 CallSite 对象。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function stackTrace(): any[];</code><br></pre><br></details><p><a href="https://v8.dev/docs/stack-trace-api" target="_blank" rel="noopener">Stack trace 接口说明</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stackTrace(); <span class="comment">// -&gt; List of CallSite objects</span></span><br></pre></td></tr></table></figure><h2 id="startWith"><a href="#startWith" class="headerlink" title="startWith"></a>startWith</h2><p>检查字符串是否以指定字符串开头。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function startWith(str: string, prefix: string): boolean;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>str</td><td>目标字符串</td></tr><tr><td>prefix</td><td>字符串前缀</td></tr><tr><td>返回值</td><td>如果是前缀，返回真</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">startWith(<span class="string">'ab'</span>, <span class="string">'a'</span>); <span class="comment">// -&gt; true</span></span><br></pre></td></tr></table></figure><h2 id="strHash"><a href="#strHash" class="headerlink" title="strHash"></a>strHash</h2><p>使用 djb2 算法进行字符串哈希。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function strHash(str: string): number;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>str</td><td>目标字符串</td></tr><tr><td>返回值</td><td>哈希结果</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strHash(<span class="string">'test'</span>); <span class="comment">// -&gt; 2090770981</span></span><br></pre></td></tr></table></figure><h2 id="strToBytes"><a href="#strToBytes" class="headerlink" title="strToBytes"></a>strToBytes</h2><p>将字符串转换为字节数组。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function strToBytes(str: string, encoding?: string): number[];</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>str</td><td>目标字符串</td></tr><tr><td>encoding=utf8</td><td>字符串编码</td></tr><tr><td>返回值</td><td>字节数组</td></tr></tbody></table><p>支持编码：utf8，hex，base64</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">strToBytes(<span class="string">'licia'</span>); <span class="comment">// -&gt; [108, 105, 99, 105, 97]</span></span><br><span class="line">strToBytes(<span class="string">'qK6b/w=='</span>, <span class="string">'base64'</span>); <span class="comment">// -&gt; [168, 174, 155, 255]</span></span><br></pre></td></tr></table></figure><h2 id="strTpl"><a href="#strTpl" class="headerlink" title="strTpl"></a>strTpl</h2><p>简单的字符串模板。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function strTpl(str: string, data: types.PlainObj&lt;any&gt;): string;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>str</td><td>模板字符串</td></tr><tr><td>data</td><td>渲染数据</td></tr><tr><td>返回值</td><td>目标字符串</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strTpl(<span class="string">'Hello, &#123;&#123;name.first&#125;&#125;!'</span>, &#123; <span class="attr">name</span>: &#123; <span class="attr">first</span>: <span class="string">'licia'</span> &#125; &#125;); <span class="comment">// -&gt; 'Hello, licia!'</span></span><br></pre></td></tr></table></figure><h2 id="strWidth"><a href="#strWidth" class="headerlink" title="strWidth"></a>strWidth</h2><p>获取字符串的可见宽度。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function strWidth(str: string): number;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>str</td><td>要获取宽度的字符串</td></tr><tr><td>返回值</td><td>可见宽度</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">strWidth(<span class="string">'Hello \nworld!'</span>); <span class="comment">// -&gt; 12</span></span><br><span class="line">strWidth(<span class="string">'\u001b[4m你好，世界！\u001b[0m'</span>); <span class="comment">// -&gt; 12</span></span><br></pre></td></tr></table></figure><h2 id="stringify-6"><a href="#stringify-6" class="headerlink" title="stringify"></a>stringify</h2><p>JSON 序列化，支持循环引用和函数。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function stringify(obj: any, spaces?: number): string;</code><br></pre><br></details><p>undefined 被当作 null 处理。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>obj</td><td>目标对象</td></tr><tr><td>spaces</td><td>缩进</td></tr><tr><td>返回值</td><td>序列化后的字符串</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">stringify(&#123; <span class="attr">a</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125; &#125;); <span class="comment">// -&gt; '&#123;"a":"[Function function () &#123;&#125;]"&#125;'</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: &#123;&#125; &#125;;</span><br><span class="line">obj.b = obj;</span><br><span class="line">stringify(obj); <span class="comment">// -&gt; '&#123;"a":1,"b":"[Circular ~]"&#125;'</span></span><br></pre></td></tr></table></figure><h2 id="stringifyAll"><a href="#stringifyAll" class="headerlink" title="stringifyAll"></a>stringifyAll</h2><p>序列化对象，保留类型信息。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">namespace stringifyAll {<br>    function parse(str: string): any;<br>}<br>function stringifyAll(<br>    obj: any,<br>    options?: {<br>        unenumerable?: boolean;<br>        symbol?: boolean;<br>        accessGetter?: boolean;<br>        timeout?: number;<br>        depth?: number;<br>        ignore?: any[];<br>    }<br>): string;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>obj</td><td>源对象</td></tr><tr><td>options</td><td>序列化选项</td></tr><tr><td>返回值</td><td>序列化后的字符串</td></tr></tbody></table><p>可用选项：</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>unenumerable=false</td><td>包含不可枚举值</td></tr><tr><td>symbol=false</td><td>包含 Symbol 键名</td></tr><tr><td>accessGetter=false</td><td>获取 getter 值</td></tr><tr><td>timeout=0</td><td>序列化超时时间</td></tr><tr><td>depth=0</td><td>遍历对象的最大深度</td></tr><tr><td>ignore</td><td>忽略的对象</td></tr></tbody></table><p>超时后，所有未序列化的值都会变成 “Timeout”。</p><h3 id="parse-7"><a href="#parse-7" class="headerlink" title="parse"></a>parse</h3><p>将字符串反序列化回对象。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>obj</td><td>序列化后的字符串</td></tr><tr><td>返回值</td><td>目标对象</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stringifyAll(<span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;&#125;); <span class="comment">// -&gt; '&#123;"value":"function test() &#123;&#125;","type":"Function",...&#125;'</span></span><br></pre></td></tr></table></figure><h2 id="stripAnsi"><a href="#stripAnsi" class="headerlink" title="stripAnsi"></a>stripAnsi</h2><p>清除字符串中的 ansi 控制码。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function stripAnsi(str: string): string;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>str</td><td>源字符串</td></tr><tr><td>返回值</td><td>目标字符串</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stripAnsi(<span class="string">'\u001b[4mcake\u001b[0m'</span>); <span class="comment">// -&gt; 'cake'</span></span><br></pre></td></tr></table></figure><h2 id="stripCmt"><a href="#stripCmt" class="headerlink" title="stripCmt"></a>stripCmt</h2><p>清除源码中的注释。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function stripCmt(str: string): string;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>str</td><td>源码</td></tr><tr><td>返回值</td><td>无注释代码</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stripCmt(<span class="string">'// comment \n var a = 5; \/* comment2\n * comment3\n *\/'</span>); <span class="comment">// -&gt; ' var a = 5; '</span></span><br></pre></td></tr></table></figure><h2 id="stripColor"><a href="#stripColor" class="headerlink" title="stripColor"></a>stripColor</h2><p>清除字符串中的 ansi 颜色控制码。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function stripColor(str: string): string;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>str</td><td>源字符串</td></tr><tr><td>返回值</td><td>目标字符串</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stripColor(<span class="string">'\u001b[31mred\u001b[39m'</span>); <span class="comment">// -&gt; 'red'</span></span><br></pre></td></tr></table></figure><h2 id="stripHtmlTag"><a href="#stripHtmlTag" class="headerlink" title="stripHtmlTag"></a>stripHtmlTag</h2><p>清除字符串中的 html 标签。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function stripHtmlTag(str: string): string;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>str</td><td>源字符串</td></tr><tr><td>返回值</td><td>目标字符串</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stripHtmlTag(<span class="string">'&lt;p&gt;Hello&lt;/p&gt;'</span>); <span class="comment">// -&gt; 'Hello'</span></span><br></pre></td></tr></table></figure><h2 id="stripIndent"><a href="#stripIndent" class="headerlink" title="stripIndent"></a>stripIndent</h2><p>清除多行文本的缩进。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function stripIndent(str: string): string;<br>function stripIndent(<br>    literals: TemplateStringsArray,<br>    …placeholders: any[]<br>): string;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>str</td><td>源字符串</td></tr><tr><td>返回值</td><td>目标字符串</td></tr></tbody></table><p>它可以像函数一样调用，也可以当成标签模板使用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">stripIndent<span class="string">`</span></span><br><span class="line"><span class="string">    Test string</span></span><br><span class="line"><span class="string">        * item one</span></span><br><span class="line"><span class="string">        * item two</span></span><br><span class="line"><span class="string">`</span>; <span class="comment">// -&gt; 'Test string\n    * item one\n    * item two'</span></span><br></pre></td></tr></table></figure><h2 id="stripNum"><a href="#stripNum" class="headerlink" title="stripNum"></a>stripNum</h2><p>将数字转换为指定的精度。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function stripNum(num: number, precision?: number): number;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>num</td><td>源数字</td></tr><tr><td>precision=12</td><td>精度</td></tr><tr><td>返回值</td><td>目标数字</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stripNum(<span class="number">0.1</span> + <span class="number">0.2</span>); <span class="comment">// -&gt; 0.3</span></span><br></pre></td></tr></table></figure><h2 id="sum"><a href="#sum" class="headerlink" title="sum"></a>sum</h2><p>计算数字和。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function sum(…num: number[]): number;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>…num</td><td>要计算的数字</td></tr><tr><td>返回值</td><td>数字和</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>); <span class="comment">// -&gt; 8</span></span><br></pre></td></tr></table></figure><h2 id="swap"><a href="#swap" class="headerlink" title="swap"></a>swap</h2><p>交换数组中的两项。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function swap(arr: any[], a: number, b: number): any[];</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>arr</td><td>目标数组</td></tr><tr><td>a</td><td>序号一</td></tr><tr><td>b</td><td>序号二</td></tr><tr><td>返回值</td><td>数组本身</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">swap(arr, <span class="number">0</span>, <span class="number">1</span>); <span class="comment">// -&gt; [2, 1]</span></span><br></pre></td></tr></table></figure><h2 id="table"><a href="#table" class="headerlink" title="table"></a>table</h2><p>输出表格字符串。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function table(rows: Array&lt;string[]&gt;): string;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>rows</td><td>表格数据</td></tr><tr><td>返回值</td><td>表格字符串</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">table([</span><br><span class="line">    [<span class="string">''</span>, <span class="string">'firstName'</span>, <span class="string">'lastName'</span>],</span><br><span class="line">    [<span class="string">'daughter'</span>, <span class="string">'Emily'</span>, <span class="string">'Smith'</span>],</span><br><span class="line">    [<span class="string">'father'</span>, <span class="string">'John'</span>, <span class="string">'Smith'</span>],</span><br><span class="line">    [<span class="string">'mother'</span>, <span class="string">'Jane'</span>, <span class="string">'Smith'</span>]</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><h2 id="template"><a href="#template" class="headerlink" title="template"></a>template</h2><p>将模板字符串编译成函数用于渲染。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function template(str: string, util?: any): types.AnyFn;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>str</td><td>模板字符串</td></tr><tr><td>util</td><td>模板函数</td></tr><tr><td>返回值</td><td>编译后的模板函数</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">template(<span class="string">'Hello &lt;%= name %&gt;!'</span>)(&#123; <span class="attr">name</span>: <span class="string">'licia'</span> &#125;); <span class="comment">// -&gt; 'Hello licia!'</span></span><br><span class="line">template(<span class="string">'&lt;p&gt;&lt;%- name %&gt;&lt;/p&gt;'</span>)(&#123; <span class="attr">name</span>: <span class="string">'&lt;licia&gt;'</span> &#125;); <span class="comment">// -&gt; '&lt;p&gt;&amp;lt;licia&amp;gt;&lt;/p&gt;'</span></span><br><span class="line">template(<span class="string">'&lt;%if (echo) &#123;%&gt;Hello licia!&lt;%&#125;%&gt;'</span>)(&#123; <span class="attr">echo</span>: <span class="literal">true</span> &#125;); <span class="comment">// -&gt; 'Hello licia!'</span></span><br><span class="line">template(<span class="string">'&lt;p&gt;&lt;%= util["upperCase"](name) %&gt;&lt;/p&gt;'</span>, &#123;</span><br><span class="line">    upperCase: <span class="function"><span class="keyword">function</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> str.toLocaleUpperCase();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)(&#123; <span class="attr">name</span>: <span class="string">'licia'</span> &#125;); <span class="comment">// -&gt; '&lt;p&gt;LICIA&lt;/p&gt;'</span></span><br></pre></td></tr></table></figure><h2 id="throttle"><a href="#throttle" class="headerlink" title="throttle"></a>throttle</h2><p>返回函数的节流阀版本。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function throttle&lt;T extends types.AnyFn&gt;(fn: T, wait: number): T;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>fn</td><td>源函数</td></tr><tr><td>wait</td><td>延迟毫秒数</td></tr><tr><td>返回值</td><td>目标函数</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> updatePos = throttle(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;, <span class="number">100</span>);</span><br><span class="line"><span class="comment">// $(window).scroll(updatePos);</span></span><br></pre></td></tr></table></figure><h2 id="through"><a href="#through" class="headerlink" title="through"></a>through</h2><p>stream Transform 类的简单包装。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">import stream = require(&#x27;stream&#x27;);<br>namespace through {<br>    interface ThroughConstructor extends stream.Transform {<br>        new (opts?: stream.DuplexOptions): stream.Transform;<br>        (opts?: stream.DuplexOptions): stream.Transform;<br>    }<br>    type TransformCallback = (err?: any, data?: any) =&gt; void;<br>    type TransformFunction = (<br>        this: stream.Transform,<br>        chunk: any,<br>        enc: string,<br>        callback: TransformCallback<br>    ) =&gt; void;<br>    type FlushCallback = (<br>        this: stream.Transform,<br>        flushCallback: () =&gt; void<br>    ) =&gt; void;<br>    function obj(<br>        transform?: TransformFunction,<br>        flush?: FlushCallback<br>    ): stream.Transform;<br>    function ctor(<br>        transform?: TransformFunction,<br>        flush?: FlushCallback<br>    ): ThroughConstructor;<br>    function ctor(<br>        opts?: stream.DuplexOptions,<br>        transform?: TransformFunction,<br>        flush?: FlushCallback<br>    ): ThroughConstructor;<br>}<br>function through(<br>    transform?: through.TransformFunction,<br>    flush?: through.FlushCallback<br>): stream.Transform;<br>function through(<br>    opts?: stream.DuplexOptions,<br>    transform?: through.TransformFunction,<br>    flush?: through.FlushCallback<br>): stream.Transform;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>opts={}</td><td>初始化流选项</td></tr><tr><td>transform</td><td>Transform 实现</td></tr><tr><td>flush</td><td>Flush 实现</td></tr></tbody></table><h3 id="obj"><a href="#obj" class="headerlink" title="obj"></a>obj</h3><p>设置 objectMode 为真的快捷方式。</p><h3 id="ctor"><a href="#ctor" class="headerlink" title="ctor"></a>ctor</h3><p>返回继承 Transform 的类。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line">fs.createReadStream(<span class="string">'in.txt'</span>)</span><br><span class="line">    .pipe(</span><br><span class="line">        through(<span class="function"><span class="keyword">function</span>(<span class="params">chunk, enc, cb</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// Do something to chunk</span></span><br><span class="line">            <span class="keyword">this</span>.push(chunk);</span><br><span class="line">            cb();</span><br><span class="line">        &#125;)</span><br><span class="line">    )</span><br><span class="line">    .pipe(fs.createWriteStream(<span class="string">'out.txt'</span>));</span><br></pre></td></tr></table></figure><h2 id="timeAgo"><a href="#timeAgo" class="headerlink" title="timeAgo"></a>timeAgo</h2><p>将时间格式化成多久之前的形式。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function timeAgo(<br>    date: Date | number,<br>    now?: Date | number<br>): string;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>date</td><td>目标日期</td></tr><tr><td>now=new Date</td><td>当时日期</td></tr><tr><td>返回值</td><td>格式化时间表示</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">timeAgo(now - <span class="number">1000</span> * <span class="number">6</span>); <span class="comment">// -&gt; right now</span></span><br><span class="line">timeAgo(now + <span class="number">1000</span> * <span class="number">15</span>); <span class="comment">// -&gt; in 15 minutes</span></span><br><span class="line">timeAgo(now - <span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">5</span>, now); <span class="comment">// -&gt; 5 hours ago</span></span><br></pre></td></tr></table></figure><h2 id="timeTaken"><a href="#timeTaken" class="headerlink" title="timeTaken"></a>timeTaken</h2><p>获取函数的执行时间。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function timeTaken(fn: types.AnyFn): number;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>fn</td><td>要计算执行时间的函数</td></tr><tr><td>返回值</td><td>执行时间，单位毫秒</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">timeTaken(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Do something.</span></span><br><span class="line">&#125;); <span class="comment">// -&gt; Time taken to execute given function.</span></span><br></pre></td></tr></table></figure><h2 id="times"><a href="#times" class="headerlink" title="times"></a>times</h2><p>调用目标函数 n 次。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function times&lt;T&gt;(<br>    n: number,<br>    fn: (n: number) =&gt; T,<br>    ctx?: any<br>): T[];</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>n</td><td>调用次数</td></tr><tr><td>fn</td><td>目标函数</td></tr><tr><td>ctx</td><td>函数上下文</td></tr><tr><td>返回值</td><td>结果数组</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">times(<span class="number">3</span>, <span class="built_in">String</span>); <span class="comment">// -&gt; ['0', '1', '2']</span></span><br></pre></td></tr></table></figure><h2 id="toArr-3"><a href="#toArr-3" class="headerlink" title="toArr"></a>toArr</h2><p>将任意值转换为数组。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function toArr(val: any): any[];</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>val</td><td>要转换的值</td></tr><tr><td>返回值</td><td>转换后的数组</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">toArr(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;); <span class="comment">// -&gt; [&#123;a: 1, b: 2&#125;]</span></span><br><span class="line">toArr(<span class="string">'abc'</span>); <span class="comment">// -&gt; ['abc']</span></span><br><span class="line">toArr(<span class="number">1</span>); <span class="comment">// -&gt; [1]</span></span><br><span class="line">toArr(<span class="literal">null</span>); <span class="comment">// -&gt; []</span></span><br></pre></td></tr></table></figure><h2 id="toAsync"><a href="#toAsync" class="headerlink" title="toAsync"></a>toAsync</h2><p>让 generator 可以像 async/await 一样使用。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function toAsync(fn: types.AnyFn): types.AnyFn;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>fn</td><td>Generator 函数</td></tr><tr><td>返回值</td><td>目标函数</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sleep = <span class="built_in">require</span>(<span class="string">'licia/sleep'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fn = toAsync(<span class="function"><span class="keyword">function</span>*(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">yield</span> sleep(<span class="number">200</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'licia'</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">fn().then(<span class="function"><span class="params">str</span> =&gt;</span> &#123;&#125;);</span><br></pre></td></tr></table></figure><h2 id="toBool"><a href="#toBool" class="headerlink" title="toBool"></a>toBool</h2><p>将任意值转换为布尔值。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function toBool(val: any): boolean;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>val</td><td>要转换的值</td></tr><tr><td>返回值</td><td>转换后的布尔值</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">toBool(<span class="literal">true</span>); <span class="comment">// -&gt; true</span></span><br><span class="line">toBool(<span class="literal">null</span>); <span class="comment">// -&gt; false</span></span><br><span class="line">toBool(<span class="number">1</span>); <span class="comment">// -&gt; true</span></span><br><span class="line">toBool(<span class="number">0</span>); <span class="comment">// -&gt; false</span></span><br><span class="line">toBool(<span class="string">'0'</span>); <span class="comment">// -&gt; false</span></span><br><span class="line">toBool(<span class="string">'1'</span>); <span class="comment">// -&gt; true</span></span><br><span class="line">toBool(<span class="string">'false'</span>); <span class="comment">// -&gt; false</span></span><br></pre></td></tr></table></figure><h2 id="toDate"><a href="#toDate" class="headerlink" title="toDate"></a>toDate</h2><p>将任意值转换为日期类型。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function toDate(val: any): Date;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>val</td><td>要转换的值</td></tr><tr><td>返回值</td><td>转换后的日期值</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">toDate(<span class="string">'20180501'</span>);</span><br><span class="line">toDate(<span class="string">'2018-05-01'</span>);</span><br><span class="line">toDate(<span class="number">1525107450849</span>);</span><br></pre></td></tr></table></figure><h2 id="toEl"><a href="#toEl" class="headerlink" title="toEl"></a>toEl</h2><p>将 html 字符串转换为 dom 元素。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function toEl(str: string): Element;</code><br></pre><br></details><p>必须只有一个根元素。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>str</td><td>html 字符串</td></tr><tr><td>返回值</td><td>html 元素</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">toEl(<span class="string">'&lt;div&gt;test&lt;/div&gt;'</span>);</span><br></pre></td></tr></table></figure><h2 id="toInt"><a href="#toInt" class="headerlink" title="toInt"></a>toInt</h2><p>将任意值转换为整数。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function toInt(val: any): number;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>val</td><td>要转换的值</td></tr><tr><td>返回值</td><td>转换后的整数</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">toInt(<span class="number">1.1</span>); <span class="comment">// -&gt; 1</span></span><br><span class="line">toInt(<span class="literal">undefined</span>); <span class="comment">// -&gt; 0</span></span><br></pre></td></tr></table></figure><h2 id="toNum"><a href="#toNum" class="headerlink" title="toNum"></a>toNum</h2><p>将任意值转换为数字。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function toNum(val: any): number;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>val</td><td>要转换的值</td></tr><tr><td>返回值</td><td>转换后的数字</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">toNum(<span class="string">'5'</span>); <span class="comment">// -&gt; 5</span></span><br></pre></td></tr></table></figure><h2 id="toSrc"><a href="#toSrc" class="headerlink" title="toSrc"></a>toSrc</h2><p>将函数转换为源码。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function toSrc(fn: types.AnyFn): string;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>fn</td><td>目标函数</td></tr><tr><td>返回值</td><td>源码</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">toSrc(<span class="built_in">Math</span>.min); <span class="comment">// -&gt; 'function min() &#123; [native code] &#125;'</span></span><br><span class="line">toSrc(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;); <span class="comment">// -&gt; 'function () &#123; &#125;'</span></span><br></pre></td></tr></table></figure><h2 id="toStr"><a href="#toStr" class="headerlink" title="toStr"></a>toStr</h2><p>将任意值转换为字符串。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function toStr(val: any): string;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>val</td><td>要转换的值</td></tr><tr><td>返回值</td><td>转换后的字符串</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">toStr(<span class="literal">null</span>); <span class="comment">// -&gt; ''</span></span><br><span class="line">toStr(<span class="number">1</span>); <span class="comment">// -&gt; '1'</span></span><br><span class="line">toStr(<span class="literal">false</span>); <span class="comment">// -&gt; 'false'</span></span><br><span class="line">toStr([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]); <span class="comment">// -&gt; '1,2,3'</span></span><br></pre></td></tr></table></figure><h2 id="topoSort"><a href="#topoSort" class="headerlink" title="topoSort"></a>topoSort</h2><p>拓扑排序实现。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function topoSort(edges: any[]): any[];</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>edges</td><td>依赖关系</td></tr><tr><td>返回值</td><td>排序后的数组</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">topoSort([</span><br><span class="line">    [<span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">3</span>],</span><br><span class="line">    [<span class="number">3</span>, <span class="number">2</span>]</span><br><span class="line">]); <span class="comment">// -&gt; [1, 3, 2]</span></span><br></pre></td></tr></table></figure><h2 id="trigger"><a href="#trigger" class="headerlink" title="trigger"></a>trigger</h2><p>触发浏览器事件。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function trigger(el: Element, type: string, options?: any);<br>function trigger(type: string, options?: any);</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>el=document</td><td>目标元素</td></tr><tr><td>type</td><td>事件类型</td></tr><tr><td>options</td><td>选项</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">trigger(<span class="built_in">document</span>.getElementById(<span class="string">'test'</span>), <span class="string">'mouseup'</span>);</span><br><span class="line">trigger(<span class="string">'keydown'</span>, &#123; <span class="attr">keyCode</span>: <span class="number">65</span> &#125;);</span><br></pre></td></tr></table></figure><h2 id="trim"><a href="#trim" class="headerlink" title="trim"></a>trim</h2><p>删除字符串两边指定字符或空格。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function trim(str: string, chars?: string | string[]): string;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>str</td><td>源字符串</td></tr><tr><td>chars</td><td>删除字符</td></tr><tr><td>返回值</td><td>目标字符串</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">trim(<span class="string">' abc  '</span>); <span class="comment">// -&gt; 'abc'</span></span><br><span class="line">trim(<span class="string">'_abc_'</span>, <span class="string">'_'</span>); <span class="comment">// -&gt; 'abc'</span></span><br><span class="line">trim(<span class="string">'_abc_'</span>, [<span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'_'</span>]); <span class="comment">// -&gt; 'b'</span></span><br></pre></td></tr></table></figure><h2 id="truncate"><a href="#truncate" class="headerlink" title="truncate"></a>truncate</h2><p>截取字符串，使其长度为指定值。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function truncate(<br>    txt: string,<br>    width: number,<br>    options?: {<br>        ellipsis?: string;<br>        separator: string;<br>    }<br>): string;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>txt</td><td>要截取的字符串</td></tr><tr><td>width</td><td>最大字符串长度</td></tr><tr><td>options</td><td>选项</td></tr><tr><td>返回值</td><td>截取后的字符串</td></tr></tbody></table><p>选项：</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>ellipsis=’…’</td><td>表示截取掉部分的符号</td></tr><tr><td>separator</td><td>分隔符，尽可能使截取位置在该处</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">truncate(<span class="string">'ORA ORA ORA ORA ORA ORA'</span>, <span class="number">12</span>); <span class="comment">// -&gt; 'ORA ORA O...'</span></span><br><span class="line">truncate(<span class="string">'ORA ORA ORA ORA ORA ORA'</span>, <span class="number">10</span>, &#123;</span><br><span class="line">    separator: <span class="string">' '</span>,</span><br><span class="line">    ellipsis: <span class="string">'……'</span></span><br><span class="line">&#125;); <span class="comment">// -&gt; 'ORA ORA……'</span></span><br></pre></td></tr></table></figure><h2 id="tryIt"><a href="#tryIt" class="headerlink" title="tryIt"></a>tryIt</h2><p>在 try catch 块中运行函数。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function tryIt(fn: types.AnyFn, cb?: types.AnyFn): void;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>fn</td><td>目标函数</td></tr><tr><td>cb</td><td>回调</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">tryIt(</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// Do something that might cause an error.</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">err, result</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) <span class="built_in">console</span>.log(err);</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="type"><a href="#type" class="headerlink" title="type"></a>type</h2><p>获取 JavaScript 对象的内部类型。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function type(val: any, lowerCase?: boolean): string;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>val</td><td>目标对象</td></tr><tr><td>lowerCase=true</td><td>是否小写</td></tr><tr><td>返回值</td><td>对象类型</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">type(<span class="number">5</span>); <span class="comment">// -&gt; 'number'</span></span><br><span class="line">type(&#123;&#125;); <span class="comment">// -&gt; 'object'</span></span><br><span class="line">type(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;); <span class="comment">// -&gt; 'function'</span></span><br><span class="line">type([]); <span class="comment">// -&gt; 'array'</span></span><br><span class="line">type([], <span class="literal">false</span>); <span class="comment">// -&gt; 'Array'</span></span><br><span class="line">type(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;, <span class="literal">false</span>); <span class="comment">// -&gt; 'AsyncFunction'</span></span><br></pre></td></tr></table></figure><h2 id="types"><a href="#types" class="headerlink" title="types"></a>types</h2><p>仅用于生成 ts 定义文件。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">namespace types {<br>    interface Collection&lt;T&gt; {}<br>    interface List&lt;T&gt; extends Collection&lt;T&gt; {<br>        [index: number]: T;<br>        length: number;<br>    }<br>    interface ListIterator&lt;T, TResult&gt; {<br>        (value: T, index: number, list: List&lt;T&gt;): TResult;<br>    }<br>    interface Dictionary&lt;T&gt; extends Collection&lt;T&gt; {<br>        [index: string]: T;<br>    }<br>    interface ObjectIterator&lt;T, TResult&gt; {<br>        (element: T, key: string, list: Dictionary&lt;T&gt;): TResult;<br>    }<br>    interface MemoIterator&lt;T, TResult&gt; {<br>        (prev: TResult, curr: T, index: number, list: List&lt;T&gt;): TResult;<br>    }<br>    interface MemoObjectIterator&lt;T, TResult&gt; {<br>        (prev: TResult, curr: T, key: string, list: Dictionary&lt;T&gt;): TResult;<br>    }<br>    type Fn&lt;T&gt; = (…args: any[]) =&gt; T;<br>    type AnyFn = Fn&lt;any&gt;;<br>    type PlainObj&lt;T&gt; = { [name: string]: T };<br>}<br>const types: {};</code><br></pre><br></details><h2 id="ucs2"><a href="#ucs2" class="headerlink" title="ucs2"></a>ucs2</h2><p>UCS-2 编解码。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">const ucs2: {<br>    encode(arr: number[]): string;<br>    decode(str: string): number[];<br>};</code><br></pre><br></details><h3 id="encode-3"><a href="#encode-3" class="headerlink" title="encode"></a>encode</h3><p>通过码点序列创建字符串。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>arr</td><td>码点序列</td></tr><tr><td>返回值</td><td>编码后的字符串</td></tr></tbody></table><h3 id="decode-3"><a href="#decode-3" class="headerlink" title="decode"></a>decode</h3><p>通过字符串创建码点序列。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>str</td><td>字符串</td></tr><tr><td>返回值</td><td>码点序列</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ucs2.encode([<span class="number">0x61</span>, <span class="number">0x62</span>, <span class="number">0x63</span>]); <span class="comment">// -&gt; 'abc'</span></span><br><span class="line">ucs2.decode(<span class="string">'abc'</span>); <span class="comment">// -&gt; [0x61, 0x62, 0x63]</span></span><br><span class="line"><span class="string">'𝌆'</span>.length; <span class="comment">// -&gt; 2</span></span><br><span class="line">ucs2.decode(<span class="string">'𝌆'</span>).length; <span class="comment">// -&gt; 1</span></span><br></pre></td></tr></table></figure><h2 id="uncaught"><a href="#uncaught" class="headerlink" title="uncaught"></a>uncaught</h2><p>全局错误监听。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">const uncaught: {<br>    start(): void;<br>    stop(): void;<br>    addListener(fn: (err: Error) =&gt; void): void;<br>    rmListener(fn: (err: Error) =&gt; void): void;<br>    rmAllListeners(): void;<br>};</code><br></pre><br></details><h3 id="start-1"><a href="#start-1" class="headerlink" title="start"></a>start</h3><p>开始监听错误。</p><h3 id="stop-1"><a href="#stop-1" class="headerlink" title="stop"></a>stop</h3><p>停止监听错误。</p><h3 id="addListener-1"><a href="#addListener-1" class="headerlink" title="addListener"></a>addListener</h3><p>添加监听器。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>fn</td><td>错误监听器</td></tr></tbody></table><h3 id="rmListener-1"><a href="#rmListener-1" class="headerlink" title="rmListener"></a>rmListener</h3><p>移除监听器。</p><h3 id="rmAllListeners-1"><a href="#rmAllListeners-1" class="headerlink" title="rmAllListeners"></a>rmAllListeners</h3><p>移除所有监听器。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">uncaught.start();</span><br><span class="line">uncaught.addListener(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// Do something.</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="unescape"><a href="#unescape" class="headerlink" title="unescape"></a>unescape</h2><p>和 escape 相反，转义 HTML 实体回去。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function unescape(str: string): string;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>str</td><td>源字符串</td></tr><tr><td>返回值</td><td>目标字符串</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">unescape</span>(<span class="string">'You &amp;amp; Me'</span>); <span class="comment">// -&gt; 'You &amp; Me'</span></span><br></pre></td></tr></table></figure><h2 id="union"><a href="#union" class="headerlink" title="union"></a>union</h2><p>返回传入所有数组的并集。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function union(…arr: Array&lt;any[]&gt;): any[];</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>…arr</td><td>要合并的数组</td></tr><tr><td>返回值</td><td>数组并集</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">union([<span class="number">2</span>, <span class="number">1</span>], [<span class="number">4</span>, <span class="number">2</span>], [<span class="number">1</span>, <span class="number">2</span>]); <span class="comment">// -&gt; [2, 1, 4]</span></span><br></pre></td></tr></table></figure><h2 id="uniqId"><a href="#uniqId" class="headerlink" title="uniqId"></a>uniqId</h2><p>生成全局唯一 id。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function uniqId(prefix?: string): string;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>prefix</td><td>id 前缀</td></tr><tr><td>返回值</td><td>全局唯一 id</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uniqId(<span class="string">'eustia_'</span>); <span class="comment">// -&gt; 'eustia_xxx'</span></span><br></pre></td></tr></table></figure><h2 id="unique"><a href="#unique" class="headerlink" title="unique"></a>unique</h2><p>返回数组去重后的副本。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function unique(<br>    arr: any[],<br>    cmp?: (a: any, b: any) =&gt; boolean | number<br>): any[];</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>arr</td><td>源数组</td></tr><tr><td>cmp</td><td>比较器</td></tr><tr><td>返回值</td><td>目标数组</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unique([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>]); <span class="comment">// -&gt; [1, 2, 3]</span></span><br></pre></td></tr></table></figure><h2 id="universalify"><a href="#universalify" class="headerlink" title="universalify"></a>universalify</h2><p>使用异步函数同时支持 promise 及回调模式。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function universalify(<br>    fn: types.AnyFn,<br>    type: string<br>): types.AnyFn;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>fn</td><td>异步函数</td></tr><tr><td>type</td><td>源类型，promise 或 callback</td></tr><tr><td>返回值</td><td>目标函数</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callbackFn</span>(<span class="params">str, cb</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        cb(<span class="literal">null</span>, str);</span><br><span class="line">    &#125;, <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fn = universalify(callbackFn, <span class="string">'callback'</span>);</span><br><span class="line">fn(<span class="string">'licia'</span>, (err, result) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(result); <span class="comment">// -&gt; 'licia'</span></span><br><span class="line">&#125;);</span><br><span class="line">fn(<span class="string">'licia'</span>).then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(result); <span class="comment">// -&gt; 'licia'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="unzip"><a href="#unzip" class="headerlink" title="unzip"></a>unzip</h2><p>与 zip 相反。 </p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">declare function unzip(arr: Array&lt;any[]&gt;): Array&lt;any[]&gt;;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>arr</td><td>源数组</td></tr><tr><td>返回值</td><td>目标数组</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">unzip([</span><br><span class="line">    [<span class="string">'a'</span>, <span class="number">1</span>, <span class="literal">true</span>],</span><br><span class="line">    [<span class="string">'b'</span>, <span class="number">2</span>, <span class="literal">false</span>]</span><br><span class="line">]); <span class="comment">// -&gt; [['a', 'b'], [1, 2], [true, false]]</span></span><br></pre></td></tr></table></figure><h2 id="upperCase"><a href="#upperCase" class="headerlink" title="upperCase"></a>upperCase</h2><p>转换字符串为大写。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function upperCase(str: string): string;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>str</td><td>源字符串</td></tr><tr><td>返回值</td><td>目标字符串</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">upperCase(<span class="string">'test'</span>); <span class="comment">// -&gt; 'TEST'</span></span><br></pre></td></tr></table></figure><h2 id="upperFirst"><a href="#upperFirst" class="headerlink" title="upperFirst"></a>upperFirst</h2><p>将字符串的第一个字符转换为大写。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function upperFirst(str: string): string;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>str</td><td>源字符串</td></tr><tr><td>返回值</td><td>目标字符串</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">upperFirst(<span class="string">'red'</span>); <span class="comment">// -&gt; Red</span></span><br></pre></td></tr></table></figure><h2 id="use"><a href="#use" class="headerlink" title="use"></a>use</h2><p>使用 define 创建的模块。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function use(requires: string[], method: types.AnyFn): void;<br>function use(method: types.AnyFn): void;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>requires</td><td>依赖</td></tr><tr><td>method</td><td>要执行的代码</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// define('A', () =&gt; 'A');</span></span><br><span class="line">use([<span class="string">'A'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">A</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(A + <span class="string">'B'</span>); <span class="comment">// -&gt; 'AB'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="utf8"><a href="#utf8" class="headerlink" title="utf8"></a>utf8</h2><p>UTF-8 编解码。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">const utf8: {<br>    encode(str: string): string;<br>    decode(str: string, safe?: boolean): string;<br>};</code><br></pre><br></details><h3 id="encode-4"><a href="#encode-4" class="headerlink" title="encode"></a>encode</h3><p>UTF-8 编码。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>str</td><td>源字符串</td></tr><tr><td>返回值</td><td>目标字符串</td></tr></tbody></table><h3 id="decode-4"><a href="#decode-4" class="headerlink" title="decode"></a>decode</h3><p>UTF-8 解码。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>str</td><td>源字符串</td></tr><tr><td>safe=false</td><td>如果设为真，不抛错误</td></tr><tr><td>返回值</td><td>目标字符串</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">utf8.encode(<span class="string">'\uD800\uDC00'</span>); <span class="comment">// -&gt;  '\xF0\x90\x80\x80'</span></span><br><span class="line">utf8.decode(<span class="string">'\xF0\x90\x80\x80'</span>); <span class="comment">// -&gt; '\uD800\uDC00'</span></span><br></pre></td></tr></table></figure><h2 id="uuid"><a href="#uuid" class="headerlink" title="uuid"></a>uuid</h2><p>生成符合 RFC4112 版本 4 协议的 uuid。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function uuid(): string;</code><br></pre><br></details><p>相关标准 <a href="http://www.ietf.org/rfc/rfc4122.txt" target="_blank" rel="noopener">RFC4122 4.4</a>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uuid(); <span class="comment">// -&gt; '53ce0497-6554-49e9-8d79-347406d2a88b'</span></span><br></pre></td></tr></table></figure><h2 id="values"><a href="#values" class="headerlink" title="values"></a>values</h2><p>返回对象所有的属性值。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function values(obj: any): any[];</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>obj</td><td>目标对象</td></tr><tr><td>返回值</td><td>所有属性值</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">values(&#123; <span class="attr">one</span>: <span class="number">1</span>, <span class="attr">two</span>: <span class="number">2</span> &#125;); <span class="comment">// -&gt; [1, 2]</span></span><br></pre></td></tr></table></figure><h2 id="viewportScale"><a href="#viewportScale" class="headerlink" title="viewportScale"></a>viewportScale</h2><p>获取窗口缩放比。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function viewportScale(): number;</code><br></pre><br></details><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">viewportScale(); <span class="comment">// -&gt; 3</span></span><br></pre></td></tr></table></figure><h2 id="vlq"><a href="#vlq" class="headerlink" title="vlq"></a>vlq</h2><p>vlq 编解码。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">const vlq: {<br>    encode(number: number | number[]): string;<br>    decode(string: string): number[];<br>};</code><br></pre><br></details><h3 id="encode-5"><a href="#encode-5" class="headerlink" title="encode"></a>encode</h3><p>将数字编码为 vlq 字符串。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>number</td><td>源数字</td></tr><tr><td>返回值</td><td>目标字符串</td></tr></tbody></table><h3 id="decode-5"><a href="#decode-5" class="headerlink" title="decode"></a>decode</h3><p>将 vlq 字符串解码为数字。</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>string</td><td>源字符串</td></tr><tr><td>返回值</td><td>目标数字</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vlq.encode(<span class="number">123</span>); <span class="comment">// -&gt; '2H'</span></span><br><span class="line">vlq.encode([<span class="number">123</span>, <span class="number">456</span>, <span class="number">789</span>]); <span class="comment">// -&gt; '2HwcqxB'</span></span><br><span class="line">vlq.decode(<span class="string">'2H'</span>); <span class="comment">// -&gt; [123]</span></span><br><span class="line">vlq.decode(<span class="string">'2HwcqxB'</span>); <span class="comment">// -&gt; [123, 456, 789]</span></span><br></pre></td></tr></table></figure><h2 id="waitUntil"><a href="#waitUntil" class="headerlink" title="waitUntil"></a>waitUntil</h2><p>等待直到条件函数返回真值。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function waitUntil(<br>    condition: types.AnyFn,<br>    timeout?: number,<br>    interval?: number<br>): Promise&lt;any&gt;;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>condition</td><td>条件函数</td></tr><tr><td>timeout=0</td><td>超时</td></tr><tr><td>interval=250</td><td>等待间隔</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">5</span>;</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> (a = <span class="number">10</span>), <span class="number">500</span>);</span><br><span class="line">waitUntil(<span class="function"><span class="params">()</span> =&gt;</span> a === <span class="number">10</span>).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a); <span class="comment">// -&gt; 10</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="waterfall"><a href="#waterfall" class="headerlink" title="waterfall"></a>waterfall</h2><p>按顺序执行函数序列。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function waterfall(tasks: types.AnyFn[], cb?: types.AnyFn): void;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>tasks</td><td>函数序列</td></tr><tr><td>cb</td><td>结束回调</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">waterfall(</span><br><span class="line">    [</span><br><span class="line">        <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">            cb(<span class="literal">null</span>, <span class="string">'one'</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="keyword">function</span>(<span class="params">arg1, cb</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// arg1 -&gt; 'one'</span></span><br><span class="line">            cb(<span class="literal">null</span>, <span class="string">'done'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">err, result</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// result -&gt; 'done'</span></span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="wordWrap"><a href="#wordWrap" class="headerlink" title="wordWrap"></a>wordWrap</h2><p>按照指定长度对字符串进行折行处理。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function wordWrap(txt: string, width: number): string;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>txt</td><td>要折行的字符串</td></tr><tr><td>width</td><td>最大行宽度</td></tr><tr><td>返回值</td><td>折行后的字符串</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wordWrap(<span class="string">'Licia is a utility library.'</span>, <span class="number">10</span>);</span><br><span class="line"><span class="comment">// -&gt; 'Licia is \na utility \nlibrary.'</span></span><br></pre></td></tr></table></figure><h2 id="wordsToBytes"><a href="#wordsToBytes" class="headerlink" title="wordsToBytes"></a>wordsToBytes</h2><p>将 32 位字长数组转换为字节数组。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function wordsToBytes(words: number[]): number[];</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>words</td><td>字长数组</td></tr><tr><td>返回值</td><td>字节数组</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wordsToBytes([<span class="number">0x12345678</span>]); <span class="comment">// -&gt; [0x12, 0x34, 0x56, 0x78]</span></span><br></pre></td></tr></table></figure><h2 id="workerize"><a href="#workerize" class="headerlink" title="workerize"></a>workerize</h2><p>将函数运行在 worker 线程中。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function workerize(fn: types.AnyFn): types.AnyFn;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>fn</td><td>源函数</td></tr><tr><td>返回值</td><td>目标函数</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> worker = workerize(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;);</span><br><span class="line">worker(<span class="number">1</span>, <span class="number">2</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value); <span class="comment">// -&gt; 3</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="wrap"><a href="#wrap" class="headerlink" title="wrap"></a>wrap</h2><p>将函数封装到包裹函数里面, 并把它作为第一个参数传给包裹函数。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function wrap(<br>    fn: types.AnyFn,<br>    wrapper: types.AnyFn<br>): types.AnyFn;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>fn</td><td>要包裹的函数</td></tr><tr><td>wrapper</td><td>包裹函数</td></tr><tr><td>返回值</td><td>目标函数</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = wrap(<span class="built_in">escape</span>, <span class="function"><span class="keyword">function</span>(<span class="params">fn, text</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'&lt;p&gt;'</span> + fn(text) + <span class="string">'&lt;/p&gt;'</span>;</span><br><span class="line">&#125;);</span><br><span class="line">p(<span class="string">'You &amp; Me'</span>); <span class="comment">// -&gt; '&lt;p&gt;You &amp;amp; Me&lt;/p&gt;'</span></span><br></pre></td></tr></table></figure><h2 id="wx"><a href="#wx" class="headerlink" title="wx"></a>wx</h2><p>小程序 wx 对象的 promise 版本。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">const wx: any;</code><br></pre><br></details><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wx.getStorage(<span class="string">'test'</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res.data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="xpath"><a href="#xpath" class="headerlink" title="xpath"></a>xpath</h2><p>使用 xpath 选择元素，不支持 IE。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function xpath(xpath: string): HTMLElement[];</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>xpath</td><td>Xpath</td></tr><tr><td>返回值</td><td>目标元素集</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xpath(<span class="string">'//html/body'</span>); <span class="comment">// -&gt; [body]</span></span><br></pre></td></tr></table></figure><h2 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h2><p>将每个数组中相应位置的值合并在一起。</p><details><br><summary>类型定义</summary><br><pre><br><code class="language-typescript">function zip(…arr: Array&lt;any[]&gt;): Array&lt;any[]&gt;;</code><br></pre><br></details><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>arr</td><td>源数组</td></tr><tr><td>返回值</td><td>目标数组</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zip([<span class="string">'a'</span>, <span class="string">'b'</span>], [<span class="number">1</span>, <span class="number">2</span>], [<span class="literal">true</span>, <span class="literal">false</span>]); <span class="comment">// -&gt; [['a', 1, true], ['b', 2, false]]</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;licia使用文档(1.34.0)&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
    
      <category term="js工具库" scheme="/tags/js%E5%B7%A5%E5%85%B7%E5%BA%93/"/>
    
  </entry>
  
</feed>
