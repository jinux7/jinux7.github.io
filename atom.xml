<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>jinux</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="/"/>
  <updated>2019-07-03T06:04:30.800Z</updated>
  <id>/</id>
  
  <author>
    <name>jinux</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>js中的递归总结</title>
    <link href="/2019/07/02/js%E4%B8%AD%E7%9A%84%E9%80%92%E5%BD%92%E6%80%BB%E7%BB%93/"/>
    <id>/2019/07/02/js中的递归总结/</id>
    <published>2019-07-02T01:54:14.000Z</published>
    <updated>2019-07-03T06:04:30.800Z</updated>
    
    <content type="html"><![CDATA[<p>js中各种递归的知识总结<br><a id="more"></a></p><h2 id="js中的递归总结"><a href="#js中的递归总结" class="headerlink" title="js中的递归总结"></a>js中的递归总结</h2><p>递归，在我们平时编程中用到的地方很多，但是，对我而然，它是又熟悉又陌生，也就是说，不能熟练地应用到具体的实际业务代码中，所以，我想好好总结总结，以便可以更好地使用它。</p><h3 id="数字递归-最简单的入门"><a href="#数字递归-最简单的入门" class="headerlink" title="数字递归(最简单的入门)"></a>数字递归(最简单的入门)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加法的递归</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (num === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> num + sum(--num)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">sum(<span class="number">4</span>); <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 再来一个阶乘的递归</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(num === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> num*fn(num<span class="number">-1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">fn(<span class="number">5</span>) <span class="comment">// 120</span></span><br></pre></td></tr></table></figure><h3 id="数组递归"><a href="#数组递归" class="headerlink" title="数组递归"></a>数组递归</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组中的各个元素相加之和</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(arr.length === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> arr[<span class="number">0</span>];</span><br><span class="line">  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> val = arr.shift();</span><br><span class="line">    <span class="keyword">return</span> val + fn(arr);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">fn([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]) <span class="comment">// 55</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将嵌套的多维数组转成一纬数组</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,[<span class="number">7</span>,[<span class="number">8</span>,[<span class="number">9</span>,<span class="number">10</span>]]]],<span class="number">11</span>,[<span class="number">12</span>]];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">transformArr</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> newArr = [];</span><br><span class="line">  recursiveArr(arr, newArr);</span><br><span class="line">  <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">recursiveArr</span>(<span class="params">arr, newArr</span>) </span>&#123;</span><br><span class="line">  arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(item <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">      recursiveArr(item, newArr);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">      newArr.push(item);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(transformArr(arr), <span class="string">'@_@'</span>);</span><br><span class="line"><span class="comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一纬数组，元素都是对象，互相有父子关系，将这些数组转换成父子结构的对象格式</span></span><br><span class="line"><span class="comment">// 数据，parentId是其父节点的id </span></span><br><span class="line"><span class="keyword">var</span> data = [</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'数据1'</span>,</span><br><span class="line">    id: <span class="number">11</span>,</span><br><span class="line">    parentId: <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'数据2'</span>,</span><br><span class="line">    id: <span class="number">12</span>,</span><br><span class="line">    parentId: <span class="number">11</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'数据3'</span>,</span><br><span class="line">    id: <span class="number">13</span>,</span><br><span class="line">    parentId: <span class="number">11</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'数据4'</span>,</span><br><span class="line">    id: <span class="number">14</span>,</span><br><span class="line">    parentId: <span class="number">12</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'数据5'</span>,</span><br><span class="line">    id: <span class="number">15</span>,</span><br><span class="line">    parentId: <span class="number">13</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'数据6'</span>,</span><br><span class="line">    id: <span class="number">16</span>,</span><br><span class="line">    parentId: <span class="number">15</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'数据7'</span>,</span><br><span class="line">    id: <span class="number">17</span>,</span><br><span class="line">    parentId: <span class="number">16</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'数据8'</span>,</span><br><span class="line">    id: <span class="number">18</span>,</span><br><span class="line">    parentId: <span class="number">16</span></span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"><span class="comment">// transformData这个函数是辅助生成对象的函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">transformData</span>(<span class="params">data, parentId</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> obj = &#123;</span><br><span class="line">    children: []</span><br><span class="line">  &#125;;</span><br><span class="line">  generaterTree(data, obj, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// generaterTree这个函数是递归调用的核心函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generaterTree</span>(<span class="params">data, obj, parentId</span>) </span>&#123;</span><br><span class="line">  data.forEach(<span class="function"><span class="params">item</span>=&gt;</span> &#123;</span><br><span class="line">    item.children = item.children?item.children:[];</span><br><span class="line">    <span class="keyword">if</span>(item.parentId === parentId) &#123;</span><br><span class="line">      obj.children.push(item);</span><br><span class="line">      generaterTree(data, item, item.id); <span class="comment">// 继续递归回调</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">console</span>.log(transformData(data));</span><br></pre></td></tr></table></figure><h3 id="对象的递归"><a href="#对象的递归" class="headerlink" title="对象的递归"></a>对象的递归</h3><p>其实，对象的递归里边也包含了数组等的一些基础型数据，我们常用的就是对象的深拷贝<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = &#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"jinux"</span>,</span><br><span class="line">  <span class="string">"like"</span>: [<span class="string">"football"</span>,<span class="string">"basketball"</span>,<span class="string">"voliball"</span>],</span><br><span class="line">  <span class="string">"work"</span>: &#123;</span><br><span class="line">    <span class="string">"company"</span>: <span class="string">"technology"</span>,</span><br><span class="line">    <span class="string">"address"</span>: <span class="string">"hunnan"</span>,</span><br><span class="line">    <span class="string">"tongshi"</span>: [<span class="string">"lining"</span>,<span class="string">"lvnan"</span>],</span><br><span class="line">    <span class="string">"isLeader"</span>: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span> data !== <span class="string">'object'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(data === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> obj = <span class="built_in">Object</span>.prototype.toString.call(data)===<span class="string">'[object Array]'</span>?</span><br><span class="line">            []:&#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> data) &#123;</span><br><span class="line">    obj[key] = <span class="built_in">arguments</span>.callee(data[key]);</span><br><span class="line">    <span class="comment">// obj[key] = deepClone(data[key]); 与上边的一个意思</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(deepClone(data), <span class="string">"&lt;-&gt;"</span>);</span><br></pre></td></tr></table></figure></p><p>目前暂时整理这么多，以后会陆续增加递归的小demo.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;js中各种递归的知识总结&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
    
      <category term="基础知识" scheme="/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>快速创建含有多个元素的数组</title>
    <link href="/2019/07/01/%E5%BF%AB%E9%80%9F%E5%88%9B%E5%BB%BA%E5%90%AB%E6%9C%89%E5%A4%9A%E4%B8%AA%E5%85%83%E7%B4%A0%E7%9A%84%E6%95%B0%E7%BB%84/"/>
    <id>/2019/07/01/快速创建含有多个元素的数组/</id>
    <published>2019-07-01T02:17:23.000Z</published>
    <updated>2019-07-01T05:43:42.900Z</updated>
    
    <content type="html"><![CDATA[<p>快速并且简单的创建数组<br><a id="more"></a></p><h2 id="快速创建含有多个元素的数组"><a href="#快速创建含有多个元素的数组" class="headerlink" title="快速创建含有多个元素的数组"></a>快速创建含有多个元素的数组</h2><p>我们平时在开发时，有时候可能会创建一个包含20个元素的数组，之后对这个数组进行加工操作，来制作一个符合业务要求的数组。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 比如我要创建一个包含20个元素的数组</span></span><br><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> <span class="number">1</span>=<span class="number">0</span>; i&lt;<span class="number">20</span>; i++) &#123;</span><br><span class="line">  arr.push(<span class="literal">undefined</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面虽然创建了数组，但是感觉麻烦了点。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">20</span>);</span><br><span class="line"><span class="comment">// 这样创建的数组，只是有长度，但是数组里并没有元素</span></span><br><span class="line">arr.length <span class="comment">// 20</span></span><br><span class="line"><span class="number">0</span> <span class="keyword">in</span> arr <span class="comment">// false</span></span><br><span class="line"><span class="comment">// arr 这个数组使用map， forEach等方法是便利不了的</span></span><br><span class="line"><span class="comment">// 创建一个长度为20的数组，注意该数组的元素并没有被初始化</span></span><br></pre></td></tr></table></figure></p><p>好了，有几种方便的创建方式，见下面<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 首先，看一下vue官网里出现的创建方式</span></span><br><span class="line"><span class="built_in">Array</span>.apply(<span class="literal">null</span>, &#123;<span class="attr">length</span>: <span class="number">20</span>&#125;); <span class="comment">// ES5开始apply函数的第二个参数除了可以是数组外，还可以是类数组对象（即包含length属性，且length属性值是个数字的对象）</span></span><br><span class="line"><span class="comment">// 这里顺便说一下&#123;length: 20&#125;这个参数的作用</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">arguments</span>)</span><br><span class="line">&#125;</span><br><span class="line">fn(<span class="literal">undefined</span>,<span class="literal">undefined</span>,<span class="literal">undefined</span>);</span><br><span class="line">fn.apply(<span class="literal">null</span>, &#123;<span class="attr">length</span>: <span class="number">3</span>&#125;);</span><br><span class="line"><span class="comment">// 通过上面的代码，就可以看出来&#123;length: 3&#125;这个参数的含义了吧</span></span><br></pre></td></tr></table></figure></p><p>最后，总结一下可以快速创建有初始值得数组方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="built_in">Array</span>.apply(<span class="literal">null</span>, &#123;<span class="attr">length</span>: <span class="number">20</span>&#125;);</span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="built_in">Array</span>.from(&#123;<span class="attr">length</span>: <span class="number">20</span>&#125;)</span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="built_in">Array</span>(<span class="number">20</span>).fill(<span class="literal">undefined</span>)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;快速并且简单的创建数组&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
    
      <category term="基础知识" scheme="/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>手写前端自动化构建工具</title>
    <link href="/2019/06/26/%E6%89%8B%E5%86%99%E5%89%8D%E7%AB%AF%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/"/>
    <id>/2019/06/26/手写前端自动化构建工具/</id>
    <published>2019-06-26T03:13:33.000Z</published>
    <updated>2019-06-26T05:36:06.527Z</updated>
    
    <content type="html"><![CDATA[<p>写一个自己的前端自动化构建工具<br><a id="more"></a></p><h2 id="手写前端自动化构建工具"><a href="#手写前端自动化构建工具" class="headerlink" title="手写前端自动化构建工具"></a>手写前端自动化构建工具</h2><p>现在我们使用vue，react等框架来开发已经很普遍了，当我们初始化一个项目的时候，是不是在命令行下按照提示一步一步的操作，最后在本地生成了一个现成的项目，是不是感觉很快捷，很方便，用来生成这个项目的工具就叫做构建工具（有的也称之为脚手架工具）。<br>我现在需要在命令行下进行各种操作，交互，npm上已经有人写好了这类工具，常用的就是commander和inquirer,使用它们来开发脚手架，真的是好简单。<br>我写了两个小demo，一个是围绕着commander，另一个则是围绕inquirer。<br>这两个小例子都很简单，可以根据具体的要求组合到一起。<br><a href="https://github.com/jinux7/study-collections/tree/master/手写自己的构建工具" target="_blank" rel="noopener">点这里看源码</a><br>select-list.js这个文件的功能是，可以根据列表的上下选择，下载github上对应的项目模板。<br>init-commander.js这个文件的功能是，命令行里传入的文件夹名和文件名来生成新项目文件。<br>题外话，这里还可以制作成系统命令，在package.json里的bin字段下。<br>如果，都配置好了，就可以使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm link</span><br></pre></td></tr></table></figure></p><p>这个命令，把bin字段下的内容生成系统命令，这是一种方式来生成系统命令，另一种应该是把这个项目发布到npm上，安装的时候直接全局安装就可以喽。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;写一个自己的前端自动化构建工具&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
    
      <category term="基础知识" scheme="/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>javascript设计模式</title>
    <link href="/2019/06/24/javascript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>/2019/06/24/javascript设计模式/</id>
    <published>2019-06-24T02:16:13.000Z</published>
    <updated>2019-06-24T07:13:28.334Z</updated>
    
    <content type="html"><![CDATA[<p>基本上所有的设计模式都在这里了<br><a id="more"></a></p><h2 id="javascript设计模式"><a href="#javascript设计模式" class="headerlink" title="javascript设计模式"></a>javascript设计模式</h2><p>其实，设计模式在前端，平时很少会遇到，这只是作为我们这些菜鸟前端来说，但是，对于那些高级的，写插件，库之类的前端童鞋来说，设计模式还是不可或缺的，这可是实实在在的会带入到项目中的哦。<br>我只知道常见的几种，也都是为了应付面试的时候被问到，不过，今天我要终结一下，代码部分来源于网络，我只是整理一下，以备被问到时能够快速的回答出来。</p><ul><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第一章-灵活的javascript.js" target="_blank" rel="noopener">1.灵活模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第二章-写的都是看到的-面向对象编程.js" target="_blank" rel="noopener">2.面向对象编程</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第三章-神奇的魔术师-简单工厂模式.js" target="_blank" rel="noopener">3.简单工厂模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第四章-给我一张名片-工厂方法模式.js" target="_blank" rel="noopener">4.工厂方法模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第五章-出现的都是幻觉-抽象工厂模式.js" target="_blank" rel="noopener">5.抽象工厂模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第六章-分即是合-建造者模式.js" target="_blank" rel="noopener">6.建造者模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第七章-语言之魂-原型模式.js" target="_blank" rel="noopener">7.原型模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第八章-一个人的寂寞-单例模式.js" target="_blank" rel="noopener">8.单例模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第九章-套餐服务-外观模式.js" target="_blank" rel="noopener">9.外观模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第十章-水管弯弯-适配器模式.js" target="_blank" rel="noopener">10.适配器模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第十一章-牛郎织女-代理模式.js" target="_blank" rel="noopener">11.代理模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第十二章-房子装修-装饰着模式.js" target="_blank" rel="noopener">12.装饰者模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第十三章-城市间公路-桥接模式.js" target="_blank" rel="noopener">13.桥接模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第十四章-超值午餐-组合模式.js" target="_blank" rel="noopener">14.组合模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第十五章-城市公交车-享元模式.js" target="_blank" rel="noopener">15.享元模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第十六章-照猫画虎-模板方法模式.js" target="_blank" rel="noopener">16.模板方法模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第十七章-通信卫星-观察者模式.js" target="_blank" rel="noopener">17.观察者模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第十八章-超级玛丽-状态模式.js" target="_blank" rel="noopener">18.状态模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第十九章-活诸葛-策略模式.js" target="_blank" rel="noopener">19.策略模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第二十章-有序车站-职责链模式.js" target="_blank" rel="noopener">20.职责链模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第二十一章-命令模式.js" target="_blank" rel="noopener">21.命令模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第二十二章-驻华大使-访问者模式.js" target="_blank" rel="noopener">22.访问者模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第二十三章-媒婆-中介者模式.js" target="_blank" rel="noopener">23.中介者模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第二十四章-做好笔录-备忘录模式.js" target="_blank" rel="noopener">24.备忘录模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第二十五章-点钞机-迭代器模式.js" target="_blank" rel="noopener">25.迭代器模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第二十六章-语言翻译-解释器模式.js" target="_blank" rel="noopener">26.解释器模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第二十七章-永无尽头-链式模式.js" target="_blank" rel="noopener">27.链式模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第二十八章-未来预言家-委托模式.js" target="_blank" rel="noopener">28.委托模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第二十九章-数据管理器-数据访问对象模式.js" target="_blank" rel="noopener">29.数据访问对象模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第三十章-执行控制-节流模式.js" target="_blank" rel="noopener">30.节流模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第三十一章-卡片拼图-简单模板模式.js" target="_blank" rel="noopener">31.简单模板模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第三十二章-机器学习-惰性模式.js" target="_blank" rel="noopener">32.惰性模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第三十三章-异国战场-参与者模式.js" target="_blank" rel="noopener">33.参与者模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第三十四章-入场仪式-等待着模式.js" target="_blank" rel="noopener">34.等待者模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第三十五章-死心眼-同步模块.js" target="_blank" rel="noopener">35.同步模块模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第三十六章-大心脏-异步模块模式.js" target="_blank" rel="noopener">36.异步模块模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第三十七章-分而治之-widget.js" target="_blank" rel="noopener">37.widget模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第三十八章-三人行-MVC模式.js" target="_blank" rel="noopener">38.MVC模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第三十九章-MVVM.js" target="_blank" rel="noopener">39.MVVM模式</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;基本上所有的设计模式都在这里了&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
    
      <category term="基础知识" scheme="/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>写一个自己的富文本编辑器</title>
    <link href="/2019/06/22/%E5%86%99%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    <id>/2019/06/22/写一个自己的富文本编辑器/</id>
    <published>2019-06-22T08:42:09.000Z</published>
    <updated>2019-06-22T09:10:22.225Z</updated>
    
    <content type="html"><![CDATA[<p>写一个稍微复杂点的富文本编辑器<br><a id="more"></a></p><h2 id="写一个自己的富文本编辑器"><a href="#写一个自己的富文本编辑器" class="headerlink" title="写一个自己的富文本编辑器"></a>写一个自己的富文本编辑器</h2><p>前几天写了一个<a href="https://jinux7.github.io/2019/06/17/简单的富文本编辑器/" target="_blank" rel="noopener">《简单的富文本编辑器》</a>这篇博文，没想到刚过两天，项目中就需要自己写一个富文本编辑器。<br>具体的需求是，在富文本编辑器中编辑好内容，存到数据库，之后app端拿到这些数据以webview的形式展示出来，当然，webview这块也是我来做，但是，在pc端编辑的内容直接放到移动端显示是有问题的，比如像图片大小问题，而且编辑的样式和展示出来的样式完全不一样。所以，我就想自己写一个，不用第三方的库，这样自己可以灵活的按照需求来修改。<br>暂时写这个小插件只用了一天多，还不是很完善，有些地方还有待修改，如果有时间的话，以后会陆续更新。<br>废话不多说，直接贴源码地址喽:<br><a href="https://github.com/jinux7/study-collections/tree/master/jinux-editor" target="_blank" rel="noopener">jinux-editor</a><br>这里有些注意的地方，比如把文字变成粗体，用到了<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.execCommand(<span class="string">"bold"</span>,<span class="literal">false</span>,<span class="literal">null</span>);</span><br></pre></td></tr></table></figure></p><p>而取消粗体还是用到了这个命令，执行同一个命令，会切换字体的粗体和非粗体的状态。<br>但是，这里注意，还有一个方法可以获取现在文本是否是粗体状态<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.queryCommandState(<span class="string">'bold'</span>);</span><br></pre></td></tr></table></figure></p><p>可以用上面这个命令判断现在的状态，进而修改点击按钮的样式。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;写一个稍微复杂点的富文本编辑器&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
    
      <category term="基础知识" scheme="/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>base64加密原理</title>
    <link href="/2019/06/20/base64%E5%8A%A0%E5%AF%86%E5%8E%9F%E7%90%86/"/>
    <id>/2019/06/20/base64加密原理/</id>
    <published>2019-06-20T00:30:09.000Z</published>
    <updated>2019-06-20T00:40:18.705Z</updated>
    
    <content type="html"><![CDATA[<p>你知道我们常用的base64是什么吗？<br><a id="more"></a></p><h2 id="base64加密原理"><a href="#base64加密原理" class="headerlink" title="base64加密原理"></a>base64加密原理</h2><p>开发者对Base64编码肯定很熟悉，是否对它有很清晰的认识就不一定了。实际 上Base64已经简单到不能再简单了，如果对它的理解还是模棱两可实在不应该。大概介绍一下Base64的相关内容，花几分钟时间就可以彻底理解它。文 章下边贴了一个Base64的编解码器，方便阅读文章的同时来实验。<br>　　一. Base64编码由来<br>　　为什么会有Base64编码呢？因为有些网络传送渠道并不支持所有的字节，例如传统的邮件只支持可见字符的传送，像ASCII码的控制字符就 不能通过邮件传送。这样用途就受到了很大的限制，比如图片二进制流的每个字节不可能全部是可见字符，所以就传送不了。最好的方法就是在不改变传统协议的情 况下，做一种扩展方案来支持二进制文件的传送。把不可打印的字符也能用可打印字符来表示，问题就解决了。Base64编码应运而生，Base64就是一种 基于64个可打印字符来表示二进制数据的表示方法。<br>　　二. Base64编码原理<br>　　看一下Base64的索引表，字符选用了”A-Z、a-z、0-9、+、/“ 64个可打印字符。数值代表字符的索引，这个是标准Base64协议规定的，不能更改。64个字符用6个bit位就可以全部表示，一个字节有8个bit 位，剩下两个bit就浪费掉了，这样就不得不牺牲一部分空间了。这里需要弄明白的就是一个Base64字符是8个bit，但是有效部分只有右边的6个 bit，左边两个永远是0。<br><img src="/2019/06/20/base64加密原理/1.png" alt="img"><br>那么怎么用6个有效bit来表示传统字符的8个bit呢？8和6的最小公倍数 是24，也就是说3个传统字节可以由4个Base64字符来表示，保证有效位数是一样的，这样就多了1/3的字节数来弥补Base64只有6个有效bit 的不足。你也可以说用两个Base64字符也能表示一个传统字符，但是采用最小公倍数的方案其实是最减少浪费的。结合下边的图比较容易理解。Man是三个 字符，一共24个有效bit，只好用4个Base64字符来凑齐24个有效位。红框表示的是对应的Base64，6个有效位转化成相应的索引值再对应 Base64字符表，查出”Man”对应的Base64字符是”TWFU”。说到这里有个原则不知道你发现了没有，要转换成Base64的最小单位就是三个字节，对一个字符串来说每次都是三个字节三个字节的转换，对应的是Base64的四个字节。这个搞清楚了其实就差不多了。<br><img src="/2019/06/20/base64加密原理/2.png" alt="img"><br><img src="/2019/06/20/base64加密原理/3.png" alt="img"><br>　　但是转换到最后你发现不够三个字节了怎么办呢？愿望终于实现了，我们可以用两 个Base64来表示一个字符或用三个Base64表示两个字符，像下图的A对应的第二个Base64的二进制位只有两个，把后边的四个补0就是了。所以 A对应的Base64字符就是QQ。上边已经说过了，原则是Base64字符的最小单位是四个字符一组，那这才两个字 符，后边补两个”=”吧。其实不用”=”也不耽误解码，之所以用”=”，可能是考虑到多段编码后的Base64字符串拼起来也不会引起混淆。由此可见 Base64字符串只可能最后出现一个或两个”=”，中间是不可能出现”=”的。下图中字符”BC”的编码过程也是一样的。<br><img src="/2019/06/20/base64加密原理/4.png" alt="img"><br>    三. 总结　　<br>　　说起Base64编码可能有些奇怪，因为大多数的编码都是由字符转化成二进制的过程，而从二进制转成字符的过程称为解码。而Base64的概念就恰好反了，由二进制转到字符称为编码，由字符到二进制称为解码。<br>　　Base64编码主要用在传输、存储、表示二进制等领域，还可以用来加密，但是这种加密比较简单，只是一眼看上去不知道什么内容罢了，当然也可以对Base64的字符序列进行定制来进行加密。<br>　　Base64编码是从二进制到字符的过程，像一些中文字符用不同的编码转为二 进制时，产生的二进制是不一样的，所以最终产生的Base64字符也不一样。例如”上网”对应utf-8格式的Base64编码是”5LiK572R”， 对应GB2312格式的Base64编码是”yc/N+A==”。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;你知道我们常用的base64是什么吗？&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
    
      <category term="基础知识" scheme="/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>测试及爬虫工具nightmare</title>
    <link href="/2019/06/18/%E6%B5%8B%E8%AF%95%E5%8F%8A%E7%88%AC%E8%99%AB%E5%B7%A5%E5%85%B7nightmare/"/>
    <id>/2019/06/18/测试及爬虫工具nightmare/</id>
    <published>2019-06-18T06:21:24.000Z</published>
    <updated>2019-06-18T07:00:25.232Z</updated>
    
    <content type="html"><![CDATA[<p>nightmare工具的使用<br><a id="more"></a></p><h2 id="测试及爬虫工具nightmare"><a href="#测试及爬虫工具nightmare" class="headerlink" title="测试及爬虫工具nightmare"></a>测试及爬虫工具nightmare</h2><p>nightmare是一个可视化的页面操作工具，<a href="https://www.npmjs.com/package/nightmare" target="_blank" rel="noopener">官网点这里</a><br>如何安装就不说了，npm就可以搞定，但是，安装的时候会很慢，因为它依赖electron<br>具体的使用方法可以直接看官网的api，下面是一个小demo，是对本博客网站的简单操作，可以看一下它强大的效果<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Nightmare = <span class="built_in">require</span>(<span class="string">'nightmare'</span>);       </span><br><span class="line"><span class="keyword">var</span> nightmare = Nightmare(&#123; </span><br><span class="line">      show: <span class="literal">true</span>,</span><br><span class="line">      gotoTimeout: <span class="number">100000</span> <span class="comment">// goto页面的等待时长，不写的话默认30000ms，访问慢的网页会报错</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">nightmare</span><br><span class="line">  .goto(<span class="string">'https://jinux7.github.io'</span>) <span class="comment">// 打开的网页</span></span><br><span class="line">  .type(<span class="string">'.m_search .u-search-input'</span>, <span class="string">'javascript'</span>) <span class="comment">// 向input中写入javascript</span></span><br><span class="line">  .type(<span class="string">'.m_search .u-search-input'</span>, <span class="string">'\u000d'</span>) <span class="comment">// 触发input的点击回车事件</span></span><br><span class="line">  .wait(<span class="string">'.icon.icon-close'</span>) <span class="comment">// 等待弹出层的.icon.icon-close元素节点出现</span></span><br><span class="line">  .click(<span class="string">'.icon.icon-close'</span>) <span class="comment">// 出现后点击它</span></span><br><span class="line">  .evaluate(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// 注入到页面里执行的js代码</span></span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">document</span>.querySelector(<span class="string">'.avatar.waves-image'</span>).src;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// .end() // 关闭nightmare</span></span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">'Search failed:'</span>, error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></p><p>如需要更丰富的功能，按照api一点点添加就可以喽.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;nightmare工具的使用&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
    
      <category term="工具库" scheme="/tags/%E5%B7%A5%E5%85%B7%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>简单的富文本编辑器</title>
    <link href="/2019/06/17/%E7%AE%80%E5%8D%95%E7%9A%84%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    <id>/2019/06/17/简单的富文本编辑器/</id>
    <published>2019-06-17T05:30:10.000Z</published>
    <updated>2019-06-17T05:45:03.898Z</updated>
    
    <content type="html"><![CDATA[<p>超级简单的富文本编辑器<br><a id="more"></a></p><h2 id="简单的富文本编辑器"><a href="#简单的富文本编辑器" class="headerlink" title="简单的富文本编辑器"></a>简单的富文本编辑器</h2><p>这是一个超级简单富文本编辑器，功能很简单，但是富文本编辑器的写法基础是有的，可以在这个基础上进行增加改进。<br>主要用到了div的contentEditable属性，还有document.execCommand方法，具体代码见下面<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;简易富文本编辑器.html&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    </span></span><br><span class="line"><span class="regexp">    &lt;meta http-equiv="keywords" content="keyword1,keyword2,keyword3"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;meta http-equiv="description" content="this is my page"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;meta http-equiv="content-type" content="text/</span>html; charset=UTF<span class="number">-8</span><span class="string">"&gt;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">&lt;style type="</span>text/css<span class="string">"&gt;</span></span><br><span class="line"><span class="string">    #editor &#123;width:600px;height:200px;border:1px solid #ccc;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    button &#123;margin:1px;border:1px solid #aaa;background:#ffe;cursor:pointer;overflow:hidden;&#125;</span></span><br><span class="line"><span class="string">    button:hover &#123;background:#ccc;border:1px solid #00f;&#125;</span></span><br><span class="line"><span class="string">&lt;/style&gt;</span></span><br><span class="line"><span class="string">  &lt;/head&gt;</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  &lt;body&gt;</span></span><br><span class="line"><span class="string">  &lt;button id="</span>btn1<span class="string">"&gt;&lt;/button&gt;</span></span><br><span class="line"><span class="string">  &lt;button id="</span>btn2<span class="string">"&gt;&lt;/button&gt;</span></span><br><span class="line"><span class="string">  &lt;button id="</span>btn3<span class="string">"&gt;&lt;/button&gt;</span></span><br><span class="line"><span class="string">  &lt;button id="</span>btn4<span class="string">"&gt;&lt;/button&gt;</span></span><br><span class="line"><span class="string">  &lt;div id="</span>editor<span class="string">"&gt;</span></span><br><span class="line"><span class="string">      Click to Editor...</span></span><br><span class="line"><span class="string">  &lt;/div&gt;</span></span><br><span class="line"><span class="string">  &lt;input id="</span>printContent<span class="string">" type="</span>button<span class="string">" value="</span>打印编辑器内容<span class="string">"&gt;</span></span><br><span class="line"><span class="string">  &lt;script type="</span>text/javascript<span class="string">"&gt;</span></span><br><span class="line"><span class="string">        initEditor();</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        //初始化</span></span><br><span class="line"><span class="string">        function initEditor() &#123;</span></span><br><span class="line"><span class="string">            openOrCloseEditor("</span>editor<span class="string">", "</span><span class="literal">true</span><span class="string">");//开启元素编辑</span></span><br><span class="line"><span class="string">            bindBtnCommand();//给样式按钮绑定命令</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        /**</span></span><br><span class="line"><span class="string">        * </span></span><br><span class="line"><span class="string">        * 功能： 开启元素编辑功能</span></span><br><span class="line"><span class="string">        * 输入： el：编辑器ID; operate：Boolean值，表示启动还是关闭</span></span><br><span class="line"><span class="string">        */</span></span><br><span class="line"><span class="string">        function openOrCloseEditor(el, operate) &#123;</span></span><br><span class="line"><span class="string">            var editor = document.getElementById(el);</span></span><br><span class="line"><span class="string">            editor.contentEditable = operate;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        //按钮绑定命令</span></span><br><span class="line"><span class="string">        function bindBtnCommand() &#123;</span></span><br><span class="line"><span class="string">            var btns = document.getElementsByTagName("</span>button<span class="string">"),</span></span><br><span class="line">                btnConfigs = "backcolor|#f00|设置背景色 bold|null|字体加粗 indent|null|缩进 fontName|微软雅黑|转换字体".split(" "),</span><br><span class="line">                len = btnConfigs.length;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>, btnConfig; btnConfig = btnConfigs[i]; i++) &#123;</span><br><span class="line">                (<span class="function"><span class="keyword">function</span>(<span class="params">btnConfig, btn</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">var</span> msg = btnConfig.split(<span class="string">"|"</span>),</span><br><span class="line">                        lab = msg[<span class="number">0</span>],</span><br><span class="line">                        value = msg[<span class="number">1</span>],</span><br><span class="line">                        title = msg[<span class="number">2</span>];</span><br><span class="line">                    btn.innerHTML = lab;</span><br><span class="line">                    btn.title = title;</span><br><span class="line">                    btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">                        <span class="built_in">document</span>.execCommand(lab, <span class="literal">false</span>, value);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)(btnConfig, btns[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取编辑器内嵌内容</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">getContent</span>(<span class="params">el</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> editor = <span class="built_in">document</span>.getElementById(el);</span><br><span class="line">            <span class="keyword">return</span> editor.innerHTML;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//打印按钮绑定触发事件</span></span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">"printContent"</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> content = getContent(<span class="string">"editor"</span>);</span><br><span class="line">            <span class="built_in">document</span>.write(content);</span><br><span class="line">        &#125;;</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure></p><p>上面的代码直接粘贴就可以跑起来哦。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;超级简单的富文本编辑器&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
    
      <category term="基础知识" scheme="/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>vue,react中百度地图的使用</title>
    <link href="/2019/06/13/vue-react%E4%B8%AD%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BE%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>/2019/06/13/vue-react中百度地图的使用/</id>
    <published>2019-06-13T05:13:09.000Z</published>
    <updated>2019-06-13T05:34:31.251Z</updated>
    
    <content type="html"><![CDATA[<p>vue,react等框架，百度地图的最优使用方式<br><a id="more"></a></p><h2 id="vue-react中百度地图的使用"><a href="#vue-react中百度地图的使用" class="headerlink" title="vue,react中百度地图的使用"></a>vue,react中百度地图的使用</h2><p>现在vue，react框架大行其道，很多项目都是用它们开发的，我的项目也都在用，之前，在使用百度地图的时候，我都是把百度地图封了一个组件，直接插入到dom中，但是，有些功能莫名其妙的不好使，我猜可能是跟vue有兼容性问题，还有一个页面中引入多个地图的情况下，像城市切换插件就不好使了，相互冲突了，所以，最终的解决方案是用iframe来引入百度地图。这个好处就是完全隔离开项目框架与百度地图之间的冲突。<br>首先，建一个百度地图的html页面，代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=utf-8"</span> /&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"initial-scale=1.0, user-scalable=yes"</span> /&gt;</span><br><span class="line">    &lt;link href=<span class="string">"https://api.map.baidu.com/library/IndoorMap/1.0/src/indoor.min.css?v=1.0.1 "</span> rel=<span class="string">"stylesheet"</span> type=<span class="string">"text/css"</span>&gt;</span><br><span class="line">    &lt;style type=<span class="string">"text/css"</span>&gt;</span><br><span class="line">        body, html,#map &#123;width: 100%;height: 100%;overflow: hidden;margin:0;font-family:"微软雅黑";&#125;</span><br><span class="line">    &lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script type="text/</span>javascript<span class="string">" src="</span>https:<span class="comment">//api.map.baidu.com/api?v=3.0&amp;ak=PaxZEfdK60GDxScXccj81kBW"&gt;&lt;/script&gt;</span></span><br><span class="line">    &lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"https://api.map.baidu.com/library/IndoorMap/1.0/src/indoor.min.js?v=1.0.1 "</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div id="map"&gt;&lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">lng:<span class="string">''</span>,</span><br><span class="line">lat:<span class="string">''</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">var</span> tab = getQueryString(<span class="string">'tab'</span>);</span><br><span class="line">  <span class="comment">// 获取url信息</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getQueryString</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"(^|&amp;)"</span> + name + <span class="string">"=([^&amp;]*)(&amp;|$)"</span>, <span class="string">"i"</span>);</span><br><span class="line">      <span class="keyword">var</span> reg_rewrite = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"(^|/)"</span> + name + <span class="string">"/([^/]*)(/|$)"</span>, <span class="string">"i"</span>);</span><br><span class="line">      <span class="keyword">var</span> r = <span class="built_in">window</span>.location.search.substr(<span class="number">1</span>).match(reg);</span><br><span class="line">      <span class="keyword">var</span> q = <span class="built_in">window</span>.location.pathname.substr(<span class="number">1</span>).match(reg_rewrite);</span><br><span class="line">      <span class="keyword">if</span>(r != <span class="literal">null</span>)&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="built_in">unescape</span>(r[<span class="number">2</span>]);</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span>(q != <span class="literal">null</span>)&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="built_in">unescape</span>(q[<span class="number">2</span>]);</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 百度地图API功能</span></span><br><span class="line">  <span class="keyword">var</span> map = <span class="keyword">new</span> BMap.Map(<span class="string">"map"</span>);</span><br><span class="line">  map.centerAndZoom(<span class="keyword">new</span> BMap.Point(<span class="number">123.436</span>, <span class="number">41.816</span>), <span class="number">11</span>);</span><br><span class="line"><span class="keyword">var</span> topLeftControl = <span class="keyword">new</span> BMap.ScaleControl(&#123;</span><br><span class="line">anchor: BMAP_ANCHOR_BOTTOM_LEFT</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 城市选择控件</span></span><br><span class="line"><span class="keyword">var</span> cityListControl = <span class="keyword">new</span> BMap.CityListControl(&#123;</span><br><span class="line">anchor: BMAP_ANCHOR_TOP_RIGHT</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 比例尺控件</span></span><br><span class="line"><span class="keyword">var</span> topLeftNavigation = <span class="keyword">new</span> BMap.NavigationControl();</span><br><span class="line">map.addControl(topLeftControl);</span><br><span class="line">map.addControl(topLeftNavigation);</span><br><span class="line">map.addControl(cityListControl);</span><br><span class="line">  map.enableScrollWheelZoom(<span class="literal">true</span>); <span class="comment">// 开启鼠标滚轮缩放</span></span><br><span class="line">  <span class="comment">// 创建室内图实例</span></span><br><span class="line">  <span class="keyword">var</span> indoorManager = <span class="keyword">new</span> BMapLib.IndoorManager(map);</span><br><span class="line">  <span class="comment">// 点击获取经纬度</span></span><br><span class="line">map.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">obj.lng = <span class="built_in">parseFloat</span>(e.point.lng) + <span class="string">''</span>;</span><br><span class="line">obj.lat = <span class="built_in">parseFloat</span>(e.point.lat) + <span class="string">''</span>;</span><br><span class="line">drawLocation()</span><br><span class="line">selectLocation();</span><br><span class="line">&#125;);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">selectLocation</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">window</span>.parent.postMessage(&#123;</span><br><span class="line">      refresh:obj,</span><br><span class="line">      tab</span><br><span class="line">      &#125;,<span class="string">'*'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawLocation</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (obj.lng !== <span class="string">""</span> &amp;&amp; obj.lat !== <span class="string">""</span>) &#123;</span><br><span class="line">      map.clearOverlays();</span><br><span class="line">      <span class="keyword">var</span> new_point = <span class="keyword">new</span> BMap.Point(obj.lng, obj.lat);</span><br><span class="line">      <span class="keyword">var</span> marker = <span class="keyword">new</span> BMap.Marker(new_point);</span><br><span class="line">      map.addOverlay(marker);</span><br><span class="line">      map.panTo(new_point);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>之后就是在项目中用iframe标签引入。<br>重要的地方来了，就是父子页面通信，在子页面点击选好地点后，肯定需要把选好点的坐标给父页面，这里有一个简单的方法，在子页面中点击选点时，给父页面发信息代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.parent.postMessage(&#123;</span><br><span class="line">    val: <span class="string">'信息'</span></span><br><span class="line">    &#125;,<span class="string">'*'</span>);</span><br><span class="line"><span class="comment">// 具体使用方法自行百度</span></span><br></pre></td></tr></table></figure></p><p>子页面消息发出去了，父页面如何接收呢？见下面代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'message'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(event);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 可以打印出很多需要的信息喽</span></span><br><span class="line"><span class="comment">// 据说，IE8+都支持哦</span></span><br></pre></td></tr></table></figure></p><p>好了，总结一下，vue中最好还是以这种方式使用哈。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;vue,react等框架，百度地图的最优使用方式&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
    
      <category term="vue" scheme="/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>web页面性能测试demo</title>
    <link href="/2019/06/06/web%E9%A1%B5%E9%9D%A2%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95demo/"/>
    <id>/2019/06/06/web页面性能测试demo/</id>
    <published>2019-06-06T07:30:17.000Z</published>
    <updated>2019-06-06T07:54:33.774Z</updated>
    
    <content type="html"><![CDATA[<p>web页面性能测试demo<br><a id="more"></a></p><h2 id="web页面性能测试demo"><a href="#web页面性能测试demo" class="headerlink" title="web页面性能测试demo"></a>web页面性能测试demo</h2><p>写这篇文章的起因，有时候有人问，css会不会阻塞页面渲染了，js如何触发页面渲染了等等，所以，最好的方式就是自己写一个小demo，自己试一下不就一目了然了吗，目前这个demo的内容很简单，以后会慢慢增加。<br>下面是github的链接地址:<br><a href="https://github.com/jinux7/study-collections/tree/master/web-performance-test" target="_blank" rel="noopener">点我进入仓库</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;web页面性能测试demo&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
    
      <category term="web性能" scheme="/tags/web%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>docker常用命令</title>
    <link href="/2019/05/28/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>/2019/05/28/docker常用命令/</id>
    <published>2019-05-28T06:14:50.000Z</published>
    <updated>2019-05-28T06:22:37.985Z</updated>
    
    <content type="html"><![CDATA[<p>docker常用命令<br><a id="more"></a></p><h2 id="docker常用命令"><a href="#docker常用命令" class="headerlink" title="docker常用命令"></a>docker常用命令</h2><p>最近想在win10下安装mysql5.6版本，装了半天没装成功，于是乎用docker来解决了。<br>docker需要命令行，这里以mysql为例，贴出一个别人的blog(懒得写了)。<br><a href="https://www.cnblogs.com/pwc1996/p/5425234.html" target="_blank" rel="noopener">docker运行mysql</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;docker常用命令&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
    
      <category term="docker" scheme="/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>windows下git命令批处理执行</title>
    <link href="/2019/05/24/windows%E4%B8%8Bgit%E5%91%BD%E4%BB%A4%E6%89%B9%E5%A4%84%E7%90%86%E6%89%A7%E8%A1%8C/"/>
    <id>/2019/05/24/windows下git命令批处理执行/</id>
    <published>2019-05-24T06:04:09.000Z</published>
    <updated>2019-05-27T03:13:50.466Z</updated>
    
    <content type="html"><![CDATA[<p>win10操作系统下利用批处理程序来运行git操作。<br><a id="more"></a></p><h2 id="windows下git命令批处理执行"><a href="#windows下git命令批处理执行" class="headerlink" title="windows下git命令批处理执行"></a>windows下git命令批处理执行</h2><p>首先，我说一下我要这样做的起因，也许大家都会有感。<br>目前，我在做的项目是一个，但是下面分了5个子项目，这5个子项目，每一个自己拥有一个git仓库，所以，我在上传代码的操作就是，commit-&gt;pull-&gt;push,这样反复5回，因为有5个仓库嘛。有时候一天要好多次，效率太低了，于是我就想起了利用windows系统的批处理来做。<br>在使用批处理来操作git命令，首先需要把git的操作仓库方式改为ssh，使用ssh的话，还需要ssh key，ssh key的生成方法是，打开git的命令行工具，输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 首先检查一下现在电脑里是否已经有生成的ssh key</span><br><span class="line">cd ~/.ssh</span><br><span class="line">// ~这个符号我在git命令行下才能打出来，cmd没打出来。</span><br><span class="line">// ~/ 这个路径就是C:\Users\kaiya这个，看看现在是否已经有现成的ssh key</span><br><span class="line">// 如果有，就不用再生成了</span><br><span class="line"></span><br><span class="line">// 接下来是生成ssh key命令</span><br><span class="line">ssh-keygen -t rsa -C &quot;124076***@qq.com&quot;</span><br><span class="line">// 需要自己在电脑中注册的git邮箱,如果不知道，可以查一下 git config --global user.email</span><br><span class="line">// 生成的ssh key自动保存在C:\Users\kaiya这个目录下（这个是我的用户名）</span><br><span class="line">// 生成过程中一路回车就好，不用设置密码等</span><br></pre></td></tr></table></figure></p><p>有了ssh key，添加到github或自己公司的gitlab上就好了。<br>比如要添加到github上，登录账号进入自己的github库，步骤见下图<br><img src="/2019/05/24/windows下git命令批处理执行/1.png" alt="img"><br><img src="/2019/05/24/windows下git命令批处理执行/2.png" alt="img"><br>点进去之后，按照页面提示填写就可以了。<br>以上就是配置好了ssh key，之后就是用git拉取，推送代码了，这里有一个地方需要注意，那就是Git对仓库的操作方式，既然已经添加了ssh key，就需要用git的ssh提交方式。查看.git文件夹下的config文件，找到下面的内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[remote &quot;origin&quot;]</span><br><span class="line">  // 这个是ssh提交方式</span><br><span class="line">url = git@172.24.112.158:root/airport.git</span><br><span class="line">  </span><br><span class="line">  // 这个是http提交方式</span><br><span class="line">  url = http://172.24.112.158/root/webviewpage</span><br><span class="line"></span><br><span class="line">fetch = +refs/heads/*:refs/remotes/origin/*</span><br></pre></td></tr></table></figure></p><p>按照上面的写法，只留下ssh提交方式即可。<br>接下来，我们来写windows的批处理命令,先写一个处理一个仓库的git操作批处理。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">chcp 65001</span><br><span class="line">cd C:\WORK\git-ku\ejashop</span><br><span class="line">@echo off</span><br><span class="line">echo git批处理开始执行</span><br><span class="line">git status</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;update&quot;</span><br><span class="line">git pull</span><br><span class="line">git push</span><br><span class="line">echo ----------</span><br><span class="line">echo git commit pull push都已完成，点击任意键退出</span><br><span class="line">pause</span><br></pre></td></tr></table></figure></p><p>再写一个调用多个批处理文件的操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">chcp 65001</span><br><span class="line">pause</span><br><span class="line">start /D &quot;C:\Users\kaiya\Desktop\批处理node\git&quot; call ehome.bat</span><br><span class="line">start /D &quot;C:\Users\kaiya\Desktop\批处理node\git&quot; call airport.bat</span><br><span class="line">start /D &quot;C:\Users\kaiya\Desktop\批处理node\git&quot; call eHomeOperation.bat</span><br><span class="line">start /D &quot;C:\Users\kaiya\Desktop\批处理node\git&quot; call kaidian.bat</span><br></pre></td></tr></table></figure></p><p>这里，需要注意一下，因为批处理是在cmd命令行下执行的，所以要把git的环境变量配好哦。<br>好了，通过这样的方法，以后麻烦的git操作，点击一下就可以搞定喽。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;win10操作系统下利用批处理程序来运行git操作。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="计算机原理" scheme="/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="基础知识" scheme="/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
      <category term="github" scheme="/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>多个ajax请求,页面渲染顺序问题</title>
    <link href="/2019/05/20/%E5%A4%9A%E4%B8%AAajax%E8%AF%B7%E6%B1%82-%E9%A1%B5%E9%9D%A2%E6%B8%B2%E6%9F%93%E9%A1%BA%E5%BA%8F%E9%97%AE%E9%A2%98/"/>
    <id>/2019/05/20/多个ajax请求-页面渲染顺序问题/</id>
    <published>2019-05-20T07:04:15.000Z</published>
    <updated>2019-05-21T00:52:30.868Z</updated>
    
    <content type="html"><![CDATA[<p>在一个页面中,多个ajax请求,页面渲染顺序问题。<br><a id="more"></a></p><h2 id="多个ajax请求-页面渲染顺序问题"><a href="#多个ajax请求-页面渲染顺序问题" class="headerlink" title="多个ajax请求,页面渲染顺序问题"></a>多个ajax请求,页面渲染顺序问题</h2><p>如题，比如说在一个页面中有两个按钮或者多个，按照先后顺序点击，都发出了ajax请求，但是他们返回的顺序就不会按照点击按钮的顺序返回，如果，它们操作的是页面的同一个显示区域，比如列表，那就ajax访问最慢的接口最后被渲染出来，有可能这个接口是用户最开始点击的按钮渲染出来的，这样就会产生错误信息，用户本想最后点击那个按钮返回的数据才是他想要的。<br>其实，这个问题我并没有遇到过，这个是大约一年前我再一次面试中被问到的，当时由于没有做好准备，我也只能诚实的回答没有遇到过此场景，今天我又来了兴致，把它的解决方法记录下来（我的拖延症是不是很严重），这个解决方式是我自己定的，其实也是实现起来比较简单的。<br>为了加快写作，直接把代码贴出来，在代码中写注释<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">  &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">  &lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"ie=edge"</span>&gt;</span><br><span class="line">  &lt;script src=<span class="string">"./jquery.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">  &lt;title&gt;多个ajax请求,页面渲染顺序问题&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">  &lt;style&gt;</span></span><br><span class="line"><span class="regexp">    .content &#123;</span></span><br><span class="line"><span class="regexp">      width: 500px;</span></span><br><span class="line"><span class="regexp">      height: 100px;</span></span><br><span class="line"><span class="regexp">      background-color: #eeeeee;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>style&gt;</span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp">  &lt;div class="content"&gt;</span></span><br><span class="line"><span class="regexp">    原始内容</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">  &lt;button id=<span class="string">"btn1"</span>&gt;按钮<span class="number">2</span>s&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">  &lt;button id="btn2"&gt;按钮5s&lt;/</span>button&gt;</span><br><span class="line">  &lt;button id=<span class="string">"btn3"</span>&gt;按钮<span class="number">3</span>s&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">// 后端地址</span></span><br><span class="line">  <span class="keyword">var</span> baseUrl = <span class="string">"http://localhost:3000/"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 存放ajax标志的数组，用来区分是哪个ajax</span></span><br><span class="line">  <span class="keyword">var</span> orderArr = [];</span><br><span class="line">  <span class="comment">// 按钮1加点击事件</span></span><br><span class="line">  $(<span class="string">'#btn1'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 将btn1按钮的标志传入数组</span></span><br><span class="line">    ajaxOrder(<span class="string">'btn1'</span>);</span><br><span class="line">    $.post(baseUrl+<span class="string">'delay2s'</span>, (res)=&gt; &#123;</span><br><span class="line">      <span class="comment">// 渲染页面</span></span><br><span class="line">      render(<span class="string">'btn1'</span>, res.data);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 按钮2加点击事件</span></span><br><span class="line">  $(<span class="string">'#btn2'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    ajaxOrder(<span class="string">'btn2'</span>);</span><br><span class="line">    $.post(baseUrl+<span class="string">'delay5s'</span>, (res)=&gt; &#123;</span><br><span class="line">      render(<span class="string">'btn2'</span>, res.data);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 按钮3加点击事件</span></span><br><span class="line">  $(<span class="string">'#btn3'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    ajaxOrder(<span class="string">'btn3'</span>);</span><br><span class="line">    $.post(baseUrl+<span class="string">'delay3s'</span>, (res)=&gt; &#123;</span><br><span class="line">      render(<span class="string">'btn3'</span>, res.data);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 向存放ajax标志位数组中push ajax标志</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">ajaxOrder</span>(<span class="params">flag</span>) </span>&#123;</span><br><span class="line">    orderArr.push(flag);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 根据ajax的标志来渲染页面</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">flag, val</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 如果数组中只有一个标志的情况，直接渲染并清空数组</span></span><br><span class="line">    <span class="keyword">if</span>(orderArr.length === <span class="number">1</span>) &#123;</span><br><span class="line">      orderArr = [];</span><br><span class="line">      $(<span class="string">'.content'</span>).html(val);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">void</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果标志数组中多余一个标志</span></span><br><span class="line">    <span class="keyword">if</span>(orderArr.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="comment">// 如果这个标志是第一个请求的标志，则渲染页面</span></span><br><span class="line">      <span class="keyword">if</span>(orderArr.indexOf(flag) === <span class="number">0</span>) &#123;</span><br><span class="line">        orderArr.shift();</span><br><span class="line">        $(<span class="string">'.content'</span>).html(val);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">void</span> <span class="number">0</span>;</span><br><span class="line">      &#125;<span class="keyword">else</span> &#123; <span class="comment">// 如果不是第一个，则不渲染页面，并把这个标志剔除</span></span><br><span class="line">        <span class="keyword">let</span> index = orderArr.indexOf(flag);</span><br><span class="line">        orderArr.splice(index,<span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure></p><p>大概的流程就是，按照按钮点击的顺序来显示请求的结果。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在一个页面中,多个ajax请求,页面渲染顺序问题。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
    
      <category term="面试题" scheme="/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>webpack打包多页面项目</title>
    <link href="/2019/05/20/webpack%E6%89%93%E5%8C%85%E5%A4%9A%E9%A1%B5%E9%9D%A2%E9%A1%B9%E7%9B%AE/"/>
    <id>/2019/05/20/webpack打包多页面项目/</id>
    <published>2019-05-20T02:26:35.000Z</published>
    <updated>2019-05-20T02:46:28.390Z</updated>
    
    <content type="html"><![CDATA[<p>webpack打包多页面项目<br><a id="more"></a></p><h2 id="webpack打包多页面项目"><a href="#webpack打包多页面项目" class="headerlink" title="webpack打包多页面项目"></a>webpack打包多页面项目</h2><p>平时我们在工作中，使用webpack来打包单页面应用的项目很多，多页面应用之前我都是使用gulp来做，今天我在github发现一个不错的demo，我就不写具体的分析步骤了，代码里边写的很清楚，直接贴地址喽。<br><a href="https://github.com/jixoba/webpack-dev" target="_blank" rel="noopener">点击这里看项目</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;webpack打包多页面项目&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
    
      <category term="webpack" scheme="/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>import和require的本质区别</title>
    <link href="/2019/05/09/import%E5%92%8Crequire%E7%9A%84%E6%9C%AC%E8%B4%A8%E5%8C%BA%E5%88%AB/"/>
    <id>/2019/05/09/import和require的本质区别/</id>
    <published>2019-05-09T08:00:05.000Z</published>
    <updated>2019-05-09T08:44:15.447Z</updated>
    
    <content type="html"><![CDATA[<p>简单的说一下import和require的本质区别<br><a id="more"></a></p><h2 id="import和require的本质区别"><a href="#import和require的本质区别" class="headerlink" title="import和require的本质区别"></a>import和require的本质区别</h2><p>import是ES6的模块规范，require是commonjs的模块规范，详细的用法我不介绍，我只想说一下他们最基本的区别，import是静态加载模块，require是动态加载，那么静态加载和动态加载的区别是什么呢？<br>静态加载时代码在编译的时候已经执行了，动态加载是编译后在代码运行的时候再执行，那么具体点是什么呢？<br>先说说import，如下代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js文件</span></span><br><span class="line"><span class="keyword">import</span> &#123; name &#125; <span class="keyword">from</span> <span class="string">'name.js'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// name.js文件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> name = <span class="string">'jinux'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> age = <span class="number">20</span></span><br></pre></td></tr></table></figure></p><p>上面的代码表示main.js文件里引入了name.js文件导出的变量，在代码编译阶段执行后的代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js文件</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">'jinux'</span></span><br></pre></td></tr></table></figure></p><p>这个是我自己理解的，其实就是直接把name.js里的代码放到了main.js文件里，好比是在main.js文件中声明一样。<br>再来看看require<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js文件</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="built_in">require</span>(<span class="string">'obj.js'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// obj.js文件</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'jinux'</span>,</span><br><span class="line">  age: <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.export obj;</span><br></pre></td></tr></table></figure></p><p>require是在运行阶段，需要把obj对象整个加载进内存，之后用到哪个变量就用哪个，这里再对比一下import，import是静态加载，如果只引入了name，age是不会引入的，所以是按需引入，性能更高。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简单的说一下import和require的本质区别&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
    
      <category term="基础知识" scheme="/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>http常用状态码</title>
    <link href="/2019/05/06/http%E5%B8%B8%E7%94%A8%E7%8A%B6%E6%80%81%E7%A0%81/"/>
    <id>/2019/05/06/http常用状态码/</id>
    <published>2019-05-06T02:52:37.000Z</published>
    <updated>2019-05-06T05:21:56.964Z</updated>
    
    <content type="html"><![CDATA[<p>列出了一些常用的http请求状态码<br><a id="more"></a></p><h2 id="http常用状态码"><a href="#http常用状态码" class="headerlink" title="http常用状态码"></a>http常用状态码</h2><p>我们在日常开发中，经常会使用ajax，会看到请求返回的状态码，也就是Status Code。<br>常见的3个是:</p><ul><li>200 – 服务器成功返回网页</li><li>404 – 请求的网页不存在</li><li>503 – 服务器超时</li></ul><p>但是，作为一个合格的前端，还需要掌握的详细点，下面列出常用的状态码，也不是最全的哦。</p><h3 id="1xx（临时响应）"><a href="#1xx（临时响应）" class="headerlink" title="1xx（临时响应）"></a>1xx（临时响应）</h3><p>表示临时响应并需要请求者继续执行操作的状态码。</p><ul><li>100（继续）:    请求者应当继续提出请求。服务器返回此代码表示已收到请求的第一部分，正在等待其余部分。</li><li>101（切换协议）:    请求者已要求服务器切换协议，服务器已确认并准备切换。</li></ul><h3 id="2xx-（成功）"><a href="#2xx-（成功）" class="headerlink" title="2xx （成功）"></a>2xx （成功）</h3><p>表示成功处理了请求的状态码。</p><ul><li>200（成功）:    服务器已成功处理了请求。通常，这表示服务器提供了请求的网页。如果是对您的 robots.txt 文件显示此状态码，则表示 Googlebot 已成功检索到该文件。</li><li>201（已创建）:    请求成功并且服务器创建了新的资源。</li><li>202（已接受）:    服务器已接受请求，但尚未处理。</li><li>203（非授权信息）:    服务器已成功处理了请求，但返回的信息可能来自另一来源。</li><li>204（无内容）:    服务器成功处理了请求，但没有返回任何内容。</li><li>205（重置内容）:    服务器成功处理了请求，但没有返回任何内容。与 204 响应不同，此响应要求请求者重置文档视图（例如，清除表单内容以输入新内容）。</li><li>206（部分内容）:    服务器成功处理了部分 GET 请求。</li></ul><h3 id="3xx-（重定向）"><a href="#3xx-（重定向）" class="headerlink" title="3xx （重定向）"></a>3xx （重定向）</h3><p>要完成请求，需要进一步操作。通常，这些状态码用来重定向。</p><ul><li>300（多种选择）:    针对请求，服务器可执行多种操作。服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择。</li><li>301（永久移动）:    请求的网页已永久移动到新位置。服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。您应使用此代码告诉 Googlebot 某个网页或网站已永久移动到新位置。</li><li>302（临时移动）:    服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来响应以后的请求。此代码与响应 GET 和 HEAD 请求的 301 代码类似，会自动将请求者转到不同的位置，但您不应使用此代码来告诉 Googlebot 某个网页或网站已经移动，因为 Googlebot 会继续抓取原有位置并编制索引。</li><li>303（查看其他位置）: 请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码。对于除 HEAD 之外的所有请求，服务器会自动转到其他位置。</li><li>304（未修改）: 自从上次请求后，请求的网页未修改过。服务器返回此响应时，不会返回网页内容。如果网页自请求者上次请求后再也没有更改过，您应将服务器配置为返回此响应（称为 If-Modified-Since HTTP 标头）。服务器可以告诉 Googlebot 自从上次抓取后网页没有变更，进而节省带宽和开销。</li><li>305（使用代理）:    请求者只能使用代理访问请求的网页。如果服务器返回此响应，还表示请求者应使用代理。</li><li>307（临时重定向）:    服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来响应以后的请求。此代码与响应 GET 和 HEAD 请求的 <code>&lt;a href=answer.py?answer=&gt;301&lt;/a&gt;</code> 代码类似，会自动将请求者转到不同的位置，但您不应使用此代码来告诉 Googlebot 某个页面或网站已经移动，因为 Googlebot 会继续抓取原有位置并编制索引。</li></ul><h3 id="4xx（请求错误）"><a href="#4xx（请求错误）" class="headerlink" title="4xx（请求错误）"></a>4xx（请求错误）</h3><p>这些状态码表示请求可能出错，妨碍了服务器的处理。</p><ul><li>400（错误请求）: 服务器不理解请求的语法。</li><li>401（未授权）: 请求要求身份验证。对于登录后请求的网页，服务器可能返回此响应。</li><li>403（禁止）: 服务器拒绝请求。如果您在 Googlebot 尝试抓取您网站上的有效网页时看到此状态码（您可以在 Google 网站管理员工具诊断下的网络抓取页面上看到此信息），可能是您的服务器或主机拒绝了 Googlebot 访问。</li><li>404（未找到）: 服务器找不到请求的网页。例如，对于服务器上不存在的网页经常会返回此代码。</li><li>405（方法禁用）: 禁用请求中指定的方法。</li><li>406（不接受）:    无法使用请求的内容特性响应请求的网页。</li><li>407（需要代理授权）:    此状态码与 <code>&lt;a href=answer.py?answer=35128&gt;401（未授权）&lt;/a&gt;</code>类似，但指定请求者应当授权使用代理。如果服务器返回此响应，还表示请求者应当使用代理。</li><li>408（请求超时）:    服务器等候请求时发生超时。</li><li>409（冲突）:    服务器在完成请求时发生冲突。服务器必须在响应中包含有关冲突的信息。服务器在响应与前一个请求相冲突的 PUT 请求时可能会返回此代码，以及两个请求的差异列表。</li><li>410（已删除）:    如果请求的资源已永久删除，服务器就会返回此响应。该代码与 404（未找到）代码类似，但在资源以前存在而现在不存在的情况下，有时会用来替代 404 代码。如果资源已永久移动，您应使用 301 指定资源的新位置。</li><li>411（需要有效长度）:    服务器不接受不含有效内容长度标头字段的请求。</li><li>412（未满足前提条件）:    服务器未满足请求者在请求中设置的其中一个前提条件。</li><li>413（请求实体过大）:    服务器无法处理请求，因为请求实体过大，超出服务器的处理能力。</li><li>414（请求的 URI 过长）:    请求的 URI（通常为网址）过长，服务器无法处理。</li><li>415（不支持的媒体类型）:    请求的格式不受请求页面的支持。</li><li>416（请求范围不符合要求）:    如果页面无法提供请求的范围，则服务器会返回此状态码。</li><li>417（未满足期望值）:    服务器未满足”期望”请求标头字段的要求。</li></ul><h3 id="5xx（服务器错误）"><a href="#5xx（服务器错误）" class="headerlink" title="5xx（服务器错误）"></a>5xx（服务器错误）</h3><p>这些状态码表示服务器在处理请求时发生内部错误。这些错误可能是服务器本身的错误，而不是请求出错。</p><ul><li>500（服务器内部错误）    服务器遇到错误，无法完成请求。</li><li>501（尚未实施）    服务器不具备完成请求的功能。例如，服务器无法识别请求方法时可能会返回此代码。</li><li>502（错误网关）    服务器作为网关或代理，从上游服务器收到无效响应。</li><li>503（服务不可用）    服务器目前无法使用（由于超载或停机维护）。通常，这只是暂时状态。</li><li>504（网关超时）    服务器作为网关或代理，但是没有及时从上游服务器收到请求。</li><li>505（HTTP 版本不受支持）    服务器不支持请求中所用的 HTTP 协议版本。</li></ul><p>以上就是一些常用的http状态吗，如果想了解更多，<a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html" target="_blank" rel="noopener">点击这里喽</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;列出了一些常用的http请求状态码&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
    
      <category term="网络基础" scheme="/tags/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>nodejs将vue的dist目录文件copy到目标目录</title>
    <link href="/2019/04/23/nodejs%E5%B0%86vue%E7%9A%84dist%E7%9B%AE%E5%BD%95%E6%96%87%E4%BB%B6copy%E5%88%B0%E7%9B%AE%E6%A0%87%E7%9B%AE%E5%BD%95/"/>
    <id>/2019/04/23/nodejs将vue的dist目录文件copy到目标目录/</id>
    <published>2019-04-23T05:32:30.000Z</published>
    <updated>2019-04-23T07:01:49.223Z</updated>
    
    <content type="html"><![CDATA[<p>利用nodejs拷贝转移文件<br><a id="more"></a></p><h2 id="nodejs将vue的dist目录文件copy到目标目录"><a href="#nodejs将vue的dist目录文件copy到目标目录" class="headerlink" title="nodejs将vue的dist目录文件copy到目标目录"></a>nodejs将vue的dist目录文件copy到目标目录</h2><p>上篇文章写了《window批处理执行webpack打包》，这篇文章主要写打包好的文件自动转移到git目录下。<br>其实就是用的nodejs的读写文件API而已，代码不多，见下面：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">let</span> fse = <span class="built_in">require</span>(<span class="string">'fs-extra'</span>) <span class="comment">// 文件的正删改查模块，比原生方便</span></span><br><span class="line"><span class="keyword">let</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 复制文件</span></span><br><span class="line"><span class="keyword">var</span> copy=<span class="function"><span class="keyword">function</span>(<span class="params">src,dst</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> paths = fs.readdirSync(src); <span class="comment">//同步读取当前目录</span></span><br><span class="line">  paths.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">path</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> _src=src+<span class="string">'/'</span>+path;</span><br><span class="line">      <span class="keyword">var</span> _dst=dst+<span class="string">'/'</span>+path;</span><br><span class="line">      fs.stat(_src,<span class="function"><span class="keyword">function</span>(<span class="params">err,stats</span>)</span>&#123;  <span class="comment">//stats  该对象 包含文件属性</span></span><br><span class="line">          <span class="keyword">if</span>(err)<span class="keyword">throw</span> err;</span><br><span class="line">          <span class="keyword">if</span>(stats.isFile())&#123; <span class="comment">//如果是个文件则拷贝 </span></span><br><span class="line">              <span class="keyword">let</span> _dst = dst+<span class="string">'/'</span> + path;</span><br><span class="line">              <span class="keyword">let</span>  readable=fs.createReadStream(_src);<span class="comment">//创建读取流</span></span><br><span class="line">              <span class="keyword">let</span>  writable=fs.createWriteStream(_dst);<span class="comment">//创建写入流</span></span><br><span class="line">              readable.pipe(writable);</span><br><span class="line">          &#125;<span class="keyword">else</span> <span class="keyword">if</span>(stats.isDirectory())&#123; <span class="comment">//是目录则 递归 </span></span><br><span class="line">              checkDirectory(_src,_dst,copy);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 检查文件夹是否存在，新建文件夹并copy</span></span><br><span class="line"><span class="keyword">var</span> checkDirectory=<span class="function"><span class="keyword">function</span>(<span class="params">src,dst,callback</span>)</span>&#123;</span><br><span class="line">  fs.access(dst, fs.constants.F_OK, (err) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span>(err)&#123;</span><br><span class="line">          fs.mkdirSync(dst);</span><br><span class="line">          callback(src,dst);</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          callback(src,dst);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除旧文件</span></span><br><span class="line"><span class="keyword">var</span> cleanOld = <span class="function"><span class="keyword">function</span>(<span class="params">dest</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> dest_static = path.join(dest, <span class="string">'static'</span>); </span><br><span class="line">  <span class="keyword">let</span> dest_index = path.join(dest, <span class="string">'index.html'</span>); </span><br><span class="line">  fs.exists(dest_static,<span class="function"><span class="keyword">function</span>(<span class="params">exists</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(exists) fse.removeSync(dest_static);</span><br><span class="line">  &#125;);</span><br><span class="line">  fs.exists(dest_index,<span class="function"><span class="keyword">function</span>(<span class="params">exists</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(exists) fse.removeSync(dest_index);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件路径</span></span><br><span class="line"><span class="keyword">let</span> url_src_ehome = path.relative(__dirname, <span class="string">'C:\\WORK\\new-airport\\6 编码\\5 Web\\ejashop\\dist\\'</span>),</span><br><span class="line">    url_dest_ehome = path.relative(__dirname, <span class="string">'C:\\Users\\kaiya\\Desktop\\公司文件\\gitlang\\langcnew\\demo2\\ehome'</span>),</span><br><span class="line">    url_src_airport = path.relative(__dirname, <span class="string">'C:\\WORK\\new-airport\\6 编码\\5 Web\\airport\\dist\\'</span>),</span><br><span class="line">    url_dest_airport = path.relative(__dirname, <span class="string">'C:\\Users\\kaiya\\Desktop\\公司文件\\gitlang\\langcnew\\demo2\\airport'</span>),</span><br><span class="line">    url_src_operation = path.relative(__dirname, <span class="string">'C:\\WORK\\new-airport\\6 编码\\5 Web\\eHomeOperation\\dist\\'</span>),</span><br><span class="line">    url_dest_operation = path.relative(__dirname, <span class="string">'C:\\Users\\kaiya\\Desktop\\公司文件\\gitlang\\langcnew\\demo2\\operation'</span>),</span><br><span class="line">    url_src_openShop = path.relative(__dirname, <span class="string">'C:\\WORK\\new-airport\\6 编码\\5 Web\\kaidian\\dist\\'</span>),</span><br><span class="line">    url_dest_openShop = path.relative(__dirname, <span class="string">'C:\\Users\\kaiya\\Desktop\\公司文件\\gitlang\\langcnew\\demo2\\openShop'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// copy之前先清空旧文件</span></span><br><span class="line">cleanOld(url_dest_ehome);</span><br><span class="line">cleanOld(url_dest_airport);</span><br><span class="line">cleanOld(url_dest_operation);</span><br><span class="line">cleanOld(url_dest_openShop);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4个项目的copy转移</span></span><br><span class="line">checkDirectory(url_src_ehome, url_dest_ehome,copy);</span><br><span class="line">checkDirectory(url_src_airport, url_dest_airport,copy);</span><br><span class="line">checkDirectory(url_src_operation, url_dest_operation,copy);</span><br><span class="line">checkDirectory(url_src_openShop, url_dest_openShop,copy);</span><br></pre></td></tr></table></figure></p><p>这里需要注意一点，path.relative(__dirname, ‘C:\WORK\new-airport\6 编码\5 Web\ejashop\dist\‘);利用path模块将两个绝对路径变成相对路径。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;利用nodejs拷贝转移文件&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="nodejs" scheme="/categories/nodejs/"/>
    
    
      <category term="工具库" scheme="/tags/%E5%B7%A5%E5%85%B7%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>window批处理执行webpack打包</title>
    <link href="/2019/04/19/window%E6%89%B9%E5%A4%84%E7%90%86%E6%89%A7%E8%A1%8Cwebpack%E6%89%93%E5%8C%85/"/>
    <id>/2019/04/19/window批处理执行webpack打包/</id>
    <published>2019-04-19T01:14:31.000Z</published>
    <updated>2019-04-19T01:37:13.570Z</updated>
    
    <content type="html"><![CDATA[<p>利用window的批处理文件bat来批量执行debpack打包命令。<br><a id="more"></a></p><h2 id="window批处理执行webpack打包"><a href="#window批处理执行webpack打包" class="headerlink" title="window批处理执行webpack打包"></a>window批处理执行webpack打包</h2><p>现在的前端开发，使用vue，react，angular等框架的项目非常多，部署的时候需要打包后进行部署，比如运行npm run build命令，但是比如我现在的项目，有4个子平台，每个平台是独立的一套vue，每次打包的时候需要进入到4个不同的平台目录进行打包命令操作，还有一点，我们项目分为测试环境，生产环境，这样就会出现更多次打包操作，每次都很烦，进入一个文件夹，打开命令提示符，输入npm run build，有没有方便点的方式呢，有，可以利用window系统的批处理文件来操作。<br>首先，下面的是执行一个打包命令的.bat文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">chcp 65001</span><br><span class="line">cd C:\WORK\new-airport\6 编码\5 Web\ejashop</span><br><span class="line">npm run build</span><br><span class="line">pause</span><br></pre></td></tr></table></figure></p><ul><li>chcp 65001 //是用来可以在文件路径中使用中文</li><li>cd C:\WORK\new-airport\6 编码\5 Web\ejashop //进入到项目的目录</li><li>npm run build //执行打包命令</li><li>pause // 命令行暂停，等待下一步操作</li></ul><p>上面的是执行一个打包命令的，多个打包操作需要创建多个.bat文件，每执行一个点击一下也很麻烦，我们可以在创建一个.bat文件，用来执行这些批处理文件操作，向下面这样:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">chcp 65001</span><br><span class="line">pause</span><br><span class="line">start /D &quot;C:\Users\kaiya\Desktop\批处理node\build&quot; call ehome.bat</span><br><span class="line">start /D &quot;C:\Users\kaiya\Desktop\批处理node\build&quot; call airport.bat</span><br><span class="line">start /D &quot;C:\Users\kaiya\Desktop\批处理node\build&quot; call eHomeOperation.bat</span><br><span class="line">start /D &quot;C:\Users\kaiya\Desktop\批处理node\build&quot; call kaidian.bat</span><br></pre></td></tr></table></figure></p><ul><li>chcp 65001 //是用来可以在文件路径中使用中文</li><li>start /D “C:\Users\kaiya\Desktop\批处理node\build” call ehome.bat //执行具体的.bat文件</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;利用window的批处理文件bat来批量执行debpack打包命令。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="计算机原理" scheme="/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="webpack" scheme="/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>http请求头响应头字段详解</title>
    <link href="/2019/04/15/http%E8%AF%B7%E6%B1%82%E5%A4%B4%E5%93%8D%E5%BA%94%E5%A4%B4%E5%AD%97%E6%AE%B5%E8%AF%A6%E8%A7%A3/"/>
    <id>/2019/04/15/http请求头响应头字段详解/</id>
    <published>2019-04-15T09:04:24.000Z</published>
    <updated>2019-04-16T08:35:39.798Z</updated>
    
    <content type="html"><![CDATA[<p>http请求头和返回头字段的解释<br><a id="more"></a></p><h2 id="http请求头响应头字段详解"><a href="#http请求头响应头字段详解" class="headerlink" title="http请求头响应头字段详解"></a>http请求头响应头字段详解</h2><p>作为一名前端开发人员，肯定少不了要和网络打交道，因为要从服务器端拉取数据，从服务端获取数据最常用的方式还是通过HTTP请求。给服务器发请求的时候有请求头，接受服务器响应的时候有响应头，客户端和服务器端互相沟通需要的信息都是通过这些“头”来传送，这些信息是一些类似key:value的键值对。了解这些“头”中字段的含义对于理解整个请求过程有很大的帮助。这里列举了常用的“头”字段的解释以及例子，本文可以作为工具文收藏，以备需要时查看。</p><h3 id="常用标准请求头字段"><a href="#常用标准请求头字段" class="headerlink" title="常用标准请求头字段"></a>常用标准请求头字段</h3><ul><li><p>Accept 设置接受的内容类型<br>Accept: text/plain</p></li><li><p>Accept-Charset 设置接受的字符编码<br>Accept-Charset: utf-8</p></li><li><p>Accept-Encoding 设置接受的编码格式<br>Accept-Encoding: gzip, deflate</p></li><li><p>Accept-Datetime 设置接受的版本时间<br>Accept-Datetime: Thu, 31 May 2007 20:35:00 GMT</p></li><li><p>Accept-Language 设置接受的语言<br>Accept-Language: en-US</p></li><li><p>Authorization 设置HTTP身份验证的凭证<br>Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==</p></li><li><p>Cache-Control 设置请求响应链上所有的缓存机制必须遵守的指令<br>Cache-Control: no-cache</p></li><li><p>Connection 设置当前连接和hop-by-hop协议请求字段列表的控制选项<br>Connection: keep-alive<br>Connection: Upgrade</p></li><li><p>Content-Length 设置请求体的字节长度<br>Content-Length: 348</p></li><li><p>Content-MD5 设置基于MD5算法对请求体内容进行Base64二进制编码<br>Content-MD5: Q2hlY2sgSW50ZWdyaXR5IQ==</p></li><li><p>Content-Type 设置请求体的MIME类型（适用POST和PUT请求）<br>Content-Type: application/x-www-form-urlencoded</p></li><li><p>Cookie 设置服务器使用Set-Cookie发送的http cookie<br>Cookie: $Version=1; Skin=new;</p></li><li><p>Date 设置消息发送的日期和时间<br>Date: Tue, 15 Nov 1994 08:12:31 GMT</p></li><li><p>Expect 标识客户端需要的特殊浏览器行为<br>Expect: 100-continue</p></li><li><p>Forwarded 披露客户端通过http代理连接web服务的源信息<br>Forwarded: for=192.0.2.60;proto=http;by=203.0.113.43<br>Forwarded: for=192.0.2.43, for=198.51.100.17</p></li><li><p>From 设置发送请求的用户的email地址<br>From: <a href="mailto:user@example.com" target="_blank" rel="noopener">user@example.com</a></p></li><li><p>Host 设置服务器域名和TCP端口号，如果使用的是服务请求标准端口号，端口号可以省略<br>Host: en.wikipedia.org:8080<br>Host: en.wikipedia.org</p></li><li><p>If-Match 设置客户端的ETag,当时客户端ETag和服务器生成的ETag一致才执行，适用于更新自从上次更新之后没有改变的资源<br>If-Match: “737060cd8c284d8af7ad3082f209582d</p></li><li><p>If-Modified-Since 设置更新时间，从更新时间到服务端接受请求这段时间内如果资源没有改变，允许服务端返回304 Not Modified<br>If-Modified-Since: Sat, 29 Oct 1994 19:43:31 GMT</p></li><li><p>If-None-Match 设置客户端ETag，如果和服务端接受请求生成的ETage相同，允许服务端返回304 Not Modified<br>If-None-Match: “737060cd8c284d8af7ad3082f209582d”</p></li><li><p>If-Range 设置客户端ETag，如果和服务端接受请求生成的ETage相同，返回缺失的实体部分；否则返回整个新的实体<br>If-Range: “737060cd8c284d8af7ad3082f209582d”</p></li><li><p>If-Unmodified-Since 设置更新时间，只有从更新时间到服务端接受请求这段时间内实体没有改变，服务端才会发送响应<br>If-Unmodified-Since: Sat, 29 Oct 1994 19:43:31 GMT</p></li><li><p>Max-Forwards 限制代理或网关转发消息的次数<br>Max-Forwards: 10</p></li><li><p>Origin 标识跨域资源请求（请求服务端设置Access-Control-Allow-Origin响应字段）<br>Origin: <a href="http://www.example-social-network.com" target="_blank" rel="noopener">http://www.example-social-network.com</a></p></li><li><p>Pragma 设置特殊实现字段，可能会对请求响应链有多种影响<br>Pragma: no-cache</p></li><li><p>Proxy-Authorization 为连接代理授权认证信息<br>Proxy-Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==</p></li><li><p>Range 请求部分实体，设置请求实体的字节数范围，具体可以参见HTTP/1.1中的Byte serving<br>Range: bytes=500-999</p></li><li><p>Referer 设置前一个页面的地址，并且前一个页面中的连接指向当前请求，意思就是如果当前请求是在A页面中发送的，那么referer就是A页面的url地址（轶事：这个单词正确的拼法应该是”referrer”,但是在很多规范中都拼成了”referer”，所以这个单词也就成为标准用法）<br>Referer: <a href="http://en.wikipedia.org/wiki/Main_Page" target="_blank" rel="noopener">http://en.wikipedia.org/wiki/Main_Page</a></p></li><li><p>TE 设置用户代理期望接受的传输编码格式，和响应头中的Transfer-Encoding字段一样<br>TE: trailers, deflate</p></li><li><p>Upgrade 请求服务端升级协议<br>Upgrade: HTTP/2.0, HTTPS/1.3, IRC/6.9, RTA/x11, websocket</p></li><li><p>User-Agent 用户代理的字符串值<br>User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:12.0) Gecko/20100101 Firefox/21.0</p></li><li><p>Via 通知服务器代理请求<br>Via: 1.0 fred, 1.1 example.com (Apache/1.1)</p></li><li><p>Warning 实体可能会发生的问题的通用警告<br>Warning: 199 Miscellaneous warning</p></li></ul><h3 id="常用非标准请求头字段"><a href="#常用非标准请求头字段" class="headerlink" title="常用非标准请求头字段"></a>常用非标准请求头字段</h3><ul><li><p>X-Requested-With 标识Ajax请求，大部分js框架发送请求时都会设置它为XMLHttpRequest<br>X-Requested-With: XMLHttpRequest</p></li><li><p>DNT 请求web应用禁用用户追踪<br>DNT: 1 (Do Not Track Enabled)<br>DNT: 0 (Do Not Track Disabled)</p></li><li><p>X-Forwarded-For 一个事实标准，用来标识客户端通过HTTP代理或者负载均衡器连接的web服务器的原始IP地址<br>X-Forwarded-For: client1, proxy1, proxy2<br>X-Forwarded-For: 129.78.138.66, 129.78.64.103</p></li><li><p>X-Forwarded-Host 一个事实标准，用来标识客户端在HTTP请求头中请求的原始host,因为主机名或者反向代理的端口可能与处理请求的原始服务器不同<br>X-Forwarded-Host: en.wikipedia.org:8080<br>X-Forwarded-Host: en.wikipedia.org</p></li><li><p>X-Forwarded-Proto 一个事实标准，用来标识HTTP原始协议，因为反向代理或者负载均衡器和web服务器可能使用http,但是请求到反向代理使用的是https<br>X-Forwarded-Proto: https</p></li><li><p>Front-End-Https 微软应用程序和负载均衡器使用的非标准header字段<br>Front-End-Https: on</p></li><li><p>X-Http-Method-Override 请求web应用时，使用header字段中给定的方法（通常是put或者delete）覆盖请求中指定的方法（通常是post）,如果用户代理或者防火墙不支持直接使用put或者delete方法发送请求时，可以使用这个字段<br>X-HTTP-Method-Override: DELETE</p></li><li><p>X-ATT-DeviceId 允许更简单的解析用户代理在AT&amp;T设备上的MakeModel/Firmware<br>X-Att-Deviceid: GT-P7320/P7320XXLPG</p></li><li><p>X-Wap-Profile 设置描述当前连接设备的详细信息的xml文件在网络中的位置<br>x-wap-profile: <a href="http://wap.samsungmobile.com/uaprof/SGH-I777.xml" target="_blank" rel="noopener">http://wap.samsungmobile.com/uaprof/SGH-I777.xml</a></p></li><li><p>Proxy-Connection 早起HTTP版本中的一个误称，现在使用标准的connection字段<br>Proxy-Connection: keep-alive</p></li><li><p>X-UIDH 服务端深度包检测插入的一个唯一ID标识Verizon Wireless的客户<br>X-UIDH: …</p></li><li><p>X-Csrf-Token,X-CSRFToken,X-XSRF-TOKEN 防止跨站请求伪造<br>X-Csrf-Token: i8XNjC4b8KVok4uw5RftR38Wgp2BFwql</p></li><li><p>X-Request-ID,X-Correlation-ID 标识客户端和服务端的HTTP请求<br>X-Request-ID: f058ebd6-02f7-4d3f-942e-904344e8cde5</p></li></ul><h3 id="常用标准响应头字段"><a href="#常用标准响应头字段" class="headerlink" title="常用标准响应头字段"></a>常用标准响应头字段</h3><ul><li><p>Access-Control-Allow-Origin 指定哪些站点可以参与跨站资源共享<br>Access-Control-Allow-Origin: *</p></li><li><p>Accept-Patch 指定服务器支持的补丁文档格式，适用于http的patch方法<br>Accept-Patch: text/example;charset=utf-8</p></li><li><p>Accept-Ranges 服务器通过byte serving支持的部分内容范围类型<br>Accept-Ranges: bytes</p></li><li><p>Age 对象在代理缓存中暂存的秒数<br>Age: 12</p></li><li><p>Allow 设置特定资源的有效行为，适用方法不被允许的http 405错误<br>Allow: GET, HEAD</p></li><li><p>Alt-Svc 服务器使用”Alt-Svc”（Alternative Servicesde的缩写）头标识资源可以通过不同的网络位置或者不同的网络协议获取<br>Alt-Svc: h2=”http2.example.com:443”; ma=7200</p></li><li><p>Cache-Control 告诉服务端到客户端所有的缓存机制是否可以缓存这个对象，单位是秒<br>Cache-Control: max-age=3600</p></li><li><p>Connection 设置当前连接和hop-by-hop协议请求字段列表的控制选项<br>Connection: close</p></li><li><p>Content-Disposition 告诉客户端弹出一个文件下载框，并且可以指定下载文件名<br>Content-Disposition: attachment; filename=”fname.ext”</p></li><li><p>Content-Encoding 设置数据使用的编码类型<br>Content-Encoding: gzip</p></li><li><p>Content-Language 为封闭内容设置自然语言或者目标用户语言<br>Content-Language: en</p></li><li><p>Content-Length 响应体的字节长度<br>Content-Length: 348</p></li><li><p>Content-Location 设置返回数据的另一个位置<br>Content-Location: /index.htm</p></li><li><p>Content-MD5 设置基于MD5算法对响应体内容进行Base64二进制编码<br>Content-MD5: Q2hlY2sgSW50ZWdyaXR5IQ==</p></li><li><p>Content-Range 标识响应体内容属于完整消息体中的那一部分<br>Content-Range: bytes 21010-47021/47022</p></li><li><p>Content-Type 设置响应体的MIME类型<br>Content-Type: text/html; charset=utf-8</p></li><li><p>Date 设置消息发送的日期和时间<br>Date: Tue, 15 Nov 1994 08:12:31 GMT</p></li><li><p>ETag 特定版本资源的标识符，通常是消息摘要<br>ETag: “737060cd8c284d8af7ad3082f209582d”</p></li><li><p>Expires 设置响应体的过期时间<br>Expires: Thu, 01 Dec 1994 16:00:00 GMT</p></li><li><p>Last-Modified 设置请求对象最后一次的修改日期<br>Last-Modified: Tue, 15 Nov 1994 12:45:26 GMT</p></li><li><p>Link 设置与其他资源的类型关系<br>Link: ; rel=”alternate”</p></li><li><p>Location 在重定向中或者创建新资源时使用<br>Location: <a href="http://www.w3.org/pub/WWW/People.html" target="_blank" rel="noopener">http://www.w3.org/pub/WWW/People.html</a></p></li><li><p>P3P 以P3P:CP=”your_compact_policy”的格式设置支持P3P(Platform for Privacy Preferences Project)策略，大部分浏览器没有完全支持P3P策略，许多站点设置假的策略内容欺骗支持P3P策略的浏览器以获取第三方cookie的授权<br>P3P: CP=”This is not a P3P policy! See <a href="http://www.google.com/support/accounts/bin/answer.py?hl=en&amp;answer=151657" target="_blank" rel="noopener">http://www.google.com/support/accounts/bin/answer.py?hl=en&amp;answer=151657</a> for more info.”</p></li><li><p>Pragma 设置特殊实现字段，可能会对请求响应链有多种影响<br>Pragma: no-cache</p></li><li><p>Proxy-Authenticate 设置访问代理的请求权限<br>Proxy-Authenticate: Basic</p></li><li><p>Public-Key-Pins 设置站点的授权TLS证书<br>Public-Key-Pins: max-age=2592000; pin-sha256=”E9CZ9INDbd+2eRQozYqqbQ2yXLVKB9+xcprMF+44U1g=”;</p></li><li><p>Refresh “重定向或者新资源创建时使用，在页面的头部有个扩展可以实现相似的功能，并且大部分浏览器都支持</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta http-equiv=<span class="string">"refresh"</span> content=<span class="string">"5; url=http://example.com/"</span>&gt;</span><br><span class="line">Refresh: <span class="number">5</span>; url=http:<span class="comment">//www.w3.org/pub/WWW/People.html</span></span><br></pre></td></tr></table></figure></li><li><p>Retry-After 如果实体暂时不可用，可以设置这个值让客户端重试，可以使用时间段（单位是秒）或者HTTP时间<br>Example 1: Retry-After: 120<br>Example 2: Retry-After: Fri, 07 Nov 2014 23:59:59 GMT</p></li><li><p>Server 服务器名称<br>Server: Apache/2.4.1 (Unix)</p></li><li><p>Set-Cookie 设置HTTP Cookie<br>Set-Cookie: UserID=JohnDoe; Max-Age=3600; Version=1</p></li><li><p>Status 设置HTTP响应状态<br>Status: 200 OK</p></li><li><p>Strict-Transport-Security 一种HSTS策略通知HTTP客户端缓存HTTPS策略多长时间以及是否应用到子域<br>Strict-Transport-Security: max-age=16070400; includeSubDomains</p></li><li><p>Trailer 标识给定的header字段将展示在后续的chunked编码的消息中<br>Trailer: Max-Forwards</p></li><li><p>Transfer-Encoding 设置传输实体的编码格式，目前支持的格式： chunked, compress, deflate, gzip, identity<br>Transfer-Encoding: chunked</p></li><li><p>TSV Tracking Status Value，在响应中设置给DNT(do-not-track),可能的取值<br>　　　“!” — under construction<br>　　　“?” — dynamic<br>　　　“G” — gateway to multiple parties<br>　　　“N” — not tracking<br>　　　“T” — tracking<br>　　　“C” — tracking with consent<br>　　　“P” — tracking only if consented<br>　　　“D” — disregarding DNT<br>　　　“U” — updated<br>TSV: ?</p></li><li><p>Upgrade 请求客户端升级协议<br>Upgrade: HTTP/2.0, HTTPS/1.3, IRC/6.9, RTA/x11, websocket</p></li><li><p>Vary 通知下级代理如何匹配未来的请求头已让其决定缓存的响应是否可用而不是重新从源主机请求新的<br>Example 1: Vary: *<br>Example 2: Vary: Accept-Language</p></li><li><p>Via 通知客户端代理，通过其要发送什么响应<br>Via: 1.0 fred, 1.1 example.com (Apache/1.1)</p></li><li><p>Warning 实体可能会发生的问题的通用警告<br>Warning: 199 Miscellaneous warning</p></li><li><p>WWW-Authenticate 标识访问请求实体的身份验证方案<br>WWW-Authenticate: Basic</p></li><li><p>X-Frame-Options 点击劫持保护：<br>　　　deny frame中不渲染<br>　　　sameorigin 如果源不匹配不渲染<br>　　　allow-from 允许指定位置访问<br>　　　allowall 不标准，允许任意位置访问<br>X-Frame-Options: deny</p></li></ul><h3 id="常用非标准响应头字段"><a href="#常用非标准响应头字段" class="headerlink" title="常用非标准响应头字段"></a>常用非标准响应头字段</h3><ul><li><p>X-XSS-Protection 过滤跨站脚本<br>X-XSS-Protection: 1; mode=block</p></li><li><p>Content-Security-Policy, X-Content-Security-Policy,X-WebKit-CSP 定义内容安全策略<br>X-WebKit-CSP: default-src ‘self’</p></li><li><p>X-Content-Type-Options 唯一的取值是””,阻止IE在响应中嗅探定义的内容格式以外的其他MIME格式<br>X-Content-Type-Options: nosniff</p></li><li><p>X-Powered-By 指定支持web应用的技术<br>X-Powered-By: PHP/5.4.0</p></li><li><p>X-UA-Compatible 推荐首选的渲染引擎来展示内容，通常向后兼容，也用于激活IE中内嵌chrome框架插件<br><meta http-equiv="X-UA-Compatible" content="chrome=1"><br>X-UA-Compatible: IE=EmulateIE7<br>X-UA-Compatible: IE=edge<br>X-UA-Compatible: Chrome=1</p></li><li><p>X-Content-Duration 提供音视频的持续时间，单位是秒，只有Gecko内核浏览器支持<br>X-Content-Duration: 42.666</p></li><li><p>Upgrade-Insecure-Requests 标识服务器是否可以处理HTTPS协议<br>Upgrade-Insecure-Requests: 1</p></li><li><p>X-Request-ID,X-Correlation-ID 标识一个客户端和服务端的请求<br>X-Request-ID: f058ebd6-02f7-4d3f-942e-904344e8cde5</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;http请求头和返回头字段的解释&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
    
      <category term="网络基础" scheme="/tags/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>ajax携带cookie</title>
    <link href="/2019/04/15/ajax%E6%90%BA%E5%B8%A6cookie/"/>
    <id>/2019/04/15/ajax携带cookie/</id>
    <published>2019-04-15T08:39:46.000Z</published>
    <updated>2019-04-15T08:59:48.714Z</updated>
    
    <content type="html"><![CDATA[<p>ajax同域和跨域情况下携带cookie问题<br><a id="more"></a></p><h2 id="ajax携带cookie"><a href="#ajax携带cookie" class="headerlink" title="ajax携带cookie"></a>ajax携带cookie</h2><p>这是一个老生常谈的问题，但是时间长了总容易忘掉，今天记录下来，以便下次方便记起来。</p><p>首先，今天我遇到了一个坑，chrome浏览无论是同域还是跨域状态下，浏览器request headers里居然都不显示，刚开始我还以为是设置错了，后来发现其他浏览器都显示，我想有可能是chrome浏览器安全考虑吧，但是，这并不影响后台接收，只是不显示而已。</p><p>同域下无可厚非，什么都不用做就会带上cookie。</p><p>跨域下的设置：<br>浏览器端，需要设置withCredentials为true<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原生方式</span></span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.open(<span class="string">'GET'</span>, <span class="string">'http://example.com/'</span>, <span class="literal">true</span>);</span><br><span class="line">xhr.withCredentials = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// jquery方式</span></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">        url: <span class="string">"http://192.168.252.12:3006/post_form"</span>,</span><br><span class="line">        type: <span class="string">'POST'</span>,</span><br><span class="line">        xhrFields: &#123;</span><br><span class="line">            withCredentials: <span class="literal">true</span> <span class="comment">// 这里设置了withCredentials</span></span><br><span class="line">        &#125;,</span><br><span class="line">        success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(data)</span><br><span class="line">        &#125;,</span><br><span class="line">        error: <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.error(err)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// axios方式</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>;</span><br><span class="line">axios.defaults.withCredentials = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure></p><p>再来说说后端的设置，以nodejs的express为例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回头设置</span></span><br><span class="line">res.header(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"http://localhost:9000"</span>); <span class="comment">// 注意，这里不能写*,应该是具体的地址</span></span><br><span class="line">res.header(<span class="string">"Access-Control-Allow-Credentials"</span>, <span class="string">"true"</span>);</span><br></pre></td></tr></table></figure></p><p>最后附上demo代码：<br>前端<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">  &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">  &lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"ie=edge"</span>&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">  &lt;script src="jquery.js"&gt;&lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp">  ajax cookie demo</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  $.ajax(&#123;</span><br><span class="line">            url: <span class="string">"http://192.168.252.12:3006/post_form"</span>,</span><br><span class="line">            type: <span class="string">'POST'</span>,</span><br><span class="line">            xhrFields: &#123;</span><br><span class="line">                withCredentials: <span class="literal">true</span> <span class="comment">// 这里设置了withCredentials</span></span><br><span class="line">            &#125;,</span><br><span class="line">            success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(data)</span><br><span class="line">            &#125;,</span><br><span class="line">            error: <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.error(err)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure></p><p>后端<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"><span class="keyword">var</span> multiparty = <span class="built_in">require</span>(<span class="string">'multiparty'</span>);</span><br><span class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>);</span><br><span class="line"><span class="keyword">var</span> cookieParser = <span class="built_in">require</span>(<span class="string">'cookie-parser'</span>); </span><br><span class="line"></span><br><span class="line">app.set(<span class="string">'port'</span>,process.env.PORT || <span class="number">3006</span>);   <span class="comment">//设置端口</span></span><br><span class="line"></span><br><span class="line">app.all(<span class="string">'*'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    res.header(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"http://localhost:9000"</span>);</span><br><span class="line">    res.header(<span class="string">"Access-Control-Allow-Credentials"</span>, <span class="string">"true"</span>);</span><br><span class="line"></span><br><span class="line">    res.header(<span class="string">"Access-Control-Allow-Headers"</span>, <span class="string">"client-token,Content-Type,Content-Length, Authorization, Accept,X-Requested-With"</span>);</span><br><span class="line">    res.header(<span class="string">"Access-Control-Allow-Methods"</span>,<span class="string">"PUT,POST,GET,DELETE,OPTIONS"</span>);</span><br><span class="line">    res.header(<span class="string">"X-Powered-By"</span>,<span class="string">' 3.2.1'</span>);</span><br><span class="line">    <span class="keyword">if</span>(req.method==<span class="string">"OPTIONS"</span>) res.send(<span class="number">200</span>); <span class="comment">//让options请求快速返回</span></span><br><span class="line">    <span class="keyword">else</span>  next();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用static中间件 制定public目录为静态资源目录,其中资源不会经过任何处理</span></span><br><span class="line">app.use(express.static(__dirname + <span class="string">'/public'</span>));</span><br><span class="line">app.use(bodyParser.json()); <span class="comment">// for parsing application/json</span></span><br><span class="line">app.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">true</span> &#125;)); <span class="comment">// for parsing application/x-www-form-urlencoded</span></span><br><span class="line">app.use(cookieParser()); <span class="comment">// cookie解析</span></span><br><span class="line"></span><br><span class="line">app.post(<span class="string">'/post_form'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> data = &#123;</span><br><span class="line">            name: req.body.name,</span><br><span class="line">            info: req.body.info,</span><br><span class="line">            hostName: req.hostname</span><br><span class="line">        &#125;;</span><br><span class="line">        res.cookie(<span class="string">"add"</span>, <span class="string">'test456'</span>, &#123;<span class="attr">maxAge</span>: <span class="number">900000</span>, <span class="attr">httpOnly</span>: <span class="literal">true</span>&#125;); <span class="comment">// 设置cookie</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'cookie-&gt;'</span> + req.cookies.add); <span class="comment">// 读取cookie</span></span><br><span class="line">        res.send(data);  </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(app.get(<span class="string">'port'</span>), <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">'服务器启动完成，端口为： '</span>+app.get(<span class="string">'port'</span>) );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ajax同域和跨域情况下携带cookie问题&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
    
      <category term="ajax" scheme="/tags/ajax/"/>
    
  </entry>
  
</feed>
