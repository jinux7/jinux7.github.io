<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>jinux</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="/"/>
  <updated>2019-07-24T09:09:10.064Z</updated>
  <id>/</id>
  
  <author>
    <name>jinux</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>模块化CommonJS与AMD的手写实现</title>
    <link href="/2019/07/24/%E6%A8%A1%E5%9D%97%E5%8C%96CommonJS%E4%B8%8EAMD%E7%9A%84%E6%89%8B%E5%86%99%E5%AE%9E%E7%8E%B0/"/>
    <id>/2019/07/24/模块化CommonJS与AMD的手写实现/</id>
    <published>2019-07-24T08:34:06.000Z</published>
    <updated>2019-07-24T09:09:10.064Z</updated>
    
    <content type="html"><![CDATA[<p>javascript模块化CommonJS与AMD是如何实现的<br><a id="more"></a></p><h2 id="模块化CommonJS与AMD的手写实现"><a href="#模块化CommonJS与AMD的手写实现" class="headerlink" title="模块化CommonJS与AMD的手写实现"></a>模块化CommonJS与AMD的手写实现</h2><p>现在的前端开发都采用的模块化思想，之前都是使用全局变量，但是弊端这里就不过多描述了。<br>模块化有CommonJS,AMD,CMD,ES6的模块新规范这4种，今天我们来实现以下CommonJS和AMD的规范。</p><h3 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h3><p>首先，CommonJS一般都用在nodejs里，写法如下:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入</span></span><br><span class="line"><span class="keyword">const</span> someFun= <span class="built_in">require</span>(<span class="string">'./moduleA'</span>);</span><br><span class="line">someFun();</span><br><span class="line"><span class="comment">// 导出</span></span><br><span class="line"><span class="built_in">module</span>.exports = someFunc;</span><br></pre></td></tr></table></figure></p><p>我们来看一下简单的实现方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a.js</span></span><br><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">let</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">let</span> b = req(<span class="string">'./b.js'</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">req</span>(<span class="params">mod</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> filename = path.join(__dirname, mod);</span><br><span class="line">    <span class="keyword">let</span> content = fs.readFileSync(filename, <span class="string">'utf8'</span>);</span><br><span class="line">    <span class="keyword">let</span> fn = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'exports'</span>, <span class="string">'require'</span>, <span class="string">'module'</span>, <span class="string">'__filename'</span>, <span class="string">'__dirname'</span>, content + <span class="string">'\n return module.exports;'</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="built_in">module</span> = &#123;</span><br><span class="line">        exports: &#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> fn(<span class="built_in">module</span>.exports, req, <span class="built_in">module</span>, __filename, __dirname);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// b.js</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'bbb'</span>);</span><br><span class="line">exports.name = <span class="string">'zfpx'</span>;</span><br></pre></td></tr></table></figure></p><h3 id="AMD"><a href="#AMD" class="headerlink" title="AMD"></a>AMD</h3><p>我们再来看看AMD规范，AMD规范的实现库是大名鼎鼎requirejs<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个模块</span></span><br><span class="line">define(<span class="string">'a'</span>, [], <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'a'</span>;</span><br><span class="line">&#125;);</span><br><span class="line">define(<span class="string">'b'</span>, [<span class="string">'a'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + <span class="string">'b'</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 导入和使用</span></span><br><span class="line"><span class="built_in">require</span>([<span class="string">'b'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">b</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(b);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>简单的实现<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> factories = &#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">define</span>(<span class="params">modName, dependencies, factory</span>) </span>&#123;</span><br><span class="line">    factory.dependencies = dependencies;</span><br><span class="line">    factories[modName] = factory;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">require</span>(<span class="params">modNames, callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> loadedModNames = modNames.map(<span class="function"><span class="keyword">function</span> (<span class="params">modName</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> factory = factories[modName];</span><br><span class="line">        <span class="keyword">let</span> dependencies = factory.dependencies;</span><br><span class="line">        <span class="keyword">let</span> exports;</span><br><span class="line">        <span class="built_in">require</span>(dependencies, <span class="function"><span class="keyword">function</span> (<span class="params">...dependencyMods</span>) </span>&#123;</span><br><span class="line">            exports = factory.apply(<span class="literal">null</span>, dependencyMods);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> exports;</span><br><span class="line">    &#125;)</span><br><span class="line">    callback.apply(<span class="literal">null</span>, loadedModNames);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="ES6-模块化"><a href="#ES6-模块化" class="headerlink" title="ES6 模块化"></a>ES6 模块化</h3><p>ES6 模块化是ECMA提出的JavaScript模块化规范，它在语言的层面上实现了模块化。浏览器厂商和Node.js 都宣布要原生支持该规范。它将逐渐取代CommonJS和AMD`规范，成为浏览器和服务器通用的模块解决方案。 采用 ES6 模块化导入及导出时的代码如下<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入</span></span><br><span class="line"><span class="keyword">import</span> &#123; name &#125; <span class="keyword">from</span> <span class="string">'./person.js'</span>;</span><br><span class="line"><span class="comment">// 导出</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> name = <span class="string">'zfpx'</span>;</span><br></pre></td></tr></table></figure></p><p>ES6模块虽然是终极模块化方案，但它的缺点在于目前无法直接运行在大部分 JavaScript 运行环境下，必须通过工具转换成标准的 ES5 后才能正常运行。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;javascript模块化CommonJS与AMD是如何实现的&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
    
      <category term="基础知识" scheme="/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>javascript的FileReader类</title>
    <link href="/2019/07/24/javascript%E7%9A%84FileReader%E7%B1%BB/"/>
    <id>/2019/07/24/javascript的FileReader类/</id>
    <published>2019-07-24T06:23:49.000Z</published>
    <updated>2019-07-24T06:38:19.576Z</updated>
    
    <content type="html"><![CDATA[<p>javascript的FileReader类<br><a id="more"></a></p><h2 id="javascript的FileReader类"><a href="#javascript的FileReader类" class="headerlink" title="javascript的FileReader类"></a>javascript的FileReader类</h2><p>现在，我们在前端对文件处理的需求已经慢慢增加了，比如，前端上传图片的回显，还有excel文件的解析等，都需要FileReader这个类来实现，这个类有4个方法:</p><ul><li>FileReader.readAsBinaryString(Blob|File)</li><li>FileReader.readAsText(Blob|File, opt_encoding)</li><li>FileReader.readAsDataURL(Blob|File)</li><li>FileReader.readAsArrayBuffer(Blob|File)</li></ul><hr><p>这里，具体的使用方法不过多介绍，详情<a href="https://www.html5rocks.com/en/tutorials/file/dndfiles/" target="_blank" rel="noopener">点击这里</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;javascript的FileReader类&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
    
      <category term="基础知识" scheme="/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>移动端利用hammer制作移动缩放旋转功能</title>
    <link href="/2019/07/16/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%88%A9%E7%94%A8hammer%E5%88%B6%E4%BD%9C%E7%A7%BB%E5%8A%A8%E7%BC%A9%E6%94%BE%E6%97%8B%E8%BD%AC%E5%8A%9F%E8%83%BD/"/>
    <id>/2019/07/16/移动端利用hammer制作移动缩放旋转功能/</id>
    <published>2019-07-16T01:43:08.000Z</published>
    <updated>2019-07-16T02:33:28.704Z</updated>
    
    <content type="html"><![CDATA[<p>移动端利用hammer制作移动缩放旋转功能<br><a id="more"></a></p><h2 id="移动端利用hammer制作移动缩放旋转功能"><a href="#移动端利用hammer制作移动缩放旋转功能" class="headerlink" title="移动端利用hammer制作移动缩放旋转功能"></a>移动端利用hammer制作移动缩放旋转功能</h2><p>最近在项目中，有个需求是页面放大，我二话不说，直接把viewport的user-scalable属性设为yes，这倒是勉强的完成了需求的要求，但是这只是整个页面的缩放，而且初始上来的页面只能放大，并不能缩小，如果再加点需求，局部放大，这就挂了。。。。。。<br>于是乎，这几天有空闲的时候补了补关于移动端手势事件的一些知识，为了完成这几项功能，最终选了hammer这个插件，其实这类插件很多，大同小异，选一个稳定点，普及广的，还在维护的就行。当然了，不用插件，自己用原生的touchstart,touchmove,touchend事件也可以完成，但是各种算法还是很复杂的。<br>下面是几个例子：</p><h3 id="元素的缩放"><a href="#元素的缩放" class="headerlink" title="元素的缩放"></a>元素的缩放</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">  &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"user-scalable=no, width=device-width, initial-scale=1, maximum-scale=1"</span>&gt;</span><br><span class="line">  &lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"ie=edge"</span>&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">  &lt;script src="./</span>hammer.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">  &lt;!-- &lt;script src="</span>./vconsole.min.js<span class="string">"&gt;&lt;/script&gt; --&gt;</span></span><br><span class="line"><span class="string">  &lt;style&gt;</span></span><br><span class="line"><span class="string">    #myElement &#123;</span></span><br><span class="line"><span class="string">      background: silver;</span></span><br><span class="line"><span class="string">      height: 300px;</span></span><br><span class="line"><span class="string">      text-align: center;</span></span><br><span class="line"><span class="string">      font: 30px/300px Helvetica, Arial, sans-serif;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &lt;/style&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">  &lt;div id="</span>myElement<span class="string">"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;script&gt;</span></span><br><span class="line"><span class="string">// var vConsole = new VConsole();</span></span><br><span class="line"><span class="string">  var scale = 1, old_scale;</span></span><br><span class="line"><span class="string">  var myElement = document.getElementById('myElement');</span></span><br><span class="line"><span class="string">  var mc = new Hammer.Manager(myElement);</span></span><br><span class="line"><span class="string">  // pinch</span></span><br><span class="line"><span class="string">  var pinch = new Hammer.Pinch();</span></span><br><span class="line"><span class="string">  // add to the Manager</span></span><br><span class="line"><span class="string">  mc.add([pinch]);</span></span><br><span class="line"><span class="string">  // pinch事件</span></span><br><span class="line"><span class="string">  mc.on("</span>pinchstart<span class="string">", function(ev) &#123;</span></span><br><span class="line"><span class="string">    // 注意这里1</span></span><br><span class="line"><span class="string">    old_scale = scale;</span></span><br><span class="line"><span class="string">  &#125;);</span></span><br><span class="line"><span class="string">  mc.on("</span>pinchmove<span class="string">", function(ev) &#123;</span></span><br><span class="line"><span class="string">    // 注意这里2</span></span><br><span class="line"><span class="string">    scale =ev.scale + old_scale-1;</span></span><br><span class="line"><span class="string">    // myElement.style.transform = `scale($&#123;scale&#125;)`;</span></span><br><span class="line"><span class="string">    updateTransform();</span></span><br><span class="line"><span class="string">  &#125;);</span></span><br><span class="line"><span class="string">  // 更新样式函数</span></span><br><span class="line"><span class="string">  function updateTransform() &#123;</span></span><br><span class="line"><span class="string">    var val = [</span></span><br><span class="line"><span class="string">      `scale($&#123;scale&#125;)`</span></span><br><span class="line"><span class="string">      // `rotate(`+deg+`deg)`</span></span><br><span class="line"><span class="string">    ];</span></span><br><span class="line"><span class="string">    myElement.style.transform = val.join(' ');</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure><h3 id="元素的旋转"><a href="#元素的旋转" class="headerlink" title="元素的旋转"></a>元素的旋转</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">  &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"user-scalable=no, width=device-width, initial-scale=1, maximum-scale=1"</span>&gt;</span><br><span class="line">  &lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"ie=edge"</span>&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">  &lt;script src="./</span>hammer.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">  &lt;!-- &lt;script src="</span>./vconsole.min.js<span class="string">"&gt;&lt;/script&gt; --&gt;</span></span><br><span class="line"><span class="string">  &lt;style&gt;</span></span><br><span class="line"><span class="string">    #myElement &#123;</span></span><br><span class="line"><span class="string">      background: silver;</span></span><br><span class="line"><span class="string">      height: 300px;</span></span><br><span class="line"><span class="string">      text-align: center;</span></span><br><span class="line"><span class="string">      font: 30px/300px Helvetica, Arial, sans-serif;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &lt;/style&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">  &lt;div id="</span>myElement<span class="string">"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;script&gt;</span></span><br><span class="line"><span class="string">// var vConsole = new VConsole();</span></span><br><span class="line"><span class="string">  var deg = 0, init_deg=0, rotate_deg, start_deg, pre_deg, flag_deg;</span></span><br><span class="line"><span class="string">  var myElement = document.getElementById('myElement');</span></span><br><span class="line"><span class="string">  var mc = new Hammer.Manager(myElement);</span></span><br><span class="line"><span class="string">  // rotate</span></span><br><span class="line"><span class="string">  var rotate = new Hammer.Rotate();</span></span><br><span class="line"><span class="string">  // add to the Manager</span></span><br><span class="line"><span class="string">  mc.add([rotate]);</span></span><br><span class="line"><span class="string">  // rotate事件</span></span><br><span class="line"><span class="string">  mc.on("</span>rotatestart<span class="string">", function(ev) &#123;</span></span><br><span class="line"><span class="string">    // 注意这里1</span></span><br><span class="line"><span class="string">    start_deg = ev.rotation; // 开始旋转时记录下当前rotation的角度</span></span><br><span class="line"><span class="string">    flag_deg = 0;</span></span><br><span class="line"><span class="string">  &#125;);</span></span><br><span class="line"><span class="string">  mc.on("</span>rotatemove<span class="string">", function(ev) &#123;</span></span><br><span class="line"><span class="string">    // 注意这里2</span></span><br><span class="line"><span class="string">    rotate_deg = ev.rotation - start_deg; // rotation的角度减去开始旋转的角度就是转过了多少角度</span></span><br><span class="line"><span class="string">    deg = init_deg + rotate_deg; // 元素旋转之前的角度 + 旋转了多少角度是当前元素的状态</span></span><br><span class="line"><span class="string">    // myElement.style.transform = `rotate(`+deg+`deg)`;</span></span><br><span class="line"><span class="string">    updateTransform();</span></span><br><span class="line"><span class="string">  &#125;);</span></span><br><span class="line"><span class="string">  mc.on("</span>rotateend<span class="string">", function(ev) &#123;</span></span><br><span class="line"><span class="string">    // 注意这里3</span></span><br><span class="line"><span class="string">      init_deg = deg; // 旋转结束时别忘了把当前角度状态赋值给初始化角度，以便下次旋转时接着上次的角度转</span></span><br><span class="line"><span class="string">  &#125;);</span></span><br><span class="line"><span class="string">  // 更新样式函数</span></span><br><span class="line"><span class="string">  function updateTransform() &#123;</span></span><br><span class="line"><span class="string">    var val = [</span></span><br><span class="line"><span class="string">      // `scale($&#123;scale&#125;)`</span></span><br><span class="line"><span class="string">      `rotate(`+deg+`deg)`</span></span><br><span class="line"><span class="string">    ];</span></span><br><span class="line"><span class="string">    myElement.style.transform = val.join(' ');</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure><p>最后，附上一个拖拽，缩放，旋转的</p><h3 id="拖拽，缩放，旋转"><a href="#拖拽，缩放，旋转" class="headerlink" title="拖拽，缩放，旋转"></a>拖拽，缩放，旋转</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">  &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"user-scalable=no, width=device-width, initial-scale=1, maximum-scale=1"</span>&gt;</span><br><span class="line">  &lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"ie=edge"</span>&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">  &lt;script src="./</span>hammer.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">  &lt;!-- &lt;script src="</span>./vconsole.min.js<span class="string">"&gt;&lt;/script&gt; --&gt;</span></span><br><span class="line"><span class="string">  &lt;style&gt;</span></span><br><span class="line"><span class="string">    #myElement &#123;</span></span><br><span class="line"><span class="string">      background: silver;</span></span><br><span class="line"><span class="string">      width: 250px;</span></span><br><span class="line"><span class="string">      height: 250px;</span></span><br><span class="line"><span class="string">      text-align: center;</span></span><br><span class="line"><span class="string">      font: 30px/300px Helvetica, Arial, sans-serif;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &lt;/style&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">  &lt;div id="</span>myElement<span class="string">"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;script&gt;</span></span><br><span class="line"><span class="string">  var reqAnimationFrame = (function () &#123;</span></span><br><span class="line"><span class="string">      return window[Hammer.prefixed(window, 'requestAnimationFrame')] || function (callback) &#123;</span></span><br><span class="line"><span class="string">          window.setTimeout(callback, 1000 / 60);</span></span><br><span class="line"><span class="string">      &#125;;</span></span><br><span class="line"><span class="string">  &#125;)();</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">  var el = document.querySelector("#myElement");</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> START_X = <span class="built_in">Math</span>.round((<span class="built_in">window</span>.innerWidth - el.offsetWidth) / <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">var</span> START_Y = <span class="built_in">Math</span>.round((<span class="built_in">window</span>.innerHeight - el.offsetHeight) / <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> ticking = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">var</span> transform;   <span class="comment">//图像效果</span></span><br><span class="line">  <span class="keyword">var</span> timer;</span><br><span class="line">  <span class="keyword">var</span> initAngle = <span class="number">0</span>;  <span class="comment">//旋转角度</span></span><br><span class="line">  <span class="keyword">var</span> initScale = <span class="number">1</span>;  <span class="comment">//放大倍数</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> mc = <span class="keyword">new</span> Hammer.Manager(el);   <span class="comment">//用管理器  可以同时触发旋转 拖拽  移动</span></span><br><span class="line">  <span class="comment">//var mc = new Hammer(el);      //旋转和移动互斥</span></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  ev.srcEvent.type  touchstart  touchend touchmove</span></span><br><span class="line"><span class="comment">  ev.deltaX  手势移动位移变量  </span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  mc.add(<span class="keyword">new</span> Hammer.Pan(&#123; <span class="attr">threshold</span>: <span class="number">0</span>, <span class="attr">pointers</span>: <span class="number">0</span> &#125;));  </span><br><span class="line">  mc.add(<span class="keyword">new</span> Hammer.Rotate(&#123; <span class="attr">threshold</span>: <span class="number">0</span> &#125;)).recognizeWith(mc.get(<span class="string">'pan'</span>));</span><br><span class="line">  mc.add(<span class="keyword">new</span> Hammer.Pinch(&#123; <span class="attr">threshold</span>: <span class="number">0</span> &#125;)).recognizeWith([mc.get(<span class="string">'pan'</span>), mc.get(<span class="string">'rotate'</span>)]);</span><br><span class="line">  <span class="comment">//结束时做一些处理</span></span><br><span class="line">  mc.on(<span class="string">"hammer.input"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(ev.isFinal) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(START_X+<span class="string">"  "</span>+transform.translate.x  +<span class="string">"   "</span>+ev.deltaX);</span><br><span class="line">    START_X = transform.translate.x ;</span><br><span class="line">    START_Y = transform.translate.y ;</span><br><span class="line">      &#125;</span><br><span class="line">    </span><br><span class="line">  &#125;);</span><br><span class="line">  mc.on(<span class="string">"panstart panmove"</span>, onPan);</span><br><span class="line">  mc.on(<span class="string">"rotatestart rotatemove rotateend"</span>, onRotate);</span><br><span class="line">  mc.on(<span class="string">"pinchstart pinchmove"</span>, onPinch);</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  第二次进入拖拽时  delta位移重置</span></span><br><span class="line"><span class="comment">  移动时 初始位置startxy不动。delta增加</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">onPan</span>(<span class="params">ev</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!ev.isFinal) &#123;</span><br><span class="line">     el.className = <span class="string">''</span>;</span><br><span class="line">      <span class="built_in">console</span>.log(START_X   +<span class="string">"  "</span>+  START_Y +<span class="string">" |  "</span>+ev.deltaX   +<span class="string">"  "</span>+  ev.deltaY);</span><br><span class="line">        transform.translate = &#123;</span><br><span class="line">          x: START_X + ev.deltaX,</span><br><span class="line">          y: START_Y + ev.deltaY</span><br><span class="line">        &#125;;</span><br><span class="line">        requestElementUpdate();</span><br><span class="line">    &#125;   </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">onPinch</span>(<span class="params">ev</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ev.type == <span class="string">'pinchstart'</span>) &#123;</span><br><span class="line">      initScale = transform.scale || <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    el.className = <span class="string">''</span>;</span><br><span class="line">    transform.scale = initScale * ev.scale;</span><br><span class="line">    requestElementUpdate();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//旋转相关</span></span><br><span class="line">  <span class="keyword">var</span>  preAngle =<span class="number">0</span> ;</span><br><span class="line">  <span class="keyword">var</span>  tempAngleFlag=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span>  deltaAngle = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span>  startRotateAngle = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">onRotate</span>(<span class="params">ev</span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//点下第二个触控点时触发</span></span><br><span class="line">      <span class="keyword">if</span>(ev.type == <span class="string">'rotatestart'</span>) &#123;    </span><br><span class="line">        startRotateAngle =  ev.rotation ; </span><br><span class="line">        tempAngleFlag = <span class="number">0</span> ;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">if</span>(ev.type == <span class="string">'rotatemove'</span>)&#123;</span><br><span class="line">      <span class="keyword">if</span>(tempAngleFlag == <span class="number">0</span>)&#123;</span><br><span class="line">        preAngle = startRotateAngle;</span><br><span class="line">        tempAngleFlag ++;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        deltaAngle = ev.rotation - preAngle;</span><br><span class="line">        el.className = <span class="string">''</span>;</span><br><span class="line">        transform.rz = <span class="number">1</span>;  <span class="comment">//非0  垂直xy轴</span></span><br><span class="line">        transform.angle =initAngle + deltaAngle;</span><br><span class="line">        requestElementUpdate();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">    <span class="comment">//旋转结束  记录当前图片角度</span></span><br><span class="line">    <span class="keyword">if</span>(ev.type ==<span class="string">'rotateend'</span>)&#123;</span><br><span class="line">      initAngle = transform.angle;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">updateElementTransform</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> value = [</span><br><span class="line">                  <span class="string">'translate3d('</span> + transform.translate.x + <span class="string">'px, '</span> + transform.translate.y + <span class="string">'px, 0)'</span>,</span><br><span class="line">                  <span class="string">'scale('</span> + transform.scale + <span class="string">', '</span> + transform.scale + <span class="string">')'</span>,</span><br><span class="line">                  <span class="string">'rotate3d('</span>+ transform.rx +<span class="string">','</span>+ transform.ry +<span class="string">','</span>+ transform.rz +<span class="string">','</span>+  transform.angle + <span class="string">'deg)'</span></span><br><span class="line">      ];</span><br><span class="line"></span><br><span class="line">      value = value.join(<span class="string">" "</span>);</span><br><span class="line">      el.style.webkitTransform = value;  <span class="comment">/*为Chrome/Safari*/</span></span><br><span class="line">      el.style.mozTransform = value; <span class="comment">/*为Firefox*/</span></span><br><span class="line">      el.style.transform = value; <span class="comment">/*IE Opera?*/</span></span><br><span class="line">      ticking = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">requestElementUpdate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(!ticking) &#123;</span><br><span class="line">          reqAnimationFrame(updateElementTransform);</span><br><span class="line">          ticking = <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  初始化设置</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">resetElement</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">      el.className = <span class="string">'animate'</span>;</span><br><span class="line">     transform = &#123;</span><br><span class="line">          translate: &#123; <span class="attr">x</span>: START_X, <span class="attr">y</span>: START_Y &#125;,</span><br><span class="line">          scale: <span class="number">1</span>,</span><br><span class="line">          angle: <span class="number">0</span>,</span><br><span class="line">          rx: <span class="number">0</span>,</span><br><span class="line">          ry: <span class="number">0</span>,</span><br><span class="line">          rz: <span class="number">0</span></span><br><span class="line">      &#125;;</span><br><span class="line">      requestElementUpdate();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  resetElement();</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure><p>最后，附上github源码地址，<a href="https://github.com/jinux7/study-collections/tree/master/移动端利用hammer制作移动缩放旋转功能" target="_blank" rel="noopener">点这里</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;移动端利用hammer制作移动缩放旋转功能&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
    
      <category term="移动端" scheme="/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>实现一个串行异步执行类</title>
    <link href="/2019/07/08/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E4%B8%B2%E8%A1%8C%E5%BC%82%E6%AD%A5%E6%89%A7%E8%A1%8C%E7%B1%BB/"/>
    <id>/2019/07/08/实现一个串行异步执行类/</id>
    <published>2019-07-08T05:56:34.000Z</published>
    <updated>2019-07-08T06:12:19.392Z</updated>
    
    <content type="html"><![CDATA[<p>写一个按顺序执行操作的类工具<br><a id="more"></a></p><h2 id="实现一个串行异步执行类"><a href="#实现一个串行异步执行类" class="headerlink" title="实现一个串行异步执行类"></a>实现一个串行异步执行类</h2><p>今天在学习webpack源码时，看到了webpack的核心模块tapable，里边有很多方法，其中之一就是串行异步执行方法，于是，自己准备实现一个简单的，其实很简单，见下面的代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明类SerialAsync</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SerialAsync</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.arrFns = [];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 原型链上添加addFn方法</span></span><br><span class="line">SerialAsync.prototype.addFn = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.arrFns.push(fn);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 原型链上添加emitFn方法</span></span><br><span class="line">SerialAsync.prototype.emitFn = <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> self = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// next是核心代码</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">next</span>(<span class="params">par</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> fn = self.arrFns[index++];</span><br><span class="line">    fn?fn(next):callback(par);</span><br><span class="line">  &#125;</span><br><span class="line">  next();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// SerialAsync结束</span></span><br><span class="line"><span class="comment">// 是不是超级的简单，就15行代码，记住，核心代码是next方法</span></span><br><span class="line"><span class="comment">// 下面是具体的使用</span></span><br><span class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> SerialAsync();</span><br><span class="line">s.addFn(<span class="function"><span class="keyword">function</span>(<span class="params">done</span>)</span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">    done(<span class="number">1</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;);</span><br><span class="line">s.addFn(<span class="function"><span class="keyword">function</span>(<span class="params">done</span>)</span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">    done(<span class="number">2</span>);</span><br><span class="line">  &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;);</span><br><span class="line">s.addFn(<span class="function"><span class="keyword">function</span>(<span class="params">done</span>)</span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">5</span>);</span><br><span class="line">    done(<span class="number">2</span>);</span><br><span class="line">  &#125;, <span class="number">5000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.time();</span><br><span class="line">s.emitFn(<span class="function">(<span class="params">par</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'over-&gt;'</span>, par);</span><br><span class="line">  <span class="built_in">console</span>.timeEnd();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>可以看到，最关键部分就是next函数，有个递归的过程，据说，nodejs中很多类似的串行方法都是这么实现的，一定要记住哦。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;写一个按顺序执行操作的类工具&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
    
      <category term="工具库" scheme="/tags/%E5%B7%A5%E5%85%B7%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>js中小数精度问题</title>
    <link href="/2019/07/04/js%E4%B8%AD%E5%B0%8F%E6%95%B0%E7%B2%BE%E5%BA%A6%E9%97%AE%E9%A2%98/"/>
    <id>/2019/07/04/js中小数精度问题/</id>
    <published>2019-07-04T03:13:00.000Z</published>
    <updated>2019-07-04T05:17:06.012Z</updated>
    
    <content type="html"><![CDATA[<p>js中的小数精度问题分析<br><a id="more"></a></p><h2 id="js中小数精度问题"><a href="#js中小数精度问题" class="headerlink" title="js中小数精度问题"></a>js中小数精度问题</h2><p>我们在日常开发中，是否遇到过0.1+0.2，一看马上答案就出来了，0.3啊，多么简单的加法，但是，如果你在代码里运行一下，结果出乎意料哦，是0.30000000000000004，哈哈，有意思吧，不仅在js中这样，java，python等语言都是这个德行。<br>奇怪了，这是为什么呢？这就需要了解一下小数在计算机中的存储方式了。<br>我在这里只说小数部分的保存方式。<br>先来说一下小数如何存储，如0.6：</p><ul><li>将该数字乘以2，取出整数部分作为二进制表示的第1位；然后再将小数部分乘以2，将得到的整数部分作为二进制表示的第2位；以此类推，直到小数部分为0。 </li><li>特殊情况： 小数部分出现循环，无法停止，则用有限的二进制位无法准确表示一个小数，这也是在编程语言中表示小数会出现误差的原因<br>再具体的分步骤看一下：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0.6</span> * <span class="number">2</span> = <span class="number">1.2</span> —————— <span class="number">1</span> </span><br><span class="line"><span class="number">0.2</span> * <span class="number">2</span> = <span class="number">0.4</span> —————— <span class="number">0</span> </span><br><span class="line"><span class="number">0.4</span> * <span class="number">2</span> = <span class="number">0.8</span> —————— <span class="number">0</span> </span><br><span class="line"><span class="number">0.8</span> * <span class="number">2</span> = <span class="number">1.6</span> —————— <span class="number">1</span> </span><br><span class="line"><span class="number">0.6</span> * <span class="number">2</span> = <span class="number">1.2</span> —————— <span class="number">1</span> </span><br><span class="line">…………</span><br></pre></td></tr></table></figure></li></ul><p>我们可以发现在该计算中已经出现了循环，0.6用二进制表示为 1001 1001 1001 1001 ……<br>如果是10.6，那个10.6的完整二进制表示为 1010.100110011001……<br>通过上边的解释，就知道为什么有的小数在js里会出现精度不准的问题了吧，接下来，我们再看看二进制小数如何还原成十进制。<br>我们还拿0.6这个小数来举例子,1001 1001 1001 1001 :</p><ul><li>从左到右，v[i] * 2^( - i ), i 为从左到右的index，v[i]为该位的值，直接看例子，很直接的<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0.6</span> = <span class="number">1</span> * <span class="number">2</span>^<span class="number">-1</span> + <span class="number">0</span> * <span class="number">2</span>^<span class="number">-2</span> + <span class="number">0</span> * <span class="number">2</span>^<span class="number">-3</span> + <span class="number">1</span> * <span class="number">2</span>^<span class="number">-4</span> + ……</span><br></pre></td></tr></table></figure></li></ul><p>好了，通过上面大概的了解了小数为什么精度有时候不准的问题，这也只是粗略的理解一下而已，具体在各种语言中运行时可能情况会很复杂，我就点到而止了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;js中的小数精度问题分析&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
    
      <category term="基础知识" scheme="/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>js中的递归总结</title>
    <link href="/2019/07/02/js%E4%B8%AD%E7%9A%84%E9%80%92%E5%BD%92%E6%80%BB%E7%BB%93/"/>
    <id>/2019/07/02/js中的递归总结/</id>
    <published>2019-07-02T01:54:14.000Z</published>
    <updated>2019-07-03T06:04:30.800Z</updated>
    
    <content type="html"><![CDATA[<p>js中各种递归的知识总结<br><a id="more"></a></p><h2 id="js中的递归总结"><a href="#js中的递归总结" class="headerlink" title="js中的递归总结"></a>js中的递归总结</h2><p>递归，在我们平时编程中用到的地方很多，但是，对我而然，它是又熟悉又陌生，也就是说，不能熟练地应用到具体的实际业务代码中，所以，我想好好总结总结，以便可以更好地使用它。</p><h3 id="数字递归-最简单的入门"><a href="#数字递归-最简单的入门" class="headerlink" title="数字递归(最简单的入门)"></a>数字递归(最简单的入门)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加法的递归</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (num === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> num + sum(--num)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">sum(<span class="number">4</span>); <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 再来一个阶乘的递归</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(num === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> num*fn(num<span class="number">-1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">fn(<span class="number">5</span>) <span class="comment">// 120</span></span><br></pre></td></tr></table></figure><h3 id="数组递归"><a href="#数组递归" class="headerlink" title="数组递归"></a>数组递归</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组中的各个元素相加之和</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(arr.length === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> arr[<span class="number">0</span>];</span><br><span class="line">  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> val = arr.shift();</span><br><span class="line">    <span class="keyword">return</span> val + fn(arr);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">fn([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]) <span class="comment">// 55</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将嵌套的多维数组转成一纬数组</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,[<span class="number">7</span>,[<span class="number">8</span>,[<span class="number">9</span>,<span class="number">10</span>]]]],<span class="number">11</span>,[<span class="number">12</span>]];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">transformArr</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> newArr = [];</span><br><span class="line">  recursiveArr(arr, newArr);</span><br><span class="line">  <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">recursiveArr</span>(<span class="params">arr, newArr</span>) </span>&#123;</span><br><span class="line">  arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(item <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">      recursiveArr(item, newArr);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">      newArr.push(item);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(transformArr(arr), <span class="string">'@_@'</span>);</span><br><span class="line"><span class="comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一纬数组，元素都是对象，互相有父子关系，将这些数组转换成父子结构的对象格式</span></span><br><span class="line"><span class="comment">// 数据，parentId是其父节点的id </span></span><br><span class="line"><span class="keyword">var</span> data = [</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'数据1'</span>,</span><br><span class="line">    id: <span class="number">11</span>,</span><br><span class="line">    parentId: <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'数据2'</span>,</span><br><span class="line">    id: <span class="number">12</span>,</span><br><span class="line">    parentId: <span class="number">11</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'数据3'</span>,</span><br><span class="line">    id: <span class="number">13</span>,</span><br><span class="line">    parentId: <span class="number">11</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'数据4'</span>,</span><br><span class="line">    id: <span class="number">14</span>,</span><br><span class="line">    parentId: <span class="number">12</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'数据5'</span>,</span><br><span class="line">    id: <span class="number">15</span>,</span><br><span class="line">    parentId: <span class="number">13</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'数据6'</span>,</span><br><span class="line">    id: <span class="number">16</span>,</span><br><span class="line">    parentId: <span class="number">15</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'数据7'</span>,</span><br><span class="line">    id: <span class="number">17</span>,</span><br><span class="line">    parentId: <span class="number">16</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'数据8'</span>,</span><br><span class="line">    id: <span class="number">18</span>,</span><br><span class="line">    parentId: <span class="number">16</span></span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"><span class="comment">// transformData这个函数是辅助生成对象的函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">transformData</span>(<span class="params">data, parentId</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> obj = &#123;</span><br><span class="line">    children: []</span><br><span class="line">  &#125;;</span><br><span class="line">  generaterTree(data, obj, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// generaterTree这个函数是递归调用的核心函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generaterTree</span>(<span class="params">data, obj, parentId</span>) </span>&#123;</span><br><span class="line">  data.forEach(<span class="function"><span class="params">item</span>=&gt;</span> &#123;</span><br><span class="line">    item.children = item.children?item.children:[];</span><br><span class="line">    <span class="keyword">if</span>(item.parentId === parentId) &#123;</span><br><span class="line">      obj.children.push(item);</span><br><span class="line">      generaterTree(data, item, item.id); <span class="comment">// 继续递归回调</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">console</span>.log(transformData(data));</span><br></pre></td></tr></table></figure><h3 id="对象的递归"><a href="#对象的递归" class="headerlink" title="对象的递归"></a>对象的递归</h3><p>其实，对象的递归里边也包含了数组等的一些基础型数据，我们常用的就是对象的深拷贝<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = &#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"jinux"</span>,</span><br><span class="line">  <span class="string">"like"</span>: [<span class="string">"football"</span>,<span class="string">"basketball"</span>,<span class="string">"voliball"</span>],</span><br><span class="line">  <span class="string">"work"</span>: &#123;</span><br><span class="line">    <span class="string">"company"</span>: <span class="string">"technology"</span>,</span><br><span class="line">    <span class="string">"address"</span>: <span class="string">"hunnan"</span>,</span><br><span class="line">    <span class="string">"tongshi"</span>: [<span class="string">"lining"</span>,<span class="string">"lvnan"</span>],</span><br><span class="line">    <span class="string">"isLeader"</span>: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span> data !== <span class="string">'object'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(data === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> obj = <span class="built_in">Object</span>.prototype.toString.call(data)===<span class="string">'[object Array]'</span>?</span><br><span class="line">            []:&#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> data) &#123;</span><br><span class="line">    obj[key] = <span class="built_in">arguments</span>.callee(data[key]);</span><br><span class="line">    <span class="comment">// obj[key] = deepClone(data[key]); 与上边的一个意思</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(deepClone(data), <span class="string">"&lt;-&gt;"</span>);</span><br></pre></td></tr></table></figure></p><p>目前暂时整理这么多，以后会陆续增加递归的小demo.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;js中各种递归的知识总结&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
    
      <category term="基础知识" scheme="/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>快速创建含有多个元素的数组</title>
    <link href="/2019/07/01/%E5%BF%AB%E9%80%9F%E5%88%9B%E5%BB%BA%E5%90%AB%E6%9C%89%E5%A4%9A%E4%B8%AA%E5%85%83%E7%B4%A0%E7%9A%84%E6%95%B0%E7%BB%84/"/>
    <id>/2019/07/01/快速创建含有多个元素的数组/</id>
    <published>2019-07-01T02:17:23.000Z</published>
    <updated>2019-07-01T05:43:42.900Z</updated>
    
    <content type="html"><![CDATA[<p>快速并且简单的创建数组<br><a id="more"></a></p><h2 id="快速创建含有多个元素的数组"><a href="#快速创建含有多个元素的数组" class="headerlink" title="快速创建含有多个元素的数组"></a>快速创建含有多个元素的数组</h2><p>我们平时在开发时，有时候可能会创建一个包含20个元素的数组，之后对这个数组进行加工操作，来制作一个符合业务要求的数组。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 比如我要创建一个包含20个元素的数组</span></span><br><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> <span class="number">1</span>=<span class="number">0</span>; i&lt;<span class="number">20</span>; i++) &#123;</span><br><span class="line">  arr.push(<span class="literal">undefined</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面虽然创建了数组，但是感觉麻烦了点。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">20</span>);</span><br><span class="line"><span class="comment">// 这样创建的数组，只是有长度，但是数组里并没有元素</span></span><br><span class="line">arr.length <span class="comment">// 20</span></span><br><span class="line"><span class="number">0</span> <span class="keyword">in</span> arr <span class="comment">// false</span></span><br><span class="line"><span class="comment">// arr 这个数组使用map， forEach等方法是便利不了的</span></span><br><span class="line"><span class="comment">// 创建一个长度为20的数组，注意该数组的元素并没有被初始化</span></span><br></pre></td></tr></table></figure></p><p>好了，有几种方便的创建方式，见下面<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 首先，看一下vue官网里出现的创建方式</span></span><br><span class="line"><span class="built_in">Array</span>.apply(<span class="literal">null</span>, &#123;<span class="attr">length</span>: <span class="number">20</span>&#125;); <span class="comment">// ES5开始apply函数的第二个参数除了可以是数组外，还可以是类数组对象（即包含length属性，且length属性值是个数字的对象）</span></span><br><span class="line"><span class="comment">// 这里顺便说一下&#123;length: 20&#125;这个参数的作用</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">arguments</span>)</span><br><span class="line">&#125;</span><br><span class="line">fn(<span class="literal">undefined</span>,<span class="literal">undefined</span>,<span class="literal">undefined</span>);</span><br><span class="line">fn.apply(<span class="literal">null</span>, &#123;<span class="attr">length</span>: <span class="number">3</span>&#125;);</span><br><span class="line"><span class="comment">// 通过上面的代码，就可以看出来&#123;length: 3&#125;这个参数的含义了吧</span></span><br></pre></td></tr></table></figure></p><p>最后，总结一下可以快速创建有初始值得数组方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="built_in">Array</span>.apply(<span class="literal">null</span>, &#123;<span class="attr">length</span>: <span class="number">20</span>&#125;);</span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="built_in">Array</span>.from(&#123;<span class="attr">length</span>: <span class="number">20</span>&#125;)</span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="built_in">Array</span>(<span class="number">20</span>).fill(<span class="literal">undefined</span>)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;快速并且简单的创建数组&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
    
      <category term="基础知识" scheme="/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>手写前端自动化构建工具</title>
    <link href="/2019/06/26/%E6%89%8B%E5%86%99%E5%89%8D%E7%AB%AF%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/"/>
    <id>/2019/06/26/手写前端自动化构建工具/</id>
    <published>2019-06-26T03:13:33.000Z</published>
    <updated>2019-06-26T05:36:06.527Z</updated>
    
    <content type="html"><![CDATA[<p>写一个自己的前端自动化构建工具<br><a id="more"></a></p><h2 id="手写前端自动化构建工具"><a href="#手写前端自动化构建工具" class="headerlink" title="手写前端自动化构建工具"></a>手写前端自动化构建工具</h2><p>现在我们使用vue，react等框架来开发已经很普遍了，当我们初始化一个项目的时候，是不是在命令行下按照提示一步一步的操作，最后在本地生成了一个现成的项目，是不是感觉很快捷，很方便，用来生成这个项目的工具就叫做构建工具（有的也称之为脚手架工具）。<br>我现在需要在命令行下进行各种操作，交互，npm上已经有人写好了这类工具，常用的就是commander和inquirer,使用它们来开发脚手架，真的是好简单。<br>我写了两个小demo，一个是围绕着commander，另一个则是围绕inquirer。<br>这两个小例子都很简单，可以根据具体的要求组合到一起。<br><a href="https://github.com/jinux7/study-collections/tree/master/手写自己的构建工具" target="_blank" rel="noopener">点这里看源码</a><br>select-list.js这个文件的功能是，可以根据列表的上下选择，下载github上对应的项目模板。<br>init-commander.js这个文件的功能是，命令行里传入的文件夹名和文件名来生成新项目文件。<br>题外话，这里还可以制作成系统命令，在package.json里的bin字段下。<br>如果，都配置好了，就可以使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm link</span><br></pre></td></tr></table></figure></p><p>这个命令，把bin字段下的内容生成系统命令，这是一种方式来生成系统命令，另一种应该是把这个项目发布到npm上，安装的时候直接全局安装就可以喽。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;写一个自己的前端自动化构建工具&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
    
      <category term="基础知识" scheme="/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>javascript设计模式</title>
    <link href="/2019/06/24/javascript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>/2019/06/24/javascript设计模式/</id>
    <published>2019-06-24T02:16:13.000Z</published>
    <updated>2019-06-24T07:13:28.334Z</updated>
    
    <content type="html"><![CDATA[<p>基本上所有的设计模式都在这里了<br><a id="more"></a></p><h2 id="javascript设计模式"><a href="#javascript设计模式" class="headerlink" title="javascript设计模式"></a>javascript设计模式</h2><p>其实，设计模式在前端，平时很少会遇到，这只是作为我们这些菜鸟前端来说，但是，对于那些高级的，写插件，库之类的前端童鞋来说，设计模式还是不可或缺的，这可是实实在在的会带入到项目中的哦。<br>我只知道常见的几种，也都是为了应付面试的时候被问到，不过，今天我要终结一下，代码部分来源于网络，我只是整理一下，以备被问到时能够快速的回答出来。</p><ul><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第一章-灵活的javascript.js" target="_blank" rel="noopener">1.灵活模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第二章-写的都是看到的-面向对象编程.js" target="_blank" rel="noopener">2.面向对象编程</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第三章-神奇的魔术师-简单工厂模式.js" target="_blank" rel="noopener">3.简单工厂模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第四章-给我一张名片-工厂方法模式.js" target="_blank" rel="noopener">4.工厂方法模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第五章-出现的都是幻觉-抽象工厂模式.js" target="_blank" rel="noopener">5.抽象工厂模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第六章-分即是合-建造者模式.js" target="_blank" rel="noopener">6.建造者模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第七章-语言之魂-原型模式.js" target="_blank" rel="noopener">7.原型模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第八章-一个人的寂寞-单例模式.js" target="_blank" rel="noopener">8.单例模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第九章-套餐服务-外观模式.js" target="_blank" rel="noopener">9.外观模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第十章-水管弯弯-适配器模式.js" target="_blank" rel="noopener">10.适配器模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第十一章-牛郎织女-代理模式.js" target="_blank" rel="noopener">11.代理模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第十二章-房子装修-装饰着模式.js" target="_blank" rel="noopener">12.装饰者模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第十三章-城市间公路-桥接模式.js" target="_blank" rel="noopener">13.桥接模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第十四章-超值午餐-组合模式.js" target="_blank" rel="noopener">14.组合模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第十五章-城市公交车-享元模式.js" target="_blank" rel="noopener">15.享元模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第十六章-照猫画虎-模板方法模式.js" target="_blank" rel="noopener">16.模板方法模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第十七章-通信卫星-观察者模式.js" target="_blank" rel="noopener">17.观察者模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第十八章-超级玛丽-状态模式.js" target="_blank" rel="noopener">18.状态模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第十九章-活诸葛-策略模式.js" target="_blank" rel="noopener">19.策略模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第二十章-有序车站-职责链模式.js" target="_blank" rel="noopener">20.职责链模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第二十一章-命令模式.js" target="_blank" rel="noopener">21.命令模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第二十二章-驻华大使-访问者模式.js" target="_blank" rel="noopener">22.访问者模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第二十三章-媒婆-中介者模式.js" target="_blank" rel="noopener">23.中介者模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第二十四章-做好笔录-备忘录模式.js" target="_blank" rel="noopener">24.备忘录模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第二十五章-点钞机-迭代器模式.js" target="_blank" rel="noopener">25.迭代器模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第二十六章-语言翻译-解释器模式.js" target="_blank" rel="noopener">26.解释器模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第二十七章-永无尽头-链式模式.js" target="_blank" rel="noopener">27.链式模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第二十八章-未来预言家-委托模式.js" target="_blank" rel="noopener">28.委托模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第二十九章-数据管理器-数据访问对象模式.js" target="_blank" rel="noopener">29.数据访问对象模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第三十章-执行控制-节流模式.js" target="_blank" rel="noopener">30.节流模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第三十一章-卡片拼图-简单模板模式.js" target="_blank" rel="noopener">31.简单模板模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第三十二章-机器学习-惰性模式.js" target="_blank" rel="noopener">32.惰性模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第三十三章-异国战场-参与者模式.js" target="_blank" rel="noopener">33.参与者模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第三十四章-入场仪式-等待着模式.js" target="_blank" rel="noopener">34.等待者模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第三十五章-死心眼-同步模块.js" target="_blank" rel="noopener">35.同步模块模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第三十六章-大心脏-异步模块模式.js" target="_blank" rel="noopener">36.异步模块模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第三十七章-分而治之-widget.js" target="_blank" rel="noopener">37.widget模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第三十八章-三人行-MVC模式.js" target="_blank" rel="noopener">38.MVC模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第三十九章-MVVM.js" target="_blank" rel="noopener">39.MVVM模式</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;基本上所有的设计模式都在这里了&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
    
      <category term="基础知识" scheme="/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>写一个自己的富文本编辑器</title>
    <link href="/2019/06/22/%E5%86%99%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    <id>/2019/06/22/写一个自己的富文本编辑器/</id>
    <published>2019-06-22T08:42:09.000Z</published>
    <updated>2019-06-22T09:10:22.225Z</updated>
    
    <content type="html"><![CDATA[<p>写一个稍微复杂点的富文本编辑器<br><a id="more"></a></p><h2 id="写一个自己的富文本编辑器"><a href="#写一个自己的富文本编辑器" class="headerlink" title="写一个自己的富文本编辑器"></a>写一个自己的富文本编辑器</h2><p>前几天写了一个<a href="https://jinux7.github.io/2019/06/17/简单的富文本编辑器/" target="_blank" rel="noopener">《简单的富文本编辑器》</a>这篇博文，没想到刚过两天，项目中就需要自己写一个富文本编辑器。<br>具体的需求是，在富文本编辑器中编辑好内容，存到数据库，之后app端拿到这些数据以webview的形式展示出来，当然，webview这块也是我来做，但是，在pc端编辑的内容直接放到移动端显示是有问题的，比如像图片大小问题，而且编辑的样式和展示出来的样式完全不一样。所以，我就想自己写一个，不用第三方的库，这样自己可以灵活的按照需求来修改。<br>暂时写这个小插件只用了一天多，还不是很完善，有些地方还有待修改，如果有时间的话，以后会陆续更新。<br>废话不多说，直接贴源码地址喽:<br><a href="https://github.com/jinux7/study-collections/tree/master/jinux-editor" target="_blank" rel="noopener">jinux-editor</a><br>这里有些注意的地方，比如把文字变成粗体，用到了<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.execCommand(<span class="string">"bold"</span>,<span class="literal">false</span>,<span class="literal">null</span>);</span><br></pre></td></tr></table></figure></p><p>而取消粗体还是用到了这个命令，执行同一个命令，会切换字体的粗体和非粗体的状态。<br>但是，这里注意，还有一个方法可以获取现在文本是否是粗体状态<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.queryCommandState(<span class="string">'bold'</span>);</span><br></pre></td></tr></table></figure></p><p>可以用上面这个命令判断现在的状态，进而修改点击按钮的样式。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;写一个稍微复杂点的富文本编辑器&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
    
      <category term="基础知识" scheme="/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>base64加密原理</title>
    <link href="/2019/06/20/base64%E5%8A%A0%E5%AF%86%E5%8E%9F%E7%90%86/"/>
    <id>/2019/06/20/base64加密原理/</id>
    <published>2019-06-20T00:30:09.000Z</published>
    <updated>2019-06-20T00:40:18.705Z</updated>
    
    <content type="html"><![CDATA[<p>你知道我们常用的base64是什么吗？<br><a id="more"></a></p><h2 id="base64加密原理"><a href="#base64加密原理" class="headerlink" title="base64加密原理"></a>base64加密原理</h2><p>开发者对Base64编码肯定很熟悉，是否对它有很清晰的认识就不一定了。实际 上Base64已经简单到不能再简单了，如果对它的理解还是模棱两可实在不应该。大概介绍一下Base64的相关内容，花几分钟时间就可以彻底理解它。文 章下边贴了一个Base64的编解码器，方便阅读文章的同时来实验。<br>　　一. Base64编码由来<br>　　为什么会有Base64编码呢？因为有些网络传送渠道并不支持所有的字节，例如传统的邮件只支持可见字符的传送，像ASCII码的控制字符就 不能通过邮件传送。这样用途就受到了很大的限制，比如图片二进制流的每个字节不可能全部是可见字符，所以就传送不了。最好的方法就是在不改变传统协议的情 况下，做一种扩展方案来支持二进制文件的传送。把不可打印的字符也能用可打印字符来表示，问题就解决了。Base64编码应运而生，Base64就是一种 基于64个可打印字符来表示二进制数据的表示方法。<br>　　二. Base64编码原理<br>　　看一下Base64的索引表，字符选用了”A-Z、a-z、0-9、+、/“ 64个可打印字符。数值代表字符的索引，这个是标准Base64协议规定的，不能更改。64个字符用6个bit位就可以全部表示，一个字节有8个bit 位，剩下两个bit就浪费掉了，这样就不得不牺牲一部分空间了。这里需要弄明白的就是一个Base64字符是8个bit，但是有效部分只有右边的6个 bit，左边两个永远是0。<br><img src="/2019/06/20/base64加密原理/1.png" alt="img"><br>那么怎么用6个有效bit来表示传统字符的8个bit呢？8和6的最小公倍数 是24，也就是说3个传统字节可以由4个Base64字符来表示，保证有效位数是一样的，这样就多了1/3的字节数来弥补Base64只有6个有效bit 的不足。你也可以说用两个Base64字符也能表示一个传统字符，但是采用最小公倍数的方案其实是最减少浪费的。结合下边的图比较容易理解。Man是三个 字符，一共24个有效bit，只好用4个Base64字符来凑齐24个有效位。红框表示的是对应的Base64，6个有效位转化成相应的索引值再对应 Base64字符表，查出”Man”对应的Base64字符是”TWFU”。说到这里有个原则不知道你发现了没有，要转换成Base64的最小单位就是三个字节，对一个字符串来说每次都是三个字节三个字节的转换，对应的是Base64的四个字节。这个搞清楚了其实就差不多了。<br><img src="/2019/06/20/base64加密原理/2.png" alt="img"><br><img src="/2019/06/20/base64加密原理/3.png" alt="img"><br>　　但是转换到最后你发现不够三个字节了怎么办呢？愿望终于实现了，我们可以用两 个Base64来表示一个字符或用三个Base64表示两个字符，像下图的A对应的第二个Base64的二进制位只有两个，把后边的四个补0就是了。所以 A对应的Base64字符就是QQ。上边已经说过了，原则是Base64字符的最小单位是四个字符一组，那这才两个字 符，后边补两个”=”吧。其实不用”=”也不耽误解码，之所以用”=”，可能是考虑到多段编码后的Base64字符串拼起来也不会引起混淆。由此可见 Base64字符串只可能最后出现一个或两个”=”，中间是不可能出现”=”的。下图中字符”BC”的编码过程也是一样的。<br><img src="/2019/06/20/base64加密原理/4.png" alt="img"><br>    三. 总结　　<br>　　说起Base64编码可能有些奇怪，因为大多数的编码都是由字符转化成二进制的过程，而从二进制转成字符的过程称为解码。而Base64的概念就恰好反了，由二进制转到字符称为编码，由字符到二进制称为解码。<br>　　Base64编码主要用在传输、存储、表示二进制等领域，还可以用来加密，但是这种加密比较简单，只是一眼看上去不知道什么内容罢了，当然也可以对Base64的字符序列进行定制来进行加密。<br>　　Base64编码是从二进制到字符的过程，像一些中文字符用不同的编码转为二 进制时，产生的二进制是不一样的，所以最终产生的Base64字符也不一样。例如”上网”对应utf-8格式的Base64编码是”5LiK572R”， 对应GB2312格式的Base64编码是”yc/N+A==”。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;你知道我们常用的base64是什么吗？&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
    
      <category term="基础知识" scheme="/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>测试及爬虫工具nightmare</title>
    <link href="/2019/06/18/%E6%B5%8B%E8%AF%95%E5%8F%8A%E7%88%AC%E8%99%AB%E5%B7%A5%E5%85%B7nightmare/"/>
    <id>/2019/06/18/测试及爬虫工具nightmare/</id>
    <published>2019-06-18T06:21:24.000Z</published>
    <updated>2019-06-18T07:00:25.232Z</updated>
    
    <content type="html"><![CDATA[<p>nightmare工具的使用<br><a id="more"></a></p><h2 id="测试及爬虫工具nightmare"><a href="#测试及爬虫工具nightmare" class="headerlink" title="测试及爬虫工具nightmare"></a>测试及爬虫工具nightmare</h2><p>nightmare是一个可视化的页面操作工具，<a href="https://www.npmjs.com/package/nightmare" target="_blank" rel="noopener">官网点这里</a><br>如何安装就不说了，npm就可以搞定，但是，安装的时候会很慢，因为它依赖electron<br>具体的使用方法可以直接看官网的api，下面是一个小demo，是对本博客网站的简单操作，可以看一下它强大的效果<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Nightmare = <span class="built_in">require</span>(<span class="string">'nightmare'</span>);       </span><br><span class="line"><span class="keyword">var</span> nightmare = Nightmare(&#123; </span><br><span class="line">      show: <span class="literal">true</span>,</span><br><span class="line">      gotoTimeout: <span class="number">100000</span> <span class="comment">// goto页面的等待时长，不写的话默认30000ms，访问慢的网页会报错</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">nightmare</span><br><span class="line">  .goto(<span class="string">'https://jinux7.github.io'</span>) <span class="comment">// 打开的网页</span></span><br><span class="line">  .type(<span class="string">'.m_search .u-search-input'</span>, <span class="string">'javascript'</span>) <span class="comment">// 向input中写入javascript</span></span><br><span class="line">  .type(<span class="string">'.m_search .u-search-input'</span>, <span class="string">'\u000d'</span>) <span class="comment">// 触发input的点击回车事件</span></span><br><span class="line">  .wait(<span class="string">'.icon.icon-close'</span>) <span class="comment">// 等待弹出层的.icon.icon-close元素节点出现</span></span><br><span class="line">  .click(<span class="string">'.icon.icon-close'</span>) <span class="comment">// 出现后点击它</span></span><br><span class="line">  .evaluate(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// 注入到页面里执行的js代码</span></span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">document</span>.querySelector(<span class="string">'.avatar.waves-image'</span>).src;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// .end() // 关闭nightmare</span></span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">'Search failed:'</span>, error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></p><p>如需要更丰富的功能，按照api一点点添加就可以喽.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;nightmare工具的使用&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
    
      <category term="工具库" scheme="/tags/%E5%B7%A5%E5%85%B7%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>简单的富文本编辑器</title>
    <link href="/2019/06/17/%E7%AE%80%E5%8D%95%E7%9A%84%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    <id>/2019/06/17/简单的富文本编辑器/</id>
    <published>2019-06-17T05:30:10.000Z</published>
    <updated>2019-06-17T05:45:03.898Z</updated>
    
    <content type="html"><![CDATA[<p>超级简单的富文本编辑器<br><a id="more"></a></p><h2 id="简单的富文本编辑器"><a href="#简单的富文本编辑器" class="headerlink" title="简单的富文本编辑器"></a>简单的富文本编辑器</h2><p>这是一个超级简单富文本编辑器，功能很简单，但是富文本编辑器的写法基础是有的，可以在这个基础上进行增加改进。<br>主要用到了div的contentEditable属性，还有document.execCommand方法，具体代码见下面<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;简易富文本编辑器.html&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    </span></span><br><span class="line"><span class="regexp">    &lt;meta http-equiv="keywords" content="keyword1,keyword2,keyword3"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;meta http-equiv="description" content="this is my page"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;meta http-equiv="content-type" content="text/</span>html; charset=UTF<span class="number">-8</span><span class="string">"&gt;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">&lt;style type="</span>text/css<span class="string">"&gt;</span></span><br><span class="line"><span class="string">    #editor &#123;width:600px;height:200px;border:1px solid #ccc;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    button &#123;margin:1px;border:1px solid #aaa;background:#ffe;cursor:pointer;overflow:hidden;&#125;</span></span><br><span class="line"><span class="string">    button:hover &#123;background:#ccc;border:1px solid #00f;&#125;</span></span><br><span class="line"><span class="string">&lt;/style&gt;</span></span><br><span class="line"><span class="string">  &lt;/head&gt;</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  &lt;body&gt;</span></span><br><span class="line"><span class="string">  &lt;button id="</span>btn1<span class="string">"&gt;&lt;/button&gt;</span></span><br><span class="line"><span class="string">  &lt;button id="</span>btn2<span class="string">"&gt;&lt;/button&gt;</span></span><br><span class="line"><span class="string">  &lt;button id="</span>btn3<span class="string">"&gt;&lt;/button&gt;</span></span><br><span class="line"><span class="string">  &lt;button id="</span>btn4<span class="string">"&gt;&lt;/button&gt;</span></span><br><span class="line"><span class="string">  &lt;div id="</span>editor<span class="string">"&gt;</span></span><br><span class="line"><span class="string">      Click to Editor...</span></span><br><span class="line"><span class="string">  &lt;/div&gt;</span></span><br><span class="line"><span class="string">  &lt;input id="</span>printContent<span class="string">" type="</span>button<span class="string">" value="</span>打印编辑器内容<span class="string">"&gt;</span></span><br><span class="line"><span class="string">  &lt;script type="</span>text/javascript<span class="string">"&gt;</span></span><br><span class="line"><span class="string">        initEditor();</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        //初始化</span></span><br><span class="line"><span class="string">        function initEditor() &#123;</span></span><br><span class="line"><span class="string">            openOrCloseEditor("</span>editor<span class="string">", "</span><span class="literal">true</span><span class="string">");//开启元素编辑</span></span><br><span class="line"><span class="string">            bindBtnCommand();//给样式按钮绑定命令</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        /**</span></span><br><span class="line"><span class="string">        * </span></span><br><span class="line"><span class="string">        * 功能： 开启元素编辑功能</span></span><br><span class="line"><span class="string">        * 输入： el：编辑器ID; operate：Boolean值，表示启动还是关闭</span></span><br><span class="line"><span class="string">        */</span></span><br><span class="line"><span class="string">        function openOrCloseEditor(el, operate) &#123;</span></span><br><span class="line"><span class="string">            var editor = document.getElementById(el);</span></span><br><span class="line"><span class="string">            editor.contentEditable = operate;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        //按钮绑定命令</span></span><br><span class="line"><span class="string">        function bindBtnCommand() &#123;</span></span><br><span class="line"><span class="string">            var btns = document.getElementsByTagName("</span>button<span class="string">"),</span></span><br><span class="line">                btnConfigs = "backcolor|#f00|设置背景色 bold|null|字体加粗 indent|null|缩进 fontName|微软雅黑|转换字体".split(" "),</span><br><span class="line">                len = btnConfigs.length;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>, btnConfig; btnConfig = btnConfigs[i]; i++) &#123;</span><br><span class="line">                (<span class="function"><span class="keyword">function</span>(<span class="params">btnConfig, btn</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">var</span> msg = btnConfig.split(<span class="string">"|"</span>),</span><br><span class="line">                        lab = msg[<span class="number">0</span>],</span><br><span class="line">                        value = msg[<span class="number">1</span>],</span><br><span class="line">                        title = msg[<span class="number">2</span>];</span><br><span class="line">                    btn.innerHTML = lab;</span><br><span class="line">                    btn.title = title;</span><br><span class="line">                    btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">                        <span class="built_in">document</span>.execCommand(lab, <span class="literal">false</span>, value);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)(btnConfig, btns[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取编辑器内嵌内容</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">getContent</span>(<span class="params">el</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> editor = <span class="built_in">document</span>.getElementById(el);</span><br><span class="line">            <span class="keyword">return</span> editor.innerHTML;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//打印按钮绑定触发事件</span></span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">"printContent"</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> content = getContent(<span class="string">"editor"</span>);</span><br><span class="line">            <span class="built_in">document</span>.write(content);</span><br><span class="line">        &#125;;</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure></p><p>上面的代码直接粘贴就可以跑起来哦。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;超级简单的富文本编辑器&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
    
      <category term="基础知识" scheme="/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>vue,react中百度地图的使用</title>
    <link href="/2019/06/13/vue-react%E4%B8%AD%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BE%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>/2019/06/13/vue-react中百度地图的使用/</id>
    <published>2019-06-13T05:13:09.000Z</published>
    <updated>2019-06-13T05:34:31.251Z</updated>
    
    <content type="html"><![CDATA[<p>vue,react等框架，百度地图的最优使用方式<br><a id="more"></a></p><h2 id="vue-react中百度地图的使用"><a href="#vue-react中百度地图的使用" class="headerlink" title="vue,react中百度地图的使用"></a>vue,react中百度地图的使用</h2><p>现在vue，react框架大行其道，很多项目都是用它们开发的，我的项目也都在用，之前，在使用百度地图的时候，我都是把百度地图封了一个组件，直接插入到dom中，但是，有些功能莫名其妙的不好使，我猜可能是跟vue有兼容性问题，还有一个页面中引入多个地图的情况下，像城市切换插件就不好使了，相互冲突了，所以，最终的解决方案是用iframe来引入百度地图。这个好处就是完全隔离开项目框架与百度地图之间的冲突。<br>首先，建一个百度地图的html页面，代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=utf-8"</span> /&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"initial-scale=1.0, user-scalable=yes"</span> /&gt;</span><br><span class="line">    &lt;link href=<span class="string">"https://api.map.baidu.com/library/IndoorMap/1.0/src/indoor.min.css?v=1.0.1 "</span> rel=<span class="string">"stylesheet"</span> type=<span class="string">"text/css"</span>&gt;</span><br><span class="line">    &lt;style type=<span class="string">"text/css"</span>&gt;</span><br><span class="line">        body, html,#map &#123;width: 100%;height: 100%;overflow: hidden;margin:0;font-family:"微软雅黑";&#125;</span><br><span class="line">    &lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script type="text/</span>javascript<span class="string">" src="</span>https:<span class="comment">//api.map.baidu.com/api?v=3.0&amp;ak=PaxZEfdK60GDxScXccj81kBW"&gt;&lt;/script&gt;</span></span><br><span class="line">    &lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"https://api.map.baidu.com/library/IndoorMap/1.0/src/indoor.min.js?v=1.0.1 "</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div id="map"&gt;&lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">lng:<span class="string">''</span>,</span><br><span class="line">lat:<span class="string">''</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">var</span> tab = getQueryString(<span class="string">'tab'</span>);</span><br><span class="line">  <span class="comment">// 获取url信息</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getQueryString</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"(^|&amp;)"</span> + name + <span class="string">"=([^&amp;]*)(&amp;|$)"</span>, <span class="string">"i"</span>);</span><br><span class="line">      <span class="keyword">var</span> reg_rewrite = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"(^|/)"</span> + name + <span class="string">"/([^/]*)(/|$)"</span>, <span class="string">"i"</span>);</span><br><span class="line">      <span class="keyword">var</span> r = <span class="built_in">window</span>.location.search.substr(<span class="number">1</span>).match(reg);</span><br><span class="line">      <span class="keyword">var</span> q = <span class="built_in">window</span>.location.pathname.substr(<span class="number">1</span>).match(reg_rewrite);</span><br><span class="line">      <span class="keyword">if</span>(r != <span class="literal">null</span>)&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="built_in">unescape</span>(r[<span class="number">2</span>]);</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span>(q != <span class="literal">null</span>)&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="built_in">unescape</span>(q[<span class="number">2</span>]);</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 百度地图API功能</span></span><br><span class="line">  <span class="keyword">var</span> map = <span class="keyword">new</span> BMap.Map(<span class="string">"map"</span>);</span><br><span class="line">  map.centerAndZoom(<span class="keyword">new</span> BMap.Point(<span class="number">123.436</span>, <span class="number">41.816</span>), <span class="number">11</span>);</span><br><span class="line"><span class="keyword">var</span> topLeftControl = <span class="keyword">new</span> BMap.ScaleControl(&#123;</span><br><span class="line">anchor: BMAP_ANCHOR_BOTTOM_LEFT</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 城市选择控件</span></span><br><span class="line"><span class="keyword">var</span> cityListControl = <span class="keyword">new</span> BMap.CityListControl(&#123;</span><br><span class="line">anchor: BMAP_ANCHOR_TOP_RIGHT</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 比例尺控件</span></span><br><span class="line"><span class="keyword">var</span> topLeftNavigation = <span class="keyword">new</span> BMap.NavigationControl();</span><br><span class="line">map.addControl(topLeftControl);</span><br><span class="line">map.addControl(topLeftNavigation);</span><br><span class="line">map.addControl(cityListControl);</span><br><span class="line">  map.enableScrollWheelZoom(<span class="literal">true</span>); <span class="comment">// 开启鼠标滚轮缩放</span></span><br><span class="line">  <span class="comment">// 创建室内图实例</span></span><br><span class="line">  <span class="keyword">var</span> indoorManager = <span class="keyword">new</span> BMapLib.IndoorManager(map);</span><br><span class="line">  <span class="comment">// 点击获取经纬度</span></span><br><span class="line">map.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">obj.lng = <span class="built_in">parseFloat</span>(e.point.lng) + <span class="string">''</span>;</span><br><span class="line">obj.lat = <span class="built_in">parseFloat</span>(e.point.lat) + <span class="string">''</span>;</span><br><span class="line">drawLocation()</span><br><span class="line">selectLocation();</span><br><span class="line">&#125;);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">selectLocation</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">window</span>.parent.postMessage(&#123;</span><br><span class="line">      refresh:obj,</span><br><span class="line">      tab</span><br><span class="line">      &#125;,<span class="string">'*'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawLocation</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (obj.lng !== <span class="string">""</span> &amp;&amp; obj.lat !== <span class="string">""</span>) &#123;</span><br><span class="line">      map.clearOverlays();</span><br><span class="line">      <span class="keyword">var</span> new_point = <span class="keyword">new</span> BMap.Point(obj.lng, obj.lat);</span><br><span class="line">      <span class="keyword">var</span> marker = <span class="keyword">new</span> BMap.Marker(new_point);</span><br><span class="line">      map.addOverlay(marker);</span><br><span class="line">      map.panTo(new_point);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>之后就是在项目中用iframe标签引入。<br>重要的地方来了，就是父子页面通信，在子页面点击选好地点后，肯定需要把选好点的坐标给父页面，这里有一个简单的方法，在子页面中点击选点时，给父页面发信息代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.parent.postMessage(&#123;</span><br><span class="line">    val: <span class="string">'信息'</span></span><br><span class="line">    &#125;,<span class="string">'*'</span>);</span><br><span class="line"><span class="comment">// 具体使用方法自行百度</span></span><br></pre></td></tr></table></figure></p><p>子页面消息发出去了，父页面如何接收呢？见下面代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'message'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(event);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 可以打印出很多需要的信息喽</span></span><br><span class="line"><span class="comment">// 据说，IE8+都支持哦</span></span><br></pre></td></tr></table></figure></p><p>好了，总结一下，vue中最好还是以这种方式使用哈。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;vue,react等框架，百度地图的最优使用方式&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
    
      <category term="vue" scheme="/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>web页面性能测试demo</title>
    <link href="/2019/06/06/web%E9%A1%B5%E9%9D%A2%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95demo/"/>
    <id>/2019/06/06/web页面性能测试demo/</id>
    <published>2019-06-06T07:30:17.000Z</published>
    <updated>2019-06-06T07:54:33.774Z</updated>
    
    <content type="html"><![CDATA[<p>web页面性能测试demo<br><a id="more"></a></p><h2 id="web页面性能测试demo"><a href="#web页面性能测试demo" class="headerlink" title="web页面性能测试demo"></a>web页面性能测试demo</h2><p>写这篇文章的起因，有时候有人问，css会不会阻塞页面渲染了，js如何触发页面渲染了等等，所以，最好的方式就是自己写一个小demo，自己试一下不就一目了然了吗，目前这个demo的内容很简单，以后会慢慢增加。<br>下面是github的链接地址:<br><a href="https://github.com/jinux7/study-collections/tree/master/web-performance-test" target="_blank" rel="noopener">点我进入仓库</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;web页面性能测试demo&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
    
      <category term="web性能" scheme="/tags/web%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>docker常用命令</title>
    <link href="/2019/05/28/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>/2019/05/28/docker常用命令/</id>
    <published>2019-05-28T06:14:50.000Z</published>
    <updated>2019-05-28T06:22:37.985Z</updated>
    
    <content type="html"><![CDATA[<p>docker常用命令<br><a id="more"></a></p><h2 id="docker常用命令"><a href="#docker常用命令" class="headerlink" title="docker常用命令"></a>docker常用命令</h2><p>最近想在win10下安装mysql5.6版本，装了半天没装成功，于是乎用docker来解决了。<br>docker需要命令行，这里以mysql为例，贴出一个别人的blog(懒得写了)。<br><a href="https://www.cnblogs.com/pwc1996/p/5425234.html" target="_blank" rel="noopener">docker运行mysql</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;docker常用命令&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
    
      <category term="docker" scheme="/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>windows下git命令批处理执行</title>
    <link href="/2019/05/24/windows%E4%B8%8Bgit%E5%91%BD%E4%BB%A4%E6%89%B9%E5%A4%84%E7%90%86%E6%89%A7%E8%A1%8C/"/>
    <id>/2019/05/24/windows下git命令批处理执行/</id>
    <published>2019-05-24T06:04:09.000Z</published>
    <updated>2019-05-27T03:13:50.466Z</updated>
    
    <content type="html"><![CDATA[<p>win10操作系统下利用批处理程序来运行git操作。<br><a id="more"></a></p><h2 id="windows下git命令批处理执行"><a href="#windows下git命令批处理执行" class="headerlink" title="windows下git命令批处理执行"></a>windows下git命令批处理执行</h2><p>首先，我说一下我要这样做的起因，也许大家都会有感。<br>目前，我在做的项目是一个，但是下面分了5个子项目，这5个子项目，每一个自己拥有一个git仓库，所以，我在上传代码的操作就是，commit-&gt;pull-&gt;push,这样反复5回，因为有5个仓库嘛。有时候一天要好多次，效率太低了，于是我就想起了利用windows系统的批处理来做。<br>在使用批处理来操作git命令，首先需要把git的操作仓库方式改为ssh，使用ssh的话，还需要ssh key，ssh key的生成方法是，打开git的命令行工具，输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 首先检查一下现在电脑里是否已经有生成的ssh key</span><br><span class="line">cd ~/.ssh</span><br><span class="line">// ~这个符号我在git命令行下才能打出来，cmd没打出来。</span><br><span class="line">// ~/ 这个路径就是C:\Users\kaiya这个，看看现在是否已经有现成的ssh key</span><br><span class="line">// 如果有，就不用再生成了</span><br><span class="line"></span><br><span class="line">// 接下来是生成ssh key命令</span><br><span class="line">ssh-keygen -t rsa -C &quot;124076***@qq.com&quot;</span><br><span class="line">// 需要自己在电脑中注册的git邮箱,如果不知道，可以查一下 git config --global user.email</span><br><span class="line">// 生成的ssh key自动保存在C:\Users\kaiya这个目录下（这个是我的用户名）</span><br><span class="line">// 生成过程中一路回车就好，不用设置密码等</span><br></pre></td></tr></table></figure></p><p>有了ssh key，添加到github或自己公司的gitlab上就好了。<br>比如要添加到github上，登录账号进入自己的github库，步骤见下图<br><img src="/2019/05/24/windows下git命令批处理执行/1.png" alt="img"><br><img src="/2019/05/24/windows下git命令批处理执行/2.png" alt="img"><br>点进去之后，按照页面提示填写就可以了。<br>以上就是配置好了ssh key，之后就是用git拉取，推送代码了，这里有一个地方需要注意，那就是Git对仓库的操作方式，既然已经添加了ssh key，就需要用git的ssh提交方式。查看.git文件夹下的config文件，找到下面的内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[remote &quot;origin&quot;]</span><br><span class="line">  // 这个是ssh提交方式</span><br><span class="line">url = git@172.24.112.158:root/airport.git</span><br><span class="line">  </span><br><span class="line">  // 这个是http提交方式</span><br><span class="line">  url = http://172.24.112.158/root/webviewpage</span><br><span class="line"></span><br><span class="line">fetch = +refs/heads/*:refs/remotes/origin/*</span><br></pre></td></tr></table></figure></p><p>按照上面的写法，只留下ssh提交方式即可。<br>接下来，我们来写windows的批处理命令,先写一个处理一个仓库的git操作批处理。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">chcp 65001</span><br><span class="line">cd C:\WORK\git-ku\ejashop</span><br><span class="line">@echo off</span><br><span class="line">echo git批处理开始执行</span><br><span class="line">git status</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;update&quot;</span><br><span class="line">git pull</span><br><span class="line">git push</span><br><span class="line">echo ----------</span><br><span class="line">echo git commit pull push都已完成，点击任意键退出</span><br><span class="line">pause</span><br></pre></td></tr></table></figure></p><p>再写一个调用多个批处理文件的操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">chcp 65001</span><br><span class="line">pause</span><br><span class="line">start /D &quot;C:\Users\kaiya\Desktop\批处理node\git&quot; call ehome.bat</span><br><span class="line">start /D &quot;C:\Users\kaiya\Desktop\批处理node\git&quot; call airport.bat</span><br><span class="line">start /D &quot;C:\Users\kaiya\Desktop\批处理node\git&quot; call eHomeOperation.bat</span><br><span class="line">start /D &quot;C:\Users\kaiya\Desktop\批处理node\git&quot; call kaidian.bat</span><br></pre></td></tr></table></figure></p><p>这里，需要注意一下，因为批处理是在cmd命令行下执行的，所以要把git的环境变量配好哦。<br>好了，通过这样的方法，以后麻烦的git操作，点击一下就可以搞定喽。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;win10操作系统下利用批处理程序来运行git操作。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="计算机原理" scheme="/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="基础知识" scheme="/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
      <category term="github" scheme="/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>多个ajax请求,页面渲染顺序问题</title>
    <link href="/2019/05/20/%E5%A4%9A%E4%B8%AAajax%E8%AF%B7%E6%B1%82-%E9%A1%B5%E9%9D%A2%E6%B8%B2%E6%9F%93%E9%A1%BA%E5%BA%8F%E9%97%AE%E9%A2%98/"/>
    <id>/2019/05/20/多个ajax请求-页面渲染顺序问题/</id>
    <published>2019-05-20T07:04:15.000Z</published>
    <updated>2019-05-21T00:52:30.868Z</updated>
    
    <content type="html"><![CDATA[<p>在一个页面中,多个ajax请求,页面渲染顺序问题。<br><a id="more"></a></p><h2 id="多个ajax请求-页面渲染顺序问题"><a href="#多个ajax请求-页面渲染顺序问题" class="headerlink" title="多个ajax请求,页面渲染顺序问题"></a>多个ajax请求,页面渲染顺序问题</h2><p>如题，比如说在一个页面中有两个按钮或者多个，按照先后顺序点击，都发出了ajax请求，但是他们返回的顺序就不会按照点击按钮的顺序返回，如果，它们操作的是页面的同一个显示区域，比如列表，那就ajax访问最慢的接口最后被渲染出来，有可能这个接口是用户最开始点击的按钮渲染出来的，这样就会产生错误信息，用户本想最后点击那个按钮返回的数据才是他想要的。<br>其实，这个问题我并没有遇到过，这个是大约一年前我再一次面试中被问到的，当时由于没有做好准备，我也只能诚实的回答没有遇到过此场景，今天我又来了兴致，把它的解决方法记录下来（我的拖延症是不是很严重），这个解决方式是我自己定的，其实也是实现起来比较简单的。<br>为了加快写作，直接把代码贴出来，在代码中写注释<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">  &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">  &lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"ie=edge"</span>&gt;</span><br><span class="line">  &lt;script src=<span class="string">"./jquery.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">  &lt;title&gt;多个ajax请求,页面渲染顺序问题&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">  &lt;style&gt;</span></span><br><span class="line"><span class="regexp">    .content &#123;</span></span><br><span class="line"><span class="regexp">      width: 500px;</span></span><br><span class="line"><span class="regexp">      height: 100px;</span></span><br><span class="line"><span class="regexp">      background-color: #eeeeee;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>style&gt;</span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp">  &lt;div class="content"&gt;</span></span><br><span class="line"><span class="regexp">    原始内容</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">  &lt;button id=<span class="string">"btn1"</span>&gt;按钮<span class="number">2</span>s&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">  &lt;button id="btn2"&gt;按钮5s&lt;/</span>button&gt;</span><br><span class="line">  &lt;button id=<span class="string">"btn3"</span>&gt;按钮<span class="number">3</span>s&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">// 后端地址</span></span><br><span class="line">  <span class="keyword">var</span> baseUrl = <span class="string">"http://localhost:3000/"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 存放ajax标志的数组，用来区分是哪个ajax</span></span><br><span class="line">  <span class="keyword">var</span> orderArr = [];</span><br><span class="line">  <span class="comment">// 按钮1加点击事件</span></span><br><span class="line">  $(<span class="string">'#btn1'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 将btn1按钮的标志传入数组</span></span><br><span class="line">    ajaxOrder(<span class="string">'btn1'</span>);</span><br><span class="line">    $.post(baseUrl+<span class="string">'delay2s'</span>, (res)=&gt; &#123;</span><br><span class="line">      <span class="comment">// 渲染页面</span></span><br><span class="line">      render(<span class="string">'btn1'</span>, res.data);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 按钮2加点击事件</span></span><br><span class="line">  $(<span class="string">'#btn2'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    ajaxOrder(<span class="string">'btn2'</span>);</span><br><span class="line">    $.post(baseUrl+<span class="string">'delay5s'</span>, (res)=&gt; &#123;</span><br><span class="line">      render(<span class="string">'btn2'</span>, res.data);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 按钮3加点击事件</span></span><br><span class="line">  $(<span class="string">'#btn3'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    ajaxOrder(<span class="string">'btn3'</span>);</span><br><span class="line">    $.post(baseUrl+<span class="string">'delay3s'</span>, (res)=&gt; &#123;</span><br><span class="line">      render(<span class="string">'btn3'</span>, res.data);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 向存放ajax标志位数组中push ajax标志</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">ajaxOrder</span>(<span class="params">flag</span>) </span>&#123;</span><br><span class="line">    orderArr.push(flag);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 根据ajax的标志来渲染页面</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">flag, val</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 如果数组中只有一个标志的情况，直接渲染并清空数组</span></span><br><span class="line">    <span class="keyword">if</span>(orderArr.length === <span class="number">1</span>) &#123;</span><br><span class="line">      orderArr = [];</span><br><span class="line">      $(<span class="string">'.content'</span>).html(val);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">void</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果标志数组中多余一个标志</span></span><br><span class="line">    <span class="keyword">if</span>(orderArr.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="comment">// 如果这个标志是第一个请求的标志，则渲染页面</span></span><br><span class="line">      <span class="keyword">if</span>(orderArr.indexOf(flag) === <span class="number">0</span>) &#123;</span><br><span class="line">        orderArr.shift();</span><br><span class="line">        $(<span class="string">'.content'</span>).html(val);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">void</span> <span class="number">0</span>;</span><br><span class="line">      &#125;<span class="keyword">else</span> &#123; <span class="comment">// 如果不是第一个，则不渲染页面，并把这个标志剔除</span></span><br><span class="line">        <span class="keyword">let</span> index = orderArr.indexOf(flag);</span><br><span class="line">        orderArr.splice(index,<span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure></p><p>大概的流程就是，按照按钮点击的顺序来显示请求的结果。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在一个页面中,多个ajax请求,页面渲染顺序问题。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
    
      <category term="面试题" scheme="/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>webpack打包多页面项目</title>
    <link href="/2019/05/20/webpack%E6%89%93%E5%8C%85%E5%A4%9A%E9%A1%B5%E9%9D%A2%E9%A1%B9%E7%9B%AE/"/>
    <id>/2019/05/20/webpack打包多页面项目/</id>
    <published>2019-05-20T02:26:35.000Z</published>
    <updated>2019-05-20T02:46:28.390Z</updated>
    
    <content type="html"><![CDATA[<p>webpack打包多页面项目<br><a id="more"></a></p><h2 id="webpack打包多页面项目"><a href="#webpack打包多页面项目" class="headerlink" title="webpack打包多页面项目"></a>webpack打包多页面项目</h2><p>平时我们在工作中，使用webpack来打包单页面应用的项目很多，多页面应用之前我都是使用gulp来做，今天我在github发现一个不错的demo，我就不写具体的分析步骤了，代码里边写的很清楚，直接贴地址喽。<br><a href="https://github.com/jixoba/webpack-dev" target="_blank" rel="noopener">点击这里看项目</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;webpack打包多页面项目&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
    
      <category term="webpack" scheme="/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>import和require的本质区别</title>
    <link href="/2019/05/09/import%E5%92%8Crequire%E7%9A%84%E6%9C%AC%E8%B4%A8%E5%8C%BA%E5%88%AB/"/>
    <id>/2019/05/09/import和require的本质区别/</id>
    <published>2019-05-09T08:00:05.000Z</published>
    <updated>2019-05-09T08:44:15.447Z</updated>
    
    <content type="html"><![CDATA[<p>简单的说一下import和require的本质区别<br><a id="more"></a></p><h2 id="import和require的本质区别"><a href="#import和require的本质区别" class="headerlink" title="import和require的本质区别"></a>import和require的本质区别</h2><p>import是ES6的模块规范，require是commonjs的模块规范，详细的用法我不介绍，我只想说一下他们最基本的区别，import是静态加载模块，require是动态加载，那么静态加载和动态加载的区别是什么呢？<br>静态加载时代码在编译的时候已经执行了，动态加载是编译后在代码运行的时候再执行，那么具体点是什么呢？<br>先说说import，如下代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js文件</span></span><br><span class="line"><span class="keyword">import</span> &#123; name &#125; <span class="keyword">from</span> <span class="string">'name.js'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// name.js文件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> name = <span class="string">'jinux'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> age = <span class="number">20</span></span><br></pre></td></tr></table></figure></p><p>上面的代码表示main.js文件里引入了name.js文件导出的变量，在代码编译阶段执行后的代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js文件</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">'jinux'</span></span><br></pre></td></tr></table></figure></p><p>这个是我自己理解的，其实就是直接把name.js里的代码放到了main.js文件里，好比是在main.js文件中声明一样。<br>再来看看require<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js文件</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="built_in">require</span>(<span class="string">'obj.js'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// obj.js文件</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'jinux'</span>,</span><br><span class="line">  age: <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.export obj;</span><br></pre></td></tr></table></figure></p><p>require是在运行阶段，需要把obj对象整个加载进内存，之后用到哪个变量就用哪个，这里再对比一下import，import是静态加载，如果只引入了name，age是不会引入的，所以是按需引入，性能更高。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简单的说一下import和require的本质区别&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
    
      <category term="基础知识" scheme="/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
</feed>
