<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>jinux</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="/"/>
  <updated>2019-03-07T06:05:28.759Z</updated>
  <id>/</id>
  
  <author>
    <name>jinux</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>移动端兼容性</title>
    <link href="/2019/03/05/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%85%BC%E5%AE%B9%E6%80%A7/"/>
    <id>/2019/03/05/移动端兼容性/</id>
    <published>2019-03-05T01:43:57.000Z</published>
    <updated>2019-03-07T06:05:28.759Z</updated>
    
    <content type="html"><![CDATA[<p>移动端有关html标签节点的兼容性问题<br><a id="more"></a></p><h2 id="移动端兼容性"><a href="#移动端兼容性" class="headerlink" title="移动端兼容性"></a>移动端兼容性</h2><h3 id="meta标签"><a href="#meta标签" class="headerlink" title="meta标签"></a>meta标签</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// viewport就啥也不说了，必须得加</span></span><br><span class="line">&lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0"</span> /&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动或禁用自动识别页面中的电话号码</span></span><br><span class="line">&lt;meta name=<span class="string">"format-detection"</span> content=<span class="string">"telephone=no"</span> /&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动或禁用自动识别邮箱地址</span></span><br><span class="line">&lt;meta name=<span class="string">"format-detection"</span>  content=<span class="string">"email=no"</span> /&gt; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置 Web 应用是否以全屏模式运行。</span></span><br><span class="line">&lt;meta name=<span class="string">"apple-mobile-web-app-capable"</span> content=<span class="string">"yes"</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ios 的 safari 顶端状态条的样式，可选的参数有：default、black、black-translucent</span></span><br><span class="line">&lt;meta name=<span class="string">"apple-mobile-web-app-status-bar-style"</span>  content=<span class="string">"black"</span> /&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// winphone 系统 a、input 标签被点击时产生的半透明灰色背景怎么去掉</span></span><br><span class="line">&lt;meta name=<span class="string">"msapplication-tap-highlight"</span>  content=<span class="string">"no"</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="body-img等标签"><a href="#body-img等标签" class="headerlink" title="body,img等标签"></a>body,img等标签</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 禁止 ios 长按时不触发系统的菜单，禁止 ios&amp;android 长按时下载图片</span></span><br><span class="line">.css &#123;</span><br><span class="line">  -webkit-touch-callout: none</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 禁止ios和android用户选中文字</span></span><br><span class="line">.css &#123;</span><br><span class="line">  -webkit-user-select:none</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="图片不清晰"><a href="#图片不清晰" class="headerlink" title="图片不清晰"></a>图片不清晰</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 比如，iphone6，设备款375，物理像素750，正常一张占1/3屏幕的图片，125px，如果准备一张125的</span></span><br><span class="line"><span class="comment">// 肯定会模糊，必须准备250px的。如果像iphone6 plus，像素比3， 占1/3的图片138px，实际需要414px。</span></span><br><span class="line"><span class="comment">// 解决方案：</span></span><br><span class="line">@media screen and (-webkit-min-device-pixel-ratio: <span class="number">2</span>) &#123;</span><br><span class="line">    .css &#123;</span><br><span class="line">      background-image: url(<span class="string">'2x.png'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">@media screen and (-webkit-min-device-pixel-ratio: <span class="number">3</span>) &#123;</span><br><span class="line">    .css &#123;</span><br><span class="line">      background-image: url(<span class="string">'3x.png'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="表单的标签"><a href="#表单的标签" class="headerlink" title="表单的标签"></a>表单的标签</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// input 输入框不可编辑</span></span><br><span class="line">&lt;input type=<span class="string">"text"</span> name=<span class="string">"name"</span> value=<span class="string">"xxx"</span> disabled=<span class="string">"true"</span>/&gt;</span><br><span class="line">&lt;input type=<span class="string">"text"</span> name=<span class="string">"name"</span> value=<span class="string">"xxx"</span> readonly=<span class="string">"true"</span>/&gt;</span><br><span class="line"><span class="comment">/* disabled 文本框变灰，通过request.getParameter("name")得不到文本框中的内容</span></span><br><span class="line"><span class="comment">readonly 只是使文本框不能输入，样式没有变化，通过request.getParameter("name")可以得到内容 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ios 输入的时候英文首字母的默认大写</span></span><br><span class="line">&lt;input autocapitalize=<span class="string">"off"</span> autocorrect=<span class="string">"off"</span> /&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// android 上去掉语音输入按钮</span></span><br><span class="line">input::-webkit-input-speech-button &#123;</span><br><span class="line">  display: none</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ios系统中元素被触摸时产生的半透明灰色遮罩怎么去掉</span></span><br><span class="line">a,button,input,textarea&#123;</span><br><span class="line">  -webkit-tap-highlight-color: rgba(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>;)</span><br><span class="line">  -webkit-user-modify:read-write-plaintext-only;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">/* -webkit-user-modify 这个属性使用需谨慎，副作用就是输入法不再能够输入多个字符</span></span><br><span class="line"><span class="comment">另外，有些机型去除不了，如小米2</span></span><br><span class="line"><span class="comment">对于按钮类，不使用a或者input标签，直接用div标签 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 表单元素的默认外观重置</span></span><br><span class="line">  -webkit-appearance:none;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改表单输入框 placeholder 的颜色值</span></span><br><span class="line">  input::-webkit-input-placeholder&#123;color:#ccc;&#125; </span><br><span class="line">  input:focus::-webkit-input-placeholder&#123;color:#eee;&#125; </span><br><span class="line"><span class="comment">// 注意 placeholder,  ios 可以换行，android 不可以</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Input 的placeholder会出现文本位置偏上的情况</span></span><br><span class="line">input 的placeholder会出现文本位置偏上的情况：PC端设置line-height等于height能够对齐，而移动端仍然是偏上，解决是设置line-height：normal</span><br><span class="line"></span><br><span class="line"><span class="comment">// 禁用 select 默认下拉箭头</span></span><br><span class="line">select::-ms-expand &#123;<span class="attr">display</span>: none;&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 禁用 radio 和 checkbox 默认样式</span></span><br><span class="line">input[type=radio]::-ms-check,</span><br><span class="line">input[type=checkbox]::-ms-check &#123; </span><br><span class="line">  display: none; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="a标签"><a href="#a标签" class="headerlink" title="a标签"></a>a标签</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">部分安卓手机 a 标签用作按钮的时候，页面显示空白</span><br><span class="line">解决办法：用 button 标签替换 a 标签</span><br></pre></td></tr></table></figure><h3 id="button"><a href="#button" class="headerlink" title="button"></a>button</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 去除button在ios上的默认样式</span></span><br><span class="line">.css &#123;</span><br><span class="line">  -webkit-appearance: none;</span><br><span class="line">  border-radius: <span class="number">0</span> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不想让按钮touch时有蓝色的边框     </span></span><br><span class="line">.css &#123;</span><br><span class="line">  -webkit-tap-highlight-color:rgba(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="audio和video"><a href="#audio和video" class="headerlink" title="audio和video"></a>audio和video</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在ios和andriod中,audio元素和video元素在无法自动播放</span></span><br><span class="line"><span class="comment">// 应对方案：触屏即播</span></span><br><span class="line">$(<span class="string">'html'</span>).one(<span class="string">'touchstart'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    audio.play()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ios 视频默认全屏播放，如何阻止全屏播放－ webkit-playsinline</span></span><br><span class="line">&lt;video id=<span class="string">"video"</span> src=<span class="string">""</span> webkit-playsinline poster=<span class="string">""</span> &gt;&lt;/video&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 视频，音频获取播放结束后的回调函数－ended</span></span><br><span class="line">$(<span class="string">'#video'</span>).on(<span class="string">'ended'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  alert(<span class="number">0</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="click点击事件"><a href="#click点击事件" class="headerlink" title="click点击事件"></a>click点击事件</h3><h4 id="300毫秒延迟"><a href="#300毫秒延迟" class="headerlink" title="300毫秒延迟"></a>300毫秒延迟</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 300毫秒延迟解决方案</span></span><br><span class="line"><span class="number">1.</span>fastclick可以解决在手机上点击事件的<span class="number">300</span>ms延迟</span><br><span class="line"><span class="number">2.</span>zepto的touch模块，tap事件也是为了解决在click的延迟问题</span><br><span class="line"><span class="number">3.</span>触摸事件的响应顺序为 touchstart --&gt; touchmove --&gt; touchend --&gt; click,也可以通过绑定ontouchstart事件，加快对事件的响应，解决<span class="number">300</span>ms延迟问题</span><br></pre></td></tr></table></figure><h4 id="ios-label-span-监听click事件-不触发"><a href="#ios-label-span-监听click事件-不触发" class="headerlink" title="ios(label,span)监听click事件,不触发"></a>ios(label,span)监听click事件,不触发</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 所监听元素加上</span></span><br><span class="line">.css &#123;</span><br><span class="line">  cursor:pointer</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="css部分"><a href="#css部分" class="headerlink" title="css部分"></a>css部分</h2><h3 id="webkit-keyframes-注意"><a href="#webkit-keyframes-注意" class="headerlink" title="@-webkit-keyframes 注意"></a>@-webkit-keyframes 注意</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">以<span class="number">0</span>%开始<span class="number">100</span>%结束，<span class="number">0</span>%的百分号不能去掉</span><br><span class="line">after和before伪类无法使用动画</span><br></pre></td></tr></table></figure><h3 id="border-radius-注意"><a href="#border-radius-注意" class="headerlink" title="border-radius 注意"></a>border-radius 注意</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">不支持%单位</span><br><span class="line">三星 Galaxy S4中自带浏览器不支持 border-radius 缩写</span><br><span class="line">同时写入 border-radius 和背景色的时候，背景色会溢出到圆角以外部分</span><br></pre></td></tr></table></figure><h3 id="解决-transition-闪屏"><a href="#解决-transition-闪屏" class="headerlink" title="解决 transition 闪屏"></a>解决 transition 闪屏</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.css&#123; </span><br><span class="line">  <span class="comment">/*设置内嵌的元素在 3D 空间如何呈现：保留 3D*/</span> </span><br><span class="line">  -webkit-transform-style: preserve<span class="number">-3</span>d; </span><br><span class="line">  <span class="comment">/*（设置进行转换的元素的背面在面对用户时是否可见：隐藏）*/</span> </span><br><span class="line">  -webkit-backface-visibility: hidden; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="阻止用户调整微信浏览器字体大小"><a href="#阻止用户调整微信浏览器字体大小" class="headerlink" title="阻止用户调整微信浏览器字体大小"></a>阻止用户调整微信浏览器字体大小</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ios 管事，android 暂无解决方案</span></span><br><span class="line">body&#123;</span><br><span class="line">  -webkit-text-size-adjust: <span class="number">100</span>%!important;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="屏幕旋转的事件和样式"><a href="#屏幕旋转的事件和样式" class="headerlink" title="屏幕旋转的事件和样式"></a>屏幕旋转的事件和样式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 事件</span></span><br><span class="line"><span class="built_in">window</span>.orientation，取值：正负<span class="number">90</span>表示横屏模式、<span class="number">0</span>和<span class="number">180</span>表现为竖屏模式；</span><br><span class="line"><span class="comment">// 代码判断</span></span><br><span class="line"><span class="built_in">window</span>.onorientationchange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">  <span class="keyword">switch</span>(<span class="built_in">window</span>.orientation)&#123; </span><br><span class="line">    <span class="keyword">case</span> <span class="number">-90</span>: </span><br><span class="line">    <span class="keyword">case</span> <span class="number">90</span>: </span><br><span class="line">        alert(<span class="string">"横屏:"</span> + <span class="built_in">window</span>.orientation); </span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>: </span><br><span class="line">    <span class="keyword">case</span> <span class="number">180</span>: </span><br><span class="line">        alert(<span class="string">"竖屏:"</span> + <span class="built_in">window</span>.orientation); </span><br><span class="line">    <span class="keyword">break</span>; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 样式</span></span><br><span class="line"><span class="comment">/*竖屏时使用的样式*/</span> </span><br><span class="line">@media all and (orientation:portrait) &#123;</span><br><span class="line">  .css&#123;&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*横屏时使用的样式*/</span> </span><br><span class="line">@media all and (orientation:landscape) &#123;</span><br><span class="line">  .css&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="fixed元素无法点击"><a href="#fixed元素无法点击" class="headerlink" title="fixed元素无法点击"></a>fixed元素无法点击</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">场景：父元素设置position: fixed;</span><br><span class="line">子元素设置position: absolute;</span><br><span class="line">此时，如果父元素/子元素还设置了overflow: hidden 则出现“父元素遮挡该子元素“的bug。</span><br><span class="line">视觉(view)层并没有出现遮挡，只是无法触发绑定在该子元素上的事件。可理解为：「看到点不到」。</span><br><span class="line">补充： 页面往下滚动，触发position: fixed;的特性时，才会出现这个bug，在最顶不会出现。</span><br><span class="line">测试平台： 小米<span class="number">1</span>S，Android4<span class="number">.0</span>的Chrome18</span><br><span class="line">解决办法： 把父元素和子元素的overflow: hidden去掉。</span><br></pre></td></tr></table></figure><h3 id="overflow"><a href="#overflow" class="headerlink" title="overflow"></a>overflow</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">body如果设置height:<span class="number">100</span>%;overflow:hidden是依然可以滑动的，如果需禁止，</span><br><span class="line">要再加一层div设置 height:<span class="number">100</span>%加overflow：hidden（html,body加height:<span class="number">100</span>%） ，</span><br><span class="line">这样元素超出body的高度也不能滑动了。</span><br><span class="line">或者同时给html，body加height:<span class="number">100</span>%;overflow:hidden</span><br></pre></td></tr></table></figure><h3 id="ios阻止旋转屏幕时自动调整字体大小"><a href="#ios阻止旋转屏幕时自动调整字体大小" class="headerlink" title="ios阻止旋转屏幕时自动调整字体大小"></a>ios阻止旋转屏幕时自动调整字体大小</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">html, body, form, fieldset, p, div, h1, h2, h3, h4, h5, h6 &#123;</span><br><span class="line">  -webkit-text-size-adjust:none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通过transform进行skew变形，rotate旋转会造成出现锯齿现象"><a href="#通过transform进行skew变形，rotate旋转会造成出现锯齿现象" class="headerlink" title="通过transform进行skew变形，rotate旋转会造成出现锯齿现象"></a>通过transform进行skew变形，rotate旋转会造成出现锯齿现象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-webkit-transform: rotate(<span class="number">-4</span>deg) skew(<span class="number">10</span>deg) translateZ(<span class="number">0</span>);</span><br><span class="line">transform: rotate(<span class="number">-4</span>deg) skew(<span class="number">10</span>deg) translateZ(<span class="number">0</span>);</span><br><span class="line">outline: <span class="number">1</span>px solid rgba(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h3 id="iOS6下伪类-hover"><a href="#iOS6下伪类-hover" class="headerlink" title="iOS6下伪类:hover"></a>iOS6下伪类:hover</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">除了&lt;a&gt;之外的元素无效；在Android下则有效。类似</span><br><span class="line">div#topFloatBar_l:hover #topFloatBar_menu &#123;</span><br><span class="line">  display:block; </span><br><span class="line">&#125;</span><br><span class="line">这样的导航显示在iOS6点击没有点击效果，只能通过增加点击侦听器给元素增减<span class="class"><span class="keyword">class</span>来控制子元素。</span></span><br></pre></td></tr></table></figure><h3 id="点击按钮时背景变黑色的解决"><a href="#点击按钮时背景变黑色的解决" class="headerlink" title="点击按钮时背景变黑色的解决"></a>点击按钮时背景变黑色的解决</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 点击按钮时背景变黑色的解决</span></span><br><span class="line">-webkit-tap-highlight-color: transparent;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当我们去掉默认的大黑块儿后，要添加自己想要的点击时按住按钮的效果，用以下代码：</span></span><br><span class="line">span:active&#123;</span><br><span class="line">  box-shadow: inset 0 5px 10px #B41313,inset 0 -5px 10px #B41313;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 添加完上述代码后，在安卓上，都可以看到想要的效果，但是iphone上依旧不行，</span></span><br><span class="line"><span class="comment">// :active  需要一个触发事件才可以，于是乎，用以下代码：</span></span><br><span class="line"><span class="built_in">document</span>.body.addEventListener(<span class="string">'touchstart'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;);</span><br></pre></td></tr></table></figure><h3 id="retina屏下border的1px会变粗"><a href="#retina屏下border的1px会变粗" class="headerlink" title="retina屏下border的1px会变粗"></a>retina屏下border的1px会变粗</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 因为像素比，比如，iphone6的像素比是2，window.devicePixelRatio可以查看，</span></span><br><span class="line"><span class="comment">// iphone6的设备宽是375,而物理像素是750，在css中的1px，实际控制的是2px的像素，</span></span><br><span class="line"><span class="comment">// 所以看起来会变粗了</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 解决一：IOS8下已经支持带小数的px值, media query对应devicePixelRatio有个查询值-webkit-min-device-pixel-ratio, css可以写成这样</span></span><br><span class="line">.border &#123; border: 1px solid #999 &#125;</span><br><span class="line">@media screen and (-webkit-min-device-pixel-ratio: <span class="number">2</span>) &#123;</span><br><span class="line">    .border &#123; border: 0.5px solid #999 &#125;</span><br><span class="line">&#125;</span><br><span class="line">@media screen and (-webkit-min-device-pixel-ratio: <span class="number">3</span>) &#123;</span><br><span class="line">    .border &#123; border: 0.333333px solid #999 &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解决二：background渐变</span></span><br><span class="line"><span class="comment">// 背景渐变, 渐变在透明色和边框色中间分割, frozenUI用的就是这种方法, 借用它的上边框写法:</span></span><br><span class="line">@media screen and (-webkit-min-device-pixel-ratio: <span class="number">2</span>)&#123;</span><br><span class="line">    .ui-border-t &#123;</span><br><span class="line">        background-position: left top;</span><br><span class="line">        background-image: -webkit-gradient(linear,left bottom,left top,color-stop(0.5,transparent),color-stop(0.5,#e0e0e0),to(#e0e0e0));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解决三：</span></span><br><span class="line"><span class="comment">// :before, :after与transform</span></span><br><span class="line">.radius-border&#123;</span><br><span class="line">    position: relative;</span><br><span class="line">&#125;</span><br><span class="line">@media screen and (-webkit-min-device-pixel-ratio: <span class="number">2</span>)&#123;</span><br><span class="line">    .radius-border:before&#123;</span><br><span class="line">        content: <span class="string">""</span>;</span><br><span class="line">        pointer-events: none; <span class="comment">/* 防止点击触发 */</span></span><br><span class="line">        box-sizing: border-box;</span><br><span class="line">        position: absolute;</span><br><span class="line">        width: <span class="number">200</span>%;</span><br><span class="line">        height: <span class="number">200</span>%;</span><br><span class="line">        left: <span class="number">0</span>;</span><br><span class="line">        top: <span class="number">0</span>;</span><br><span class="line">        border-radius: <span class="number">8</span>px;</span><br><span class="line">        border:1px solid #999;</span><br><span class="line">        -webkit-transform(scale(<span class="number">0.5</span>));</span><br><span class="line">        -webkit-transform-origin: <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">        transform(scale(<span class="number">0.5</span>));</span><br><span class="line">        transform-origin: <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;移动端有关html标签节点的兼容性问题&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
    
      <category term="移动端" scheme="/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
      <category term="兼容性" scheme="/tags/%E5%85%BC%E5%AE%B9%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>vue自定义指令之输入框限制字数</title>
    <link href="/2019/03/01/vue%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4%E4%B9%8B%E8%BE%93%E5%85%A5%E6%A1%86%E9%99%90%E5%88%B6%E5%AD%97%E6%95%B0/"/>
    <id>/2019/03/01/vue自定义指令之输入框限制字数/</id>
    <published>2019-03-01T06:36:24.000Z</published>
    <updated>2019-03-04T08:15:45.039Z</updated>
    
    <content type="html"><![CDATA[<p>input输入框限制字数的指令制作<br><a id="more"></a></p><h2 id="vue自定义指令之输入框限制字数"><a href="#vue自定义指令之输入框限制字数" class="headerlink" title="vue自定义指令之输入框限制字数"></a>vue自定义指令之输入框限制字数</h2><p>vue自定义指令没啥说的，说明见<a href="https://cn.vuejs.org/v2/guide/custom-directive.html" target="_blank" rel="noopener">官网</a>,具体代码见下面:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Vue.directive(<span class="string">'inputvalidatecounter'</span>, &#123;</span><br><span class="line">  inserted: <span class="function"><span class="keyword">function</span> (<span class="params">el, binding</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> nSpan = <span class="built_in">document</span>.createElement(<span class="string">'span'</span>),</span><br><span class="line">        nInput = el.querySelector(<span class="string">'input'</span>),</span><br><span class="line">        count = +binding.expression || <span class="number">50</span>;</span><br><span class="line">    el.appendChild(nSpan);</span><br><span class="line">    nSpan.innerHTML = <span class="string">'还可以填写'</span>+count+<span class="string">'字'</span>;</span><br><span class="line">    nInput.addEventListener(<span class="string">'input'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> num = count - <span class="keyword">this</span>.value.length;</span><br><span class="line">      <span class="keyword">if</span>(num&lt;=<span class="number">0</span>) &#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">var</span> substr = <span class="keyword">this</span>.value.substring(<span class="number">0</span>,count<span class="number">-1</span>);</span><br><span class="line">          <span class="keyword">this</span>.value = substr;</span><br><span class="line">        &#125;, <span class="number">10</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      nSpan.innerHTML = <span class="string">'还可以填写'</span>+(num&lt;<span class="number">0</span>?<span class="number">0</span>:num)+<span class="string">'字'</span>;</span><br><span class="line">    &#125;, <span class="literal">false</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>需要注意的地方：</p><ul><li>这个指令只适用于iview的Input组件，看里边操作dom元素就可以看出来，想改成其它的也是简单。</li><li><h1 id="在更改input的value的时候，最开始改不过来，后来我做了下延迟才解决这个问题，我想应该是在直接给input的value赋值后由于vue还在做监控，所以又给改回去了，所以来个延迟，在它监控触发结束后再改正。"><a href="#在更改input的value的时候，最开始改不过来，后来我做了下延迟才解决这个问题，我想应该是在直接给input的value赋值后由于vue还在做监控，所以又给改回去了，所以来个延迟，在它监控触发结束后再改正。" class="headerlink" title="在更改input的value的时候，最开始改不过来，后来我做了下延迟才解决这个问题，我想应该是在直接给input的value赋值后由于vue还在做监控，所以又给改回去了，所以来个延迟，在它监控触发结束后再改正。"></a>在更改input的value的时候，最开始改不过来，后来我做了下延迟才解决这个问题，我想应该是在直接给input的value赋值后由于vue还在做监控，所以又给改回去了，所以来个延迟，在它监控触发结束后再改正。</h1>2019年3月4日更改<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Vue.directive(<span class="string">'inputvalidatecounter'</span>, &#123;</span><br><span class="line">  inserted: <span class="function"><span class="keyword">function</span> (<span class="params">el, binding, vnode</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> nSpan = <span class="built_in">document</span>.createElement(<span class="string">'span'</span>),</span><br><span class="line">        nInput = el.querySelector(<span class="string">'input'</span>) || el.querySelector(<span class="string">'textarea'</span>),</span><br><span class="line">        count = +binding.expression || <span class="number">50</span>;</span><br><span class="line">    el.appendChild(nSpan);</span><br><span class="line">    nSpan.innerHTML = <span class="string">'还可以填写'</span>+count+<span class="string">'字'</span>;</span><br><span class="line">    nInput.addEventListener(<span class="string">'input'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> num = count - <span class="keyword">this</span>.value.length;</span><br><span class="line">      <span class="keyword">if</span>(num&lt;=<span class="number">0</span>) &#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">var</span> substr = <span class="keyword">this</span>.value.substring(<span class="number">0</span>,count);</span><br><span class="line">          <span class="keyword">this</span>.value = substr;</span><br><span class="line">          <span class="comment">// 新添加开始</span></span><br><span class="line">          <span class="keyword">var</span> keyArr = vnode.data.model.expression.split(<span class="string">'.'</span>);</span><br><span class="line">          <span class="keyword">var</span> evalStr = <span class="string">'vnode.context._data'</span>;</span><br><span class="line">          keyArr.forEach(<span class="function">(<span class="params">item, index</span>)=&gt;</span> &#123;</span><br><span class="line">            evalStr += <span class="string">'["'</span>+item+<span class="string">'"]'</span>;</span><br><span class="line">          &#125;);</span><br><span class="line">          <span class="built_in">eval</span>(evalStr+<span class="string">'="'</span>+<span class="keyword">this</span>.value+<span class="string">'"'</span>)</span><br><span class="line">          <span class="comment">// 新添加结束</span></span><br><span class="line">        &#125;, <span class="number">10</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      nSpan.innerHTML = <span class="string">'还可以填写'</span>+(num&lt;<span class="number">0</span>?<span class="number">0</span>:num)+<span class="string">'字'</span>;</span><br><span class="line">    &#125;, <span class="literal">false</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><p>新添加的内容只有几行，其实是为了修改第一版的bug，当在input里输入内容的时候，超过一定字数后，进入延迟函数，这里把input的value值更改了，但是并没有更改这个指令所在组件里v-model的值，所以，这里需要修正。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vnode是这个指令所在的组建的虚拟dom</span></span><br><span class="line"><span class="comment">// vnode.data.model.expression 这就可以直接找到v-model里的变量名</span></span><br><span class="line"><span class="keyword">var</span> keyArr = vnode.data.model.expression.split(<span class="string">'.'</span>);</span><br><span class="line"><span class="comment">// vnode知道了，vnode.context很显然就是组件所在的父级组件，可以通过 _data 这个数据去改变v-model里变量的值。</span></span><br><span class="line"><span class="keyword">var</span> evalStr = <span class="string">'vnode.context._data'</span>;</span><br><span class="line">keyArr.forEach(<span class="function">(<span class="params">item, index</span>)=&gt;</span> &#123;</span><br><span class="line">  evalStr += <span class="string">'["'</span>+item+<span class="string">'"]'</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 经过上边的循环是因为这种情况, v-model="formitem.name"，像这种的值，而不是v-model="name"这种。</span></span><br><span class="line"><span class="comment">// 最后需要eval来执行这些字符串组成的代码。</span></span><br><span class="line"><span class="built_in">eval</span>(evalStr+<span class="string">'="'</span>+<span class="keyword">this</span>.value+<span class="string">'"'</span>)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;input输入框限制字数的指令制作&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
    
      <category term="vue" scheme="/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>js图片下载之后端部分</title>
    <link href="/2019/02/27/js%E5%9B%BE%E7%89%87%E4%B8%8B%E8%BD%BD%E4%B9%8B%E5%90%8E%E7%AB%AF%E9%83%A8%E5%88%86/"/>
    <id>/2019/02/27/js图片下载之后端部分/</id>
    <published>2019-02-27T05:31:24.000Z</published>
    <updated>2019-02-27T06:05:37.582Z</updated>
    
    <content type="html"><![CDATA[<p>nodejs服务返回图片二进制数据<br><a id="more"></a></p><h2 id="js图片下载之后端部分"><a href="#js图片下载之后端部分" class="headerlink" title="js图片下载之后端部分"></a>js图片下载之后端部分</h2><p>本站<a href="/2019/02/27/js图片下载之前端部分/">《js图片下载之前端部分》</a>,写了如何利用js来下载图片，第二种方式需要后端返回图片的二进制数据，这篇文章我来写一下如何使用nodejs向前端返图片的二进制数据，我总结了三种方法。</p><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app.post(<span class="string">'/downimg'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  res.header(<span class="string">"Content-Type"</span>, <span class="string">"application/octet-stream"</span>);</span><br><span class="line">  fs.createReadStream(<span class="string">'./img/1.jpg'</span>)</span><br><span class="line">  .pipe(res);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这种方法利用了stream和pipe，一行代码就解决了，利用fs去读取图片的流只有，用pipe方法把流转给res，res自动就把数据返回给前端。</p><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">app.post(<span class="string">'/downimg'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.header(<span class="string">"Content-Type"</span>, <span class="string">"application/octet-stream"</span>);</span><br><span class="line">  <span class="keyword">var</span> data = <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">var</span> readerStream = fs.createReadStream(process.cwd() + <span class="string">'/img/1.jpg'</span>);</span><br><span class="line">  <span class="comment">// 设置编码为 binary 必须</span></span><br><span class="line">  readerStream.setEncoding(<span class="string">'binary'</span>);</span><br><span class="line">  readerStream.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>) </span>&#123;</span><br><span class="line">     data += chunk;</span><br><span class="line">  &#125;);</span><br><span class="line">  readerStream.on(<span class="string">'end'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 必须加上binary，返回的是二进制</span></span><br><span class="line">    res.end(data, <span class="string">'binary'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  readerStream.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(err.stack);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这个方法其实跟第一个差不多，都是使用了fs的流来读取图片，但是没有使用pipe直接把数据流转给res，需要自己监听数据来处理，这里我试验了好多方式，终于成功了，注意readerStream.setEncoding(‘binary’)和res.end(data, ‘binary’)，都需要加上binary格式。</p><h3 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">app.post(<span class="string">'/downimg'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.header(<span class="string">"Content-Type"</span>, <span class="string">"application/octet-stream"</span>);</span><br><span class="line">    fs.readFile(<span class="string">'./img/1.jpg'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (err) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</span><br><span class="line">     &#125;</span><br><span class="line">     res.end(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这种方法时最简单的，但是遇到大文件会影响计算机的性能。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>最后整体代码贴一下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"> </span><br><span class="line">app.all(<span class="string">'*'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    res.header(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"*"</span>);</span><br><span class="line">    res.header(<span class="string">"Access-Control-Allow-Headers"</span>, <span class="string">"X-Requested-With"</span>);</span><br><span class="line">    res.header(<span class="string">"Access-Control-Allow-Methods"</span>,<span class="string">"PUT,POST,GET,DELETE,OPTIONS"</span>);</span><br><span class="line">    res.header(<span class="string">"X-Powered-By"</span>,<span class="string">' 3.2.1'</span>)</span><br><span class="line">    res.header(<span class="string">"Content-Type"</span>, <span class="string">"application/json;charset=utf-8"</span>);</span><br><span class="line">    next();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// stream+pipe方式一</span></span><br><span class="line">app.post(<span class="string">'/downimg'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  res.header(<span class="string">"Content-Type"</span>, <span class="string">"application/octet-stream"</span>);</span><br><span class="line">  fs.createReadStream(<span class="string">'./img/1.jpg'</span>)</span><br><span class="line">  .pipe(res);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// stream方式二</span></span><br><span class="line">app.post(<span class="string">'/downimg'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.header(<span class="string">"Content-Type"</span>, <span class="string">"application/octet-stream"</span>);</span><br><span class="line">  <span class="keyword">var</span> data = <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">var</span> readerStream = fs.createReadStream(process.cwd() + <span class="string">'/img/1.jpg'</span>);</span><br><span class="line">  <span class="comment">// 设置编码为 binary 必须</span></span><br><span class="line">  readerStream.setEncoding(<span class="string">'binary'</span>);</span><br><span class="line">  readerStream.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>) </span>&#123;</span><br><span class="line">     data += chunk;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  readerStream.on(<span class="string">'end'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 必须加上binary，返回的是二进制</span></span><br><span class="line">    res.end(data, <span class="string">'binary'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  readerStream.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(err.stack);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接读取整个文件方式三</span></span><br><span class="line">app.post(<span class="string">'/downimg'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.header(<span class="string">"Content-Type"</span>, <span class="string">"application/octet-stream"</span>);</span><br><span class="line">    fs.readFile(<span class="string">'./img/1.jpg'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (err) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</span><br><span class="line">     &#125;</span><br><span class="line">     res.end(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> server = app.listen(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"应用实例，访问地址为 http://%s:%s"</span>, <span class="string">'127.0.0.1'</span>, <span class="string">'3000'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;nodejs服务返回图片二进制数据&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="nodejs" scheme="/categories/nodejs/"/>
    
    
      <category term="图片处理" scheme="/tags/%E5%9B%BE%E7%89%87%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>js图片下载之前端部分</title>
    <link href="/2019/02/27/js%E5%9B%BE%E7%89%87%E4%B8%8B%E8%BD%BD%E4%B9%8B%E5%89%8D%E7%AB%AF%E9%83%A8%E5%88%86/"/>
    <id>/2019/02/27/js图片下载之前端部分/</id>
    <published>2019-02-27T02:31:41.000Z</published>
    <updated>2019-02-27T06:03:47.927Z</updated>
    
    <content type="html"><![CDATA[<p>js控制图片下载<br><a id="more"></a></p><h2 id="js图片下载之前端部分"><a href="#js图片下载之前端部分" class="headerlink" title="js图片下载之前端部分"></a>js图片下载之前端部分</h2><p>这两天有一个小需求，就是点击页面中的下载按钮，下载指定的图片。经过一番的小研究，发现想实现这个功能，基本上都用到a标签的download属性，也就a标签的href指向图片地址，加上download属性后，点a标签就可以下载图片了。但是，有个问题，这需要在同域名下才好用，跨域貌似都不行，所以，在跨域的情况下就得另想办法。我总结了两种方法，一一道来。</p><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>利用canvas，就是有一个图片地址，利用canvas把图片画出来，之后再通过canvas的toDataURL方法，将图片转为base64的数据，再把这个数据赋值给a标签的href属性，就可以了。这里注意一点，canvas调取toDataURL方法时，如果是跨域图片需要后台允许跨域，还需要在img标签的”crossOrigin”属性设置为’Anonymous’才管用，最后贴出具体代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">downloadImg</span>(<span class="params">url</span>)</span>&#123;</span><br><span class="line">        <span class="comment">// 通过构造函数来创建的 img 实例，在赋予 src 值后就会立刻下载图片，相比 createElement() 创建 &lt;img&gt; 省去了 append()，也就避免了文档冗余和污染</span></span><br><span class="line">        <span class="keyword">var</span> Img = <span class="keyword">new</span> Image(),</span><br><span class="line">            dataURL=<span class="string">''</span>;</span><br><span class="line">        Img.setAttribute(<span class="string">"crossOrigin"</span>,<span class="string">'Anonymous'</span>); <span class="comment">// 这里允许了跨域图片</span></span><br><span class="line">        Img.src=url;</span><br><span class="line">        Img.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">// 要先确保图片完整获取到，这是个异步事件</span></span><br><span class="line">            <span class="keyword">var</span> canvas = <span class="built_in">document</span>.createElement(<span class="string">"canvas"</span>), <span class="comment">// 创建canvas元素</span></span><br><span class="line">                width=Img.width, <span class="comment">// 确保canvas的尺寸和图片一样</span></span><br><span class="line">                height=Img.height;</span><br><span class="line">            canvas.width=width;</span><br><span class="line">            canvas.height=height;</span><br><span class="line">            canvas.getContext(<span class="string">"2d"</span>).drawImage(Img,<span class="number">0</span>,<span class="number">0</span>,width,height); <span class="comment">// 将图片绘制到canvas中</span></span><br><span class="line">            dataURL=canvas.toDataURL(<span class="string">'image/jpeg'</span>); <span class="comment">// 转换图片为dataURL</span></span><br><span class="line">            <span class="keyword">var</span> a = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>),</span><br><span class="line">        body = <span class="built_in">document</span>.body;</span><br><span class="line">            a.download = <span class="string">'img.jpg'</span>;</span><br><span class="line">            a.href = dataURL;</span><br><span class="line">            body.append(a); </span><br><span class="line">            a.click();</span><br><span class="line">            body.removeChild(a);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>第二种方法就需要后端配合了，前端使用ajax请求到图片的二进制数据，之后利用了FileReader这个API，具体看代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">downloadImg</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">  xhr.open(<span class="string">'POST'</span>, url, <span class="literal">true</span>);    <span class="comment">// 请求方式</span></span><br><span class="line">  xhr.responseType = <span class="string">"blob"</span>;  <span class="comment">// 返回类型blob</span></span><br><span class="line">  xhr.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 请求完成</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.status === <span class="number">200</span>) &#123;</span><br><span class="line">      <span class="comment">// 返回200</span></span><br><span class="line">      <span class="keyword">var</span> blob = <span class="keyword">this</span>.response;</span><br><span class="line">      <span class="keyword">var</span> reader = <span class="keyword">new</span> FileReader();</span><br><span class="line">      reader.readAsDataURL(blob);  <span class="comment">// 转换为base64，可以直接放入a标签的href</span></span><br><span class="line">      reader.onload = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 转换完成，创建一个a标签用于下载</span></span><br><span class="line">        <span class="keyword">var</span> a = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>),</span><br><span class="line">        body = <span class="built_in">document</span>.body;</span><br><span class="line">        a.download = <span class="string">'img.jpg'</span>;</span><br><span class="line">        a.href = e.target.result;</span><br><span class="line">        body.append(a); </span><br><span class="line">        a.click();</span><br><span class="line">        body.removeChild(a);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 发送ajax请求</span></span><br><span class="line">  xhr.send()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个方法需要后端发送图片的二进制数据，我也写了nodejs的发送方法，见<a href="/2019/02/27/js图片下载之后端部分/">《js图片下载之后端部分》</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;js控制图片下载&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
    
      <category term="基础知识" scheme="/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
      <category term="图片处理" scheme="/tags/%E5%9B%BE%E7%89%87%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>浏览器消息提示Notification</title>
    <link href="/2019/02/14/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B6%88%E6%81%AF%E6%8F%90%E7%A4%BANotification/"/>
    <id>/2019/02/14/浏览器消息提示Notification/</id>
    <published>2019-02-14T06:41:44.000Z</published>
    <updated>2019-02-14T06:54:50.672Z</updated>
    
    <content type="html"><![CDATA[<p>浏览器自带的消息提示框<br><a id="more"></a></p><h2 id="浏览器消息提示Notification"><a href="#浏览器消息提示Notification" class="headerlink" title="浏览器消息提示Notification"></a>浏览器消息提示Notification</h2><p>这两天有一个新需求，微信网页版有这个功能，就是当浏览器最小化后，微信来消息，这时在电脑桌面的右下角会有消息提示框。<br>这个功能用到了浏览器新特性的Notification接口，虽说兼容性不好，但是在现代浏览器上使用还是可以的。<br>直接贴出demo:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">  &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">  &lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"ie=edge"</span>&gt;</span><br><span class="line">  &lt;title&gt;Notification&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;button id=<span class="string">"message"</span>&gt;弹消息&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">  &lt;button id="message-delay"&gt;弹消息延迟&lt;/</span>button&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">  var btn = document.getElementById('message');</span></span><br><span class="line"><span class="regexp">  var btnDelay = document.getElementById('message-delay');</span></span><br><span class="line"><span class="regexp">  btn.addEventListener('click', ()=&gt; &#123;</span></span><br><span class="line"><span class="regexp">    notifyMe(&#123;</span></span><br><span class="line"><span class="regexp">      title: '消息通知',</span></span><br><span class="line"><span class="regexp">      body: '菜品订单',</span></span><br><span class="line"><span class="regexp">      icon: './</span>asset/image/icon.png<span class="string">'</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string">  &#125;, false);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  btnDelay.addEventListener('</span>click<span class="string">', ()=&gt; &#123;</span></span><br><span class="line"><span class="string">      setTimeout(()=&gt; &#123;</span></span><br><span class="line"><span class="string">        notifyMe(&#123;</span></span><br><span class="line"><span class="string">          title: '</span>消息通知<span class="string">',</span></span><br><span class="line"><span class="string">          body: '</span>菜品订单<span class="string">',</span></span><br><span class="line"><span class="string">          icon: '</span>./asset/image/icon.png<span class="string">'</span></span><br><span class="line"><span class="string">        &#125;);</span></span><br><span class="line"><span class="string">      &#125;, 5000);</span></span><br><span class="line"><span class="string">  &#125;, false);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  function notifyMe(options) &#123;</span></span><br><span class="line"><span class="string">    // if(!document.hidden) return; // 判断浏览器是否最小化</span></span><br><span class="line"><span class="string">    // 先检查浏览器是否支持</span></span><br><span class="line"><span class="string">    if (!("Notification" in window)) &#123;</span></span><br><span class="line"><span class="string">      alert("This browser does not support desktop notification");</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    // 检查用户是否同意接受通知</span></span><br><span class="line"><span class="string">    else if (Notification.permission === "granted") &#123;</span></span><br><span class="line"><span class="string">      // If it'</span>s okay <span class="keyword">let</span><span class="string">'s create a notification</span></span><br><span class="line"><span class="string">      var notification = new Notification(options.title, &#123;</span></span><br><span class="line"><span class="string">        body: options.body,</span></span><br><span class="line"><span class="string">        icon: options.icon,</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      &#125;);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    // 否则我们需要向用户获取权限</span></span><br><span class="line"><span class="string">    else if (Notification.permission !== '</span>denied<span class="string">') &#123;</span></span><br><span class="line"><span class="string">      Notification.requestPermission(function (permission) &#123;</span></span><br><span class="line"><span class="string">        // 如果用户同意，就可以向他们发送通知</span></span><br><span class="line"><span class="string">        if (permission === "granted") &#123;</span></span><br><span class="line"><span class="string">          var notification = new Notification(options.title, &#123;</span></span><br><span class="line"><span class="string">            body: options.body,</span></span><br><span class="line"><span class="string">            icon: options.icon,</span></span><br><span class="line"><span class="string">          &#125;);</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    // 过3秒关闭提示框</span></span><br><span class="line"><span class="string">    setTimeout(function() &#123;</span></span><br><span class="line"><span class="string">      notification.close();</span></span><br><span class="line"><span class="string">    &#125;, 3000);</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;浏览器自带的消息提示框&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
    
      <category term="基础知识" scheme="/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>git常用命令</title>
    <link href="/2019/01/31/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>/2019/01/31/git常用命令/</id>
    <published>2019-01-31T08:57:14.000Z</published>
    <updated>2019-02-01T05:08:51.840Z</updated>
    
    <content type="html"><![CDATA[<p>工作中常用的git命令小总结<br><a id="more"></a></p><h2 id="git常用命令"><a href="#git常用命令" class="headerlink" title="git常用命令"></a>git常用命令</h2><p>git在我们工作中使用的很多，还有想github这样牛逼的代码托管网站，所以，git这个版本管理工具越来越多的被使用，其实git使用起来还是很复杂的，但是，我平时只是提交代码，所以就用到了几个命令而已，在这里做一下记录。</p><h3 id="先来个简单点的"><a href="#先来个简单点的" class="headerlink" title="先来个简单点的"></a>先来个简单点的</h3><ul><li><p>首先就是把现有的项目clone到本地。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/jixoba/jQuery-Seat-Charts.git</span><br></pre></td></tr></table></figure></li><li><p>之后就是我常用的几个提交命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git status  // 查看更改的文件有哪些</span><br><span class="line">git add .   // add后边.的话，就是把所有改动的文件添加进去</span><br><span class="line">git commit -m &quot;提交log信息&quot; // 提交信息</span><br><span class="line">git push    // 最后把更改内容推到远程仓库中</span><br></pre></td></tr></table></figure></li></ul><p>以上就是我经常用到的简单命令，如果有分支的话可能会复杂点，根据提示就可以了</p><h3 id="说点复杂的"><a href="#说点复杂的" class="headerlink" title="说点复杂的"></a>说点复杂的</h3><ul><li><p>新建分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch branchname // branchname就是分支名</span><br></pre></td></tr></table></figure></li><li><p>查看分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch -a  //查看所有分支</span><br><span class="line">git branch -r  //查看远程分支</span><br></pre></td></tr></table></figure></li><li><p>本地切换分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout branchname</span><br></pre></td></tr></table></figure></li><li><p>克隆带有分支的项目方法一</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b template https://github.com/iview/iview-admin.git  // clone template分支</span><br></pre></td></tr></table></figure></li><li><p>克隆带有分支的项目方法二</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/iview/iview-admin.git // clone整个项目</span><br><span class="line"></span><br><span class="line">git branch -a  //列出所有分支名称如下： * 号表示当前分支</span><br><span class="line">  * dev  </span><br><span class="line">  remotes/origin/HEAD -&gt; origin/dev</span><br><span class="line">  remotes/origin/desktop</span><br><span class="line">  remotes/origin/template</span><br></pre></td></tr></table></figure></li><li><p>接下来，可以在本地新建分支并与远程仓库的分支进行关联了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b template origin/template   // 作用是checkout远程仓库origin的分支template，在本地起名为template分支，并切换到本地的template分支</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;工作中常用的git命令小总结&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
    
      <category term="基础知识" scheme="/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>jquery座位插件</title>
    <link href="/2019/01/29/jquery%E5%BA%A7%E4%BD%8D%E6%8F%92%E4%BB%B6/"/>
    <id>/2019/01/29/jquery座位插件/</id>
    <published>2019-01-29T07:44:05.000Z</published>
    <updated>2019-01-29T08:38:49.604Z</updated>
    
    <content type="html"><![CDATA[<p>一个画座位图的jquery插件<br><a id="more"></a></p><h2 id="jquery座位插件"><a href="#jquery座位插件" class="headerlink" title="jquery座位插件"></a>jquery座位插件</h2><p>最近这两天在画飞机的座位布局图和选座系统，本来想自己直接用原生画出来的，但是领导说其他部门做过相关功能，别的部门用的是jQuery-Seat-Charts这个插件，所以我也得使用。<br><a href="https://github.com/jixoba/jQuery-Seat-Charts" target="_blank" rel="noopener">这里是插件地址，我fork了下来</a><br>其实，这个插件的使用很简单，按照giyhub的文档就可以使用，因为需要定制开发，所以我大致的看了一下源码，觉得很好，主要是它在每个座位上加的事件，如果是我写的话，可能使用click事件，但是它用的focus事件和blur事件，正常情况下只有form表单的一些元素才有focus事件，但是想在div上也使用focus事件的话，需要给这个div加上tabIndex属性，一般情况下设为-1，就可以直接使用div的el.focus()方法了，我觉得这个好处就是，当点击其它座位时，之前focus的座位会触发blur事件，可以在这里做一些操作，简化了代码。<br>以后再画座位的时候还可以使用这个插件，比如电影院选做系统，动车，飞机等，还是很方便的的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一个画座位图的jquery插件&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
    
      <category term="jquery" scheme="/tags/jquery/"/>
    
  </entry>
  
  <entry>
    <title>手写一个trigger插件</title>
    <link href="/2019/01/22/%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AAtrigger%E6%8F%92%E4%BB%B6/"/>
    <id>/2019/01/22/手写一个trigger插件/</id>
    <published>2019-01-22T07:22:58.000Z</published>
    <updated>2019-01-22T08:41:41.185Z</updated>
    
    <content type="html"><![CDATA[<p>自己写一个简单的trigger来触发事件<br><a id="more"></a></p><h2 id="手写一个trigger插件"><a href="#手写一个trigger插件" class="headerlink" title="手写一个trigger插件"></a>手写一个trigger插件</h2><p>各位小伙伴们，jquery大家超级熟悉吧，jquery的trigger函数一定知道吧，反正我是非常喜欢用它，有时候比如要把一个弹出层隐藏掉，大家可能会去改这个弹出层的css，但是我可能会直接trigger一下这个弹出层取消按钮，因为我懒嘛，哈哈。<br>但是，有时候可能想用trigger的时候，发现并没有使用jquery，额，自己写一个吧，其实，这段代码的核心部分我是参考了百度的一个手势库，好像叫touch.js,当时看的时候貌似这个库已经5年没人维护了，不过，模拟触发事件的代码被我留下了。见下面：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params">root, factory</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span> exports === <span class="string">'object'</span> &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">module</span> === <span class="string">'object'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = factory;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> define === <span class="string">'function'</span> &amp;&amp; define.amd)</span><br><span class="line">define([], factory);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> exports === <span class="string">'object'</span>)</span><br><span class="line">exports[<span class="string">"jinuxTrigger"</span>] = factory;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">root[<span class="string">"jinuxTrigger"</span>] = factory;</span><br><span class="line">&#125;)(<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span>(<span class="params">el, evt, detail</span>) </span>&#123;</span><br><span class="line">detail = detail || &#123;&#125;;</span><br><span class="line">    <span class="keyword">var</span> e, opt = &#123;</span><br><span class="line">            bubbles: <span class="literal">true</span>,</span><br><span class="line">            cancelable: <span class="literal">true</span>,</span><br><span class="line">            detail: detail</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> CustomEvent !== <span class="string">'undefined'</span>) &#123;</span><br><span class="line">            e = <span class="keyword">new</span> CustomEvent(evt, opt);</span><br><span class="line">            <span class="keyword">if</span> (el) &#123;</span><br><span class="line">                el.dispatchEvent(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            e = <span class="built_in">document</span>.createEvent(<span class="string">"CustomEvent"</span>);</span><br><span class="line">            e.initCustomEvent(evt, <span class="literal">true</span>, <span class="literal">true</span>, detail);</span><br><span class="line">            <span class="keyword">if</span> (el) &#123;</span><br><span class="line">                el.dispatchEvent(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ex) &#123;</span><br><span class="line">        <span class="built_in">console</span>.warn(<span class="string">"jinux-trigger is not supported by environment."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>再附上一个小demo<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>jinux-trigger<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./trigger.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>页面加载进来之后，等待3秒后代码触发按钮的点击事件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>点击...<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">'button'</span>);</span></span><br><span class="line"><span class="javascript">    btn.addEventListener(<span class="string">'click'</span>,()=&gt;&#123;</span></span><br><span class="line"><span class="javascript">        alert(<span class="string">'点击按钮被点击了！！！'</span>);</span></span><br><span class="line"><span class="javascript">    &#125;,<span class="literal">false</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">//页面加载进来之后，等待3秒后代码触发按钮的点击</span></span></span><br><span class="line"><span class="javascript">    setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">        jinuxTrigger(btn,<span class="string">'click'</span>);</span></span><br><span class="line"><span class="undefined">    &#125;,3000);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自己写一个简单的trigger来触发事件&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
    
      <category term="js工具库" scheme="/tags/js%E5%B7%A5%E5%85%B7%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>谷歌黑语法</title>
    <link href="/2019/01/14/%E8%B0%B7%E6%AD%8C%E9%BB%91%E8%AF%AD%E6%B3%95/"/>
    <id>/2019/01/14/谷歌黑语法/</id>
    <published>2019-01-14T05:49:16.000Z</published>
    <updated>2019-01-15T06:05:34.367Z</updated>
    
    <content type="html"><![CDATA[<p>关于搜索引擎的一些使用技巧<br><a id="more"></a></p><h2 id="谷歌黑语法"><a href="#谷歌黑语法" class="headerlink" title="谷歌黑语法"></a>谷歌黑语法</h2><p>平时，我们经常用百度来搜索一些东西，由于墙的原因，我们很少用谷歌，但是我们工作生活中使用百度就已经足够了。<br>今天这篇文章介绍一下谷歌搜索的使用技巧，因为谷歌是所搜的老大，所以其它搜索引擎也来效仿谷歌，因而，下边介绍的这些搜索知识，基本上所有的搜索引擎都会适用的。</p><h3 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h3><p>谷歌的默认搜索是and逻辑，意思就是，我们在输入关键字后进行搜索时，如输入：“program google”后，会搜出包含“program”和“google”的文件内容，如下图1所示。<br><img src="/2019/01/14/谷歌黑语法/1.png" alt="img"><br>说到这里，我就插入一个小知识点：基础布尔逻辑。<br>对于一个搜索引擎来说，进行搜索的时候是要搜索到匹配到所有关键词的页面，还是包含关键词中的任意关键词就可以，取决于一个搜索引擎的一些特别算法，称之为搜索引擎的布尔逻辑默认值。<br>而google就是用and作为默认逻辑（搜索到所有的关键词），当然这个前提是我们没有输入一些特殊的命令。如果你不确定你要搜索的内容，或者你想搜索两个中的任意一个，那么就要使用关键词“OR”。注意：OR是大写的，小写是不起作用的，而且，每一个关键词与“OR”之间是有一个空格的，我们来看一下搜索结果。<br><img src="/2019/01/14/谷歌黑语法/2.png" alt="img"><br>当然，可以预想的是，google的结果要比program多得多，所以结果第一页全是有关google的内容。此外，还可以借助计算机体系语言中的“|”来代替“OR”，效果是一样的。<br>当然，如果你希望搜索“programgoogle”的内容，而不希望这两个单词之间有任何其他的内容，那么就要使用双引号把搜索的内容组成一个词组来达到目的。如下图3所示。<br><img src="/2019/01/14/谷歌黑语法/3.png" alt="img"><br>如上图所示，结果中的programgoogle都是在一起的，没有分割。当然这样的结果比较少，只有2740个，但是看图1，结果却有7亿多个。而且，大部分搜索引擎都有智能断句的功能，如果没有特殊的命令，搜索引擎会一定量的根据大众的语言使用习惯来判断你要搜索什么，而这样的做法，不仅仅没有使搜索引擎显得不听话，反而对大众来讲搜索引擎变得十分智能和高效！<br>但是如果我们只想看到“program”的内容，而不希望看到“google”的内容，就可以把“-”（减号或者破折号）应用到搜索当中去，语法为“program -google”，注意，“-”之前是有一个空格的，而其后却是和下一个关键词是紧紧相连的！搜索的结果如下图4所示。可以看得到结果中都会包含program，而不包含google。<br><img src="/2019/01/14/谷歌黑语法/4.png" alt="img"><br>说到这里，还要提一下google的约束扩展问题了。一般来说，当输入关键词后，google会把相关网页和信息的结果呈现在我们面前。然而，有一些单词在搜索引擎中是会被智能忽略的，导致我们得不到想要的结果。比如十分常用的“www”和“the”，基本上任何一个网页上都会找到的东西，就会被google自动忽略（不要觉得这样不好，还是那个道理，在实际引用当中这样做反而显得更加高效和智能）。如果我们不想忽略这些词进行查询，就得在这些关键词的前面加上符号“+”。如下图5所示：<br><img src="/2019/01/14/谷歌黑语法/5.png" alt="img"><br>看上去两者好像没有什么大的区别，其实仔细比较一下搜索结果就可以看得出，加上加号的搜索结果有一万多个，而不加加号的结果却有着55亿多！而因为google和www的关联度比较高，所以在前面的结果表现的差别不大。<br>除了上述字符之外，一些搜索引擎支持一种叫做“stemming”（填充）的技术。Stemming是指在查询的关键词中添加一些通配符，通常是“*”，有时候也可能是“？”，这些通配符的作用是要求搜索引擎进行查询是可以返回多个不同的结果。其中通配符代表占位，可以匹配其他任意字母和单词，而其他的字或词组与用户输入的相同。如我们想要搜索“Lionel Messi”的内容，却忘记了第一个单词的一些拼写，就可以输入“l*Messi”进行查询，注意：此处整个字符串是要用一个英文半角双引号括住的！结果如下图所示。<br><img src="/2019/01/14/谷歌黑语法/6.png" alt="img"><br>可以看到，google自动匹配出Lionel Messi的内容并且进行了搜索。这样的方式有利于我们只能记住单词或短语的一部分的内容时使用。<br>基本的语法就讲到这里，上述的内容也没有列全，因为有些搜索功能不太常用。不过，这些语法就已经够我们日常使用的了，基本语法就是做基本的事，google也有一些高级的语法，见下边高级语法。</p><h3 id="高级语法"><a href="#高级语法" class="headerlink" title="高级语法"></a>高级语法</h3><h4 id="intitle"><a href="#intitle" class="headerlink" title="intitle"></a>intitle</h4><p>首先要介绍的就是“intitle:”的用法，这个串的作用是将搜索的范围局限在标题上。在关键词前面加上这个，就会只对网页的标题进行搜索并且配对，最后将结果返回给用户。例如输入“intitle:program moon”进行搜索，就会返回如下图所示的结果。<br><img src="/2019/01/14/谷歌黑语法/7.png" alt="img"><br>但是可以看到，貌似搜索结果中只出现了关于program的内容，而并没有moon相关的内容，这里其实还是牵扯到搜索引擎的基础布尔逻辑问题，在intitle:语法上，google会检索所有的网页，只要出现program或者moon其中的一个就会被匹配，意料之中的是，关于program的内容肯定是要远远多于moon的内容的，所以搜索结果里关于program的内容占据了主导，可以理解为moon这个关键词被一定量的智能忽略了。但是如果我们想要找到网页标题中既有program又有moon的网页呢?那么我们就要使用“intitle:”的一个变体“allintitle:”，使用这个前缀后，就能得到我们想要的结果了。如下图所示，除了第一条为google的图片推荐，其余的结果中网页的标题既含有program这个关键词，又含有moon这个关键词。<br><img src="/2019/01/14/谷歌黑语法/8.png" alt="img"></p><h4 id="intext"><a href="#intext" class="headerlink" title="intext"></a>intext</h4><p>看到这个单词，大概就可以猜到它的意义了，“intext:”是用来搜索网页正文内容的，这样就可以忽略网页中的超文本链接、URL和题目。我们输入“intext:2018 program”进行搜索，结果如下图所示，结果中显示的网页大部分标题几乎没有规律，但是网页的索引中都包含着 “2018 program”，但是因为2018和program的同时出现的网页实在比较少，两个关键词的关联度实在不高（笔者此时的时间为2016年12月25日00:07:10），因为现在才是2016年，如果换成“2016 program”我相信应该会有更多的结果出现。但是我们要明白，这时搜索引擎关注的内容是网页的正文。与之相对应的也有一个变体：“allintext:”，用法和上面的“allintitle”相似，我就不做过多的介绍了。<br><img src="/2019/01/14/谷歌黑语法/9.png" alt="img"><br>到这里恐怕就有读者要问了，这与我们平时的搜索相比没有什么高级的地方啊？确实，就平时的搜索来讲，这个语法的意义确实不太重大，但是在某些领域，例如黑客作为一名攻击者，构造好关键词配合适当的语法就可以进行撒网式的攻击，这个呢，我们点到为止，这里就不谈了。</p><h4 id="inanchor"><a href="#inanchor" class="headerlink" title="inanchor"></a>inanchor</h4><p>这个语法的意思是在页面的链接锚点进行搜索。<br>链接锚点指的是一个链接的描述文本，如这样的一段HTML代码：&lt;a href=<a href="https://www.baidu.com&gt;百度" target="_blank" rel="noopener">https://www.baidu.com&gt;百度</a>，链接的锚点就是“百度”了。<br>我们搜索“inanchor:login”就可以搜索到有那些含有锚点的网页了，如下图所示。当然，这个语法也有一个变体“allinanchor:”，意思也与前面的类似。<br><img src="/2019/01/14/谷歌黑语法/10.png" alt="img"></p><h4 id="site"><a href="#site" class="headerlink" title="site"></a>site</h4><p>这个语法是把搜索限制在站点域名之内。例如我们搜索“program site:google.com”，结果如下图所示，这里呢，我们通常不需要加上前面的www，这样搜索的结果就会是包括所有含有google.com域名的有关内容，包括顶级域名和二级域名甚至三级域名的内容。也就是说我们甚至可以通过搜索，确定google.com大概有多少个子域名！<br><img src="/2019/01/14/谷歌黑语法/11.png" alt="img"></p><h4 id="inurl"><a href="#inurl" class="headerlink" title="inurl"></a>inurl</h4><p>inurl:会将搜索的范围限制在URL或者网站的页面上，这个语法对于查找搜索和帮助是很有用的，不仅适合我们普通的搜索，在黑客搜索中用处也很大。例如我们输入“inurl:password”，结果如下图所示，结果显示了所有URL中含有password的网页。另外，这个语法也有一个变体：“allinurl:”，用法与前面的相似。<br><img src="/2019/01/14/谷歌黑语法/12.png" alt="img"><br>在黑客领域，inurl和site的使用是十分的频繁的，利用他们组合可以搜索到有用的信息，如我们可以使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">“site:google.com –inurl:www.google.com”，而这个语法的含义就是搜索google到底有多少个子域名。</span><br></pre></td></tr></table></figure></p><h4 id="link"><a href="#link" class="headerlink" title="link"></a>link</h4><p>这个的功能是查询所有链接到某个特定URL上的列表。要注意的是，是特定的URL页面，如输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">“link:www.baidu.com”</span><br></pre></td></tr></table></figure></p><p>进行搜索，如下图所示，就会返回所有链接到百度主页的网页了。因此，我们同样可以指定特定的URL页面来进行搜索。<br><img src="/2019/01/14/谷歌黑语法/13.png" alt="img"></p><h4 id="cache"><a href="#cache" class="headerlink" title="cache"></a>cache</h4><p>Cache可以帮助我们查找到google索引过的页面副本，它最大的好处就是即使源文件界面不存在了，或者变成了其它的内容，我们依然可以搜索的到。例如输入:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">“cache：www.baidu.com”</span><br></pre></td></tr></table></figure></p><p>结果如下所示，可以看到，格式虽然乱糟糟的，但是依稀可以从中获取一些有用的信息的。在国内的搜索引擎上，可能也有类似的功能，比如百度的网页快照，其功能与这个类似。<br><img src="/2019/01/14/谷歌黑语法/14.png" alt="img"></p><h4 id="filetype"><a href="#filetype" class="headerlink" title="filetype"></a>filetype</h4><p>filetype是指搜索指定后缀的文件。这个不太常用，但是在黑客领域有一定的作用。但是我们的重点是讲解语法，所以这里就一笔带过（关于filetype的一些其他内容我会在以后的博文中展示），如下图所示，输入“filetype:mdb”，结果就会显示出一些网站的数据库文件。<br><img src="/2019/01/14/谷歌黑语法/15.png" alt="img"></p><h4 id="related"><a href="#related" class="headerlink" title="related"></a>related</h4><p>这个语法是用于搜索与某些页面相关的网站的，可以辅助我们搜索同类的页面。比如我们输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">“related:www.google.com”</span><br></pre></td></tr></table></figure></p><p>显示的结果都是一些其他的搜索引擎。<br><img src="/2019/01/14/谷歌黑语法/16.png" alt="img"></p><h4 id="info"><a href="#info" class="headerlink" title="info"></a>info</h4><p>这个语法可以搜索到关于一个URL的更多信息的页面列表，这里的信息包括这个网页的cache，还有与这个网页相似的网页等等，注意下面的英文信息就好。输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">“info:www.google.com”</span><br></pre></td></tr></table></figure></p><p>结果如下图所示。<br><img src="/2019/01/14/谷歌黑语法/17.png" alt="img"></p><p>好了，大概就这么多了，还用别的这里就不介绍了，对于我这种小白来说已经够用的了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于搜索引擎的一些使用技巧&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="计算机原理" scheme="/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="网络基础" scheme="/tags/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>es6-async-await</title>
    <link href="/2019/01/03/es6-async-await/"/>
    <id>/2019/01/03/es6-async-await/</id>
    <published>2019-01-03T06:17:47.000Z</published>
    <updated>2019-01-03T06:26:12.963Z</updated>
    
    <content type="html"><![CDATA[<p>es6中async-await的demo<br><a id="more"></a></p><h2 id="es6-async-await"><a href="#es6-async-await" class="headerlink" title="es6-async-await"></a>es6-async-await</h2><p>es6现在已经在项目中使用了，async偶尔用，所以要用的时候总是忘记，写个小demo，用的时候看一眼，哈哈<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;es7-<span class="keyword">async</span>-<span class="keyword">await</span>&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;es7-<span class="keyword">async</span>-<span class="keyword">await</span>&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="comment">//写一个返回Promise的异步函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">asyncTime</span>(<span class="params">val, ms</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">resolve(val);</span><br><span class="line">&#125;,ms);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//async函数</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">testAsync</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">let</span> a = <span class="keyword">await</span> asyncTime(<span class="number">1</span>, <span class="number">1000</span>); <span class="comment">//a的值就是Promise函数里面resolve的参数值</span></span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">await</span> asyncTime(a+<span class="number">1</span>, <span class="number">1000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br><span class="line"><span class="keyword">let</span> c = <span class="keyword">await</span> asyncTime(b+<span class="number">1</span>, <span class="number">1000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(c);</span><br><span class="line"><span class="keyword">let</span> d = <span class="keyword">await</span> <span class="number">123</span>; <span class="comment">//await后面可以不是Promise函数，但是会自动包装成一个Promise函数并且立即向后执行</span></span><br><span class="line"><span class="built_in">console</span>.log(d);</span><br><span class="line"><span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line">testAsync().then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'async函数的then函数-&gt;'</span>,res);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//async函数</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">testAsync_2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">let</span> a = <span class="keyword">await</span> testAsync(); <span class="comment">//因为async本身执行后会返回一个Promise函数(async函数内部return的值只作为async返回的Promise函数的then里的参数传入)，所以此处也可以在await后边写async函数。</span></span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line">testAsync_2().then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'async函数2的then函数-&gt;'</span>,res);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//再来一个多个异步函数执行的例子</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">testAsync_3</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">let</span> a = <span class="keyword">await</span> <span class="built_in">Promise</span>.all([asyncTime(<span class="string">'all1'</span>,<span class="number">2000</span>),asyncTime(<span class="string">'all2'</span>,<span class="number">2000</span>),asyncTime(<span class="string">'all3'</span>,<span class="number">2000</span>)]);</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line">testAsync_3().then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">alert(res);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;es6中async-await的demo&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
    
      <category term="基础知识" scheme="/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>github预览静态库页面</title>
    <link href="/2019/01/02/github%E9%A2%84%E8%A7%88%E9%9D%99%E6%80%81%E5%BA%93%E9%A1%B5%E9%9D%A2/"/>
    <id>/2019/01/02/github预览静态库页面/</id>
    <published>2019-01-02T08:53:42.000Z</published>
    <updated>2019-01-03T00:52:33.164Z</updated>
    
    <content type="html"><![CDATA[<p>github预览静态库页面<br><a id="more"></a></p><h2 id="github预览静态库页面"><a href="#github预览静态库页面" class="headerlink" title="github预览静态库页面"></a>github预览静态库页面</h2><p>类似于 <a href="https://jinux7.github.io" target="_blank" rel="noopener">https://jinux7.github.io</a> 这样的github静态网站展示大家都知道怎么弄，在网上可以搜索到很多教程，我自己的blog网站就是这么搞的，但是这种方法我发现一个github账户只能弄出一个，今天我想说的是另一种方式，直接可以访问到普通库里的静态页面。<br>这里需要github提供的一个服务地址，见下边：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://htmlpreview.github.io/?https://raw.githubusercontent.com/jixoba/mobile_company/master/index.html</span><br></pre></td></tr></table></figure></p><p>上边的这段地址就可以访问普通库里的静态页面了，注意jixoba/mobile_company这个，是库的名称，只需要更改这个库名，其它地方不需要动。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;github预览静态库页面&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
    
      <category term="github" scheme="/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>cordova android打包配置详解</title>
    <link href="/2018/12/18/cordova-android%E6%89%93%E5%8C%85%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/"/>
    <id>/2018/12/18/cordova-android打包配置详解/</id>
    <published>2018-12-18T07:27:22.000Z</published>
    <updated>2018-12-19T05:22:57.679Z</updated>
    
    <content type="html"><![CDATA[<p>cordova打包android app<br><a id="more"></a></p><h2 id="cordova-android打包配置详解"><a href="#cordova-android打包配置详解" class="headerlink" title="cordova android打包配置详解"></a>cordova android打包配置详解</h2><p>前几天在网上看到了cordova的东西，之前有过鼓捣react native和weex，所以看看它有什么特点。<br>由于我用的是win10系统，所以在配置环境的时候相当的麻烦，这里稍微的屡一下。</p><h3 id="一-安装JDK"><a href="#一-安装JDK" class="headerlink" title="一 安装JDK"></a>一 安装JDK</h3><p>JDK是java的开发工具包，因为我们打包安卓的apk文件，安卓是依赖java的，所以这个必须安装。<br>我刚开始安装的是最新版的，但是与cordova版本好像不是很搭，于是安装了JDK8这个版本。<br>安装好了之后要配置环境变量，首先是新建变量名JAVA_HOME，指向JDK的安装目录，之后再配置一下path，指向JDK里的bin目录。<br>再配置一下jre的path，也是指向jre里的bin目录。（jre安装有的直接安装JDK的时候顺便安装了，有的版本需要另外单独安装）</p><h3 id="二-安装SDK"><a href="#二-安装SDK" class="headerlink" title="二 安装SDK"></a>二 安装SDK</h3><p>SDK稍微有点复杂，首先还是下载SDK并且安装，这里需要注意，安装路径，我用的win10，必须安装在 用户/用户名/AppData/Local,<br>其它系统可能无所谓。安装好了之后，还是配置环境变量，新建变量名ANDROID_SDK_HOME，指向安装的SDK目录，再配置path，指向SDK下的<br>tools和platform-tools。</p><h3 id="三-安装Gradle"><a href="#三-安装Gradle" class="headerlink" title="三 安装Gradle"></a>三 安装Gradle</h3><p>Gradle好像是一个打包工具，直接下载安装，之后配置一下Gradle的bin目录环境变量。</p><h3 id="四-安装cordova"><a href="#四-安装cordova" class="headerlink" title="四 安装cordova"></a>四 安装cordova</h3><p>cordova的安装和运行需要nodejs，所以用npm来安装。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g cordova@6.1.1</span><br></pre></td></tr></table></figure></p><p>注意，这里我安装的是6.1.1版本，高版本莫名其妙的报错，这个稳妥一些。<br>之后就是使用cordova来创建项目喽。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cordova create app jinux.com.cn app  // 创建一个项目</span><br><span class="line">cd app // 进入app项目</span><br><span class="line">cordova platform android  // 添加安卓模板</span><br><span class="line">cordova requirements  // 查看打包缺少什么依赖项</span><br><span class="line">cordova build android  // 打包apk</span><br></pre></td></tr></table></figure></p><p>以上的这些命令，在查看依赖项的时候肯定回报一些错误，SDK的一些依赖没有安装，进入SDK文件夹，打开SDK Manager.exe，根据依赖的提示下载相应的包，注意，这里是从谷歌上拉取，所以要开代理哦。<br>第一次build的时候，Gradle需要从网络上下载一堆包，还是注意需要代理拉取谷歌的文件，很慢的，耐心等待。<br>*下面是一个别人写的cordova博文，可供参考<br><a href="http://www.xiaoxiaohan.com/js/58.html#comments" target="_blank" rel="noopener">参考</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;cordova打包android app&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
    
      <category term="cordova" scheme="/tags/cordova/"/>
    
  </entry>
  
  <entry>
    <title>setTimeout&amp;async&amp;Promise执行顺序</title>
    <link href="/2018/12/11/setTimeout-async-Promise%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F/"/>
    <id>/2018/12/11/setTimeout-async-Promise执行顺序/</id>
    <published>2018-12-11T01:59:32.000Z</published>
    <updated>2018-12-11T02:36:37.697Z</updated>
    
    <content type="html"><![CDATA[<p>setTimeout&amp;async&amp;Promise执行顺序简要分析<br><a id="more"></a></p><h2 id="setTimeout-amp-async-amp-Promise执行顺序"><a href="#setTimeout-amp-async-amp-Promise执行顺序" class="headerlink" title="setTimeout&amp;async&amp;Promise执行顺序"></a>setTimeout&amp;async&amp;Promise执行顺序</h2><p>看到标题，觉得这种需求在实际项目中基本遇不到，是的，我从没有遇到过，而且，要用就用一种，既然用了async，还用啥Promise。不过，网上有一道面试题，据说是今日头条的面试题，考的就是这方面的知识，先贴出代码。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'async1 start'</span>)</span><br><span class="line">    <span class="keyword">await</span> async2()</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'async1 end'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'async2'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'script start'</span>)</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'setTimeout'</span>)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line">async1();</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'promise1'</span>)</span><br><span class="line">    resolve();</span><br><span class="line">&#125; ).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'promise2'</span>)</span><br><span class="line">&#125; )</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'script end'</span>)</span><br></pre></td></tr></table></figure></p><p>答案一会再说。<br>先来分析一下，setTimeout,async,Promise执行的有先顺序。其实，要想研究明白这个问题，需要了解异步执行的宏任务，微任务知识，而且，在浏览器和nodejs环境下还不一样，这里我不对这些知识作深入分析，因为我看了些相关知识，看的晕头转向，所以，我只简单的记一下在浏览器环境下的优先顺序。<br>异步发生的节点是：<br>1.setTimeout的回调函数。<br>2.Promise实例的then方法中的回调函数。<br>3.async函数中await 后面紧跟着的函数（如async2），这个地方比较有意思，进入async2的时候是同步的，async2里边如果都是同步函数，那就继续执行，等执行完毕，返回先关东西后，”await async2()”这句话下边的语句不会马上执行，有点像Promise实例的then方法中的回调一样，需要排队等待。<br>所以，优先顺序是Promise的then方法回调第一，async await 之后的语句排第二，setTimeout的回调排第三。<br>记住了吗？我没有考虑理论知识，只是简单地死记硬背而已。<br>最后，把上边代码的结果写出来，看看与你想的是否一样。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">script start</span><br><span class="line">async1 start</span><br><span class="line">async2</span><br><span class="line">promise1</span><br><span class="line">script end</span><br><span class="line">promise2</span><br><span class="line">async1 end</span><br><span class="line">setTimeout</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;setTimeout&amp;amp;async&amp;amp;Promise执行顺序简要分析&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
    
      <category term="面试题" scheme="/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
      <category term="基础知识" scheme="/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>nodejs搭建https服务器</title>
    <link href="/2018/12/07/nodejs%E6%90%AD%E5%BB%BAhttps%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>/2018/12/07/nodejs搭建https服务器/</id>
    <published>2018-12-07T07:03:57.000Z</published>
    <updated>2018-12-07T08:03:44.502Z</updated>
    
    <content type="html"><![CDATA[<p>ssl证书的创建，https服务器的搭建<br><a id="more"></a></p><h2 id="nodejs搭建https服务器"><a href="#nodejs搭建https服务器" class="headerlink" title="nodejs搭建https服务器"></a>nodejs搭建https服务器</h2><p>虽然作者是一名菜鸟前端，但是学习https相关的知识还是必须的。之前看过很多理论的文章，http与https的区别，ssl证书如何起作用的等等，说实话，我都忘记了，今天正好有时间，早上坐地铁就看了相关的文章，刚才写出了一个demo，现在就记录一下整个过程。</p><h3 id="http与https区别"><a href="#http与https区别" class="headerlink" title="http与https区别"></a>http与https区别</h3><ul><li>HTTP: 超文本传输协议 (Hypertext transfer protocol) 是一种详细规定了浏览器和万维网服务器之间互相通信的规则，通过因特网传送万维网文档的数据传送协议。</li><li>HTTPS:（Hypertext Transfer Protocol over Secure Socket Layer），是以安全为目标的HTTP通道，简单讲是HTTP的安全版。即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。 它是一个URI scheme（抽象标识符体系），句法类同http:体系。用于安全的HTTP数据传输。https:URL表明它使用了HTTP，但HTTPS存在不同于HTTP的默认端口及一个加密/身份验证层（在HTTP与TCP之间）。这个系统的最初研发由网景公司进行，提供了身份验证与加密通讯方法，现在它被广泛用于万维网上安全敏感的通讯，例如交易支付方面。<blockquote><p>区别：</p></blockquote></li><li>https协议需要到ca申请证书，一般免费证书很少，需要交费。</li><li>http是超文本传输协议，信息是明文传输，https 则是具有安全性的ssl加密传输协议。</li><li>http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。</li><li>http的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。<h3 id="创建ssl证书"><a href="#创建ssl证书" class="headerlink" title="创建ssl证书"></a>创建ssl证书</h3><h4 id="第一步，安装openssl"><a href="#第一步，安装openssl" class="headerlink" title="第一步，安装openssl"></a>第一步，安装openssl</h4>安装openssl，很简单，按照正常的window软件按照下一步按照就可以，下面是下载地址，注意选择是64bit还是32bit哦,我下载了“Win64 OpenSSL v1.1.1a Ligh”这个版本，因为体积小，所以下载了light的版本。<br><a href="https://slproweb.com/products/Win32OpenSSL.html" target="_blank" rel="noopener">openssl下载地址</a><br>安装好了之后，配置一下环境变量，这样在哪个文件夹下都可以直接使用openssl命令了。<h4 id="第二部，使用openssl创建ssl证书"><a href="#第二部，使用openssl创建ssl证书" class="headerlink" title="第二部，使用openssl创建ssl证书"></a>第二部，使用openssl创建ssl证书</h4>这个步骤还是有点小困难，在网上按照有的教程弄不好使，后来找到一个教程，好使，直接贴出命令行代码。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">#生成私钥key文件：</span><br><span class="line">~ D:\workspace\javascript\nodejs-https&gt;openssl genrsa -out privatekey.pem 1024</span><br><span class="line">Generating RSA private key, 1024 bit long modulus</span><br><span class="line">...........................++++++</span><br><span class="line">........++++++</span><br><span class="line">e is 65537 (0x10001)</span><br><span class="line"></span><br><span class="line">#通过私钥生成CSR证书签名</span><br><span class="line">~ D:\workspace\javascript\nodejs-https&gt;openssl req -new -key privatekey.pem -out certrequest.csr</span><br><span class="line">You are about to be asked to enter information that will be incorporated</span><br><span class="line">into your certificate request.</span><br><span class="line">What you are about to enter is what is called a Distinguished Name or a DN.</span><br><span class="line">There are quite a few fields but you can leave some blank</span><br><span class="line">For some fields there will be a default value,</span><br><span class="line">If you enter &apos;.&apos;, the field will be left blank.</span><br><span class="line">-----</span><br><span class="line">Country Name (2 letter code) [AU]:CN</span><br><span class="line">State or Province Name (full name) [Some-State]:Beijing</span><br><span class="line">Locality Name (eg, city) []:Beijing</span><br><span class="line">Organization Name (eg, company) [Internet Widgits Pty Ltd]:fens.me</span><br><span class="line">Organizational Unit Name (eg, section) []:fens.me</span><br><span class="line">Common Name (eg, YOUR name) []:Conan Zhang</span><br><span class="line">Email Address []:bsspirit@gmail.com</span><br><span class="line"></span><br><span class="line">Please enter the following &apos;extra&apos; attributes</span><br><span class="line">to be sent with your certificate request</span><br><span class="line">A challenge password []:</span><br><span class="line">An optional company name []:</span><br><span class="line"></span><br><span class="line"># 通过私钥和证书签名生成证书文件</span><br><span class="line">~ D:\workspace\javascript\nodejs-https&gt;openssl x509 -req -in certrequest.csr -signkey privatekey.pem -out certificate.pem</span><br><span class="line">Signature ok</span><br><span class="line">subject=/C=CN/ST=Beijing/L=Beijing/O=fens.me/OU=fens.me/CN=Conan Zhang/emailAddress=bsspirit@gmail.com</span><br><span class="line">Getting Private key</span><br></pre></td></tr></table></figure></li></ul><p>注意在通过私钥生成CSR证书签名的时候需要添加一些个人信息。<br>新生成了3个文件：certificate.pem, certrequest.csr, privatekey.pem</p><ul><li>privatekey.pem: 私钥</li><li>certrequest.csr: CSR证书签名</li><li>certificate.pem: 证书文件<br>接下来，直接在nodejs的服务代码中引入相关文件就可以了。<h3 id="nodejs创建https服务器"><a href="#nodejs创建https服务器" class="headerlink" title="nodejs创建https服务器"></a>nodejs创建https服务器</h3>直接贴代码了，这步骤就很简单了<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="built_in">require</span>(<span class="string">'express'</span>)();</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">var</span> https = <span class="built_in">require</span>(<span class="string">'https'</span>);</span><br><span class="line"><span class="keyword">var</span> privateKey  = fs.readFileSync(<span class="string">'./ssl/privatekey.pem'</span>, <span class="string">'utf8'</span>),</span><br><span class="line">    certificate = fs.readFileSync(<span class="string">'./ssl/certificate.pem'</span>, <span class="string">'utf8'</span>);</span><br><span class="line"><span class="keyword">var</span> credentials = &#123;<span class="attr">key</span>: privateKey, <span class="attr">cert</span>: certificate&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> httpServer = http.createServer(app);</span><br><span class="line"><span class="keyword">var</span> httpsServer = https.createServer(credentials, app);</span><br><span class="line"><span class="keyword">var</span> PORT = <span class="number">18080</span>;</span><br><span class="line"><span class="keyword">var</span> SSLPORT = <span class="number">18081</span>;</span><br><span class="line"></span><br><span class="line">httpServer.listen(PORT, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'HTTP Server is running on: http://localhost:%s'</span>, PORT);</span><br><span class="line">&#125;);</span><br><span class="line">httpsServer.listen(SSLPORT, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'HTTPS Server is running on: https://localhost:%s'</span>, SSLPORT);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Welcome</span></span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(req.protocol === <span class="string">'https'</span>) &#123;</span><br><span class="line">        res.status(<span class="number">200</span>).send(<span class="string">'Welcome to Safety Land!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        res.status(<span class="number">200</span>).send(<span class="string">'Welcome!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><p>好了，https服务器搭建完成，原来这么简单。不过，有个问题，因为这个ssl证书属于个人证书，并不是第三方的安全CA证书，所以在浏览器访问https协议时候会有不安全的提醒文字，这个对于我们测试来说是没问题的，如果想在正规的网站上使用，我们还得去阿里云申请CA证书哦。<br>最后，本想把本demo的代码上传到github，不过，代码实在是简单，不传了，直接放个截图得了。<br><img src="/2018/12/07/nodejs搭建https服务器/1.png" alt="img"><br>ssl文件夹里放了3个ssl文件哦。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ssl证书的创建，https服务器的搭建&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="nodejs" scheme="/categories/nodejs/"/>
    
    
      <category term="网络基础" scheme="/tags/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"/>
    
      <category term="web安全" scheme="/tags/web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>vue-iview Modal组件简单分析</title>
    <link href="/2018/12/04/vue-iview-Modal%E7%BB%84%E4%BB%B6%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90/"/>
    <id>/2018/12/04/vue-iview-Modal组件简单分析/</id>
    <published>2018-12-04T07:49:12.000Z</published>
    <updated>2018-12-05T02:22:50.407Z</updated>
    
    <content type="html"><![CDATA[<p>vue-iview Modal组件简单分析<br><a id="more"></a></p><h2 id="vue-iview-Modal组件简单分析"><a href="#vue-iview-Modal组件简单分析" class="headerlink" title="vue-iview Modal组件简单分析"></a>vue-iview Modal组件简单分析</h2><p>现在公司的项目前端框架用的是vue，在工作中避免不了要写一些组件，其实写组件的方法千千种，怎么写都行，但是，总想写出来的组件像一些ui框架里的组件一样高大上，于是乎，今天有点时间，大致的看了一下iview的Modal组件，简单的记录一下思想。<br>由于时间原因，代码并没有深入往里边看，只是把大致的框框看了一下。<br>首先，我们看看Modal组件的用法，<a href="https://www.iviewui.com/components/modal#API" target="_blank" rel="noopener">官方文档点这里</a><br>简单的用法如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;Modal v-model=<span class="string">"modal12"</span> draggable scrollable title=<span class="string">"Modal 1"</span>&gt;</span><br><span class="line">    &lt;div&gt;This is the first modal&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>Modal&gt;</span><br><span class="line"><span class="comment">// 上边这个是基础写法</span></span><br><span class="line"><span class="comment">// 下边这个写法可以直接调用，不需要在html中写出&lt;Modal&gt;&lt;/Modal&gt;标签</span></span><br><span class="line"><span class="keyword">this</span>.$Modal.info(config)</span><br><span class="line"><span class="keyword">this</span>.$Modal.success(config)</span><br></pre></td></tr></table></figure></p><p>先看一下iview的Modal组件文件夹结构<br><img src="/2018/12/04/vue-iview-Modal组件简单分析/1.png" alt="img"><br>index文件是入口文件，里边导出了Modal对象。也就是可以使用<modal></modal>标签的原因，因为给Modal对象加一大堆方法，但是它还是一个vue的基础组件。大家可能注意到了，当使用<modal></modal>标签定义组建的时候，发现最后组件的dom元素被插入到了body下，而不是在具体引入的位置，这是因为Modal组件里有一个指令：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  Modal组件里有</span></span><br><span class="line">directives: &#123; TransferDom &#125;</span><br><span class="line"><span class="comment">// 追溯TransferDom指令，发现有如下代码</span></span><br><span class="line">parentNode.replaceChild(home, el); <span class="comment">// moving out, el is no longer in the document</span></span><br><span class="line">getTarget(value).appendChild(el); <span class="comment">// moving into new place</span></span><br></pre></td></tr></table></figure></p><p>modal.vue文件是组件的基础文件，也就是页面显示出来的东西，index文件里的东西可以看出来，只是给Modal对象添加了一些静态方法，为了this.$Modal.info(config)这样调用的时候使用。<br>confrim文件里主要做了this.$Modal.info()这样调用的时候动态new Vue()实例，也是以modal.vue这个组件为基础，动态的插入到body节点里，代码见下边:<br><img src="/2018/12/04/vue-iview-Modal组件简单分析/2.png" alt="img"><br>就是通过new Vue()的实例获取到这个组建的html代码片段，再插入到body节点中。<br>最后，再看看iview如何变成vue的全局组件的。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> install = <span class="function"><span class="keyword">function</span>(<span class="params">Vue, opts = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里添加全局组件</span></span><br><span class="line">    <span class="built_in">Object</span>.keys(iview).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">        Vue.component(key, iview[key]);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里添加实例方法</span></span><br><span class="line">    Vue.prototype.$Modal = Modal;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>以上就是大概思路哈。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;vue-iview Modal组件简单分析&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
    
      <category term="vue" scheme="/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>小巧的html模板引擎</title>
    <link href="/2018/11/30/%E5%B0%8F%E5%B7%A7%E7%9A%84html%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/"/>
    <id>/2018/11/30/小巧的html模板引擎/</id>
    <published>2018-11-30T06:57:20.000Z</published>
    <updated>2018-11-30T07:16:38.370Z</updated>
    
    <content type="html"><![CDATA[<p>小巧的html模板引擎<br><a id="more"></a></p><h2 id="小巧的html模板引擎"><a href="#小巧的html模板引擎" class="headerlink" title="小巧的html模板引擎"></a>小巧的html模板引擎</h2><p>今天看coco大神的github，看到了他写的html模板引擎，默默地记录下来，其实，模板引擎我自己也写过一个，不过总觉得大神写的一定比我的好，<a href="https://github.com/jinux7/jinux-template" target="_blank" rel="noopener">点击这是我写的</a><br>先贴出代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * coTemplate</span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">name, definition</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> define === <span class="string">'function'</span>) &#123;</span><br><span class="line">        define(definition);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>[name] = definition();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)(<span class="string">'cotemplate'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> tplReg = <span class="regexp">/\$\&#123;\s*([^\&#123;\&#125;\s]+)\s*\&#125;/g</span>;</span><br><span class="line">    <span class="keyword">var</span> jsReg = <span class="regexp">/(^( )?(if|for|else|switch|case|break|&#123;|&#125;))(.*)?/g</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> code = <span class="string">'var r=[];\n'</span>;</span><br><span class="line">    <span class="keyword">var</span> match = <span class="string">'undefined'</span>;</span><br><span class="line">    <span class="keyword">var</span> pointer = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加单行逻辑</span></span><br><span class="line"><span class="comment">     * @param &#123;*&#125; line </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">lineAdd</span>(<span class="params">line</span>) </span>&#123;</span><br><span class="line">        code += <span class="string">'r.push("'</span> + line.replace(<span class="regexp">/"/g</span>, <span class="string">'\\"'</span>) + <span class="string">'");\n'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模板拼接</span></span><br><span class="line"><span class="comment">     * @param &#123;String&#125; tpl 模板字符串 </span></span><br><span class="line"><span class="comment">     * @param &#123;Objcet&#125; data 模板内替换对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">cotemplate</span>(<span class="params">tpl, data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (match = tplReg.exec(tpl)) &#123;</span><br><span class="line">            <span class="comment">// 添加非逻辑部分</span></span><br><span class="line">            lineAdd(tpl.slice(pointer, match.index)); </span><br><span class="line"></span><br><span class="line">            <span class="comment">// 添加逻辑部分 "$&#123;" + match[1] + "&#125;";</span></span><br><span class="line">            code += (<span class="string">'r.push(String(this.'</span> + match[<span class="number">1</span>] + <span class="string">'));'</span>);</span><br><span class="line"></span><br><span class="line">            pointer = match.index + match[<span class="number">0</span>].length;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加代码的最后一截</span></span><br><span class="line">        lineAdd(tpl.substr(pointer, tpl.length - pointer)); </span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回结果，在这里我们就拿到了装入数组后的代码</span></span><br><span class="line">        code += <span class="string">'return r.join("");'</span>; </span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(code);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Function</span>(code.replace(<span class="regexp">/[\r\t\n]/g</span>, <span class="string">''</span>)).apply(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * export</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">return</span> cotemplate;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>用法Demo<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"../js/cotemplate.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">var</span> data = &#123;</span><br><span class="line">    name: <span class="string">'Coco'</span>,</span><br><span class="line">    info: &#123;</span><br><span class="line">        age: <span class="number">18</span></span><br><span class="line">    &#125;,</span><br><span class="line">    bar: &#123;</span><br><span class="line">        foo: &#123;</span><br><span class="line">            <span class="keyword">else</span>: <span class="string">'co-template'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> tpl = <span class="string">`</span></span><br><span class="line"><span class="string">            &lt;p&gt;name:<span class="subst">$&#123;coco&#125;</span>&lt;/p&gt;</span></span><br><span class="line"><span class="string">            &lt;p&gt;Age:<span class="subst">$&#123;info.age&#125;</span>&lt;/p&gt;</span></span><br><span class="line"><span class="string">            &lt;div&gt;<span class="subst">$&#123;bar.foo.<span class="keyword">else</span>&#125;</span>&lt;/div&gt;</span></span><br><span class="line"><span class="string">          `</span>;</span><br><span class="line"></span><br><span class="line">cotemplate(tpl, data);</span><br><span class="line"><span class="comment">// &lt;p&gt;Name:Coco&lt;/p&gt;        </span></span><br><span class="line"><span class="comment">// &lt;p&gt;Age:18&lt;/p&gt;        </span></span><br><span class="line"><span class="comment">// &lt;div&gt;HTML-template:co-template&lt;/div&gt;</span></span><br><span class="line">    </span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;小巧的html模板引擎&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
    
      <category term="js工具库" scheme="/tags/js%E5%B7%A5%E5%85%B7%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>传入标准时间，返回指定日期格式</title>
    <link href="/2018/11/30/%E4%BC%A0%E5%85%A5%E6%A0%87%E5%87%86%E6%97%B6%E9%97%B4%EF%BC%8C%E8%BF%94%E5%9B%9E%E6%8C%87%E5%AE%9A%E6%97%A5%E6%9C%9F%E6%A0%BC%E5%BC%8F/"/>
    <id>/2018/11/30/传入标准时间，返回指定日期格式/</id>
    <published>2018-11-30T06:30:31.000Z</published>
    <updated>2018-11-30T06:42:56.079Z</updated>
    
    <content type="html"><![CDATA[<p>传入标准时间，返回指定日期格式<br><a id="more"></a></p><h2 id="传入标准时间，返回指定日期格式"><a href="#传入标准时间，返回指定日期格式" class="headerlink" title="传入标准时间，返回指定日期格式"></a>传入标准时间，返回指定日期格式</h2><p>平时在开发时经常会用到获取当前日期，有时候会自己写一个，今天网上闲逛，发现一个写的不错的，记录一下，以备后用。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> common = &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 传入标准时间，返回指定日期格式</span></span><br><span class="line"><span class="comment">     * @param &#123;Number&#125; date </span></span><br><span class="line"><span class="comment">     * @param &#123;String&#125; format </span></span><br><span class="line"><span class="comment">     * @example </span></span><br><span class="line"><span class="comment">     *      - dateSerialization(1511181312647, "y-mm-dd h:i:s")</span></span><br><span class="line"><span class="comment">     *      - @return 2017-11-20 20:35:12</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    dateSerialization(date, format) &#123;</span><br><span class="line">        <span class="keyword">let</span> dateObj;</span><br><span class="line">        <span class="keyword">let</span> DEFAULT_FORMAT = <span class="string">"y-mm-dd h:i:s"</span>;</span><br><span class="line">        <span class="keyword">let</span> _patternArr = [<span class="string">"y"</span>, <span class="string">"mm"</span>, <span class="string">"dd"</span>, <span class="string">"h"</span>, <span class="string">"i"</span>, <span class="string">"s"</span>];</span><br><span class="line">        <span class="keyword">let</span> _patternMap = &#123;</span><br><span class="line">            y: <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> d.getFullYear();</span><br><span class="line">            &#125;,</span><br><span class="line">            m: <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> d.getMonth() + <span class="number">1</span>;</span><br><span class="line">            &#125;,</span><br><span class="line">            mm: <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> _pad(d.getMonth() + <span class="number">1</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">            d: <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> d.getDate();</span><br><span class="line">            &#125;,</span><br><span class="line">            dd: <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> _pad(d.getDate());</span><br><span class="line">            &#125;,</span><br><span class="line">            h: <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> _pad(d.getHours());</span><br><span class="line">            &#125;,</span><br><span class="line">            i: <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> _pad(d.getMinutes());</span><br><span class="line">            &#125;,</span><br><span class="line">            s: <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> _pad(d.getSeconds());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="regexp">/^\d+$/</span>.test(date)) &#123;</span><br><span class="line">            dateObj = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">parseInt</span>(date));</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> date == <span class="string">"string"</span>) &#123;</span><br><span class="line">            dateObj = <span class="keyword">new</span> <span class="built_in">Date</span>(date.replace(<span class="regexp">/-/g</span>, <span class="string">"/"</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (_isDate(date)) &#123;</span><br><span class="line">            dateObj = date;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 非法数据</span></span><br><span class="line">        <span class="keyword">if</span> (!dateObj || dateObj.toString() == <span class="string">"Invalid Date"</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"[common.date.format]the input cannot be converted to date object("</span> + date + <span class="string">")"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        format = format || DEFAULT_FORMAT;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> _resultArr = format.split(<span class="regexp">/-|:|\s/</span>);</span><br><span class="line">        <span class="keyword">let</span> resultObj = &#123;&#125;;</span><br><span class="line">        <span class="keyword">let</span> result = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">        _patternArr.forEach(<span class="function"><span class="params">k</span> =&gt;</span> &#123;</span><br><span class="line">            resultObj[k] = _patternMap[k](dateObj);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        _resultArr.forEach(<span class="function"><span class="params">k</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> regExp = <span class="keyword">new</span> <span class="built_in">RegExp</span>(k);</span><br><span class="line"></span><br><span class="line">            format = format.replace(regExp, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> resultObj[e];</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> format;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_toString</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_isDate</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> _toString(v) == <span class="string">"[object Date]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_pad</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n &gt; <span class="number">9</span> ? n : <span class="string">"0"</span> + n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> common;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;传入标准时间，返回指定日期格式&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
    
      <category term="js工具库" scheme="/tags/js%E5%B7%A5%E5%85%B7%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>高阶函数和高阶组件</title>
    <link href="/2018/11/29/%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0%E5%92%8C%E9%AB%98%E9%98%B6%E7%BB%84%E4%BB%B6/"/>
    <id>/2018/11/29/高阶函数和高阶组件/</id>
    <published>2018-11-29T06:41:59.000Z</published>
    <updated>2018-11-29T06:58:20.220Z</updated>
    
    <content type="html"><![CDATA[<p>高阶函数和高阶组件简介<br><a id="more"></a></p><h2 id="高阶函数和高阶组件"><a href="#高阶函数和高阶组件" class="headerlink" title="高阶函数和高阶组件"></a>高阶函数和高阶组件</h2><h3 id="什么是高阶函数"><a href="#什么是高阶函数" class="headerlink" title="什么是高阶函数"></a>什么是高阶函数</h3><p>高阶函数就是传入的参数有函数的函数。（有点绕口:)）</p><h3 id="什么是高阶组件"><a href="#什么是高阶组件" class="headerlink" title="什么是高阶组件"></a>什么是高阶组件</h3><p>高阶组件就是传入的参数有组件的组件。:)<br>react比较容易实现高阶组件</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;高阶函数和高阶组件简介&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
    
      <category term="面试题" scheme="/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>web安全之CSRF</title>
    <link href="/2018/11/28/web%E5%AE%89%E5%85%A8%E4%B9%8BCSRF/"/>
    <id>/2018/11/28/web安全之CSRF/</id>
    <published>2018-11-28T03:10:48.000Z</published>
    <updated>2018-11-29T06:33:21.211Z</updated>
    
    <content type="html"><![CDATA[<p>CSRF攻击的简要介绍<br><a id="more"></a></p><h2 id="web安全之CSRF"><a href="#web安全之CSRF" class="headerlink" title="web安全之CSRF"></a>web安全之CSRF</h2><h3 id="一-CSRF是什么？"><a href="#一-CSRF是什么？" class="headerlink" title="一.CSRF是什么？"></a>一.CSRF是什么？</h3><p>CSRF（Cross-site request forgery），中文名称：跨站请求伪造，也被称为：one click attack/session riding，缩写为：CSRF/XSRF。</p><h3 id="二-CSRF可以做什么？"><a href="#二-CSRF可以做什么？" class="headerlink" title="二.CSRF可以做什么？"></a>二.CSRF可以做什么？</h3><p>你这可以这么理解CSRF攻击：攻击者盗用了你的身份，以你的名义发送恶意请求。CSRF能够做的事情包括：以你名义发送邮件，发消息，盗取你的账号，甚至于购买商品，虚拟货币转账……造成的问题包括：个人隐私泄露以及财产安全。</p><h3 id="三-CSRF漏洞现状"><a href="#三-CSRF漏洞现状" class="headerlink" title="三.CSRF漏洞现状"></a>三.CSRF漏洞现状</h3><p>CSRF这种攻击方式在2000年已经被国外的安全人员提出，但在国内，直到06年才开始被关注，08年，国内外的多个大型社区和交互网站分别 爆出CSRF漏洞，如：NYTimes.com（纽约时报）、Metafilter（一个大型的BLOG网站），YouTube和百度HI……而 现在，互联网上的许多站点仍对此毫无防备，以至于安全业界称CSRF为“沉睡的巨人”。</p><h3 id="四-CSRF的原理"><a href="#四-CSRF的原理" class="headerlink" title="四.CSRF的原理"></a>四.CSRF的原理</h3><p>下图简单阐述了CSRF攻击的思想：<br><img src="/2018/11/28/web安全之CSRF/1.jpg" alt="img"><br>从上图可以看出，要完成一次CSRF攻击，受害者必须依次完成两个步骤：<br>1.登录受信任网站A，并在本地生成Cookie。<br>2.在不登出A的情况下，访问危险网站B。</p><p>看到这里，你也许会说：“如果我不满足以上两个条件中的一个，我就不会受到CSRF的攻击”。是的，确实如此，但你不能保证以下情况不会发生：<br>1.你不能保证你登录了一个网站后，不再打开一个tab页面并访问另外的网站。<br>2.你不能保证你关闭浏览器了后，你本地的Cookie立刻过期，你上次的会话已经结束。（事实上，关闭浏览器不能结束一个会话，但大多数人都会错误的认为关闭浏览器就等于退出登录/结束会话了……）<br>3.上图中所谓的攻击网站，可能是一个存在其他漏洞的可信任的经常被人访问的网站。</p><h3 id="五例子"><a href="#五例子" class="headerlink" title="五例子"></a>五例子</h3><p>上面大概地讲了一下CSRF攻击的思想，下面我将用几个例子详细说说具体的CSRF攻击，这里我以一个银行转账的操作作为例子（仅仅是例子，真实的银行网站没这么傻:&gt;）</p><h4 id="示例1："><a href="#示例1：" class="headerlink" title="示例1："></a>示例1：</h4><p>银行网站A，它以GET请求来完成银行转账的操作，如：<a href="http://www.mybank.com/Transfer.php?toBankId=11&amp;money=1000" target="_blank" rel="noopener">http://www.mybank.com/Transfer.php?toBankId=11&amp;money=1000</a><br>危险网站B，它里面有一段HTML的代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=http:<span class="comment">//www.mybank.com/Transfer.php?toBankId=11&amp;money=1000&gt;</span></span><br></pre></td></tr></table></figure></p><p>首先，你登录了银行网站A，然后访问危险网站B，噢，这时你会发现你的银行账户少了1000块……<br>为什么会这样呢？原因是银行网站A违反了HTTP规范，使用GET请求更新资源。在访问危险网站B的之前，你已经登录了银行网站A，而B中 的<img>以GET的方式请求第三方资源（这里的第三方就是指银行网站了，原本这是一个合法的请求，但这里被不法分子利用了），所以你的浏 览器会带上你的银行网站A的Cookie发出Get请求，去获取资源“<a href="http://www.mybank.com" target="_blank" rel="noopener">http://www.mybank.com</a> /Transfer.php?toBankId=11&amp;money=1000”，结果银行网站服务器收到请求后，认为这是一个更新资源操作（转账 操作），所以就立刻进行转账操作……</p><h4 id="示例2："><a href="#示例2：" class="headerlink" title="示例2："></a>示例2：</h4><p>为了杜绝上面的问题，银行决定改用POST请求完成转账操作。<br>银行网站A的WEB表单如下：<br>危险网站B，它里面有一段HTML的代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">"Transfer.php"</span> method=<span class="string">"POST"</span>&gt;</span><br><span class="line">　　　　&lt;p&gt;ToBankId: <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"toBankId"</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">　　　　&lt;p&gt;Money: <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"money"</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">　　　　&lt;p&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Transfer"</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">　　&lt;<span class="regexp">/form&gt;</span></span><br></pre></td></tr></table></figure></p><p>后台处理页面Transfer.php如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">　　　　session_start();</span><br><span class="line">　　　　<span class="keyword">if</span> (<span class="keyword">isset</span>($_REQUEST[<span class="string">'toBankId'</span>] &amp;&amp;　<span class="keyword">isset</span>($_REQUEST[<span class="string">'money'</span>]))</span><br><span class="line">　　　　&#123;</span><br><span class="line">　　　　    buy_stocks($_REQUEST[<span class="string">'toBankId'</span>],　$_REQUEST[<span class="string">'money'</span>]);</span><br><span class="line">　　　　&#125;</span><br><span class="line">　　<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>危险网站B，仍然只是包含那句HTML代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=http:<span class="comment">//www.mybank.com/Transfer.php?toBankId=11&amp;money=1000&gt;</span></span><br></pre></td></tr></table></figure></p><p>和示例1中的操作一样，你首先登录了银行网站A，然后访问危险网站B，结果…..和示例1一样，你再次没了1000块～T_T，这次事故的 原因是：银行后台使用了$_REQUEST去获取请求的数据，而$_REQUEST既可以获取GET请求的数据，也可以获取POST请求的数据，这就造成 了在后台处理程序无法区分这到底是GET请求的数据还是POST请求的数据。在PHP中，可以使用$_GET和$_POST分别获取GET请求和POST 请求的数据。在JAVA中，用于获取请求数据request一样存在不能区分GET请求数据和POST数据的问题。</p><h4 id="示例3："><a href="#示例3：" class="headerlink" title="示例3："></a>示例3：</h4><p>经过前面2个惨痛的教训，银行决定把获取请求数据的方法也改了，改用$_POST，只获取POST请求的数据，后台处理页面Transfer.php代码如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">　　　　session_start();</span><br><span class="line">　　　　<span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'toBankId'</span>] &amp;&amp;　<span class="keyword">isset</span>($_POST[<span class="string">'money'</span>]))</span><br><span class="line">　　　　&#123;</span><br><span class="line">　　　　    buy_stocks($_POST[<span class="string">'toBankId'</span>],　$_POST[<span class="string">'money'</span>]);</span><br><span class="line">　　　　&#125;</span><br><span class="line">　　<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>然而，危险网站B与时俱进，它改了一下代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">　　&lt;head&gt;</span><br><span class="line">　　　　&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">　　　　　　<span class="function"><span class="keyword">function</span> <span class="title">steal</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">　　　　　　</span>&#123;</span><br><span class="line">          　　　　 iframe = <span class="built_in">document</span>.frames[<span class="string">"steal"</span>];</span><br><span class="line">　　     　　      iframe.document.Submit(<span class="string">"transfer"</span>);</span><br><span class="line">　　　　　　&#125;</span><br><span class="line">　　　　&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">　　&lt;/</span>head&gt;</span><br><span class="line"></span><br><span class="line">　　&lt;body onload=<span class="string">"steal()"</span>&gt;</span><br><span class="line">　　　　&lt;iframe name=<span class="string">"steal"</span> display=<span class="string">"none"</span>&gt;</span><br><span class="line">　　　　　　&lt;form method=<span class="string">"POST"</span> name=<span class="string">"transfer"</span>　action=<span class="string">"http://www.myBank.com/Transfer.php"</span>&gt;</span><br><span class="line">　　　　　　　　&lt;input type=<span class="string">"hidden"</span> name=<span class="string">"toBankId"</span> value=<span class="string">"11"</span>&gt;</span><br><span class="line">　　　　　　　　&lt;input type=<span class="string">"hidden"</span> name=<span class="string">"money"</span> value=<span class="string">"1000"</span>&gt;</span><br><span class="line">　　　　　　&lt;<span class="regexp">/form&gt;</span></span><br><span class="line"><span class="regexp">　　　　&lt;/i</span>frame&gt;</span><br><span class="line">　　&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure></p><p>如果用户仍是继续上面的操作，很不幸，结果将会是再次不见1000块……因为这里危险网站B暗地里发送了POST请求到银行!</p><p>总结一下上面3个例子，CSRF主要的攻击模式基本上是以上的3种，其中以第1,2种最为严重，因为触发条件很简单，一 个<img>就可以了，而第3种比较麻烦，需要使用JavaScript，所以使用的机会会比前面的少很多，但无论是哪种情况，只要触发了 CSRF攻击，后果都有可能很严重。</p><p>理解上面的3种攻击模式，其实可以看出，CSRF攻击是源于WEB的隐式身份验证机制！WEB的身份验证机制虽然可以保证一个请求是来自于某个用户的浏览器，但却无法保证该请求是用户批准发送的！</p><h3 id="六-CSRF的防御"><a href="#六-CSRF的防御" class="headerlink" title="六.CSRF的防御"></a>六.CSRF的防御</h3><p>我总结了一下看到的资料，CSRF的防御可以从服务端和客户端两方面着手，防御效果是从服务端着手效果比较好，现在一般的CSRF防御也都在服务端进行。</p><h4 id="1-服务端进行CSRF防御"><a href="#1-服务端进行CSRF防御" class="headerlink" title="1.服务端进行CSRF防御"></a>1.服务端进行CSRF防御</h4><p>服务端的CSRF方式方法很多样，但总的思想都是一致的，就是在客户端页面增加伪随机数。</p><h5 id="1-Cookie-Hashing-所有表单都包含同一个伪随机值-："><a href="#1-Cookie-Hashing-所有表单都包含同一个伪随机值-：" class="headerlink" title="(1).Cookie Hashing(所有表单都包含同一个伪随机值)："></a>(1).Cookie Hashing(所有表单都包含同一个伪随机值)：</h5><p>这可能是最简单的解决方案了，因为攻击者不能获得第三方的Cookie(理论上)，所以表单中的数据也就构造失败了:&gt;<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">　　　　<span class="comment">//构造加密的Cookie信息</span></span><br><span class="line">　　　　$value = “DefenseSCRF”;</span><br><span class="line">　　　　setcookie(”cookie”, $value, time()+<span class="number">3600</span>);</span><br><span class="line">　　<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>在表单里增加Hash值，以认证这确实是用户发送的请求。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">　　　　$hash = md5($_COOKIE[<span class="string">'cookie'</span>]);</span><br><span class="line">　　<span class="meta">?&gt;</span></span><br><span class="line">　　&lt;form method=”POST” action=”transfer.php”&gt;</span><br><span class="line">　　　　&lt;input type=”text” name=”toBankId”&gt;</span><br><span class="line">　　　　&lt;input type=”text” name=”money”&gt;</span><br><span class="line">　　　　&lt;input type=”hidden” name=”hash” value=”<span class="meta">&lt;?</span>=$hash;<span class="meta">?&gt;</span>”&gt;</span><br><span class="line">　　　　&lt;input type=”submit” name=”submit” value=”Submit”&gt;</span><br><span class="line">　　&lt;/form&gt;</span><br></pre></td></tr></table></figure></p><p>然后在服务器端进行Hash值验证<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">　　      <span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'check'</span>])) &#123;</span><br><span class="line">     　　      $hash = md5($_COOKIE[<span class="string">'cookie'</span>]);</span><br><span class="line">    　　 <span class="keyword">if</span>($_POST[<span class="string">'check'</span>] == $hash) &#123;</span><br><span class="line">         　　 doJob();</span><br><span class="line">　　           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">　　　　　　　　<span class="comment">//...</span></span><br><span class="line">    　　 &#125;</span><br><span class="line">　　      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">　　　　　　<span class="comment">//...</span></span><br><span class="line">　　      &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>这个方法个人觉得已经可以杜绝99%的CSRF攻击了，那还有1%呢….由于用户的Cookie很容易由于网站的XSS漏洞而被盗取，这就 另外的1%。一般的攻击者看到有需要算Hash值，基本都会放弃了，某些除外，所以如果需要100%的杜绝，这个不是最好的方法。</p><h5 id="2-验证码"><a href="#2-验证码" class="headerlink" title="(2).验证码"></a>(2).验证码</h5><p>这个方案的思路是：每次的用户提交都需要用户在表单中填写一个图片上的随机字符串，厄….这个方案可以完全解决CSRF，但个人觉得在易用性方面似乎不是太好，还有听闻是验证码图片的使用涉及了一个被称为MHTML的Bug，可能在某些版本的微软IE中受影响。</p><h5 id="3-One-Time-Tokens-不同的表单包含一个不同的伪随机值"><a href="#3-One-Time-Tokens-不同的表单包含一个不同的伪随机值" class="headerlink" title="(3).One-Time Tokens(不同的表单包含一个不同的伪随机值)"></a>(3).One-Time Tokens(不同的表单包含一个不同的伪随机值)</h5><p>在实现One-Time Tokens时，需要注意一点：就是“并行会话的兼容”。如果用户在一个站点上同时打开了两个不同的表单，CSRF保护措施不应该影响到他对任何表单的提 交。考虑一下如果每次表单被装入时站点生成一个伪随机值来覆盖以前的伪随机值将会发生什么情况：用户只能成功地提交他最后打开的表单，因为所有其他的表单 都含有非法的伪随机值。必须小心操作以确保CSRF保护措施不会影响选项卡式的浏览或者利用多个浏览器窗口浏览一个站点。<br>以下我的实现:</p><h6 id="1-先是令牌生成函数-gen-token-："><a href="#1-先是令牌生成函数-gen-token-：" class="headerlink" title="1).先是令牌生成函数(gen_token())："></a>1).先是令牌生成函数(gen_token())：</h6><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">gen_token</span><span class="params">()</span> </span>&#123;</span><br><span class="line">　　　　<span class="comment">//这里我是贪方便，实际上单使用Rand()得出的随机数作为令牌，也是不安全的。</span></span><br><span class="line">　　　　<span class="comment">//这个可以参考我写的Findbugs笔记中的《Random object created and used only once》</span></span><br><span class="line">      $token =md5(uniqid(rand(), <span class="keyword">true</span>));</span><br><span class="line">      <span class="keyword">return</span> $token;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h6 id="2-然后是Session令牌生成函数-gen-stoken-："><a href="#2-然后是Session令牌生成函数-gen-stoken-：" class="headerlink" title="2).然后是Session令牌生成函数(gen_stoken())："></a>2).然后是Session令牌生成函数(gen_stoken())：</h6><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line">　　<span class="function"><span class="keyword">function</span> <span class="title">gen_stoken</span><span class="params">()</span> </span>&#123;</span><br><span class="line">　　　　　　$pToken = <span class="string">""</span>;</span><br><span class="line">　　　　　　<span class="keyword">if</span>($_SESSION[STOKEN_NAME]  == $pToken)&#123;</span><br><span class="line">　　　　　　　　<span class="comment">//没有值，赋新值</span></span><br><span class="line">　　　　　　　　$_SESSION[STOKEN_NAME] =gen_token();</span><br><span class="line">　　　　　　&#125;    </span><br><span class="line">　　　　　　<span class="keyword">else</span>&#123;</span><br><span class="line">　　　　　　　　<span class="comment">//继续使用旧的值</span></span><br><span class="line">　　　　　　&#125;</span><br><span class="line">　　&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h6 id="3-WEB表单生成隐藏输入域的函数："><a href="#3-WEB表单生成隐藏输入域的函数：" class="headerlink" title="3).WEB表单生成隐藏输入域的函数："></a>3).WEB表单生成隐藏输入域的函数：</h6><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">　　     <span class="function"><span class="keyword">function</span> <span class="title">gen_input</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     　　     gen_stoken();</span><br><span class="line">　　          <span class="keyword">echo</span> “&lt;input type=\”hidden\” name=\”<span class="string">" . FTOKEN_NAME . “\”</span></span><br><span class="line"><span class="string">    　　     value=\”"</span> . $_SESSION[STOKEN_NAME] . “\”&gt; “;</span><br><span class="line">     　　&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h6 id="4-WEB表单结构："><a href="#4-WEB表单结构：" class="headerlink" title="4).WEB表单结构："></a>4).WEB表单结构：</h6><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">     session_start();</span><br><span class="line">     <span class="keyword">include</span>(”functions.php”);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;form method=”POST” action=”transfer.php”&gt;</span><br><span class="line">     &lt;input type=”text” name=”toBankId”&gt;</span><br><span class="line">     &lt;input type=”text” name=”money”&gt;</span><br><span class="line">     <span class="meta">&lt;?</span> gen_input(); <span class="meta">?&gt;</span></span><br><span class="line">     &lt;input type=”submit” name=”submit” value=”Submit”&gt;</span><br><span class="line">&lt;/FORM&gt;</span><br></pre></td></tr></table></figure><h6 id="5-服务端核对令牌："><a href="#5-服务端核对令牌：" class="headerlink" title="5).服务端核对令牌："></a>5).服务端核对令牌：</h6><p>这个很简单，这里就不再啰嗦了。<br>上面这个其实不完全符合“并行会话的兼容”的规则，大家可以在此基础上修改。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CSRF攻击的简要介绍&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
    
      <category term="web安全" scheme="/tags/web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>web安全之XSS</title>
    <link href="/2018/11/28/web%E5%AE%89%E5%85%A8%E4%B9%8BXSS/"/>
    <id>/2018/11/28/web安全之XSS/</id>
    <published>2018-11-28T01:40:42.000Z</published>
    <updated>2018-11-28T03:05:14.090Z</updated>
    
    <content type="html"><![CDATA[<p>XSS攻击的简要介绍<br><a id="more"></a></p><h2 id="web安全之XSS"><a href="#web安全之XSS" class="headerlink" title="web安全之XSS"></a>web安全之XSS</h2><p>首先说下最常见的 XSS 漏洞，XSS (Cross Site Script)，跨站脚本攻击，因为缩写和 CSS (Cascading Style Sheets) 重叠，所以只能叫 XSS。<br>XSS 的原理是恶意攻击者往 Web 页面里插入恶意可执行网页脚本代码，当用户浏览该页之时，嵌入其中 Web 里面的脚本代码会被执行，从而可以达到攻击者盗取用户信息或其他侵犯用户安全隐私的目的。XSS 的攻击方式千变万化，但还是可以大致细分为几种类型。</p><h3 id="非持久型-XSS"><a href="#非持久型-XSS" class="headerlink" title="非持久型 XSS"></a>非持久型 XSS</h3><p>非持久型 XSS 漏洞，也叫反射型 XSS 漏洞，一般是通过给别人发送带有恶意脚本代码参数的 URL，当 URL 地址被打开时，特有的恶意代码参数被 HTML 解析、执行。<br><img src="/2018/11/28/web安全之XSS/1.webp" alt="img"><br>一个例子，比如你的 Web 页面中包含有以下代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;select&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="built_in">document</span>.write(<span class="string">''</span></span><br><span class="line">            + <span class="string">'&lt;option value=1&gt;'</span></span><br><span class="line">            +     location.href.substring(location.href.indexOf(<span class="string">'default='</span>) + <span class="number">8</span>)</span><br><span class="line">            + <span class="string">'&lt;/option&gt;'</span></span><br><span class="line">        );</span><br><span class="line">        <span class="built_in">document</span>.write(<span class="string">'&lt;option value=2&gt;English&lt;/option&gt;'</span>);</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>select&gt;</span><br></pre></td></tr></table></figure></p><p>攻击者可以直接通过 URL<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(类似：https:<span class="comment">//xx.com/xx?default=&lt;script&gt;alert(document.cookie)&lt;/script&gt;)</span></span><br></pre></td></tr></table></figure></p><h4 id="注入可执行的脚本代码"><a href="#注入可执行的脚本代码" class="headerlink" title="注入可执行的脚本代码"></a>注入可执行的脚本代码</h4><p>非持久型 XSS 漏洞攻击有以下几点特征 :<br>1 . 即时性，不经过服务器存储，直接通过 HTTP 的 GET 和 POST 请求就能完成一次攻击，拿到用户隐私数据<br>2 . 攻击者需要诱骗点击<br>3 . 反馈率低，所以较难发现和响应修复<br>4 . 盗取用户敏感保密信息</p><h4 id="为了防止出现非持久型-XSS-漏洞，需要确保这么几件事情"><a href="#为了防止出现非持久型-XSS-漏洞，需要确保这么几件事情" class="headerlink" title="为了防止出现非持久型 XSS 漏洞，需要确保这么几件事情 :"></a>为了防止出现非持久型 XSS 漏洞，需要确保这么几件事情 :</h4><p>1 . Web 页面渲染的所有内容或者渲染的数据都必须来自于服务端。<br>2 . 尽量不要从 URL，document.referrer，document.forms 等这种 DOM API 中获取数据直接渲染。<br>3 . 尽量不要使用 eval, new Function()，document.write()，document.writeln()，window.setInterval()，window.setTimeout()，<br>innerHTML，document.creteElement() 等可执行字符串的方法。<br>4 . 如果做不到以上几点，也必须对涉及 DOM 渲染的方法传入的字符串参数做 escape 转义。<br>5 . 前端渲染的时候对任何的字段都需要做 escape 转义编码。</p><p>escape 转义的目的是将一些构成 HTML 标签的元素转义，比如 &lt;，&gt;，空格 等，转义成 &lt;，&gt;，  等显示转义字符。有很多开源的工具可以协助我们做 escape 转义。</p><h3 id="持久型-XSS"><a href="#持久型-XSS" class="headerlink" title="持久型 XSS"></a>持久型 XSS</h3><p>持久型 XSS 漏洞，也被称为存储型 XSS 漏洞，一般存在于 Form 表单提交等交互功能，如发帖留言，提交文本信息等，黑客利用的 XSS 漏洞，将内容经正常功能提交进入数据库持久保存，当前端页面获得后端从数据库中读出的注入代码时，恰好将其渲染执行。</p><p>主要注入页面方式和非持久型 XSS 漏洞类似，只不过持久型的不是来源于 URL，refferer，forms 等，而是来源于后端从数据库中读出来的数据。持久型 XSS 攻击不需要诱骗点击，黑客只需要在提交表单的地方完成注入即可，但是这种 XSS 攻击的成本相对还是很高。</p><h4 id="攻击成功需要同时满足以下几个条件"><a href="#攻击成功需要同时满足以下几个条件" class="headerlink" title="攻击成功需要同时满足以下几个条件 :"></a>攻击成功需要同时满足以下几个条件 :</h4><p>1 . POST 请求提交表单后端没做转义直接入库。<br>2 . 后端从数据库中取出数据没做转义直接输出给前端。<br>3 . 前端拿到后端数据没做转义直接渲染成 DOM。</p><h4 id="持久型-XSS-有以下几个特点"><a href="#持久型-XSS-有以下几个特点" class="headerlink" title="持久型 XSS 有以下几个特点 :"></a>持久型 XSS 有以下几个特点 :</h4><p>1 . 持久性，植入在数据库中<br>2 . 危害面广，甚至可以让用户机器变成 DDoS 攻击的肉鸡。<br>3 . 盗取用户敏感私密信息</p><h4 id="为了防止持久型-XSS-漏洞，需要前后端共同努力"><a href="#为了防止持久型-XSS-漏洞，需要前后端共同努力" class="headerlink" title="为了防止持久型 XSS 漏洞，需要前后端共同努力 :"></a>为了防止持久型 XSS 漏洞，需要前后端共同努力 :</h4><p>1 . 后端在入库前应该选择不相信任何前端数据，将所有的字段统一进行转义处理。<br>2 . 后端在输出给前端数据统一进行转义处理。<br>3 . 前端在渲染页面 DOM 的时候应该选择不相信任何后端数据，任何字段都需要做转义处理。</p><h3 id="基于字符集的-XSS"><a href="#基于字符集的-XSS" class="headerlink" title="基于字符集的 XSS"></a>基于字符集的 XSS</h3><p>其实现在很多的浏览器以及各种开源的库都专门针对了 XSS 进行转义处理，尽量默认抵御绝大多数 XSS 攻击，但是还是有很多方式可以绕过转义规则，让人防不胜防。比如「基于字符集的 XSS 攻击」就是绕过这些转义处理的一种攻击方式，比如有些 Web 页面字符集不固定，用户输入非期望字符集的字符，有时会绕过转义过滤规则。</p><h4 id="以基于-utf-7-的-XSS-为例"><a href="#以基于-utf-7-的-XSS-为例" class="headerlink" title="以基于 utf-7 的 XSS 为例"></a>以基于 utf-7 的 XSS 为例</h4><p>utf-7 是可以将所有的 unicode 通过 7bit 来表示的一种字符集 (但现在已经从 Unicode 规格中移除)。<br>这个字符集为了通过 7bit 来表示所有的文字, 除去数字和一部分的符号,其它的部分将都以 base64 编码为基础的方式呈现。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;alert(<span class="string">"xss"</span>)&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">可以被解释为：</span></span><br><span class="line"><span class="regexp">+ADw-script+AD4-alert(+ACI-xss+ACI-)+ADw-/</span>script+AD4-</span><br></pre></td></tr></table></figure></p><p>可以形成「基于字符集的 XSS 攻击」的原因是由于浏览器在 meta 没有指定 charset 的时候有自动识别编码的机制，所以这类攻击通常就是发生在没有指定或者没来得及指定 meta 标签的 charset 的情况下。</p><h4 id="所以我们有什么办法避免这种-XSS-呢"><a href="#所以我们有什么办法避免这种-XSS-呢" class="headerlink" title="所以我们有什么办法避免这种 XSS 呢 ?"></a>所以我们有什么办法避免这种 XSS 呢 ?</h4><p>1 . 记住指定 <meta charset="utf-8"><br>2 . XML 中不仅要指定字符集为 utf-8，而且标签要闭合<br>3 . 牛文推荐：<a href="http://drops.wooyun.org/papers/1327" target="_blank" rel="noopener">http://drops.wooyun.org/papers/1327</a> （这个讲的很详细）</p><h3 id="基于-Flash-的跨站-XSS"><a href="#基于-Flash-的跨站-XSS" class="headerlink" title="基于 Flash 的跨站 XSS"></a>基于 Flash 的跨站 XSS</h3><p>基于 Flash 的跨站 XSS 也是属于反射型 XSS 的一种，虽然现在开发 ActionScript 的产品线几乎没有了，但还是提一句吧，AS 脚本可以接受用户输入并操作 cookie，攻击者可以配合其他 XSS（持久型或者非持久型）方法将恶意 swf 文件嵌入页面中。主要是因为 AS 有时候需要和 JS 传参交互，攻击者会通过恶意的 XSS 注入篡改参数，窃取并操作cookie。</p><p>避免方法 :<br>1 . 严格管理 cookie 的读写权限<br>2 . 对 Flash 能接受用户输入的参数进行过滤 escape 转义处理</p><h3 id="未经验证的跳转-XSS"><a href="#未经验证的跳转-XSS" class="headerlink" title="未经验证的跳转 XSS"></a>未经验证的跳转 XSS</h3><p>有一些场景是后端需要对一个传进来的待跳转的 URL 参数进行一个 302 跳转，可能其中会带有一些用户的敏感（cookie）信息。如果服务器端做302 跳转，跳转的地址来自用户的输入，攻击者可以输入一个恶意的跳转地址来执行脚本。</p><p>这时候需要通过以下方式来防止这类漏洞 :<br>1 . 对待跳转的 URL 参数做白名单或者某种规则过滤<br>2 . 后端注意对敏感信息的保护, 比如 cookie 使用来源验证。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;XSS攻击的简要介绍&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
    
      <category term="web安全" scheme="/tags/web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
</feed>
