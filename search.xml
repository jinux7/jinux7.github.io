<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>你真的了解回流和重绘吗?</title>
      <link href="/2019/07/29/%E4%BD%A0%E7%9C%9F%E7%9A%84%E4%BA%86%E8%A7%A3%E5%9B%9E%E6%B5%81%E5%92%8C%E9%87%8D%E7%BB%98%E5%90%97/"/>
      <url>/2019/07/29/%E4%BD%A0%E7%9C%9F%E7%9A%84%E4%BA%86%E8%A7%A3%E5%9B%9E%E6%B5%81%E5%92%8C%E9%87%8D%E7%BB%98%E5%90%97/</url>
      
        <content type="html"><![CDATA[<p>你真的了解回流和重绘吗<br><a id="more"></a></p><h1 id="你真的了解回流和重绘吗"><a href="#你真的了解回流和重绘吗" class="headerlink" title="你真的了解回流和重绘吗"></a>你真的了解回流和重绘吗</h1><p>回流和重绘可以说是每一个web开发者都经常听到的两个词语，我也不例外，可是我之前一直不是很清楚这两步具体做了什么事情。最近由于部门内部要做分享，所以对其进行了一些研究，看了一些博客和书籍，整理了一些内容并且结合一些例子，写了这篇文章，希望可以帮助到大家。</p><h2 id="浏览器的渲染过程"><a href="#浏览器的渲染过程" class="headerlink" title="浏览器的渲染过程"></a>浏览器的渲染过程</h2><p>本文先从浏览器的渲染过程来从头到尾的讲解一下回流重绘，如果大家想直接看如何减少回流和重绘，可以跳到后面。（这个渲染过程来自<a href="https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-tree-construction?hl=zh-cn" target="_blank" rel="noopener">MDN</a>）</p><p><img src="/2019/07/29/你真的了解回流和重绘吗/1.png" alt="webkit渲染过程"></p><p>从上面这个图上，我们可以看到，浏览器渲染过程如下：</p><ol><li>解析HTML，生成DOM树，解析CSS，生成CSSOM树</li><li>将DOM树和CSSOM树结合，生成渲染树(Render Tree)</li><li>Layout(回流):根据生成的渲染树，进行回流(Layout)，得到节点的几何信息（位置，大小）</li><li>Painting(重绘):根据渲染树以及回流得到的几何信息，得到节点的绝对像素</li><li>Display:将像素发送给GPU，展示在页面上。（这一步其实还有很多内容，比如会在GPU将多个合成层合并为同一个层，并展示在页面中。而css3硬件加速的原理则是新建合成层，这里我们不展开，之后有机会会写一篇博客）</li></ol><p>渲染过程看起来很简单，让我们来具体了解下每一步具体做了什么。</p><h3 id="生成渲染树"><a href="#生成渲染树" class="headerlink" title="生成渲染树"></a>生成渲染树</h3><p><img src="/2019/07/29/你真的了解回流和重绘吗/2.png" alt="生成渲染树"></p><p>为了构建渲染树，浏览器主要完成了以下工作：</p><ol><li>从DOM树的根节点开始遍历每个可见节点。</li><li>对于每个可见的节点，找到CSSOM树中对应的规则，并应用它们。</li><li>根据每个可见节点以及其对应的样式，组合生成渲染树。</li></ol><p>第一步中，既然说到了要遍历可见的节点，那么我们得先知道，什么节点是不可见的。不可见的节点包括：</p><ul><li>一些不会渲染输出的节点，比如script、meta、link等。</li><li>一些通过css进行隐藏的节点。比如display:none。注意，利用visibility和opacity隐藏的节点，还是会显示在渲染树上的。只有display:none的节点才不会显示在渲染树上。</li></ul><p><strong>注意：渲染树只包含可见的节点</strong></p><h3 id="回流"><a href="#回流" class="headerlink" title="回流"></a>回流</h3><p>前面我们通过构造渲染树，我们将可见DOM节点以及它对应的样式结合起来，可是我们还需要计算它们在设备视口(viewport)内的确切位置和大小，这个计算的阶段就是回流。</p><p>为了弄清每个对象在网站上的确切大小和位置，浏览器从渲染树的根节点开始遍历，我们可以以下面这个实例来表示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Critial Path: Hello world!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width: 50%"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width: 50%"</span>&gt;</span>Hello world!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们可以看到，第一个div将节点的显示尺寸设置为视口宽度的50%，第二个div将其尺寸设置为父节点的50%。而在回流这个阶段，我们就需要根据视口具体的宽度，将其转为实际的像素值。（如下图）</p><p><img src="/2019/07/29/你真的了解回流和重绘吗/3.png" alt=""></p><h3 id="重绘"><a href="#重绘" class="headerlink" title="重绘"></a>重绘</h3><p>最终，我们通过构造渲染树和回流阶段，我们知道了哪些节点是可见的，以及可见节点的样式和具体的几何信息(位置、大小)，那么我们就可以将渲染树的每个节点都转换为屏幕上的实际像素，这个阶段就叫做重绘节点。</p><p>既然知道了浏览器的渲染过程后，我们就来探讨下，何时会发生回流重绘。</p><h2 id="何时发生回流重绘"><a href="#何时发生回流重绘" class="headerlink" title="何时发生回流重绘"></a>何时发生回流重绘</h2><p>我们前面知道了，回流这一阶段主要是计算节点的位置和几何信息，那么当页面布局和几何信息发生变化的时候，就需要回流。比如以下情况：</p><ul><li>添加或删除可见的DOM元素</li><li>元素的位置发生变化</li><li>元素的尺寸发生变化（包括外边距、内边框、边框大小、高度和宽度等）</li><li>内容发生变化，比如文本变化或图片被另一个不同尺寸的图片所替代。</li><li>页面一开始渲染的时候（这肯定避免不了）</li><li>浏览器的窗口尺寸变化（因为回流是根据视口的大小来计算元素的位置和大小的）</li></ul><p><strong>注意：回流一定会触发重绘，而重绘不一定会回流</strong></p><p>根据改变的范围和程度，渲染树中或大或小的部分需要重新计算，有些改变会触发整个页面的重排，比如，滚动条出现的时候或者修改了根节点。</p><h2 id="浏览器的优化机制"><a href="#浏览器的优化机制" class="headerlink" title="浏览器的优化机制"></a>浏览器的优化机制</h2><p>现代的浏览器都是很聪明的，由于每次重排都会造成额外的计算消耗，因此大多数浏览器都会通过队列化修改并批量执行来优化重排过程。浏览器会将修改操作放入到队列里，直到过了一段时间或者操作达到了一个阈值，才清空队列。但是！<strong>当你获取布局信息的操作的时候，会强制队列刷新</strong>，比如当你访问以下属性或者使用以下方法：</p><ul><li>offsetTop、offsetLeft、offsetWidth、offsetHeight</li><li>scrollTop、scrollLeft、scrollWidth、scrollHeight</li><li>clientTop、clientLeft、clientWidth、clientHeight</li><li>getComputedStyle()</li><li>getBoundingClientRect</li><li>具体可以访问这个网站：<a href="https://gist.github.com/paulirish/5d52fb081b3570c81e3a" target="_blank" rel="noopener">https://gist.github.com/paulirish/5d52fb081b3570c81e3a</a></li></ul><p>以上属性和方法都需要返回最新的布局信息，因此浏览器不得不清空队列，触发回流重绘来返回正确的值。因此，我们在修改样式的时候，<strong>最好避免使用上面列出的属性，他们都会刷新渲染队列。</strong>如果要使用它们，最好将值缓存起来。</p><h2 id="减少回流和重绘"><a href="#减少回流和重绘" class="headerlink" title="减少回流和重绘"></a>减少回流和重绘</h2><p>好了，到了我们今天的重头戏，前面说了这么多背景和理论知识，接下来让我们谈谈如何减少回流和重绘。</p><h3 id="最小化重绘和重排"><a href="#最小化重绘和重排" class="headerlink" title="最小化重绘和重排"></a>最小化重绘和重排</h3><p>由于重绘和重排可能代价比较昂贵，因此最好就是可以减少它的发生次数。为了减少发生次数，我们可以合并多次对DOM和样式的修改，然后一次处理掉。考虑这个例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> el = <span class="built_in">document</span>.getElementById(<span class="string">'test'</span>);</span><br><span class="line">el.style.padding = <span class="string">'5px'</span>;</span><br><span class="line">el.style.borderLeft = <span class="string">'1px'</span>;</span><br><span class="line">el.style.borderRight = <span class="string">'2px'</span>;</span><br></pre></td></tr></table></figure><p>例子中，有三个样式属性被修改了，每一个都会影响元素的几何结构，引起回流。当然，大部分现代浏览器都对其做了优化，因此，只会触发一次重排。但是如果在旧版的浏览器或者在上面代码执行的时候，有其他代码访问了布局信息(上文中的会触发回流的布局信息)，那么就会导致三次重排。</p><p>因此，我们可以合并所有的改变然后依次处理，比如我们可以采取以下的方式：</p><ul><li><p>使用cssText</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> el = <span class="built_in">document</span>.getElementById(<span class="string">'test'</span>);</span><br><span class="line">el.style.cssText += <span class="string">'border-left: 1px; border-right: 2px; padding: 5px;'</span>;</span><br></pre></td></tr></table></figure></li><li><p>修改CSS的class</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> el = <span class="built_in">document</span>.getElementById(<span class="string">'test'</span>);</span><br><span class="line">el.className += <span class="string">' active'</span>;</span><br></pre></td></tr></table></figure></li></ul><h3 id="批量修改DOM"><a href="#批量修改DOM" class="headerlink" title="批量修改DOM"></a>批量修改DOM</h3><p>当我们需要对DOM对一系列修改的时候，可以通过以下步骤减少回流重绘次数：</p><ol><li>使元素脱离文档流</li><li>对其进行多次修改</li><li>将元素带回到文档中。</li></ol><p>该过程的第一步和第三步可能会引起回流，但是经过第一步之后，对DOM的所有修改都不会引起回流，因为它已经不在渲染树了。</p><p>有三种方式可以让DOM脱离文档流：</p><ul><li>隐藏元素，应用修改，重新显示</li><li>使用文档片段(document fragment)在当前DOM之外构建一个子树，再把它拷贝回文档。</li><li>将原始元素拷贝到一个脱离文档的节点中，修改节点后，再替换原始的元素。</li></ul><p>考虑我们要执行一段批量插入节点的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">appendDataToElement</span>(<span class="params">appendToElement, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> li;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; data.length; i++) &#123;</span><br><span class="line">    li = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>);</span><br><span class="line">        li.textContent = <span class="string">'text'</span>;</span><br><span class="line">        appendToElement.appendChild(li);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ul = <span class="built_in">document</span>.getElementById(<span class="string">'list'</span>);</span><br><span class="line">appendDataToElement(ul, data);</span><br></pre></td></tr></table></figure><p>如果我们直接这样执行的话，由于每次循环都会插入一个新的节点，会导致浏览器回流一次。</p><p>我们可以使用这三种方式进行优化:</p><p><strong>隐藏元素，应用修改，重新显示</strong></p><p>这个会在展示和隐藏节点的时候，产生两次重绘</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">appendDataToElement</span>(<span class="params">appendToElement, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> li;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; data.length; i++) &#123;</span><br><span class="line">    li = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>);</span><br><span class="line">        li.textContent = <span class="string">'text'</span>;</span><br><span class="line">        appendToElement.appendChild(li);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> ul = <span class="built_in">document</span>.getElementById(<span class="string">'list'</span>);</span><br><span class="line">ul.style.display = <span class="string">'none'</span>;</span><br><span class="line">appendDataToElement(ul, data);</span><br><span class="line">ul.style.display = <span class="string">'block'</span>;</span><br></pre></td></tr></table></figure><p><strong>使用文档片段(document fragment)在当前DOM之外构建一个子树，再把它拷贝回文档</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ul = <span class="built_in">document</span>.getElementById(<span class="string">'list'</span>);</span><br><span class="line"><span class="keyword">const</span> fragment = <span class="built_in">document</span>.createDocumentFragment();</span><br><span class="line">appendDataToElement(fragment, data);</span><br><span class="line">ul.appendChild(fragment);</span><br></pre></td></tr></table></figure><p><strong>将原始元素拷贝到一个脱离文档的节点中，修改节点后，再替换原始的元素。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ul = <span class="built_in">document</span>.getElementById(<span class="string">'list'</span>);</span><br><span class="line"><span class="keyword">const</span> clone = ul.cloneNode(<span class="literal">true</span>);</span><br><span class="line">appendDataToElement(clone, data);</span><br><span class="line">ul.parentNode.replaceChild(clone, ul);</span><br></pre></td></tr></table></figure><p>对于上述那种情况，我写了一个<a href="https://chenjigeng.github.io/example/share/%E9%81%BF%E5%85%8D%E5%9B%9E%E6%B5%81%E9%87%8D%E7%BB%98/%E6%89%B9%E9%87%8F%E4%BF%AE%E6%94%B9DOM.html" target="_blank" rel="noopener">demo</a>来测试修改前和修改后的性能。然而实验结果不是很理想。</p><p><strong>原因：原因其实上面也说过了，浏览器会使用队列来储存多次修改，进行优化，所以对这个优化方案，我们其实不用优先考虑。</strong></p><h3 id="避免触发同步布局事件"><a href="#避免触发同步布局事件" class="headerlink" title="避免触发同步布局事件"></a>避免触发同步布局事件</h3><p>上文我们说过，当我们访问元素的一些属性的时候，会导致浏览器强制清空队列，进行强制同步布局。举个例子，比如说我们想将一个p标签数组的宽度赋值为一个元素的宽度，我们可能写出这样的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initP</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; paragraphs.length; i++) &#123;</span><br><span class="line">        paragraphs[i].style.width = box.offsetWidth + <span class="string">'px'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码看上去是没有什么问题，可是其实会造成很大的性能问题。在每次循环的时候，都读取了box的一个offsetWidth属性值，然后利用它来更新p标签的width属性。这就导致了每一次循环的时候，浏览器都必须先使上一次循环中的样式更新操作生效，才能响应本次循环的样式读取操作。每一次循环都会强制浏览器刷新队列。我们可以优化为:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> width = box.offsetWidth;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initP</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; paragraphs.length; i++) &#123;</span><br><span class="line">        paragraphs[i].style.width = width + <span class="string">'px'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样，我也写了个<a href="https://chenjigeng.github.io/example/share/%E9%81%BF%E5%85%8D%E5%9B%9E%E6%B5%81%E9%87%8D%E7%BB%98/%E9%81%BF%E5%85%8D%E5%BF%AB%E9%80%9F%E8%BF%9E%E7%BB%AD%E7%9A%84%E5%B8%83%E5%B1%80.html" target="_blank" rel="noopener">demo</a>来比较两者的性能差异。你可以自己点开这个demo体验下。这个对比差距就比较明显。</p><h3 id="对于复杂动画效果-使用绝对定位让其脱离文档流"><a href="#对于复杂动画效果-使用绝对定位让其脱离文档流" class="headerlink" title="对于复杂动画效果,使用绝对定位让其脱离文档流"></a>对于复杂动画效果,使用绝对定位让其脱离文档流</h3><p>对于复杂动画效果，由于会经常的引起回流重绘，因此，我们可以使用绝对定位，让它脱离文档流。否则会引起父元素以及后续元素频繁的回流。这个我们就直接上个<a href="https://chenjigeng.github.io/example/share/%E9%81%BF%E5%85%8D%E5%9B%9E%E6%B5%81%E9%87%8D%E7%BB%98/%E5%B0%86%E5%A4%8D%E6%9D%82%E5%8A%A8%E7%94%BB%E6%B5%AE%E5%8A%A8%E5%8C%96.html" target="_blank" rel="noopener">例子</a>。</p><p>打开这个例子后，我们可以打开控制台，控制台上会输出当前的帧数(虽然不准)。</p><p><img src="/2019/07/29/你真的了解回流和重绘吗/4.png" alt="image-20181210223750055"></p><p>从上图中，我们可以看到，帧数一直都没到60。这个时候，只要我们点击一下那个按钮，把这个元素设置为绝对定位，帧数就可以稳定60。</p><h3 id="css3硬件加速（GPU加速）"><a href="#css3硬件加速（GPU加速）" class="headerlink" title="css3硬件加速（GPU加速）"></a>css3硬件加速（GPU加速）</h3><p>比起考虑如何减少回流重绘，我们更期望的是，根本不要回流重绘。这个时候，css3硬件加速就闪亮登场啦！！</p><p><strong>划重点：使用css3硬件加速，可以让transform、opacity、filters这些动画不会引起回流重绘 。但是对于动画的其它属性，比如background-color这些，还是会引起回流重绘的，不过它还是可以提升这些动画的性能。</strong></p><p>本篇文章只讨论如何使用，暂不考虑其原理，之后有空会另外开篇文章说明。</p><h4 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h4><p>常见的触发硬件加速的css属性：</p><ul><li>transform</li><li>opacity</li><li>filters</li><li>Will-change</li></ul><h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><p>我们可以先看个<a href="https://chenjigeng.github.io/example/share/%E5%AF%B9%E6%AF%94gpu%E5%8A%A0%E9%80%9F/gpu%E5%8A%A0%E9%80%9F-transform.html" target="_blank" rel="noopener">例子</a>。我通过使用chrome的Performance捕获了一段时间的回流重绘情况，实际结果如下图：</p><p><img src="/2019/07/29/你真的了解回流和重绘吗/5.png" alt="image-20181210225609533"></p><p>从图中我们可以看出，在动画进行的时候，没有发生任何的回流重绘。如果感兴趣你也可以自己做下实验。</p><h4 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h4><ul><li>使用css3硬件加速，可以让transform、opacity、filters这些动画不会引起回流重绘 </li><li>对于动画的其它属性，比如background-color这些，还是会引起回流重绘的，不过它还是可以提升这些动画的性能。</li></ul><h4 id="css3硬件加速的坑"><a href="#css3硬件加速的坑" class="headerlink" title="css3硬件加速的坑"></a>css3硬件加速的坑</h4><ul><li><p>如果你为太多元素使用css3硬件加速，会导致内存占用较大，会有性能问题。</p></li><li><p>在GPU渲染字体会导致抗锯齿无效。这是因为GPU和CPU的算法不同。因此如果你不在动画结束的时候关闭硬件加速，会产生字体模糊。</p></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文主要讲了浏览器的渲染过程、浏览器的优化机制以及如何减少甚至避免回流和重绘，希望可以帮助大家更好的理解回流重绘。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li><p><a href="https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-tree-construction?hl=zh-cn" target="_blank" rel="noopener">渲染树构建、布局及绘制</a></p></li><li><p>高性能Javascript</p></li></ul><p>文章出处-&gt;<a href="https://github.com/chenjigeng/blog" target="_blank" rel="noopener">博客地址</a>, 欢迎给个 start 或 follow</p>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web性能 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>模块化CommonJS与AMD的手写实现</title>
      <link href="/2019/07/24/%E6%A8%A1%E5%9D%97%E5%8C%96CommonJS%E4%B8%8EAMD%E7%9A%84%E6%89%8B%E5%86%99%E5%AE%9E%E7%8E%B0/"/>
      <url>/2019/07/24/%E6%A8%A1%E5%9D%97%E5%8C%96CommonJS%E4%B8%8EAMD%E7%9A%84%E6%89%8B%E5%86%99%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>javascript模块化CommonJS与AMD是如何实现的<br><a id="more"></a></p><h2 id="模块化CommonJS与AMD的手写实现"><a href="#模块化CommonJS与AMD的手写实现" class="headerlink" title="模块化CommonJS与AMD的手写实现"></a>模块化CommonJS与AMD的手写实现</h2><p>现在的前端开发都采用的模块化思想，之前都是使用全局变量，但是弊端这里就不过多描述了。<br>模块化有CommonJS,AMD,CMD,ES6的模块新规范这4种，今天我们来实现以下CommonJS和AMD的规范。</p><h3 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h3><p>首先，CommonJS一般都用在nodejs里，写法如下:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入</span></span><br><span class="line"><span class="keyword">const</span> someFun= <span class="built_in">require</span>(<span class="string">'./moduleA'</span>);</span><br><span class="line">someFun();</span><br><span class="line"><span class="comment">// 导出</span></span><br><span class="line"><span class="built_in">module</span>.exports = someFunc;</span><br></pre></td></tr></table></figure></p><p>我们来看一下简单的实现方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a.js</span></span><br><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">let</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">let</span> b = req(<span class="string">'./b.js'</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">req</span>(<span class="params">mod</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> filename = path.join(__dirname, mod);</span><br><span class="line">    <span class="keyword">let</span> content = fs.readFileSync(filename, <span class="string">'utf8'</span>);</span><br><span class="line">    <span class="keyword">let</span> fn = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'exports'</span>, <span class="string">'require'</span>, <span class="string">'module'</span>, <span class="string">'__filename'</span>, <span class="string">'__dirname'</span>, content + <span class="string">'\n return module.exports;'</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="built_in">module</span> = &#123;</span><br><span class="line">        exports: &#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> fn(<span class="built_in">module</span>.exports, req, <span class="built_in">module</span>, __filename, __dirname);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// b.js</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'bbb'</span>);</span><br><span class="line">exports.name = <span class="string">'zfpx'</span>;</span><br></pre></td></tr></table></figure></p><h3 id="AMD"><a href="#AMD" class="headerlink" title="AMD"></a>AMD</h3><p>我们再来看看AMD规范，AMD规范的实现库是大名鼎鼎requirejs<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个模块</span></span><br><span class="line">define(<span class="string">'a'</span>, [], <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'a'</span>;</span><br><span class="line">&#125;);</span><br><span class="line">define(<span class="string">'b'</span>, [<span class="string">'a'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + <span class="string">'b'</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 导入和使用</span></span><br><span class="line"><span class="built_in">require</span>([<span class="string">'b'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">b</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(b);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>简单的实现<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> factories = &#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">define</span>(<span class="params">modName, dependencies, factory</span>) </span>&#123;</span><br><span class="line">    factory.dependencies = dependencies;</span><br><span class="line">    factories[modName] = factory;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">require</span>(<span class="params">modNames, callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> loadedModNames = modNames.map(<span class="function"><span class="keyword">function</span> (<span class="params">modName</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> factory = factories[modName];</span><br><span class="line">        <span class="keyword">let</span> dependencies = factory.dependencies;</span><br><span class="line">        <span class="keyword">let</span> exports;</span><br><span class="line">        <span class="built_in">require</span>(dependencies, <span class="function"><span class="keyword">function</span> (<span class="params">...dependencyMods</span>) </span>&#123;</span><br><span class="line">            exports = factory.apply(<span class="literal">null</span>, dependencyMods);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> exports;</span><br><span class="line">    &#125;)</span><br><span class="line">    callback.apply(<span class="literal">null</span>, loadedModNames);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="ES6-模块化"><a href="#ES6-模块化" class="headerlink" title="ES6 模块化"></a>ES6 模块化</h3><p>ES6 模块化是ECMA提出的JavaScript模块化规范，它在语言的层面上实现了模块化。浏览器厂商和Node.js 都宣布要原生支持该规范。它将逐渐取代CommonJS和AMD`规范，成为浏览器和服务器通用的模块解决方案。 采用 ES6 模块化导入及导出时的代码如下<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入</span></span><br><span class="line"><span class="keyword">import</span> &#123; name &#125; <span class="keyword">from</span> <span class="string">'./person.js'</span>;</span><br><span class="line"><span class="comment">// 导出</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> name = <span class="string">'zfpx'</span>;</span><br></pre></td></tr></table></figure></p><p>ES6模块虽然是终极模块化方案，但它的缺点在于目前无法直接运行在大部分 JavaScript 运行环境下，必须通过工具转换成标准的 ES5 后才能正常运行。</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>javascript的FileReader类</title>
      <link href="/2019/07/24/javascript%E7%9A%84FileReader%E7%B1%BB/"/>
      <url>/2019/07/24/javascript%E7%9A%84FileReader%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<p>javascript的FileReader类<br><a id="more"></a></p><h2 id="javascript的FileReader类"><a href="#javascript的FileReader类" class="headerlink" title="javascript的FileReader类"></a>javascript的FileReader类</h2><p>现在，我们在前端对文件处理的需求已经慢慢增加了，比如，前端上传图片的回显，还有excel文件的解析等，都需要FileReader这个类来实现，这个类有4个方法:</p><ul><li>FileReader.readAsBinaryString(Blob|File)</li><li>FileReader.readAsText(Blob|File, opt_encoding)</li><li>FileReader.readAsDataURL(Blob|File)</li><li>FileReader.readAsArrayBuffer(Blob|File)</li></ul><hr><p>这里，具体的使用方法不过多介绍，详情<a href="https://www.html5rocks.com/en/tutorials/file/dndfiles/" target="_blank" rel="noopener">点击这里</a></p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>移动端利用hammer制作移动缩放旋转功能</title>
      <link href="/2019/07/16/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%88%A9%E7%94%A8hammer%E5%88%B6%E4%BD%9C%E7%A7%BB%E5%8A%A8%E7%BC%A9%E6%94%BE%E6%97%8B%E8%BD%AC%E5%8A%9F%E8%83%BD/"/>
      <url>/2019/07/16/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%88%A9%E7%94%A8hammer%E5%88%B6%E4%BD%9C%E7%A7%BB%E5%8A%A8%E7%BC%A9%E6%94%BE%E6%97%8B%E8%BD%AC%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<p>移动端利用hammer制作移动缩放旋转功能<br><a id="more"></a></p><h2 id="移动端利用hammer制作移动缩放旋转功能"><a href="#移动端利用hammer制作移动缩放旋转功能" class="headerlink" title="移动端利用hammer制作移动缩放旋转功能"></a>移动端利用hammer制作移动缩放旋转功能</h2><p>最近在项目中，有个需求是页面放大，我二话不说，直接把viewport的user-scalable属性设为yes，这倒是勉强的完成了需求的要求，但是这只是整个页面的缩放，而且初始上来的页面只能放大，并不能缩小，如果再加点需求，局部放大，这就挂了。。。。。。<br>于是乎，这几天有空闲的时候补了补关于移动端手势事件的一些知识，为了完成这几项功能，最终选了hammer这个插件，其实这类插件很多，大同小异，选一个稳定点，普及广的，还在维护的就行。当然了，不用插件，自己用原生的touchstart,touchmove,touchend事件也可以完成，但是各种算法还是很复杂的。<br>下面是几个例子：</p><h3 id="元素的缩放"><a href="#元素的缩放" class="headerlink" title="元素的缩放"></a>元素的缩放</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">  &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"user-scalable=no, width=device-width, initial-scale=1, maximum-scale=1"</span>&gt;</span><br><span class="line">  &lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"ie=edge"</span>&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">  &lt;script src="./</span>hammer.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">  &lt;!-- &lt;script src="</span>./vconsole.min.js<span class="string">"&gt;&lt;/script&gt; --&gt;</span></span><br><span class="line"><span class="string">  &lt;style&gt;</span></span><br><span class="line"><span class="string">    #myElement &#123;</span></span><br><span class="line"><span class="string">      background: silver;</span></span><br><span class="line"><span class="string">      height: 300px;</span></span><br><span class="line"><span class="string">      text-align: center;</span></span><br><span class="line"><span class="string">      font: 30px/300px Helvetica, Arial, sans-serif;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &lt;/style&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">  &lt;div id="</span>myElement<span class="string">"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;script&gt;</span></span><br><span class="line"><span class="string">// var vConsole = new VConsole();</span></span><br><span class="line"><span class="string">  var scale = 1, old_scale;</span></span><br><span class="line"><span class="string">  var myElement = document.getElementById('myElement');</span></span><br><span class="line"><span class="string">  var mc = new Hammer.Manager(myElement);</span></span><br><span class="line"><span class="string">  // pinch</span></span><br><span class="line"><span class="string">  var pinch = new Hammer.Pinch();</span></span><br><span class="line"><span class="string">  // add to the Manager</span></span><br><span class="line"><span class="string">  mc.add([pinch]);</span></span><br><span class="line"><span class="string">  // pinch事件</span></span><br><span class="line"><span class="string">  mc.on("</span>pinchstart<span class="string">", function(ev) &#123;</span></span><br><span class="line"><span class="string">    // 注意这里1</span></span><br><span class="line"><span class="string">    old_scale = scale;</span></span><br><span class="line"><span class="string">  &#125;);</span></span><br><span class="line"><span class="string">  mc.on("</span>pinchmove<span class="string">", function(ev) &#123;</span></span><br><span class="line"><span class="string">    // 注意这里2</span></span><br><span class="line"><span class="string">    scale =ev.scale + old_scale-1;</span></span><br><span class="line"><span class="string">    // myElement.style.transform = `scale($&#123;scale&#125;)`;</span></span><br><span class="line"><span class="string">    updateTransform();</span></span><br><span class="line"><span class="string">  &#125;);</span></span><br><span class="line"><span class="string">  // 更新样式函数</span></span><br><span class="line"><span class="string">  function updateTransform() &#123;</span></span><br><span class="line"><span class="string">    var val = [</span></span><br><span class="line"><span class="string">      `scale($&#123;scale&#125;)`</span></span><br><span class="line"><span class="string">      // `rotate(`+deg+`deg)`</span></span><br><span class="line"><span class="string">    ];</span></span><br><span class="line"><span class="string">    myElement.style.transform = val.join(' ');</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure><h3 id="元素的旋转"><a href="#元素的旋转" class="headerlink" title="元素的旋转"></a>元素的旋转</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">  &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"user-scalable=no, width=device-width, initial-scale=1, maximum-scale=1"</span>&gt;</span><br><span class="line">  &lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"ie=edge"</span>&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">  &lt;script src="./</span>hammer.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">  &lt;!-- &lt;script src="</span>./vconsole.min.js<span class="string">"&gt;&lt;/script&gt; --&gt;</span></span><br><span class="line"><span class="string">  &lt;style&gt;</span></span><br><span class="line"><span class="string">    #myElement &#123;</span></span><br><span class="line"><span class="string">      background: silver;</span></span><br><span class="line"><span class="string">      height: 300px;</span></span><br><span class="line"><span class="string">      text-align: center;</span></span><br><span class="line"><span class="string">      font: 30px/300px Helvetica, Arial, sans-serif;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &lt;/style&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">  &lt;div id="</span>myElement<span class="string">"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;script&gt;</span></span><br><span class="line"><span class="string">// var vConsole = new VConsole();</span></span><br><span class="line"><span class="string">  var deg = 0, init_deg=0, rotate_deg, start_deg, pre_deg, flag_deg;</span></span><br><span class="line"><span class="string">  var myElement = document.getElementById('myElement');</span></span><br><span class="line"><span class="string">  var mc = new Hammer.Manager(myElement);</span></span><br><span class="line"><span class="string">  // rotate</span></span><br><span class="line"><span class="string">  var rotate = new Hammer.Rotate();</span></span><br><span class="line"><span class="string">  // add to the Manager</span></span><br><span class="line"><span class="string">  mc.add([rotate]);</span></span><br><span class="line"><span class="string">  // rotate事件</span></span><br><span class="line"><span class="string">  mc.on("</span>rotatestart<span class="string">", function(ev) &#123;</span></span><br><span class="line"><span class="string">    // 注意这里1</span></span><br><span class="line"><span class="string">    start_deg = ev.rotation; // 开始旋转时记录下当前rotation的角度</span></span><br><span class="line"><span class="string">    flag_deg = 0;</span></span><br><span class="line"><span class="string">  &#125;);</span></span><br><span class="line"><span class="string">  mc.on("</span>rotatemove<span class="string">", function(ev) &#123;</span></span><br><span class="line"><span class="string">    // 注意这里2</span></span><br><span class="line"><span class="string">    rotate_deg = ev.rotation - start_deg; // rotation的角度减去开始旋转的角度就是转过了多少角度</span></span><br><span class="line"><span class="string">    deg = init_deg + rotate_deg; // 元素旋转之前的角度 + 旋转了多少角度是当前元素的状态</span></span><br><span class="line"><span class="string">    // myElement.style.transform = `rotate(`+deg+`deg)`;</span></span><br><span class="line"><span class="string">    updateTransform();</span></span><br><span class="line"><span class="string">  &#125;);</span></span><br><span class="line"><span class="string">  mc.on("</span>rotateend<span class="string">", function(ev) &#123;</span></span><br><span class="line"><span class="string">    // 注意这里3</span></span><br><span class="line"><span class="string">      init_deg = deg; // 旋转结束时别忘了把当前角度状态赋值给初始化角度，以便下次旋转时接着上次的角度转</span></span><br><span class="line"><span class="string">  &#125;);</span></span><br><span class="line"><span class="string">  // 更新样式函数</span></span><br><span class="line"><span class="string">  function updateTransform() &#123;</span></span><br><span class="line"><span class="string">    var val = [</span></span><br><span class="line"><span class="string">      // `scale($&#123;scale&#125;)`</span></span><br><span class="line"><span class="string">      `rotate(`+deg+`deg)`</span></span><br><span class="line"><span class="string">    ];</span></span><br><span class="line"><span class="string">    myElement.style.transform = val.join(' ');</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure><p>最后，附上一个拖拽，缩放，旋转的</p><h3 id="拖拽，缩放，旋转"><a href="#拖拽，缩放，旋转" class="headerlink" title="拖拽，缩放，旋转"></a>拖拽，缩放，旋转</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">  &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"user-scalable=no, width=device-width, initial-scale=1, maximum-scale=1"</span>&gt;</span><br><span class="line">  &lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"ie=edge"</span>&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">  &lt;script src="./</span>hammer.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">  &lt;!-- &lt;script src="</span>./vconsole.min.js<span class="string">"&gt;&lt;/script&gt; --&gt;</span></span><br><span class="line"><span class="string">  &lt;style&gt;</span></span><br><span class="line"><span class="string">    #myElement &#123;</span></span><br><span class="line"><span class="string">      background: silver;</span></span><br><span class="line"><span class="string">      width: 250px;</span></span><br><span class="line"><span class="string">      height: 250px;</span></span><br><span class="line"><span class="string">      text-align: center;</span></span><br><span class="line"><span class="string">      font: 30px/300px Helvetica, Arial, sans-serif;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &lt;/style&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">  &lt;div id="</span>myElement<span class="string">"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;script&gt;</span></span><br><span class="line"><span class="string">  var reqAnimationFrame = (function () &#123;</span></span><br><span class="line"><span class="string">      return window[Hammer.prefixed(window, 'requestAnimationFrame')] || function (callback) &#123;</span></span><br><span class="line"><span class="string">          window.setTimeout(callback, 1000 / 60);</span></span><br><span class="line"><span class="string">      &#125;;</span></span><br><span class="line"><span class="string">  &#125;)();</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">  var el = document.querySelector("#myElement");</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> START_X = <span class="built_in">Math</span>.round((<span class="built_in">window</span>.innerWidth - el.offsetWidth) / <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">var</span> START_Y = <span class="built_in">Math</span>.round((<span class="built_in">window</span>.innerHeight - el.offsetHeight) / <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> ticking = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">var</span> transform;   <span class="comment">//图像效果</span></span><br><span class="line">  <span class="keyword">var</span> timer;</span><br><span class="line">  <span class="keyword">var</span> initAngle = <span class="number">0</span>;  <span class="comment">//旋转角度</span></span><br><span class="line">  <span class="keyword">var</span> initScale = <span class="number">1</span>;  <span class="comment">//放大倍数</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> mc = <span class="keyword">new</span> Hammer.Manager(el);   <span class="comment">//用管理器  可以同时触发旋转 拖拽  移动</span></span><br><span class="line">  <span class="comment">//var mc = new Hammer(el);      //旋转和移动互斥</span></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  ev.srcEvent.type  touchstart  touchend touchmove</span></span><br><span class="line"><span class="comment">  ev.deltaX  手势移动位移变量  </span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  mc.add(<span class="keyword">new</span> Hammer.Pan(&#123; <span class="attr">threshold</span>: <span class="number">0</span>, <span class="attr">pointers</span>: <span class="number">0</span> &#125;));  </span><br><span class="line">  mc.add(<span class="keyword">new</span> Hammer.Rotate(&#123; <span class="attr">threshold</span>: <span class="number">0</span> &#125;)).recognizeWith(mc.get(<span class="string">'pan'</span>));</span><br><span class="line">  mc.add(<span class="keyword">new</span> Hammer.Pinch(&#123; <span class="attr">threshold</span>: <span class="number">0</span> &#125;)).recognizeWith([mc.get(<span class="string">'pan'</span>), mc.get(<span class="string">'rotate'</span>)]);</span><br><span class="line">  <span class="comment">//结束时做一些处理</span></span><br><span class="line">  mc.on(<span class="string">"hammer.input"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(ev.isFinal) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(START_X+<span class="string">"  "</span>+transform.translate.x  +<span class="string">"   "</span>+ev.deltaX);</span><br><span class="line">    START_X = transform.translate.x ;</span><br><span class="line">    START_Y = transform.translate.y ;</span><br><span class="line">      &#125;</span><br><span class="line">    </span><br><span class="line">  &#125;);</span><br><span class="line">  mc.on(<span class="string">"panstart panmove"</span>, onPan);</span><br><span class="line">  mc.on(<span class="string">"rotatestart rotatemove rotateend"</span>, onRotate);</span><br><span class="line">  mc.on(<span class="string">"pinchstart pinchmove"</span>, onPinch);</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  第二次进入拖拽时  delta位移重置</span></span><br><span class="line"><span class="comment">  移动时 初始位置startxy不动。delta增加</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">onPan</span>(<span class="params">ev</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!ev.isFinal) &#123;</span><br><span class="line">     el.className = <span class="string">''</span>;</span><br><span class="line">      <span class="built_in">console</span>.log(START_X   +<span class="string">"  "</span>+  START_Y +<span class="string">" |  "</span>+ev.deltaX   +<span class="string">"  "</span>+  ev.deltaY);</span><br><span class="line">        transform.translate = &#123;</span><br><span class="line">          x: START_X + ev.deltaX,</span><br><span class="line">          y: START_Y + ev.deltaY</span><br><span class="line">        &#125;;</span><br><span class="line">        requestElementUpdate();</span><br><span class="line">    &#125;   </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">onPinch</span>(<span class="params">ev</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ev.type == <span class="string">'pinchstart'</span>) &#123;</span><br><span class="line">      initScale = transform.scale || <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    el.className = <span class="string">''</span>;</span><br><span class="line">    transform.scale = initScale * ev.scale;</span><br><span class="line">    requestElementUpdate();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//旋转相关</span></span><br><span class="line">  <span class="keyword">var</span>  preAngle =<span class="number">0</span> ;</span><br><span class="line">  <span class="keyword">var</span>  tempAngleFlag=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span>  deltaAngle = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span>  startRotateAngle = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">onRotate</span>(<span class="params">ev</span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//点下第二个触控点时触发</span></span><br><span class="line">      <span class="keyword">if</span>(ev.type == <span class="string">'rotatestart'</span>) &#123;    </span><br><span class="line">        startRotateAngle =  ev.rotation ; </span><br><span class="line">        tempAngleFlag = <span class="number">0</span> ;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">if</span>(ev.type == <span class="string">'rotatemove'</span>)&#123;</span><br><span class="line">      <span class="keyword">if</span>(tempAngleFlag == <span class="number">0</span>)&#123;</span><br><span class="line">        preAngle = startRotateAngle;</span><br><span class="line">        tempAngleFlag ++;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        deltaAngle = ev.rotation - preAngle;</span><br><span class="line">        el.className = <span class="string">''</span>;</span><br><span class="line">        transform.rz = <span class="number">1</span>;  <span class="comment">//非0  垂直xy轴</span></span><br><span class="line">        transform.angle =initAngle + deltaAngle;</span><br><span class="line">        requestElementUpdate();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">    <span class="comment">//旋转结束  记录当前图片角度</span></span><br><span class="line">    <span class="keyword">if</span>(ev.type ==<span class="string">'rotateend'</span>)&#123;</span><br><span class="line">      initAngle = transform.angle;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">updateElementTransform</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> value = [</span><br><span class="line">                  <span class="string">'translate3d('</span> + transform.translate.x + <span class="string">'px, '</span> + transform.translate.y + <span class="string">'px, 0)'</span>,</span><br><span class="line">                  <span class="string">'scale('</span> + transform.scale + <span class="string">', '</span> + transform.scale + <span class="string">')'</span>,</span><br><span class="line">                  <span class="string">'rotate3d('</span>+ transform.rx +<span class="string">','</span>+ transform.ry +<span class="string">','</span>+ transform.rz +<span class="string">','</span>+  transform.angle + <span class="string">'deg)'</span></span><br><span class="line">      ];</span><br><span class="line"></span><br><span class="line">      value = value.join(<span class="string">" "</span>);</span><br><span class="line">      el.style.webkitTransform = value;  <span class="comment">/*为Chrome/Safari*/</span></span><br><span class="line">      el.style.mozTransform = value; <span class="comment">/*为Firefox*/</span></span><br><span class="line">      el.style.transform = value; <span class="comment">/*IE Opera?*/</span></span><br><span class="line">      ticking = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">requestElementUpdate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(!ticking) &#123;</span><br><span class="line">          reqAnimationFrame(updateElementTransform);</span><br><span class="line">          ticking = <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  初始化设置</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">resetElement</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">      el.className = <span class="string">'animate'</span>;</span><br><span class="line">     transform = &#123;</span><br><span class="line">          translate: &#123; <span class="attr">x</span>: START_X, <span class="attr">y</span>: START_Y &#125;,</span><br><span class="line">          scale: <span class="number">1</span>,</span><br><span class="line">          angle: <span class="number">0</span>,</span><br><span class="line">          rx: <span class="number">0</span>,</span><br><span class="line">          ry: <span class="number">0</span>,</span><br><span class="line">          rz: <span class="number">0</span></span><br><span class="line">      &#125;;</span><br><span class="line">      requestElementUpdate();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  resetElement();</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure><p>最后，附上github源码地址，<a href="https://github.com/jinux7/study-collections/tree/master/移动端利用hammer制作移动缩放旋转功能" target="_blank" rel="noopener">点这里</a></p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>实现一个串行异步执行类</title>
      <link href="/2019/07/08/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E4%B8%B2%E8%A1%8C%E5%BC%82%E6%AD%A5%E6%89%A7%E8%A1%8C%E7%B1%BB/"/>
      <url>/2019/07/08/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E4%B8%B2%E8%A1%8C%E5%BC%82%E6%AD%A5%E6%89%A7%E8%A1%8C%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<p>写一个按顺序执行操作的类工具<br><a id="more"></a></p><h2 id="实现一个串行异步执行类"><a href="#实现一个串行异步执行类" class="headerlink" title="实现一个串行异步执行类"></a>实现一个串行异步执行类</h2><p>今天在学习webpack源码时，看到了webpack的核心模块tapable，里边有很多方法，其中之一就是串行异步执行方法，于是，自己准备实现一个简单的，其实很简单，见下面的代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明类SerialAsync</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SerialAsync</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.arrFns = [];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 原型链上添加addFn方法</span></span><br><span class="line">SerialAsync.prototype.addFn = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.arrFns.push(fn);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 原型链上添加emitFn方法</span></span><br><span class="line">SerialAsync.prototype.emitFn = <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> self = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// next是核心代码</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">next</span>(<span class="params">par</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> fn = self.arrFns[index++];</span><br><span class="line">    fn?fn(next):callback(par);</span><br><span class="line">  &#125;</span><br><span class="line">  next();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// SerialAsync结束</span></span><br><span class="line"><span class="comment">// 是不是超级的简单，就15行代码，记住，核心代码是next方法</span></span><br><span class="line"><span class="comment">// 下面是具体的使用</span></span><br><span class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> SerialAsync();</span><br><span class="line">s.addFn(<span class="function"><span class="keyword">function</span>(<span class="params">done</span>)</span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">    done(<span class="number">1</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;);</span><br><span class="line">s.addFn(<span class="function"><span class="keyword">function</span>(<span class="params">done</span>)</span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">    done(<span class="number">2</span>);</span><br><span class="line">  &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;);</span><br><span class="line">s.addFn(<span class="function"><span class="keyword">function</span>(<span class="params">done</span>)</span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">5</span>);</span><br><span class="line">    done(<span class="number">2</span>);</span><br><span class="line">  &#125;, <span class="number">5000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.time();</span><br><span class="line">s.emitFn(<span class="function">(<span class="params">par</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'over-&gt;'</span>, par);</span><br><span class="line">  <span class="built_in">console</span>.timeEnd();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>可以看到，最关键部分就是next函数，有个递归的过程，据说，nodejs中很多类似的串行方法都是这么实现的，一定要记住哦。</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具库 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>js中小数精度问题</title>
      <link href="/2019/07/04/js%E4%B8%AD%E5%B0%8F%E6%95%B0%E7%B2%BE%E5%BA%A6%E9%97%AE%E9%A2%98/"/>
      <url>/2019/07/04/js%E4%B8%AD%E5%B0%8F%E6%95%B0%E7%B2%BE%E5%BA%A6%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>js中的小数精度问题分析<br><a id="more"></a></p><h2 id="js中小数精度问题"><a href="#js中小数精度问题" class="headerlink" title="js中小数精度问题"></a>js中小数精度问题</h2><p>我们在日常开发中，是否遇到过0.1+0.2，一看马上答案就出来了，0.3啊，多么简单的加法，但是，如果你在代码里运行一下，结果出乎意料哦，是0.30000000000000004，哈哈，有意思吧，不仅在js中这样，java，python等语言都是这个德行。<br>奇怪了，这是为什么呢？这就需要了解一下小数在计算机中的存储方式了。<br>我在这里只说小数部分的保存方式。<br>先来说一下小数如何存储，如0.6：</p><ul><li>将该数字乘以2，取出整数部分作为二进制表示的第1位；然后再将小数部分乘以2，将得到的整数部分作为二进制表示的第2位；以此类推，直到小数部分为0。 </li><li>特殊情况： 小数部分出现循环，无法停止，则用有限的二进制位无法准确表示一个小数，这也是在编程语言中表示小数会出现误差的原因<br>再具体的分步骤看一下：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0.6</span> * <span class="number">2</span> = <span class="number">1.2</span> —————— <span class="number">1</span> </span><br><span class="line"><span class="number">0.2</span> * <span class="number">2</span> = <span class="number">0.4</span> —————— <span class="number">0</span> </span><br><span class="line"><span class="number">0.4</span> * <span class="number">2</span> = <span class="number">0.8</span> —————— <span class="number">0</span> </span><br><span class="line"><span class="number">0.8</span> * <span class="number">2</span> = <span class="number">1.6</span> —————— <span class="number">1</span> </span><br><span class="line"><span class="number">0.6</span> * <span class="number">2</span> = <span class="number">1.2</span> —————— <span class="number">1</span> </span><br><span class="line">…………</span><br></pre></td></tr></table></figure></li></ul><p>我们可以发现在该计算中已经出现了循环，0.6用二进制表示为 1001 1001 1001 1001 ……<br>如果是10.6，那个10.6的完整二进制表示为 1010.100110011001……<br>通过上边的解释，就知道为什么有的小数在js里会出现精度不准的问题了吧，接下来，我们再看看二进制小数如何还原成十进制。<br>我们还拿0.6这个小数来举例子,1001 1001 1001 1001 :</p><ul><li>从左到右，v[i] * 2^( - i ), i 为从左到右的index，v[i]为该位的值，直接看例子，很直接的<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0.6</span> = <span class="number">1</span> * <span class="number">2</span>^<span class="number">-1</span> + <span class="number">0</span> * <span class="number">2</span>^<span class="number">-2</span> + <span class="number">0</span> * <span class="number">2</span>^<span class="number">-3</span> + <span class="number">1</span> * <span class="number">2</span>^<span class="number">-4</span> + ……</span><br></pre></td></tr></table></figure></li></ul><p>好了，通过上面大概的了解了小数为什么精度有时候不准的问题，这也只是粗略的理解一下而已，具体在各种语言中运行时可能情况会很复杂，我就点到而止了。</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>js中的递归总结</title>
      <link href="/2019/07/02/js%E4%B8%AD%E7%9A%84%E9%80%92%E5%BD%92%E6%80%BB%E7%BB%93/"/>
      <url>/2019/07/02/js%E4%B8%AD%E7%9A%84%E9%80%92%E5%BD%92%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>js中各种递归的知识总结<br><a id="more"></a></p><h2 id="js中的递归总结"><a href="#js中的递归总结" class="headerlink" title="js中的递归总结"></a>js中的递归总结</h2><p>递归，在我们平时编程中用到的地方很多，但是，对我而然，它是又熟悉又陌生，也就是说，不能熟练地应用到具体的实际业务代码中，所以，我想好好总结总结，以便可以更好地使用它。</p><h3 id="数字递归-最简单的入门"><a href="#数字递归-最简单的入门" class="headerlink" title="数字递归(最简单的入门)"></a>数字递归(最简单的入门)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加法的递归</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (num === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> num + sum(--num)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">sum(<span class="number">4</span>); <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 再来一个阶乘的递归</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(num === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> num*fn(num<span class="number">-1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">fn(<span class="number">5</span>) <span class="comment">// 120</span></span><br></pre></td></tr></table></figure><h3 id="数组递归"><a href="#数组递归" class="headerlink" title="数组递归"></a>数组递归</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组中的各个元素相加之和</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(arr.length === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> arr[<span class="number">0</span>];</span><br><span class="line">  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> val = arr.shift();</span><br><span class="line">    <span class="keyword">return</span> val + fn(arr);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">fn([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]) <span class="comment">// 55</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将嵌套的多维数组转成一纬数组</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,[<span class="number">7</span>,[<span class="number">8</span>,[<span class="number">9</span>,<span class="number">10</span>]]]],<span class="number">11</span>,[<span class="number">12</span>]];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">transformArr</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> newArr = [];</span><br><span class="line">  recursiveArr(arr, newArr);</span><br><span class="line">  <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">recursiveArr</span>(<span class="params">arr, newArr</span>) </span>&#123;</span><br><span class="line">  arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(item <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">      recursiveArr(item, newArr);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">      newArr.push(item);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(transformArr(arr), <span class="string">'@_@'</span>);</span><br><span class="line"><span class="comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一纬数组，元素都是对象，互相有父子关系，将这些数组转换成父子结构的对象格式</span></span><br><span class="line"><span class="comment">// 数据，parentId是其父节点的id </span></span><br><span class="line"><span class="keyword">var</span> data = [</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'数据1'</span>,</span><br><span class="line">    id: <span class="number">11</span>,</span><br><span class="line">    parentId: <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'数据2'</span>,</span><br><span class="line">    id: <span class="number">12</span>,</span><br><span class="line">    parentId: <span class="number">11</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'数据3'</span>,</span><br><span class="line">    id: <span class="number">13</span>,</span><br><span class="line">    parentId: <span class="number">11</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'数据4'</span>,</span><br><span class="line">    id: <span class="number">14</span>,</span><br><span class="line">    parentId: <span class="number">12</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'数据5'</span>,</span><br><span class="line">    id: <span class="number">15</span>,</span><br><span class="line">    parentId: <span class="number">13</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'数据6'</span>,</span><br><span class="line">    id: <span class="number">16</span>,</span><br><span class="line">    parentId: <span class="number">15</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'数据7'</span>,</span><br><span class="line">    id: <span class="number">17</span>,</span><br><span class="line">    parentId: <span class="number">16</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'数据8'</span>,</span><br><span class="line">    id: <span class="number">18</span>,</span><br><span class="line">    parentId: <span class="number">16</span></span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"><span class="comment">// transformData这个函数是辅助生成对象的函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">transformData</span>(<span class="params">data, parentId</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> obj = &#123;</span><br><span class="line">    children: []</span><br><span class="line">  &#125;;</span><br><span class="line">  generaterTree(data, obj, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// generaterTree这个函数是递归调用的核心函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generaterTree</span>(<span class="params">data, obj, parentId</span>) </span>&#123;</span><br><span class="line">  data.forEach(<span class="function"><span class="params">item</span>=&gt;</span> &#123;</span><br><span class="line">    item.children = item.children?item.children:[];</span><br><span class="line">    <span class="keyword">if</span>(item.parentId === parentId) &#123;</span><br><span class="line">      obj.children.push(item);</span><br><span class="line">      generaterTree(data, item, item.id); <span class="comment">// 继续递归回调</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">console</span>.log(transformData(data));</span><br></pre></td></tr></table></figure><h3 id="对象的递归"><a href="#对象的递归" class="headerlink" title="对象的递归"></a>对象的递归</h3><p>其实，对象的递归里边也包含了数组等的一些基础型数据，我们常用的就是对象的深拷贝<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = &#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"jinux"</span>,</span><br><span class="line">  <span class="string">"like"</span>: [<span class="string">"football"</span>,<span class="string">"basketball"</span>,<span class="string">"voliball"</span>],</span><br><span class="line">  <span class="string">"work"</span>: &#123;</span><br><span class="line">    <span class="string">"company"</span>: <span class="string">"technology"</span>,</span><br><span class="line">    <span class="string">"address"</span>: <span class="string">"hunnan"</span>,</span><br><span class="line">    <span class="string">"tongshi"</span>: [<span class="string">"lining"</span>,<span class="string">"lvnan"</span>],</span><br><span class="line">    <span class="string">"isLeader"</span>: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span> data !== <span class="string">'object'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(data === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> obj = <span class="built_in">Object</span>.prototype.toString.call(data)===<span class="string">'[object Array]'</span>?</span><br><span class="line">            []:&#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> data) &#123;</span><br><span class="line">    obj[key] = <span class="built_in">arguments</span>.callee(data[key]);</span><br><span class="line">    <span class="comment">// obj[key] = deepClone(data[key]); 与上边的一个意思</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(deepClone(data), <span class="string">"&lt;-&gt;"</span>);</span><br></pre></td></tr></table></figure></p><p>目前暂时整理这么多，以后会陆续增加递归的小demo.</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>快速创建含有多个元素的数组</title>
      <link href="/2019/07/01/%E5%BF%AB%E9%80%9F%E5%88%9B%E5%BB%BA%E5%90%AB%E6%9C%89%E5%A4%9A%E4%B8%AA%E5%85%83%E7%B4%A0%E7%9A%84%E6%95%B0%E7%BB%84/"/>
      <url>/2019/07/01/%E5%BF%AB%E9%80%9F%E5%88%9B%E5%BB%BA%E5%90%AB%E6%9C%89%E5%A4%9A%E4%B8%AA%E5%85%83%E7%B4%A0%E7%9A%84%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<p>快速并且简单的创建数组<br><a id="more"></a></p><h2 id="快速创建含有多个元素的数组"><a href="#快速创建含有多个元素的数组" class="headerlink" title="快速创建含有多个元素的数组"></a>快速创建含有多个元素的数组</h2><p>我们平时在开发时，有时候可能会创建一个包含20个元素的数组，之后对这个数组进行加工操作，来制作一个符合业务要求的数组。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 比如我要创建一个包含20个元素的数组</span></span><br><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> <span class="number">1</span>=<span class="number">0</span>; i&lt;<span class="number">20</span>; i++) &#123;</span><br><span class="line">  arr.push(<span class="literal">undefined</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面虽然创建了数组，但是感觉麻烦了点。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">20</span>);</span><br><span class="line"><span class="comment">// 这样创建的数组，只是有长度，但是数组里并没有元素</span></span><br><span class="line">arr.length <span class="comment">// 20</span></span><br><span class="line"><span class="number">0</span> <span class="keyword">in</span> arr <span class="comment">// false</span></span><br><span class="line"><span class="comment">// arr 这个数组使用map， forEach等方法是便利不了的</span></span><br><span class="line"><span class="comment">// 创建一个长度为20的数组，注意该数组的元素并没有被初始化</span></span><br></pre></td></tr></table></figure></p><p>好了，有几种方便的创建方式，见下面<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 首先，看一下vue官网里出现的创建方式</span></span><br><span class="line"><span class="built_in">Array</span>.apply(<span class="literal">null</span>, &#123;<span class="attr">length</span>: <span class="number">20</span>&#125;); <span class="comment">// ES5开始apply函数的第二个参数除了可以是数组外，还可以是类数组对象（即包含length属性，且length属性值是个数字的对象）</span></span><br><span class="line"><span class="comment">// 这里顺便说一下&#123;length: 20&#125;这个参数的作用</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">arguments</span>)</span><br><span class="line">&#125;</span><br><span class="line">fn(<span class="literal">undefined</span>,<span class="literal">undefined</span>,<span class="literal">undefined</span>);</span><br><span class="line">fn.apply(<span class="literal">null</span>, &#123;<span class="attr">length</span>: <span class="number">3</span>&#125;);</span><br><span class="line"><span class="comment">// 通过上面的代码，就可以看出来&#123;length: 3&#125;这个参数的含义了吧</span></span><br></pre></td></tr></table></figure></p><p>最后，总结一下可以快速创建有初始值得数组方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="built_in">Array</span>.apply(<span class="literal">null</span>, &#123;<span class="attr">length</span>: <span class="number">20</span>&#125;);</span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="built_in">Array</span>.from(&#123;<span class="attr">length</span>: <span class="number">20</span>&#125;)</span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="built_in">Array</span>(<span class="number">20</span>).fill(<span class="literal">undefined</span>)</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>手写前端自动化构建工具</title>
      <link href="/2019/06/26/%E6%89%8B%E5%86%99%E5%89%8D%E7%AB%AF%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/"/>
      <url>/2019/06/26/%E6%89%8B%E5%86%99%E5%89%8D%E7%AB%AF%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<p>写一个自己的前端自动化构建工具<br><a id="more"></a></p><h2 id="手写前端自动化构建工具"><a href="#手写前端自动化构建工具" class="headerlink" title="手写前端自动化构建工具"></a>手写前端自动化构建工具</h2><p>现在我们使用vue，react等框架来开发已经很普遍了，当我们初始化一个项目的时候，是不是在命令行下按照提示一步一步的操作，最后在本地生成了一个现成的项目，是不是感觉很快捷，很方便，用来生成这个项目的工具就叫做构建工具（有的也称之为脚手架工具）。<br>我现在需要在命令行下进行各种操作，交互，npm上已经有人写好了这类工具，常用的就是commander和inquirer,使用它们来开发脚手架，真的是好简单。<br>我写了两个小demo，一个是围绕着commander，另一个则是围绕inquirer。<br>这两个小例子都很简单，可以根据具体的要求组合到一起。<br><a href="https://github.com/jinux7/study-collections/tree/master/手写自己的构建工具" target="_blank" rel="noopener">点这里看源码</a><br>select-list.js这个文件的功能是，可以根据列表的上下选择，下载github上对应的项目模板。<br>init-commander.js这个文件的功能是，命令行里传入的文件夹名和文件名来生成新项目文件。<br>题外话，这里还可以制作成系统命令，在package.json里的bin字段下。<br>如果，都配置好了，就可以使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm link</span><br></pre></td></tr></table></figure></p><p>这个命令，把bin字段下的内容生成系统命令，这是一种方式来生成系统命令，另一种应该是把这个项目发布到npm上，安装的时候直接全局安装就可以喽。</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>javascript设计模式</title>
      <link href="/2019/06/24/javascript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/06/24/javascript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>基本上所有的设计模式都在这里了<br><a id="more"></a></p><h2 id="javascript设计模式"><a href="#javascript设计模式" class="headerlink" title="javascript设计模式"></a>javascript设计模式</h2><p>其实，设计模式在前端，平时很少会遇到，这只是作为我们这些菜鸟前端来说，但是，对于那些高级的，写插件，库之类的前端童鞋来说，设计模式还是不可或缺的，这可是实实在在的会带入到项目中的哦。<br>我只知道常见的几种，也都是为了应付面试的时候被问到，不过，今天我要终结一下，代码部分来源于网络，我只是整理一下，以备被问到时能够快速的回答出来。</p><ul><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第一章-灵活的javascript.js" target="_blank" rel="noopener">1.灵活模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第二章-写的都是看到的-面向对象编程.js" target="_blank" rel="noopener">2.面向对象编程</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第三章-神奇的魔术师-简单工厂模式.js" target="_blank" rel="noopener">3.简单工厂模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第四章-给我一张名片-工厂方法模式.js" target="_blank" rel="noopener">4.工厂方法模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第五章-出现的都是幻觉-抽象工厂模式.js" target="_blank" rel="noopener">5.抽象工厂模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第六章-分即是合-建造者模式.js" target="_blank" rel="noopener">6.建造者模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第七章-语言之魂-原型模式.js" target="_blank" rel="noopener">7.原型模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第八章-一个人的寂寞-单例模式.js" target="_blank" rel="noopener">8.单例模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第九章-套餐服务-外观模式.js" target="_blank" rel="noopener">9.外观模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第十章-水管弯弯-适配器模式.js" target="_blank" rel="noopener">10.适配器模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第十一章-牛郎织女-代理模式.js" target="_blank" rel="noopener">11.代理模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第十二章-房子装修-装饰着模式.js" target="_blank" rel="noopener">12.装饰者模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第十三章-城市间公路-桥接模式.js" target="_blank" rel="noopener">13.桥接模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第十四章-超值午餐-组合模式.js" target="_blank" rel="noopener">14.组合模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第十五章-城市公交车-享元模式.js" target="_blank" rel="noopener">15.享元模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第十六章-照猫画虎-模板方法模式.js" target="_blank" rel="noopener">16.模板方法模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第十七章-通信卫星-观察者模式.js" target="_blank" rel="noopener">17.观察者模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第十八章-超级玛丽-状态模式.js" target="_blank" rel="noopener">18.状态模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第十九章-活诸葛-策略模式.js" target="_blank" rel="noopener">19.策略模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第二十章-有序车站-职责链模式.js" target="_blank" rel="noopener">20.职责链模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第二十一章-命令模式.js" target="_blank" rel="noopener">21.命令模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第二十二章-驻华大使-访问者模式.js" target="_blank" rel="noopener">22.访问者模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第二十三章-媒婆-中介者模式.js" target="_blank" rel="noopener">23.中介者模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第二十四章-做好笔录-备忘录模式.js" target="_blank" rel="noopener">24.备忘录模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第二十五章-点钞机-迭代器模式.js" target="_blank" rel="noopener">25.迭代器模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第二十六章-语言翻译-解释器模式.js" target="_blank" rel="noopener">26.解释器模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第二十七章-永无尽头-链式模式.js" target="_blank" rel="noopener">27.链式模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第二十八章-未来预言家-委托模式.js" target="_blank" rel="noopener">28.委托模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第二十九章-数据管理器-数据访问对象模式.js" target="_blank" rel="noopener">29.数据访问对象模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第三十章-执行控制-节流模式.js" target="_blank" rel="noopener">30.节流模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第三十一章-卡片拼图-简单模板模式.js" target="_blank" rel="noopener">31.简单模板模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第三十二章-机器学习-惰性模式.js" target="_blank" rel="noopener">32.惰性模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第三十三章-异国战场-参与者模式.js" target="_blank" rel="noopener">33.参与者模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第三十四章-入场仪式-等待着模式.js" target="_blank" rel="noopener">34.等待者模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第三十五章-死心眼-同步模块.js" target="_blank" rel="noopener">35.同步模块模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第三十六章-大心脏-异步模块模式.js" target="_blank" rel="noopener">36.异步模块模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第三十七章-分而治之-widget.js" target="_blank" rel="noopener">37.widget模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第三十八章-三人行-MVC模式.js" target="_blank" rel="noopener">38.MVC模式</a></li><li><a href="https://github.com/jinux7/study-collections/blob/master/javaScript设计模式/第三十九章-MVVM.js" target="_blank" rel="noopener">39.MVVM模式</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>写一个自己的富文本编辑器</title>
      <link href="/2019/06/22/%E5%86%99%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/"/>
      <url>/2019/06/22/%E5%86%99%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>写一个稍微复杂点的富文本编辑器<br><a id="more"></a></p><h2 id="写一个自己的富文本编辑器"><a href="#写一个自己的富文本编辑器" class="headerlink" title="写一个自己的富文本编辑器"></a>写一个自己的富文本编辑器</h2><p>前几天写了一个<a href="https://jinux7.github.io/2019/06/17/简单的富文本编辑器/" target="_blank" rel="noopener">《简单的富文本编辑器》</a>这篇博文，没想到刚过两天，项目中就需要自己写一个富文本编辑器。<br>具体的需求是，在富文本编辑器中编辑好内容，存到数据库，之后app端拿到这些数据以webview的形式展示出来，当然，webview这块也是我来做，但是，在pc端编辑的内容直接放到移动端显示是有问题的，比如像图片大小问题，而且编辑的样式和展示出来的样式完全不一样。所以，我就想自己写一个，不用第三方的库，这样自己可以灵活的按照需求来修改。<br>暂时写这个小插件只用了一天多，还不是很完善，有些地方还有待修改，如果有时间的话，以后会陆续更新。<br>废话不多说，直接贴源码地址喽:<br><a href="https://github.com/jinux7/study-collections/tree/master/jinux-editor" target="_blank" rel="noopener">jinux-editor</a><br>这里有些注意的地方，比如把文字变成粗体，用到了<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.execCommand(<span class="string">"bold"</span>,<span class="literal">false</span>,<span class="literal">null</span>);</span><br></pre></td></tr></table></figure></p><p>而取消粗体还是用到了这个命令，执行同一个命令，会切换字体的粗体和非粗体的状态。<br>但是，这里注意，还有一个方法可以获取现在文本是否是粗体状态<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.queryCommandState(<span class="string">'bold'</span>);</span><br></pre></td></tr></table></figure></p><p>可以用上面这个命令判断现在的状态，进而修改点击按钮的样式。</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>base64加密原理</title>
      <link href="/2019/06/20/base64%E5%8A%A0%E5%AF%86%E5%8E%9F%E7%90%86/"/>
      <url>/2019/06/20/base64%E5%8A%A0%E5%AF%86%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>你知道我们常用的base64是什么吗？<br><a id="more"></a></p><h2 id="base64加密原理"><a href="#base64加密原理" class="headerlink" title="base64加密原理"></a>base64加密原理</h2><p>开发者对Base64编码肯定很熟悉，是否对它有很清晰的认识就不一定了。实际 上Base64已经简单到不能再简单了，如果对它的理解还是模棱两可实在不应该。大概介绍一下Base64的相关内容，花几分钟时间就可以彻底理解它。文 章下边贴了一个Base64的编解码器，方便阅读文章的同时来实验。<br>　　一. Base64编码由来<br>　　为什么会有Base64编码呢？因为有些网络传送渠道并不支持所有的字节，例如传统的邮件只支持可见字符的传送，像ASCII码的控制字符就 不能通过邮件传送。这样用途就受到了很大的限制，比如图片二进制流的每个字节不可能全部是可见字符，所以就传送不了。最好的方法就是在不改变传统协议的情 况下，做一种扩展方案来支持二进制文件的传送。把不可打印的字符也能用可打印字符来表示，问题就解决了。Base64编码应运而生，Base64就是一种 基于64个可打印字符来表示二进制数据的表示方法。<br>　　二. Base64编码原理<br>　　看一下Base64的索引表，字符选用了”A-Z、a-z、0-9、+、/“ 64个可打印字符。数值代表字符的索引，这个是标准Base64协议规定的，不能更改。64个字符用6个bit位就可以全部表示，一个字节有8个bit 位，剩下两个bit就浪费掉了，这样就不得不牺牲一部分空间了。这里需要弄明白的就是一个Base64字符是8个bit，但是有效部分只有右边的6个 bit，左边两个永远是0。<br><img src="/2019/06/20/base64加密原理/1.png" alt="img"><br>那么怎么用6个有效bit来表示传统字符的8个bit呢？8和6的最小公倍数 是24，也就是说3个传统字节可以由4个Base64字符来表示，保证有效位数是一样的，这样就多了1/3的字节数来弥补Base64只有6个有效bit 的不足。你也可以说用两个Base64字符也能表示一个传统字符，但是采用最小公倍数的方案其实是最减少浪费的。结合下边的图比较容易理解。Man是三个 字符，一共24个有效bit，只好用4个Base64字符来凑齐24个有效位。红框表示的是对应的Base64，6个有效位转化成相应的索引值再对应 Base64字符表，查出”Man”对应的Base64字符是”TWFU”。说到这里有个原则不知道你发现了没有，要转换成Base64的最小单位就是三个字节，对一个字符串来说每次都是三个字节三个字节的转换，对应的是Base64的四个字节。这个搞清楚了其实就差不多了。<br><img src="/2019/06/20/base64加密原理/2.png" alt="img"><br><img src="/2019/06/20/base64加密原理/3.png" alt="img"><br>　　但是转换到最后你发现不够三个字节了怎么办呢？愿望终于实现了，我们可以用两 个Base64来表示一个字符或用三个Base64表示两个字符，像下图的A对应的第二个Base64的二进制位只有两个，把后边的四个补0就是了。所以 A对应的Base64字符就是QQ。上边已经说过了，原则是Base64字符的最小单位是四个字符一组，那这才两个字 符，后边补两个”=”吧。其实不用”=”也不耽误解码，之所以用”=”，可能是考虑到多段编码后的Base64字符串拼起来也不会引起混淆。由此可见 Base64字符串只可能最后出现一个或两个”=”，中间是不可能出现”=”的。下图中字符”BC”的编码过程也是一样的。<br><img src="/2019/06/20/base64加密原理/4.png" alt="img"><br>    三. 总结　　<br>　　说起Base64编码可能有些奇怪，因为大多数的编码都是由字符转化成二进制的过程，而从二进制转成字符的过程称为解码。而Base64的概念就恰好反了，由二进制转到字符称为编码，由字符到二进制称为解码。<br>　　Base64编码主要用在传输、存储、表示二进制等领域，还可以用来加密，但是这种加密比较简单，只是一眼看上去不知道什么内容罢了，当然也可以对Base64的字符序列进行定制来进行加密。<br>　　Base64编码是从二进制到字符的过程，像一些中文字符用不同的编码转为二 进制时，产生的二进制是不一样的，所以最终产生的Base64字符也不一样。例如”上网”对应utf-8格式的Base64编码是”5LiK572R”， 对应GB2312格式的Base64编码是”yc/N+A==”。</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>测试及爬虫工具nightmare</title>
      <link href="/2019/06/18/%E6%B5%8B%E8%AF%95%E5%8F%8A%E7%88%AC%E8%99%AB%E5%B7%A5%E5%85%B7nightmare/"/>
      <url>/2019/06/18/%E6%B5%8B%E8%AF%95%E5%8F%8A%E7%88%AC%E8%99%AB%E5%B7%A5%E5%85%B7nightmare/</url>
      
        <content type="html"><![CDATA[<p>nightmare工具的使用<br><a id="more"></a></p><h2 id="测试及爬虫工具nightmare"><a href="#测试及爬虫工具nightmare" class="headerlink" title="测试及爬虫工具nightmare"></a>测试及爬虫工具nightmare</h2><p>nightmare是一个可视化的页面操作工具，<a href="https://www.npmjs.com/package/nightmare" target="_blank" rel="noopener">官网点这里</a><br>如何安装就不说了，npm就可以搞定，但是，安装的时候会很慢，因为它依赖electron<br>具体的使用方法可以直接看官网的api，下面是一个小demo，是对本博客网站的简单操作，可以看一下它强大的效果<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Nightmare = <span class="built_in">require</span>(<span class="string">'nightmare'</span>);       </span><br><span class="line"><span class="keyword">var</span> nightmare = Nightmare(&#123; </span><br><span class="line">      show: <span class="literal">true</span>,</span><br><span class="line">      gotoTimeout: <span class="number">100000</span> <span class="comment">// goto页面的等待时长，不写的话默认30000ms，访问慢的网页会报错</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">nightmare</span><br><span class="line">  .goto(<span class="string">'https://jinux7.github.io'</span>) <span class="comment">// 打开的网页</span></span><br><span class="line">  .type(<span class="string">'.m_search .u-search-input'</span>, <span class="string">'javascript'</span>) <span class="comment">// 向input中写入javascript</span></span><br><span class="line">  .type(<span class="string">'.m_search .u-search-input'</span>, <span class="string">'\u000d'</span>) <span class="comment">// 触发input的点击回车事件</span></span><br><span class="line">  .wait(<span class="string">'.icon.icon-close'</span>) <span class="comment">// 等待弹出层的.icon.icon-close元素节点出现</span></span><br><span class="line">  .click(<span class="string">'.icon.icon-close'</span>) <span class="comment">// 出现后点击它</span></span><br><span class="line">  .evaluate(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// 注入到页面里执行的js代码</span></span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">document</span>.querySelector(<span class="string">'.avatar.waves-image'</span>).src;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// .end() // 关闭nightmare</span></span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">'Search failed:'</span>, error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></p><p>如需要更丰富的功能，按照api一点点添加就可以喽.</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具库 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>简单的富文本编辑器</title>
      <link href="/2019/06/17/%E7%AE%80%E5%8D%95%E7%9A%84%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/"/>
      <url>/2019/06/17/%E7%AE%80%E5%8D%95%E7%9A%84%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>超级简单的富文本编辑器<br><a id="more"></a></p><h2 id="简单的富文本编辑器"><a href="#简单的富文本编辑器" class="headerlink" title="简单的富文本编辑器"></a>简单的富文本编辑器</h2><p>这是一个超级简单富文本编辑器，功能很简单，但是富文本编辑器的写法基础是有的，可以在这个基础上进行增加改进。<br>主要用到了div的contentEditable属性，还有document.execCommand方法，具体代码见下面<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;简易富文本编辑器.html&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    </span></span><br><span class="line"><span class="regexp">    &lt;meta http-equiv="keywords" content="keyword1,keyword2,keyword3"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;meta http-equiv="description" content="this is my page"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;meta http-equiv="content-type" content="text/</span>html; charset=UTF<span class="number">-8</span><span class="string">"&gt;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">&lt;style type="</span>text/css<span class="string">"&gt;</span></span><br><span class="line"><span class="string">    #editor &#123;width:600px;height:200px;border:1px solid #ccc;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    button &#123;margin:1px;border:1px solid #aaa;background:#ffe;cursor:pointer;overflow:hidden;&#125;</span></span><br><span class="line"><span class="string">    button:hover &#123;background:#ccc;border:1px solid #00f;&#125;</span></span><br><span class="line"><span class="string">&lt;/style&gt;</span></span><br><span class="line"><span class="string">  &lt;/head&gt;</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  &lt;body&gt;</span></span><br><span class="line"><span class="string">  &lt;button id="</span>btn1<span class="string">"&gt;&lt;/button&gt;</span></span><br><span class="line"><span class="string">  &lt;button id="</span>btn2<span class="string">"&gt;&lt;/button&gt;</span></span><br><span class="line"><span class="string">  &lt;button id="</span>btn3<span class="string">"&gt;&lt;/button&gt;</span></span><br><span class="line"><span class="string">  &lt;button id="</span>btn4<span class="string">"&gt;&lt;/button&gt;</span></span><br><span class="line"><span class="string">  &lt;div id="</span>editor<span class="string">"&gt;</span></span><br><span class="line"><span class="string">      Click to Editor...</span></span><br><span class="line"><span class="string">  &lt;/div&gt;</span></span><br><span class="line"><span class="string">  &lt;input id="</span>printContent<span class="string">" type="</span>button<span class="string">" value="</span>打印编辑器内容<span class="string">"&gt;</span></span><br><span class="line"><span class="string">  &lt;script type="</span>text/javascript<span class="string">"&gt;</span></span><br><span class="line"><span class="string">        initEditor();</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        //初始化</span></span><br><span class="line"><span class="string">        function initEditor() &#123;</span></span><br><span class="line"><span class="string">            openOrCloseEditor("</span>editor<span class="string">", "</span><span class="literal">true</span><span class="string">");//开启元素编辑</span></span><br><span class="line"><span class="string">            bindBtnCommand();//给样式按钮绑定命令</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        /**</span></span><br><span class="line"><span class="string">        * </span></span><br><span class="line"><span class="string">        * 功能： 开启元素编辑功能</span></span><br><span class="line"><span class="string">        * 输入： el：编辑器ID; operate：Boolean值，表示启动还是关闭</span></span><br><span class="line"><span class="string">        */</span></span><br><span class="line"><span class="string">        function openOrCloseEditor(el, operate) &#123;</span></span><br><span class="line"><span class="string">            var editor = document.getElementById(el);</span></span><br><span class="line"><span class="string">            editor.contentEditable = operate;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        //按钮绑定命令</span></span><br><span class="line"><span class="string">        function bindBtnCommand() &#123;</span></span><br><span class="line"><span class="string">            var btns = document.getElementsByTagName("</span>button<span class="string">"),</span></span><br><span class="line">                btnConfigs = "backcolor|#f00|设置背景色 bold|null|字体加粗 indent|null|缩进 fontName|微软雅黑|转换字体".split(" "),</span><br><span class="line">                len = btnConfigs.length;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>, btnConfig; btnConfig = btnConfigs[i]; i++) &#123;</span><br><span class="line">                (<span class="function"><span class="keyword">function</span>(<span class="params">btnConfig, btn</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">var</span> msg = btnConfig.split(<span class="string">"|"</span>),</span><br><span class="line">                        lab = msg[<span class="number">0</span>],</span><br><span class="line">                        value = msg[<span class="number">1</span>],</span><br><span class="line">                        title = msg[<span class="number">2</span>];</span><br><span class="line">                    btn.innerHTML = lab;</span><br><span class="line">                    btn.title = title;</span><br><span class="line">                    btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">                        <span class="built_in">document</span>.execCommand(lab, <span class="literal">false</span>, value);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)(btnConfig, btns[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取编辑器内嵌内容</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">getContent</span>(<span class="params">el</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> editor = <span class="built_in">document</span>.getElementById(el);</span><br><span class="line">            <span class="keyword">return</span> editor.innerHTML;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//打印按钮绑定触发事件</span></span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">"printContent"</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> content = getContent(<span class="string">"editor"</span>);</span><br><span class="line">            <span class="built_in">document</span>.write(content);</span><br><span class="line">        &#125;;</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure></p><p>上面的代码直接粘贴就可以跑起来哦。</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vue,react中百度地图的使用</title>
      <link href="/2019/06/13/vue-react%E4%B8%AD%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BE%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/06/13/vue-react%E4%B8%AD%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BE%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>vue,react等框架，百度地图的最优使用方式<br><a id="more"></a></p><h2 id="vue-react中百度地图的使用"><a href="#vue-react中百度地图的使用" class="headerlink" title="vue,react中百度地图的使用"></a>vue,react中百度地图的使用</h2><p>现在vue，react框架大行其道，很多项目都是用它们开发的，我的项目也都在用，之前，在使用百度地图的时候，我都是把百度地图封了一个组件，直接插入到dom中，但是，有些功能莫名其妙的不好使，我猜可能是跟vue有兼容性问题，还有一个页面中引入多个地图的情况下，像城市切换插件就不好使了，相互冲突了，所以，最终的解决方案是用iframe来引入百度地图。这个好处就是完全隔离开项目框架与百度地图之间的冲突。<br>首先，建一个百度地图的html页面，代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=utf-8"</span> /&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"initial-scale=1.0, user-scalable=yes"</span> /&gt;</span><br><span class="line">    &lt;link href=<span class="string">"https://api.map.baidu.com/library/IndoorMap/1.0/src/indoor.min.css?v=1.0.1 "</span> rel=<span class="string">"stylesheet"</span> type=<span class="string">"text/css"</span>&gt;</span><br><span class="line">    &lt;style type=<span class="string">"text/css"</span>&gt;</span><br><span class="line">        body, html,#map &#123;width: 100%;height: 100%;overflow: hidden;margin:0;font-family:"微软雅黑";&#125;</span><br><span class="line">    &lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script type="text/</span>javascript<span class="string">" src="</span>https:<span class="comment">//api.map.baidu.com/api?v=3.0&amp;ak=PaxZEfdK60GDxScXccj81kBW"&gt;&lt;/script&gt;</span></span><br><span class="line">    &lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"https://api.map.baidu.com/library/IndoorMap/1.0/src/indoor.min.js?v=1.0.1 "</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div id="map"&gt;&lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">lng:<span class="string">''</span>,</span><br><span class="line">lat:<span class="string">''</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">var</span> tab = getQueryString(<span class="string">'tab'</span>);</span><br><span class="line">  <span class="comment">// 获取url信息</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getQueryString</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"(^|&amp;)"</span> + name + <span class="string">"=([^&amp;]*)(&amp;|$)"</span>, <span class="string">"i"</span>);</span><br><span class="line">      <span class="keyword">var</span> reg_rewrite = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"(^|/)"</span> + name + <span class="string">"/([^/]*)(/|$)"</span>, <span class="string">"i"</span>);</span><br><span class="line">      <span class="keyword">var</span> r = <span class="built_in">window</span>.location.search.substr(<span class="number">1</span>).match(reg);</span><br><span class="line">      <span class="keyword">var</span> q = <span class="built_in">window</span>.location.pathname.substr(<span class="number">1</span>).match(reg_rewrite);</span><br><span class="line">      <span class="keyword">if</span>(r != <span class="literal">null</span>)&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="built_in">unescape</span>(r[<span class="number">2</span>]);</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span>(q != <span class="literal">null</span>)&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="built_in">unescape</span>(q[<span class="number">2</span>]);</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 百度地图API功能</span></span><br><span class="line">  <span class="keyword">var</span> map = <span class="keyword">new</span> BMap.Map(<span class="string">"map"</span>);</span><br><span class="line">  map.centerAndZoom(<span class="keyword">new</span> BMap.Point(<span class="number">123.436</span>, <span class="number">41.816</span>), <span class="number">11</span>);</span><br><span class="line"><span class="keyword">var</span> topLeftControl = <span class="keyword">new</span> BMap.ScaleControl(&#123;</span><br><span class="line">anchor: BMAP_ANCHOR_BOTTOM_LEFT</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 城市选择控件</span></span><br><span class="line"><span class="keyword">var</span> cityListControl = <span class="keyword">new</span> BMap.CityListControl(&#123;</span><br><span class="line">anchor: BMAP_ANCHOR_TOP_RIGHT</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 比例尺控件</span></span><br><span class="line"><span class="keyword">var</span> topLeftNavigation = <span class="keyword">new</span> BMap.NavigationControl();</span><br><span class="line">map.addControl(topLeftControl);</span><br><span class="line">map.addControl(topLeftNavigation);</span><br><span class="line">map.addControl(cityListControl);</span><br><span class="line">  map.enableScrollWheelZoom(<span class="literal">true</span>); <span class="comment">// 开启鼠标滚轮缩放</span></span><br><span class="line">  <span class="comment">// 创建室内图实例</span></span><br><span class="line">  <span class="keyword">var</span> indoorManager = <span class="keyword">new</span> BMapLib.IndoorManager(map);</span><br><span class="line">  <span class="comment">// 点击获取经纬度</span></span><br><span class="line">map.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">obj.lng = <span class="built_in">parseFloat</span>(e.point.lng) + <span class="string">''</span>;</span><br><span class="line">obj.lat = <span class="built_in">parseFloat</span>(e.point.lat) + <span class="string">''</span>;</span><br><span class="line">drawLocation()</span><br><span class="line">selectLocation();</span><br><span class="line">&#125;);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">selectLocation</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">window</span>.parent.postMessage(&#123;</span><br><span class="line">      refresh:obj,</span><br><span class="line">      tab</span><br><span class="line">      &#125;,<span class="string">'*'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawLocation</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (obj.lng !== <span class="string">""</span> &amp;&amp; obj.lat !== <span class="string">""</span>) &#123;</span><br><span class="line">      map.clearOverlays();</span><br><span class="line">      <span class="keyword">var</span> new_point = <span class="keyword">new</span> BMap.Point(obj.lng, obj.lat);</span><br><span class="line">      <span class="keyword">var</span> marker = <span class="keyword">new</span> BMap.Marker(new_point);</span><br><span class="line">      map.addOverlay(marker);</span><br><span class="line">      map.panTo(new_point);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>之后就是在项目中用iframe标签引入。<br>重要的地方来了，就是父子页面通信，在子页面点击选好地点后，肯定需要把选好点的坐标给父页面，这里有一个简单的方法，在子页面中点击选点时，给父页面发信息代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.parent.postMessage(&#123;</span><br><span class="line">    val: <span class="string">'信息'</span></span><br><span class="line">    &#125;,<span class="string">'*'</span>);</span><br><span class="line"><span class="comment">// 具体使用方法自行百度</span></span><br></pre></td></tr></table></figure></p><p>子页面消息发出去了，父页面如何接收呢？见下面代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'message'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(event);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 可以打印出很多需要的信息喽</span></span><br><span class="line"><span class="comment">// 据说，IE8+都支持哦</span></span><br></pre></td></tr></table></figure></p><p>好了，总结一下，vue中最好还是以这种方式使用哈。</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>web页面性能测试demo</title>
      <link href="/2019/06/06/web%E9%A1%B5%E9%9D%A2%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95demo/"/>
      <url>/2019/06/06/web%E9%A1%B5%E9%9D%A2%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95demo/</url>
      
        <content type="html"><![CDATA[<p>web页面性能测试demo<br><a id="more"></a></p><h2 id="web页面性能测试demo"><a href="#web页面性能测试demo" class="headerlink" title="web页面性能测试demo"></a>web页面性能测试demo</h2><p>写这篇文章的起因，有时候有人问，css会不会阻塞页面渲染了，js如何触发页面渲染了等等，所以，最好的方式就是自己写一个小demo，自己试一下不就一目了然了吗，目前这个demo的内容很简单，以后会慢慢增加。<br>下面是github的链接地址:<br><a href="https://github.com/jinux7/study-collections/tree/master/web-performance-test" target="_blank" rel="noopener">点我进入仓库</a></p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web性能 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>docker常用命令</title>
      <link href="/2019/05/28/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2019/05/28/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>docker常用命令<br><a id="more"></a></p><h2 id="docker常用命令"><a href="#docker常用命令" class="headerlink" title="docker常用命令"></a>docker常用命令</h2><p>最近想在win10下安装mysql5.6版本，装了半天没装成功，于是乎用docker来解决了。<br>docker需要命令行，这里以mysql为例，贴出一个别人的blog(懒得写了)。<br><a href="https://www.cnblogs.com/pwc1996/p/5425234.html" target="_blank" rel="noopener">docker运行mysql</a></p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>windows下git命令批处理执行</title>
      <link href="/2019/05/24/windows%E4%B8%8Bgit%E5%91%BD%E4%BB%A4%E6%89%B9%E5%A4%84%E7%90%86%E6%89%A7%E8%A1%8C/"/>
      <url>/2019/05/24/windows%E4%B8%8Bgit%E5%91%BD%E4%BB%A4%E6%89%B9%E5%A4%84%E7%90%86%E6%89%A7%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<p>win10操作系统下利用批处理程序来运行git操作。<br><a id="more"></a></p><h2 id="windows下git命令批处理执行"><a href="#windows下git命令批处理执行" class="headerlink" title="windows下git命令批处理执行"></a>windows下git命令批处理执行</h2><p>首先，我说一下我要这样做的起因，也许大家都会有感。<br>目前，我在做的项目是一个，但是下面分了5个子项目，这5个子项目，每一个自己拥有一个git仓库，所以，我在上传代码的操作就是，commit-&gt;pull-&gt;push,这样反复5回，因为有5个仓库嘛。有时候一天要好多次，效率太低了，于是我就想起了利用windows系统的批处理来做。<br>在使用批处理来操作git命令，首先需要把git的操作仓库方式改为ssh，使用ssh的话，还需要ssh key，ssh key的生成方法是，打开git的命令行工具，输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 首先检查一下现在电脑里是否已经有生成的ssh key</span><br><span class="line">cd ~/.ssh</span><br><span class="line">// ~这个符号我在git命令行下才能打出来，cmd没打出来。</span><br><span class="line">// ~/ 这个路径就是C:\Users\kaiya这个，看看现在是否已经有现成的ssh key</span><br><span class="line">// 如果有，就不用再生成了</span><br><span class="line"></span><br><span class="line">// 接下来是生成ssh key命令</span><br><span class="line">ssh-keygen -t rsa -C &quot;124076***@qq.com&quot;</span><br><span class="line">// 需要自己在电脑中注册的git邮箱,如果不知道，可以查一下 git config --global user.email</span><br><span class="line">// 生成的ssh key自动保存在C:\Users\kaiya这个目录下（这个是我的用户名）</span><br><span class="line">// 生成过程中一路回车就好，不用设置密码等</span><br></pre></td></tr></table></figure></p><p>有了ssh key，添加到github或自己公司的gitlab上就好了。<br>比如要添加到github上，登录账号进入自己的github库，步骤见下图<br><img src="/2019/05/24/windows下git命令批处理执行/1.png" alt="img"><br><img src="/2019/05/24/windows下git命令批处理执行/2.png" alt="img"><br>点进去之后，按照页面提示填写就可以了。<br>以上就是配置好了ssh key，之后就是用git拉取，推送代码了，这里有一个地方需要注意，那就是Git对仓库的操作方式，既然已经添加了ssh key，就需要用git的ssh提交方式。查看.git文件夹下的config文件，找到下面的内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[remote &quot;origin&quot;]</span><br><span class="line">  // 这个是ssh提交方式</span><br><span class="line">url = git@172.24.112.158:root/airport.git</span><br><span class="line">  </span><br><span class="line">  // 这个是http提交方式</span><br><span class="line">  url = http://172.24.112.158/root/webviewpage</span><br><span class="line"></span><br><span class="line">fetch = +refs/heads/*:refs/remotes/origin/*</span><br></pre></td></tr></table></figure></p><p>按照上面的写法，只留下ssh提交方式即可。<br>接下来，我们来写windows的批处理命令,先写一个处理一个仓库的git操作批处理。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">chcp 65001</span><br><span class="line">cd C:\WORK\git-ku\ejashop</span><br><span class="line">@echo off</span><br><span class="line">echo git批处理开始执行</span><br><span class="line">git status</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;update&quot;</span><br><span class="line">git pull</span><br><span class="line">git push</span><br><span class="line">echo ----------</span><br><span class="line">echo git commit pull push都已完成，点击任意键退出</span><br><span class="line">pause</span><br></pre></td></tr></table></figure></p><p>再写一个调用多个批处理文件的操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">chcp 65001</span><br><span class="line">pause</span><br><span class="line">start /D &quot;C:\Users\kaiya\Desktop\批处理node\git&quot; call ehome.bat</span><br><span class="line">start /D &quot;C:\Users\kaiya\Desktop\批处理node\git&quot; call airport.bat</span><br><span class="line">start /D &quot;C:\Users\kaiya\Desktop\批处理node\git&quot; call eHomeOperation.bat</span><br><span class="line">start /D &quot;C:\Users\kaiya\Desktop\批处理node\git&quot; call kaidian.bat</span><br></pre></td></tr></table></figure></p><p>这里，需要注意一下，因为批处理是在cmd命令行下执行的，所以要把git的环境变量配好哦。<br>好了，通过这样的方法，以后麻烦的git操作，点击一下就可以搞定喽。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>多个ajax请求,页面渲染顺序问题</title>
      <link href="/2019/05/20/%E5%A4%9A%E4%B8%AAajax%E8%AF%B7%E6%B1%82-%E9%A1%B5%E9%9D%A2%E6%B8%B2%E6%9F%93%E9%A1%BA%E5%BA%8F%E9%97%AE%E9%A2%98/"/>
      <url>/2019/05/20/%E5%A4%9A%E4%B8%AAajax%E8%AF%B7%E6%B1%82-%E9%A1%B5%E9%9D%A2%E6%B8%B2%E6%9F%93%E9%A1%BA%E5%BA%8F%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>在一个页面中,多个ajax请求,页面渲染顺序问题。<br><a id="more"></a></p><h2 id="多个ajax请求-页面渲染顺序问题"><a href="#多个ajax请求-页面渲染顺序问题" class="headerlink" title="多个ajax请求,页面渲染顺序问题"></a>多个ajax请求,页面渲染顺序问题</h2><p>如题，比如说在一个页面中有两个按钮或者多个，按照先后顺序点击，都发出了ajax请求，但是他们返回的顺序就不会按照点击按钮的顺序返回，如果，它们操作的是页面的同一个显示区域，比如列表，那就ajax访问最慢的接口最后被渲染出来，有可能这个接口是用户最开始点击的按钮渲染出来的，这样就会产生错误信息，用户本想最后点击那个按钮返回的数据才是他想要的。<br>其实，这个问题我并没有遇到过，这个是大约一年前我再一次面试中被问到的，当时由于没有做好准备，我也只能诚实的回答没有遇到过此场景，今天我又来了兴致，把它的解决方法记录下来（我的拖延症是不是很严重），这个解决方式是我自己定的，其实也是实现起来比较简单的。<br>为了加快写作，直接把代码贴出来，在代码中写注释<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">  &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">  &lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"ie=edge"</span>&gt;</span><br><span class="line">  &lt;script src=<span class="string">"./jquery.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">  &lt;title&gt;多个ajax请求,页面渲染顺序问题&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">  &lt;style&gt;</span></span><br><span class="line"><span class="regexp">    .content &#123;</span></span><br><span class="line"><span class="regexp">      width: 500px;</span></span><br><span class="line"><span class="regexp">      height: 100px;</span></span><br><span class="line"><span class="regexp">      background-color: #eeeeee;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>style&gt;</span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp">  &lt;div class="content"&gt;</span></span><br><span class="line"><span class="regexp">    原始内容</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">  &lt;button id=<span class="string">"btn1"</span>&gt;按钮<span class="number">2</span>s&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">  &lt;button id="btn2"&gt;按钮5s&lt;/</span>button&gt;</span><br><span class="line">  &lt;button id=<span class="string">"btn3"</span>&gt;按钮<span class="number">3</span>s&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">// 后端地址</span></span><br><span class="line">  <span class="keyword">var</span> baseUrl = <span class="string">"http://localhost:3000/"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 存放ajax标志的数组，用来区分是哪个ajax</span></span><br><span class="line">  <span class="keyword">var</span> orderArr = [];</span><br><span class="line">  <span class="comment">// 按钮1加点击事件</span></span><br><span class="line">  $(<span class="string">'#btn1'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 将btn1按钮的标志传入数组</span></span><br><span class="line">    ajaxOrder(<span class="string">'btn1'</span>);</span><br><span class="line">    $.post(baseUrl+<span class="string">'delay2s'</span>, (res)=&gt; &#123;</span><br><span class="line">      <span class="comment">// 渲染页面</span></span><br><span class="line">      render(<span class="string">'btn1'</span>, res.data);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 按钮2加点击事件</span></span><br><span class="line">  $(<span class="string">'#btn2'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    ajaxOrder(<span class="string">'btn2'</span>);</span><br><span class="line">    $.post(baseUrl+<span class="string">'delay5s'</span>, (res)=&gt; &#123;</span><br><span class="line">      render(<span class="string">'btn2'</span>, res.data);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 按钮3加点击事件</span></span><br><span class="line">  $(<span class="string">'#btn3'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    ajaxOrder(<span class="string">'btn3'</span>);</span><br><span class="line">    $.post(baseUrl+<span class="string">'delay3s'</span>, (res)=&gt; &#123;</span><br><span class="line">      render(<span class="string">'btn3'</span>, res.data);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 向存放ajax标志位数组中push ajax标志</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">ajaxOrder</span>(<span class="params">flag</span>) </span>&#123;</span><br><span class="line">    orderArr.push(flag);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 根据ajax的标志来渲染页面</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">flag, val</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 如果数组中只有一个标志的情况，直接渲染并清空数组</span></span><br><span class="line">    <span class="keyword">if</span>(orderArr.length === <span class="number">1</span>) &#123;</span><br><span class="line">      orderArr = [];</span><br><span class="line">      $(<span class="string">'.content'</span>).html(val);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">void</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果标志数组中多余一个标志</span></span><br><span class="line">    <span class="keyword">if</span>(orderArr.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="comment">// 如果这个标志是第一个请求的标志，则渲染页面</span></span><br><span class="line">      <span class="keyword">if</span>(orderArr.indexOf(flag) === <span class="number">0</span>) &#123;</span><br><span class="line">        orderArr.shift();</span><br><span class="line">        $(<span class="string">'.content'</span>).html(val);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">void</span> <span class="number">0</span>;</span><br><span class="line">      &#125;<span class="keyword">else</span> &#123; <span class="comment">// 如果不是第一个，则不渲染页面，并把这个标志剔除</span></span><br><span class="line">        <span class="keyword">let</span> index = orderArr.indexOf(flag);</span><br><span class="line">        orderArr.splice(index,<span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure></p><p>大概的流程就是，按照按钮点击的顺序来显示请求的结果。</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>webpack打包多页面项目</title>
      <link href="/2019/05/20/webpack%E6%89%93%E5%8C%85%E5%A4%9A%E9%A1%B5%E9%9D%A2%E9%A1%B9%E7%9B%AE/"/>
      <url>/2019/05/20/webpack%E6%89%93%E5%8C%85%E5%A4%9A%E9%A1%B5%E9%9D%A2%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<p>webpack打包多页面项目<br><a id="more"></a></p><h2 id="webpack打包多页面项目"><a href="#webpack打包多页面项目" class="headerlink" title="webpack打包多页面项目"></a>webpack打包多页面项目</h2><p>平时我们在工作中，使用webpack来打包单页面应用的项目很多，多页面应用之前我都是使用gulp来做，今天我在github发现一个不错的demo，我就不写具体的分析步骤了，代码里边写的很清楚，直接贴地址喽。<br><a href="https://github.com/jixoba/webpack-dev" target="_blank" rel="noopener">点击这里看项目</a></p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>import和require的本质区别</title>
      <link href="/2019/05/09/import%E5%92%8Crequire%E7%9A%84%E6%9C%AC%E8%B4%A8%E5%8C%BA%E5%88%AB/"/>
      <url>/2019/05/09/import%E5%92%8Crequire%E7%9A%84%E6%9C%AC%E8%B4%A8%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>简单的说一下import和require的本质区别<br><a id="more"></a></p><h2 id="import和require的本质区别"><a href="#import和require的本质区别" class="headerlink" title="import和require的本质区别"></a>import和require的本质区别</h2><p>import是ES6的模块规范，require是commonjs的模块规范，详细的用法我不介绍，我只想说一下他们最基本的区别，import是静态加载模块，require是动态加载，那么静态加载和动态加载的区别是什么呢？<br>静态加载时代码在编译的时候已经执行了，动态加载是编译后在代码运行的时候再执行，那么具体点是什么呢？<br>先说说import，如下代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js文件</span></span><br><span class="line"><span class="keyword">import</span> &#123; name &#125; <span class="keyword">from</span> <span class="string">'name.js'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// name.js文件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> name = <span class="string">'jinux'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> age = <span class="number">20</span></span><br></pre></td></tr></table></figure></p><p>上面的代码表示main.js文件里引入了name.js文件导出的变量，在代码编译阶段执行后的代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js文件</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">'jinux'</span></span><br></pre></td></tr></table></figure></p><p>这个是我自己理解的，其实就是直接把name.js里的代码放到了main.js文件里，好比是在main.js文件中声明一样。<br>再来看看require<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js文件</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="built_in">require</span>(<span class="string">'obj.js'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// obj.js文件</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'jinux'</span>,</span><br><span class="line">  age: <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.export obj;</span><br></pre></td></tr></table></figure></p><p>require是在运行阶段，需要把obj对象整个加载进内存，之后用到哪个变量就用哪个，这里再对比一下import，import是静态加载，如果只引入了name，age是不会引入的，所以是按需引入，性能更高。</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>http常用状态码</title>
      <link href="/2019/05/06/http%E5%B8%B8%E7%94%A8%E7%8A%B6%E6%80%81%E7%A0%81/"/>
      <url>/2019/05/06/http%E5%B8%B8%E7%94%A8%E7%8A%B6%E6%80%81%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<p>列出了一些常用的http请求状态码<br><a id="more"></a></p><h2 id="http常用状态码"><a href="#http常用状态码" class="headerlink" title="http常用状态码"></a>http常用状态码</h2><p>我们在日常开发中，经常会使用ajax，会看到请求返回的状态码，也就是Status Code。<br>常见的3个是:</p><ul><li>200 – 服务器成功返回网页</li><li>404 – 请求的网页不存在</li><li>503 – 服务器超时</li></ul><p>但是，作为一个合格的前端，还需要掌握的详细点，下面列出常用的状态码，也不是最全的哦。</p><h3 id="1xx（临时响应）"><a href="#1xx（临时响应）" class="headerlink" title="1xx（临时响应）"></a>1xx（临时响应）</h3><p>表示临时响应并需要请求者继续执行操作的状态码。</p><ul><li>100（继续）:    请求者应当继续提出请求。服务器返回此代码表示已收到请求的第一部分，正在等待其余部分。</li><li>101（切换协议）:    请求者已要求服务器切换协议，服务器已确认并准备切换。</li></ul><h3 id="2xx-（成功）"><a href="#2xx-（成功）" class="headerlink" title="2xx （成功）"></a>2xx （成功）</h3><p>表示成功处理了请求的状态码。</p><ul><li>200（成功）:    服务器已成功处理了请求。通常，这表示服务器提供了请求的网页。如果是对您的 robots.txt 文件显示此状态码，则表示 Googlebot 已成功检索到该文件。</li><li>201（已创建）:    请求成功并且服务器创建了新的资源。</li><li>202（已接受）:    服务器已接受请求，但尚未处理。</li><li>203（非授权信息）:    服务器已成功处理了请求，但返回的信息可能来自另一来源。</li><li>204（无内容）:    服务器成功处理了请求，但没有返回任何内容。</li><li>205（重置内容）:    服务器成功处理了请求，但没有返回任何内容。与 204 响应不同，此响应要求请求者重置文档视图（例如，清除表单内容以输入新内容）。</li><li>206（部分内容）:    服务器成功处理了部分 GET 请求。</li></ul><h3 id="3xx-（重定向）"><a href="#3xx-（重定向）" class="headerlink" title="3xx （重定向）"></a>3xx （重定向）</h3><p>要完成请求，需要进一步操作。通常，这些状态码用来重定向。</p><ul><li>300（多种选择）:    针对请求，服务器可执行多种操作。服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择。</li><li>301（永久移动）:    请求的网页已永久移动到新位置。服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。您应使用此代码告诉 Googlebot 某个网页或网站已永久移动到新位置。</li><li>302（临时移动）:    服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来响应以后的请求。此代码与响应 GET 和 HEAD 请求的 301 代码类似，会自动将请求者转到不同的位置，但您不应使用此代码来告诉 Googlebot 某个网页或网站已经移动，因为 Googlebot 会继续抓取原有位置并编制索引。</li><li>303（查看其他位置）: 请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码。对于除 HEAD 之外的所有请求，服务器会自动转到其他位置。</li><li>304（未修改）: 自从上次请求后，请求的网页未修改过。服务器返回此响应时，不会返回网页内容。如果网页自请求者上次请求后再也没有更改过，您应将服务器配置为返回此响应（称为 If-Modified-Since HTTP 标头）。服务器可以告诉 Googlebot 自从上次抓取后网页没有变更，进而节省带宽和开销。</li><li>305（使用代理）:    请求者只能使用代理访问请求的网页。如果服务器返回此响应，还表示请求者应使用代理。</li><li>307（临时重定向）:    服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来响应以后的请求。此代码与响应 GET 和 HEAD 请求的 <code>&lt;a href=answer.py?answer=&gt;301&lt;/a&gt;</code> 代码类似，会自动将请求者转到不同的位置，但您不应使用此代码来告诉 Googlebot 某个页面或网站已经移动，因为 Googlebot 会继续抓取原有位置并编制索引。</li></ul><h3 id="4xx（请求错误）"><a href="#4xx（请求错误）" class="headerlink" title="4xx（请求错误）"></a>4xx（请求错误）</h3><p>这些状态码表示请求可能出错，妨碍了服务器的处理。</p><ul><li>400（错误请求）: 服务器不理解请求的语法。</li><li>401（未授权）: 请求要求身份验证。对于登录后请求的网页，服务器可能返回此响应。</li><li>403（禁止）: 服务器拒绝请求。如果您在 Googlebot 尝试抓取您网站上的有效网页时看到此状态码（您可以在 Google 网站管理员工具诊断下的网络抓取页面上看到此信息），可能是您的服务器或主机拒绝了 Googlebot 访问。</li><li>404（未找到）: 服务器找不到请求的网页。例如，对于服务器上不存在的网页经常会返回此代码。</li><li>405（方法禁用）: 禁用请求中指定的方法。</li><li>406（不接受）:    无法使用请求的内容特性响应请求的网页。</li><li>407（需要代理授权）:    此状态码与 <code>&lt;a href=answer.py?answer=35128&gt;401（未授权）&lt;/a&gt;</code>类似，但指定请求者应当授权使用代理。如果服务器返回此响应，还表示请求者应当使用代理。</li><li>408（请求超时）:    服务器等候请求时发生超时。</li><li>409（冲突）:    服务器在完成请求时发生冲突。服务器必须在响应中包含有关冲突的信息。服务器在响应与前一个请求相冲突的 PUT 请求时可能会返回此代码，以及两个请求的差异列表。</li><li>410（已删除）:    如果请求的资源已永久删除，服务器就会返回此响应。该代码与 404（未找到）代码类似，但在资源以前存在而现在不存在的情况下，有时会用来替代 404 代码。如果资源已永久移动，您应使用 301 指定资源的新位置。</li><li>411（需要有效长度）:    服务器不接受不含有效内容长度标头字段的请求。</li><li>412（未满足前提条件）:    服务器未满足请求者在请求中设置的其中一个前提条件。</li><li>413（请求实体过大）:    服务器无法处理请求，因为请求实体过大，超出服务器的处理能力。</li><li>414（请求的 URI 过长）:    请求的 URI（通常为网址）过长，服务器无法处理。</li><li>415（不支持的媒体类型）:    请求的格式不受请求页面的支持。</li><li>416（请求范围不符合要求）:    如果页面无法提供请求的范围，则服务器会返回此状态码。</li><li>417（未满足期望值）:    服务器未满足”期望”请求标头字段的要求。</li></ul><h3 id="5xx（服务器错误）"><a href="#5xx（服务器错误）" class="headerlink" title="5xx（服务器错误）"></a>5xx（服务器错误）</h3><p>这些状态码表示服务器在处理请求时发生内部错误。这些错误可能是服务器本身的错误，而不是请求出错。</p><ul><li>500（服务器内部错误）    服务器遇到错误，无法完成请求。</li><li>501（尚未实施）    服务器不具备完成请求的功能。例如，服务器无法识别请求方法时可能会返回此代码。</li><li>502（错误网关）    服务器作为网关或代理，从上游服务器收到无效响应。</li><li>503（服务不可用）    服务器目前无法使用（由于超载或停机维护）。通常，这只是暂时状态。</li><li>504（网关超时）    服务器作为网关或代理，但是没有及时从上游服务器收到请求。</li><li>505（HTTP 版本不受支持）    服务器不支持请求中所用的 HTTP 协议版本。</li></ul><p>以上就是一些常用的http状态吗，如果想了解更多，<a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html" target="_blank" rel="noopener">点击这里喽</a></p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络基础 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>nodejs将vue的dist目录文件copy到目标目录</title>
      <link href="/2019/04/23/nodejs%E5%B0%86vue%E7%9A%84dist%E7%9B%AE%E5%BD%95%E6%96%87%E4%BB%B6copy%E5%88%B0%E7%9B%AE%E6%A0%87%E7%9B%AE%E5%BD%95/"/>
      <url>/2019/04/23/nodejs%E5%B0%86vue%E7%9A%84dist%E7%9B%AE%E5%BD%95%E6%96%87%E4%BB%B6copy%E5%88%B0%E7%9B%AE%E6%A0%87%E7%9B%AE%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>利用nodejs拷贝转移文件<br><a id="more"></a></p><h2 id="nodejs将vue的dist目录文件copy到目标目录"><a href="#nodejs将vue的dist目录文件copy到目标目录" class="headerlink" title="nodejs将vue的dist目录文件copy到目标目录"></a>nodejs将vue的dist目录文件copy到目标目录</h2><p>上篇文章写了《window批处理执行webpack打包》，这篇文章主要写打包好的文件自动转移到git目录下。<br>其实就是用的nodejs的读写文件API而已，代码不多，见下面：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">let</span> fse = <span class="built_in">require</span>(<span class="string">'fs-extra'</span>) <span class="comment">// 文件的正删改查模块，比原生方便</span></span><br><span class="line"><span class="keyword">let</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 复制文件</span></span><br><span class="line"><span class="keyword">var</span> copy=<span class="function"><span class="keyword">function</span>(<span class="params">src,dst</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> paths = fs.readdirSync(src); <span class="comment">//同步读取当前目录</span></span><br><span class="line">  paths.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">path</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> _src=src+<span class="string">'/'</span>+path;</span><br><span class="line">      <span class="keyword">var</span> _dst=dst+<span class="string">'/'</span>+path;</span><br><span class="line">      fs.stat(_src,<span class="function"><span class="keyword">function</span>(<span class="params">err,stats</span>)</span>&#123;  <span class="comment">//stats  该对象 包含文件属性</span></span><br><span class="line">          <span class="keyword">if</span>(err)<span class="keyword">throw</span> err;</span><br><span class="line">          <span class="keyword">if</span>(stats.isFile())&#123; <span class="comment">//如果是个文件则拷贝 </span></span><br><span class="line">              <span class="keyword">let</span> _dst = dst+<span class="string">'/'</span> + path;</span><br><span class="line">              <span class="keyword">let</span>  readable=fs.createReadStream(_src);<span class="comment">//创建读取流</span></span><br><span class="line">              <span class="keyword">let</span>  writable=fs.createWriteStream(_dst);<span class="comment">//创建写入流</span></span><br><span class="line">              readable.pipe(writable);</span><br><span class="line">          &#125;<span class="keyword">else</span> <span class="keyword">if</span>(stats.isDirectory())&#123; <span class="comment">//是目录则 递归 </span></span><br><span class="line">              checkDirectory(_src,_dst,copy);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 检查文件夹是否存在，新建文件夹并copy</span></span><br><span class="line"><span class="keyword">var</span> checkDirectory=<span class="function"><span class="keyword">function</span>(<span class="params">src,dst,callback</span>)</span>&#123;</span><br><span class="line">  fs.access(dst, fs.constants.F_OK, (err) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span>(err)&#123;</span><br><span class="line">          fs.mkdirSync(dst);</span><br><span class="line">          callback(src,dst);</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          callback(src,dst);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除旧文件</span></span><br><span class="line"><span class="keyword">var</span> cleanOld = <span class="function"><span class="keyword">function</span>(<span class="params">dest</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> dest_static = path.join(dest, <span class="string">'static'</span>); </span><br><span class="line">  <span class="keyword">let</span> dest_index = path.join(dest, <span class="string">'index.html'</span>); </span><br><span class="line">  fs.exists(dest_static,<span class="function"><span class="keyword">function</span>(<span class="params">exists</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(exists) fse.removeSync(dest_static);</span><br><span class="line">  &#125;);</span><br><span class="line">  fs.exists(dest_index,<span class="function"><span class="keyword">function</span>(<span class="params">exists</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(exists) fse.removeSync(dest_index);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件路径</span></span><br><span class="line"><span class="keyword">let</span> url_src_ehome = path.relative(__dirname, <span class="string">'C:\\WORK\\new-airport\\6 编码\\5 Web\\ejashop\\dist\\'</span>),</span><br><span class="line">    url_dest_ehome = path.relative(__dirname, <span class="string">'C:\\Users\\kaiya\\Desktop\\公司文件\\gitlang\\langcnew\\demo2\\ehome'</span>),</span><br><span class="line">    url_src_airport = path.relative(__dirname, <span class="string">'C:\\WORK\\new-airport\\6 编码\\5 Web\\airport\\dist\\'</span>),</span><br><span class="line">    url_dest_airport = path.relative(__dirname, <span class="string">'C:\\Users\\kaiya\\Desktop\\公司文件\\gitlang\\langcnew\\demo2\\airport'</span>),</span><br><span class="line">    url_src_operation = path.relative(__dirname, <span class="string">'C:\\WORK\\new-airport\\6 编码\\5 Web\\eHomeOperation\\dist\\'</span>),</span><br><span class="line">    url_dest_operation = path.relative(__dirname, <span class="string">'C:\\Users\\kaiya\\Desktop\\公司文件\\gitlang\\langcnew\\demo2\\operation'</span>),</span><br><span class="line">    url_src_openShop = path.relative(__dirname, <span class="string">'C:\\WORK\\new-airport\\6 编码\\5 Web\\kaidian\\dist\\'</span>),</span><br><span class="line">    url_dest_openShop = path.relative(__dirname, <span class="string">'C:\\Users\\kaiya\\Desktop\\公司文件\\gitlang\\langcnew\\demo2\\openShop'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// copy之前先清空旧文件</span></span><br><span class="line">cleanOld(url_dest_ehome);</span><br><span class="line">cleanOld(url_dest_airport);</span><br><span class="line">cleanOld(url_dest_operation);</span><br><span class="line">cleanOld(url_dest_openShop);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4个项目的copy转移</span></span><br><span class="line">checkDirectory(url_src_ehome, url_dest_ehome,copy);</span><br><span class="line">checkDirectory(url_src_airport, url_dest_airport,copy);</span><br><span class="line">checkDirectory(url_src_operation, url_dest_operation,copy);</span><br><span class="line">checkDirectory(url_src_openShop, url_dest_openShop,copy);</span><br></pre></td></tr></table></figure></p><p>这里需要注意一点，path.relative(__dirname, ‘C:\WORK\new-airport\6 编码\5 Web\ejashop\dist\‘);利用path模块将两个绝对路径变成相对路径。</p>]]></content>
      
      
      <categories>
          
          <category> nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具库 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>window批处理执行webpack打包</title>
      <link href="/2019/04/19/window%E6%89%B9%E5%A4%84%E7%90%86%E6%89%A7%E8%A1%8Cwebpack%E6%89%93%E5%8C%85/"/>
      <url>/2019/04/19/window%E6%89%B9%E5%A4%84%E7%90%86%E6%89%A7%E8%A1%8Cwebpack%E6%89%93%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<p>利用window的批处理文件bat来批量执行debpack打包命令。<br><a id="more"></a></p><h2 id="window批处理执行webpack打包"><a href="#window批处理执行webpack打包" class="headerlink" title="window批处理执行webpack打包"></a>window批处理执行webpack打包</h2><p>现在的前端开发，使用vue，react，angular等框架的项目非常多，部署的时候需要打包后进行部署，比如运行npm run build命令，但是比如我现在的项目，有4个子平台，每个平台是独立的一套vue，每次打包的时候需要进入到4个不同的平台目录进行打包命令操作，还有一点，我们项目分为测试环境，生产环境，这样就会出现更多次打包操作，每次都很烦，进入一个文件夹，打开命令提示符，输入npm run build，有没有方便点的方式呢，有，可以利用window系统的批处理文件来操作。<br>首先，下面的是执行一个打包命令的.bat文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">chcp 65001</span><br><span class="line">cd C:\WORK\new-airport\6 编码\5 Web\ejashop</span><br><span class="line">npm run build</span><br><span class="line">pause</span><br></pre></td></tr></table></figure></p><ul><li>chcp 65001 //是用来可以在文件路径中使用中文</li><li>cd C:\WORK\new-airport\6 编码\5 Web\ejashop //进入到项目的目录</li><li>npm run build //执行打包命令</li><li>pause // 命令行暂停，等待下一步操作</li></ul><p>上面的是执行一个打包命令的，多个打包操作需要创建多个.bat文件，每执行一个点击一下也很麻烦，我们可以在创建一个.bat文件，用来执行这些批处理文件操作，向下面这样:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">chcp 65001</span><br><span class="line">pause</span><br><span class="line">start /D &quot;C:\Users\kaiya\Desktop\批处理node\build&quot; call ehome.bat</span><br><span class="line">start /D &quot;C:\Users\kaiya\Desktop\批处理node\build&quot; call airport.bat</span><br><span class="line">start /D &quot;C:\Users\kaiya\Desktop\批处理node\build&quot; call eHomeOperation.bat</span><br><span class="line">start /D &quot;C:\Users\kaiya\Desktop\批处理node\build&quot; call kaidian.bat</span><br></pre></td></tr></table></figure></p><ul><li>chcp 65001 //是用来可以在文件路径中使用中文</li><li>start /D “C:\Users\kaiya\Desktop\批处理node\build” call ehome.bat //执行具体的.bat文件</li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>http请求头响应头字段详解</title>
      <link href="/2019/04/15/http%E8%AF%B7%E6%B1%82%E5%A4%B4%E5%93%8D%E5%BA%94%E5%A4%B4%E5%AD%97%E6%AE%B5%E8%AF%A6%E8%A7%A3/"/>
      <url>/2019/04/15/http%E8%AF%B7%E6%B1%82%E5%A4%B4%E5%93%8D%E5%BA%94%E5%A4%B4%E5%AD%97%E6%AE%B5%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>http请求头和返回头字段的解释<br><a id="more"></a></p><h2 id="http请求头响应头字段详解"><a href="#http请求头响应头字段详解" class="headerlink" title="http请求头响应头字段详解"></a>http请求头响应头字段详解</h2><p>作为一名前端开发人员，肯定少不了要和网络打交道，因为要从服务器端拉取数据，从服务端获取数据最常用的方式还是通过HTTP请求。给服务器发请求的时候有请求头，接受服务器响应的时候有响应头，客户端和服务器端互相沟通需要的信息都是通过这些“头”来传送，这些信息是一些类似key:value的键值对。了解这些“头”中字段的含义对于理解整个请求过程有很大的帮助。这里列举了常用的“头”字段的解释以及例子，本文可以作为工具文收藏，以备需要时查看。</p><h3 id="常用标准请求头字段"><a href="#常用标准请求头字段" class="headerlink" title="常用标准请求头字段"></a>常用标准请求头字段</h3><ul><li><p>Accept 设置接受的内容类型<br>Accept: text/plain</p></li><li><p>Accept-Charset 设置接受的字符编码<br>Accept-Charset: utf-8</p></li><li><p>Accept-Encoding 设置接受的编码格式<br>Accept-Encoding: gzip, deflate</p></li><li><p>Accept-Datetime 设置接受的版本时间<br>Accept-Datetime: Thu, 31 May 2007 20:35:00 GMT</p></li><li><p>Accept-Language 设置接受的语言<br>Accept-Language: en-US</p></li><li><p>Authorization 设置HTTP身份验证的凭证<br>Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==</p></li><li><p>Cache-Control 设置请求响应链上所有的缓存机制必须遵守的指令<br>Cache-Control: no-cache</p></li><li><p>Connection 设置当前连接和hop-by-hop协议请求字段列表的控制选项<br>Connection: keep-alive<br>Connection: Upgrade</p></li><li><p>Content-Length 设置请求体的字节长度<br>Content-Length: 348</p></li><li><p>Content-MD5 设置基于MD5算法对请求体内容进行Base64二进制编码<br>Content-MD5: Q2hlY2sgSW50ZWdyaXR5IQ==</p></li><li><p>Content-Type 设置请求体的MIME类型（适用POST和PUT请求）<br>Content-Type: application/x-www-form-urlencoded</p></li><li><p>Cookie 设置服务器使用Set-Cookie发送的http cookie<br>Cookie: $Version=1; Skin=new;</p></li><li><p>Date 设置消息发送的日期和时间<br>Date: Tue, 15 Nov 1994 08:12:31 GMT</p></li><li><p>Expect 标识客户端需要的特殊浏览器行为<br>Expect: 100-continue</p></li><li><p>Forwarded 披露客户端通过http代理连接web服务的源信息<br>Forwarded: for=192.0.2.60;proto=http;by=203.0.113.43<br>Forwarded: for=192.0.2.43, for=198.51.100.17</p></li><li><p>From 设置发送请求的用户的email地址<br>From: <a href="mailto:user@example.com" target="_blank" rel="noopener">user@example.com</a></p></li><li><p>Host 设置服务器域名和TCP端口号，如果使用的是服务请求标准端口号，端口号可以省略<br>Host: en.wikipedia.org:8080<br>Host: en.wikipedia.org</p></li><li><p>If-Match 设置客户端的ETag,当时客户端ETag和服务器生成的ETag一致才执行，适用于更新自从上次更新之后没有改变的资源<br>If-Match: “737060cd8c284d8af7ad3082f209582d</p></li><li><p>If-Modified-Since 设置更新时间，从更新时间到服务端接受请求这段时间内如果资源没有改变，允许服务端返回304 Not Modified<br>If-Modified-Since: Sat, 29 Oct 1994 19:43:31 GMT</p></li><li><p>If-None-Match 设置客户端ETag，如果和服务端接受请求生成的ETage相同，允许服务端返回304 Not Modified<br>If-None-Match: “737060cd8c284d8af7ad3082f209582d”</p></li><li><p>If-Range 设置客户端ETag，如果和服务端接受请求生成的ETage相同，返回缺失的实体部分；否则返回整个新的实体<br>If-Range: “737060cd8c284d8af7ad3082f209582d”</p></li><li><p>If-Unmodified-Since 设置更新时间，只有从更新时间到服务端接受请求这段时间内实体没有改变，服务端才会发送响应<br>If-Unmodified-Since: Sat, 29 Oct 1994 19:43:31 GMT</p></li><li><p>Max-Forwards 限制代理或网关转发消息的次数<br>Max-Forwards: 10</p></li><li><p>Origin 标识跨域资源请求（请求服务端设置Access-Control-Allow-Origin响应字段）<br>Origin: <a href="http://www.example-social-network.com" target="_blank" rel="noopener">http://www.example-social-network.com</a></p></li><li><p>Pragma 设置特殊实现字段，可能会对请求响应链有多种影响<br>Pragma: no-cache</p></li><li><p>Proxy-Authorization 为连接代理授权认证信息<br>Proxy-Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==</p></li><li><p>Range 请求部分实体，设置请求实体的字节数范围，具体可以参见HTTP/1.1中的Byte serving<br>Range: bytes=500-999</p></li><li><p>Referer 设置前一个页面的地址，并且前一个页面中的连接指向当前请求，意思就是如果当前请求是在A页面中发送的，那么referer就是A页面的url地址（轶事：这个单词正确的拼法应该是”referrer”,但是在很多规范中都拼成了”referer”，所以这个单词也就成为标准用法）<br>Referer: <a href="http://en.wikipedia.org/wiki/Main_Page" target="_blank" rel="noopener">http://en.wikipedia.org/wiki/Main_Page</a></p></li><li><p>TE 设置用户代理期望接受的传输编码格式，和响应头中的Transfer-Encoding字段一样<br>TE: trailers, deflate</p></li><li><p>Upgrade 请求服务端升级协议<br>Upgrade: HTTP/2.0, HTTPS/1.3, IRC/6.9, RTA/x11, websocket</p></li><li><p>User-Agent 用户代理的字符串值<br>User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:12.0) Gecko/20100101 Firefox/21.0</p></li><li><p>Via 通知服务器代理请求<br>Via: 1.0 fred, 1.1 example.com (Apache/1.1)</p></li><li><p>Warning 实体可能会发生的问题的通用警告<br>Warning: 199 Miscellaneous warning</p></li></ul><h3 id="常用非标准请求头字段"><a href="#常用非标准请求头字段" class="headerlink" title="常用非标准请求头字段"></a>常用非标准请求头字段</h3><ul><li><p>X-Requested-With 标识Ajax请求，大部分js框架发送请求时都会设置它为XMLHttpRequest<br>X-Requested-With: XMLHttpRequest</p></li><li><p>DNT 请求web应用禁用用户追踪<br>DNT: 1 (Do Not Track Enabled)<br>DNT: 0 (Do Not Track Disabled)</p></li><li><p>X-Forwarded-For 一个事实标准，用来标识客户端通过HTTP代理或者负载均衡器连接的web服务器的原始IP地址<br>X-Forwarded-For: client1, proxy1, proxy2<br>X-Forwarded-For: 129.78.138.66, 129.78.64.103</p></li><li><p>X-Forwarded-Host 一个事实标准，用来标识客户端在HTTP请求头中请求的原始host,因为主机名或者反向代理的端口可能与处理请求的原始服务器不同<br>X-Forwarded-Host: en.wikipedia.org:8080<br>X-Forwarded-Host: en.wikipedia.org</p></li><li><p>X-Forwarded-Proto 一个事实标准，用来标识HTTP原始协议，因为反向代理或者负载均衡器和web服务器可能使用http,但是请求到反向代理使用的是https<br>X-Forwarded-Proto: https</p></li><li><p>Front-End-Https 微软应用程序和负载均衡器使用的非标准header字段<br>Front-End-Https: on</p></li><li><p>X-Http-Method-Override 请求web应用时，使用header字段中给定的方法（通常是put或者delete）覆盖请求中指定的方法（通常是post）,如果用户代理或者防火墙不支持直接使用put或者delete方法发送请求时，可以使用这个字段<br>X-HTTP-Method-Override: DELETE</p></li><li><p>X-ATT-DeviceId 允许更简单的解析用户代理在AT&amp;T设备上的MakeModel/Firmware<br>X-Att-Deviceid: GT-P7320/P7320XXLPG</p></li><li><p>X-Wap-Profile 设置描述当前连接设备的详细信息的xml文件在网络中的位置<br>x-wap-profile: <a href="http://wap.samsungmobile.com/uaprof/SGH-I777.xml" target="_blank" rel="noopener">http://wap.samsungmobile.com/uaprof/SGH-I777.xml</a></p></li><li><p>Proxy-Connection 早起HTTP版本中的一个误称，现在使用标准的connection字段<br>Proxy-Connection: keep-alive</p></li><li><p>X-UIDH 服务端深度包检测插入的一个唯一ID标识Verizon Wireless的客户<br>X-UIDH: …</p></li><li><p>X-Csrf-Token,X-CSRFToken,X-XSRF-TOKEN 防止跨站请求伪造<br>X-Csrf-Token: i8XNjC4b8KVok4uw5RftR38Wgp2BFwql</p></li><li><p>X-Request-ID,X-Correlation-ID 标识客户端和服务端的HTTP请求<br>X-Request-ID: f058ebd6-02f7-4d3f-942e-904344e8cde5</p></li></ul><h3 id="常用标准响应头字段"><a href="#常用标准响应头字段" class="headerlink" title="常用标准响应头字段"></a>常用标准响应头字段</h3><ul><li><p>Access-Control-Allow-Origin 指定哪些站点可以参与跨站资源共享<br>Access-Control-Allow-Origin: *</p></li><li><p>Accept-Patch 指定服务器支持的补丁文档格式，适用于http的patch方法<br>Accept-Patch: text/example;charset=utf-8</p></li><li><p>Accept-Ranges 服务器通过byte serving支持的部分内容范围类型<br>Accept-Ranges: bytes</p></li><li><p>Age 对象在代理缓存中暂存的秒数<br>Age: 12</p></li><li><p>Allow 设置特定资源的有效行为，适用方法不被允许的http 405错误<br>Allow: GET, HEAD</p></li><li><p>Alt-Svc 服务器使用”Alt-Svc”（Alternative Servicesde的缩写）头标识资源可以通过不同的网络位置或者不同的网络协议获取<br>Alt-Svc: h2=”http2.example.com:443”; ma=7200</p></li><li><p>Cache-Control 告诉服务端到客户端所有的缓存机制是否可以缓存这个对象，单位是秒<br>Cache-Control: max-age=3600</p></li><li><p>Connection 设置当前连接和hop-by-hop协议请求字段列表的控制选项<br>Connection: close</p></li><li><p>Content-Disposition 告诉客户端弹出一个文件下载框，并且可以指定下载文件名<br>Content-Disposition: attachment; filename=”fname.ext”</p></li><li><p>Content-Encoding 设置数据使用的编码类型<br>Content-Encoding: gzip</p></li><li><p>Content-Language 为封闭内容设置自然语言或者目标用户语言<br>Content-Language: en</p></li><li><p>Content-Length 响应体的字节长度<br>Content-Length: 348</p></li><li><p>Content-Location 设置返回数据的另一个位置<br>Content-Location: /index.htm</p></li><li><p>Content-MD5 设置基于MD5算法对响应体内容进行Base64二进制编码<br>Content-MD5: Q2hlY2sgSW50ZWdyaXR5IQ==</p></li><li><p>Content-Range 标识响应体内容属于完整消息体中的那一部分<br>Content-Range: bytes 21010-47021/47022</p></li><li><p>Content-Type 设置响应体的MIME类型<br>Content-Type: text/html; charset=utf-8</p></li><li><p>Date 设置消息发送的日期和时间<br>Date: Tue, 15 Nov 1994 08:12:31 GMT</p></li><li><p>ETag 特定版本资源的标识符，通常是消息摘要<br>ETag: “737060cd8c284d8af7ad3082f209582d”</p></li><li><p>Expires 设置响应体的过期时间<br>Expires: Thu, 01 Dec 1994 16:00:00 GMT</p></li><li><p>Last-Modified 设置请求对象最后一次的修改日期<br>Last-Modified: Tue, 15 Nov 1994 12:45:26 GMT</p></li><li><p>Link 设置与其他资源的类型关系<br>Link: ; rel=”alternate”</p></li><li><p>Location 在重定向中或者创建新资源时使用<br>Location: <a href="http://www.w3.org/pub/WWW/People.html" target="_blank" rel="noopener">http://www.w3.org/pub/WWW/People.html</a></p></li><li><p>P3P 以P3P:CP=”your_compact_policy”的格式设置支持P3P(Platform for Privacy Preferences Project)策略，大部分浏览器没有完全支持P3P策略，许多站点设置假的策略内容欺骗支持P3P策略的浏览器以获取第三方cookie的授权<br>P3P: CP=”This is not a P3P policy! See <a href="http://www.google.com/support/accounts/bin/answer.py?hl=en&amp;answer=151657" target="_blank" rel="noopener">http://www.google.com/support/accounts/bin/answer.py?hl=en&amp;answer=151657</a> for more info.”</p></li><li><p>Pragma 设置特殊实现字段，可能会对请求响应链有多种影响<br>Pragma: no-cache</p></li><li><p>Proxy-Authenticate 设置访问代理的请求权限<br>Proxy-Authenticate: Basic</p></li><li><p>Public-Key-Pins 设置站点的授权TLS证书<br>Public-Key-Pins: max-age=2592000; pin-sha256=”E9CZ9INDbd+2eRQozYqqbQ2yXLVKB9+xcprMF+44U1g=”;</p></li><li><p>Refresh “重定向或者新资源创建时使用，在页面的头部有个扩展可以实现相似的功能，并且大部分浏览器都支持</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta http-equiv=<span class="string">"refresh"</span> content=<span class="string">"5; url=http://example.com/"</span>&gt;</span><br><span class="line">Refresh: <span class="number">5</span>; url=http:<span class="comment">//www.w3.org/pub/WWW/People.html</span></span><br></pre></td></tr></table></figure></li><li><p>Retry-After 如果实体暂时不可用，可以设置这个值让客户端重试，可以使用时间段（单位是秒）或者HTTP时间<br>Example 1: Retry-After: 120<br>Example 2: Retry-After: Fri, 07 Nov 2014 23:59:59 GMT</p></li><li><p>Server 服务器名称<br>Server: Apache/2.4.1 (Unix)</p></li><li><p>Set-Cookie 设置HTTP Cookie<br>Set-Cookie: UserID=JohnDoe; Max-Age=3600; Version=1</p></li><li><p>Status 设置HTTP响应状态<br>Status: 200 OK</p></li><li><p>Strict-Transport-Security 一种HSTS策略通知HTTP客户端缓存HTTPS策略多长时间以及是否应用到子域<br>Strict-Transport-Security: max-age=16070400; includeSubDomains</p></li><li><p>Trailer 标识给定的header字段将展示在后续的chunked编码的消息中<br>Trailer: Max-Forwards</p></li><li><p>Transfer-Encoding 设置传输实体的编码格式，目前支持的格式： chunked, compress, deflate, gzip, identity<br>Transfer-Encoding: chunked</p></li><li><p>TSV Tracking Status Value，在响应中设置给DNT(do-not-track),可能的取值<br>　　　“!” — under construction<br>　　　“?” — dynamic<br>　　　“G” — gateway to multiple parties<br>　　　“N” — not tracking<br>　　　“T” — tracking<br>　　　“C” — tracking with consent<br>　　　“P” — tracking only if consented<br>　　　“D” — disregarding DNT<br>　　　“U” — updated<br>TSV: ?</p></li><li><p>Upgrade 请求客户端升级协议<br>Upgrade: HTTP/2.0, HTTPS/1.3, IRC/6.9, RTA/x11, websocket</p></li><li><p>Vary 通知下级代理如何匹配未来的请求头已让其决定缓存的响应是否可用而不是重新从源主机请求新的<br>Example 1: Vary: *<br>Example 2: Vary: Accept-Language</p></li><li><p>Via 通知客户端代理，通过其要发送什么响应<br>Via: 1.0 fred, 1.1 example.com (Apache/1.1)</p></li><li><p>Warning 实体可能会发生的问题的通用警告<br>Warning: 199 Miscellaneous warning</p></li><li><p>WWW-Authenticate 标识访问请求实体的身份验证方案<br>WWW-Authenticate: Basic</p></li><li><p>X-Frame-Options 点击劫持保护：<br>　　　deny frame中不渲染<br>　　　sameorigin 如果源不匹配不渲染<br>　　　allow-from 允许指定位置访问<br>　　　allowall 不标准，允许任意位置访问<br>X-Frame-Options: deny</p></li></ul><h3 id="常用非标准响应头字段"><a href="#常用非标准响应头字段" class="headerlink" title="常用非标准响应头字段"></a>常用非标准响应头字段</h3><ul><li><p>X-XSS-Protection 过滤跨站脚本<br>X-XSS-Protection: 1; mode=block</p></li><li><p>Content-Security-Policy, X-Content-Security-Policy,X-WebKit-CSP 定义内容安全策略<br>X-WebKit-CSP: default-src ‘self’</p></li><li><p>X-Content-Type-Options 唯一的取值是””,阻止IE在响应中嗅探定义的内容格式以外的其他MIME格式<br>X-Content-Type-Options: nosniff</p></li><li><p>X-Powered-By 指定支持web应用的技术<br>X-Powered-By: PHP/5.4.0</p></li><li><p>X-UA-Compatible 推荐首选的渲染引擎来展示内容，通常向后兼容，也用于激活IE中内嵌chrome框架插件<br><meta http-equiv="X-UA-Compatible" content="chrome=1"><br>X-UA-Compatible: IE=EmulateIE7<br>X-UA-Compatible: IE=edge<br>X-UA-Compatible: Chrome=1</p></li><li><p>X-Content-Duration 提供音视频的持续时间，单位是秒，只有Gecko内核浏览器支持<br>X-Content-Duration: 42.666</p></li><li><p>Upgrade-Insecure-Requests 标识服务器是否可以处理HTTPS协议<br>Upgrade-Insecure-Requests: 1</p></li><li><p>X-Request-ID,X-Correlation-ID 标识一个客户端和服务端的请求<br>X-Request-ID: f058ebd6-02f7-4d3f-942e-904344e8cde5</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络基础 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ajax携带cookie</title>
      <link href="/2019/04/15/ajax%E6%90%BA%E5%B8%A6cookie/"/>
      <url>/2019/04/15/ajax%E6%90%BA%E5%B8%A6cookie/</url>
      
        <content type="html"><![CDATA[<p>ajax同域和跨域情况下携带cookie问题<br><a id="more"></a></p><h2 id="ajax携带cookie"><a href="#ajax携带cookie" class="headerlink" title="ajax携带cookie"></a>ajax携带cookie</h2><p>这是一个老生常谈的问题，但是时间长了总容易忘掉，今天记录下来，以便下次方便记起来。</p><p>首先，今天我遇到了一个坑，chrome浏览无论是同域还是跨域状态下，浏览器request headers里居然都不显示，刚开始我还以为是设置错了，后来发现其他浏览器都显示，我想有可能是chrome浏览器安全考虑吧，但是，这并不影响后台接收，只是不显示而已。</p><p>同域下无可厚非，什么都不用做就会带上cookie。</p><p>跨域下的设置：<br>浏览器端，需要设置withCredentials为true<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原生方式</span></span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.open(<span class="string">'GET'</span>, <span class="string">'http://example.com/'</span>, <span class="literal">true</span>);</span><br><span class="line">xhr.withCredentials = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// jquery方式</span></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">        url: <span class="string">"http://192.168.252.12:3006/post_form"</span>,</span><br><span class="line">        type: <span class="string">'POST'</span>,</span><br><span class="line">        xhrFields: &#123;</span><br><span class="line">            withCredentials: <span class="literal">true</span> <span class="comment">// 这里设置了withCredentials</span></span><br><span class="line">        &#125;,</span><br><span class="line">        success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(data)</span><br><span class="line">        &#125;,</span><br><span class="line">        error: <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.error(err)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// axios方式</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>;</span><br><span class="line">axios.defaults.withCredentials = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure></p><p>再来说说后端的设置，以nodejs的express为例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回头设置</span></span><br><span class="line">res.header(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"http://localhost:9000"</span>); <span class="comment">// 注意，这里不能写*,应该是具体的地址</span></span><br><span class="line">res.header(<span class="string">"Access-Control-Allow-Credentials"</span>, <span class="string">"true"</span>);</span><br></pre></td></tr></table></figure></p><p>最后附上demo代码：<br>前端<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">  &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">  &lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"ie=edge"</span>&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">  &lt;script src="jquery.js"&gt;&lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp">  ajax cookie demo</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  $.ajax(&#123;</span><br><span class="line">            url: <span class="string">"http://192.168.252.12:3006/post_form"</span>,</span><br><span class="line">            type: <span class="string">'POST'</span>,</span><br><span class="line">            xhrFields: &#123;</span><br><span class="line">                withCredentials: <span class="literal">true</span> <span class="comment">// 这里设置了withCredentials</span></span><br><span class="line">            &#125;,</span><br><span class="line">            success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(data)</span><br><span class="line">            &#125;,</span><br><span class="line">            error: <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.error(err)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure></p><p>后端<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"><span class="keyword">var</span> multiparty = <span class="built_in">require</span>(<span class="string">'multiparty'</span>);</span><br><span class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>);</span><br><span class="line"><span class="keyword">var</span> cookieParser = <span class="built_in">require</span>(<span class="string">'cookie-parser'</span>); </span><br><span class="line"></span><br><span class="line">app.set(<span class="string">'port'</span>,process.env.PORT || <span class="number">3006</span>);   <span class="comment">//设置端口</span></span><br><span class="line"></span><br><span class="line">app.all(<span class="string">'*'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    res.header(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"http://localhost:9000"</span>);</span><br><span class="line">    res.header(<span class="string">"Access-Control-Allow-Credentials"</span>, <span class="string">"true"</span>);</span><br><span class="line"></span><br><span class="line">    res.header(<span class="string">"Access-Control-Allow-Headers"</span>, <span class="string">"client-token,Content-Type,Content-Length, Authorization, Accept,X-Requested-With"</span>);</span><br><span class="line">    res.header(<span class="string">"Access-Control-Allow-Methods"</span>,<span class="string">"PUT,POST,GET,DELETE,OPTIONS"</span>);</span><br><span class="line">    res.header(<span class="string">"X-Powered-By"</span>,<span class="string">' 3.2.1'</span>);</span><br><span class="line">    <span class="keyword">if</span>(req.method==<span class="string">"OPTIONS"</span>) res.send(<span class="number">200</span>); <span class="comment">//让options请求快速返回</span></span><br><span class="line">    <span class="keyword">else</span>  next();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用static中间件 制定public目录为静态资源目录,其中资源不会经过任何处理</span></span><br><span class="line">app.use(express.static(__dirname + <span class="string">'/public'</span>));</span><br><span class="line">app.use(bodyParser.json()); <span class="comment">// for parsing application/json</span></span><br><span class="line">app.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">true</span> &#125;)); <span class="comment">// for parsing application/x-www-form-urlencoded</span></span><br><span class="line">app.use(cookieParser()); <span class="comment">// cookie解析</span></span><br><span class="line"></span><br><span class="line">app.post(<span class="string">'/post_form'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> data = &#123;</span><br><span class="line">            name: req.body.name,</span><br><span class="line">            info: req.body.info,</span><br><span class="line">            hostName: req.hostname</span><br><span class="line">        &#125;;</span><br><span class="line">        res.cookie(<span class="string">"add"</span>, <span class="string">'test456'</span>, &#123;<span class="attr">maxAge</span>: <span class="number">900000</span>, <span class="attr">httpOnly</span>: <span class="literal">true</span>&#125;); <span class="comment">// 设置cookie</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'cookie-&gt;'</span> + req.cookies.add); <span class="comment">// 读取cookie</span></span><br><span class="line">        res.send(data);  </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(app.get(<span class="string">'port'</span>), <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">'服务器启动完成，端口为： '</span>+app.get(<span class="string">'port'</span>) );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ajax </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>let存在变量提升吗?</title>
      <link href="/2019/04/10/let%E5%AD%98%E5%9C%A8%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87%E5%90%97/"/>
      <url>/2019/04/10/let%E5%AD%98%E5%9C%A8%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87%E5%90%97/</url>
      
        <content type="html"><![CDATA[<p>javascript中关于let的一些小知识<br><a id="more"></a></p><h2 id="let存在变量提升吗"><a href="#let存在变量提升吗" class="headerlink" title="let存在变量提升吗?"></a>let存在变量提升吗?</h2><p>let是ES6推出的新语法，平时简单的用大家都明白，但是里边的原理还是很深的。<br>在MDN的文档中对于let的特性是这样说的：</p><ul><li>let 声明的变量的作用域是块级的；</li><li>let 不能重复声明已存在的变量；</li><li>let 有暂时死区，不会被提升。<br>我们来看一个小demo<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(<span class="built_in">window</span>, <span class="string">'b'</span>, &#123;</span><br><span class="line">    value: <span class="number">22</span></span><br><span class="line">  &#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">  let b = 12</span></span><br><span class="line"><span class="regexp">  console.log(b)</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure></li></ul><p>代码执行报错：Uncaught SyntaxError: Identifier ‘b’ has already been declared</p><p>先给window创建b的属性，然后再去声明b，这个时候，b是个全局变量可以直接通过b访问，let 又不可以重复声明。此处可以解释的通。那么请看下面的代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(<span class="built_in">window</span>, <span class="string">'b'</span>, &#123;</span><br><span class="line">    value: <span class="number">22</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">let</span> b = <span class="number">12</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">  console.log(b)</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure></p><p>如果把let b 提升到上面的script块就可以声明成功。如果说从上往下执行的话，b是已经存在的了，那么let b是不可以声明的成功的。</p><p>到这里就有些解释不通了。为什么window已经声明了b的属性，会成为一个单独的b变量。let 的时候却没有报错呢。这里就需要对let 是不是会变量提升划一个问号了。</p><p>先把这个问题放在这里，我们继续看下面这段代码。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(<span class="built_in">window</span>, <span class="string">'b'</span>, &#123;</span><br><span class="line">    value: <span class="number">22</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">window</span>.b)</span><br><span class="line">  <span class="keyword">let</span> b = <span class="number">12</span></span><br><span class="line">  <span class="built_in">console</span>.log(b)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>window下已经声明了b的属性，而且let 一个b 打印出来分别是22和12。这里我们假设存在变量提升的话，那么js引擎在预解析的时候会先声明b对象。然后实际执行的时候，再给window创建b属性。到这里我们就可以解释的通了。既然存在变量提升的话，我是不是可以在声明之前打印一下b的值呢？<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(<span class="built_in">window</span>, <span class="string">'b'</span>, &#123;</span><br><span class="line">    value: <span class="number">22</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="built_in">console</span>.log(b)</span><br><span class="line">  <span class="keyword">let</span> b = <span class="number">12</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>报错 Uncaught ReferenceError: b is not defined<br>纳尼？难道let 真的不存在变量提升？因为鄙人有强迫症，本着不达目的不罢休的目的，问了度娘，找到了如下的参考资料。<br>要搞清楚提升的本质，需要理解 JS 变量的「创建create、初始化initialize 和赋值assign」。<br>我们来看看 var 声明的「创建、初始化和赋值」过程<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="number">1</span></span><br><span class="line">  <span class="keyword">var</span> y = <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line">fn()</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>在执行 fn 时，会有以下过程（不完全）：</p><p>1.进入 fn，为 fn 创建一个环境。<br>2.找到 fn 中所有用 var 声明的变量，在这个环境中「创建」这些变量（即 x 和 y）。<br>3.将这些变量「初始化」为 undefined。<br>4.开始执行代码<br>5.x = 1 将 x 变量「赋值」为 1<br>6.y = 2 将 y 变量「赋值」为 2<br>也就是说 var 声明会在代码执行之前就将「创建变量，并将其初始化为 undefined」。<br>这就解释了为什么在 var x = 1 之前 console.log(x) 会得到 undefined。<br>接下来来看 function 声明的「创建、初始化和赋值」过程<br>假设代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">fn2()</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>JS 引擎会有一下过程：<br>1.找到所有用 function 声明的变量，在环境中「创建」这些变量。<br>2.将这些变量「初始化」并「赋值」为 function(){ console.log(2) }。<br>3.开始执行代码 fn2()<br>也就是说 function 声明会在代码执行之前就「创建、初始化并赋值」。<br>接下来看 let 声明的「创建、初始化和赋值」过程<br>假设代码如下<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> x = <span class="number">1</span></span><br><span class="line">  x = <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>我们只看 {} 里面的过程：<br>1.找到所有用 let 声明的变量，在环境中「创建」这些变量<br>2.开始执行代码（注意现在还没有初始化）<br>3.执行 x = 1，将 x 「初始化」为 1（这并不是一次赋值，如果代码是 let x，就将 x 初始化为 undefined）<br>4.执行 x = 2，对 x 进行「赋值」<br>这就解释了为什么在 let x 之前使用 x 会报错：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">let</span> x = <span class="string">'global'</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x) <span class="comment">// Uncaught ReferenceError: x is not defined</span></span><br><span class="line">  <span class="keyword">let</span> x = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>原因有两个<br>1.console.log(x) 中的 x 指的是下面的 x，而不是全局的 x<br>2.执行 log 时 x 还没「初始化」，所以不能使用（也就是所谓的暂时死区）<br>看到这里，你应该明白了 let 到底有没有提升：<br>1.let 的「创建」过程被提升了，但是初始化没有提升。<br>2.var 的「创建」和「初始化」都被提升了。<br>function 的「创建」「初始化」和「赋值」都被提升了。</p><p>至此 我们也可以解释</p><ul><li>为什么跨script标签提示重复声明：因为浏览器是从上往下执行js代码的，也就是说在第一段js执行完成之后，再去预解析第二段js代码，执行第二段代码。</li><li>为什么在同一个script标签中可以定义b： 因为在js引擎预解析script的时候先创建了b。然后再执行Object.defineProperty为window增加b属性。所以此处的b和window.b不是一个变量。</li><li>为什么在同一个script标签中可以定义b，但是在b声明之前会报错b没有定义：因为只是创建了b变量，并没有初始化。没有初始化，变量是不可以使用的</li></ul>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>封装ajax工具插件</title>
      <link href="/2019/04/03/%E5%B0%81%E8%A3%85ajax%E5%B7%A5%E5%85%B7%E6%8F%92%E4%BB%B6/"/>
      <url>/2019/04/03/%E5%B0%81%E8%A3%85ajax%E5%B7%A5%E5%85%B7%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>封装一个自己的ajax工具插件<br><a id="more"></a></p><h2 id="封装ajax工具插件"><a href="#封装ajax工具插件" class="headerlink" title="封装ajax工具插件"></a>封装ajax工具插件</h2><p>我们在平时开发的时候，ajax请求都会用到现有库，用的比较多的如jquery，axios等，偶尔自己写个原生ajax请求的情况也有，这些库是怎么写的呢，我们自己封装一个库，来学习学习ajax的一些基础知识。<br>在写这篇文章的时候，是因为头两天同事问我一个ajax问题，关于请求参数的，我突然回答不出来，忘记了，于是翻出来2年前自己封的ajax工具看了一眼，知道了怎么回事，决定把代码写到博客里，忘了的时候方便看一下。<br>下面我只贴出了核心代码，其他部分我会提供github的地址：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><span class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params">window,undefined</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// jinuxAjax挂载到window上</span></span><br><span class="line"><span class="built_in">window</span>.jinuxAjax = <span class="function"><span class="keyword">function</span>(<span class="params">opt</span>)</span>&#123;</span><br><span class="line">ieAjaxInit();</span><br><span class="line"><span class="comment">//默认参数配置</span></span><br><span class="line"><span class="keyword">var</span> defaultOpt = &#123;</span><br><span class="line">url:<span class="string">''</span>,</span><br><span class="line">type: <span class="string">'GET'</span>,</span><br><span class="line">data: <span class="literal">null</span>,</span><br><span class="line">contentType: <span class="string">'application/x-www-form-urlencoded'</span>,<span class="comment">//'text/plain;charset=UTF-8','application/json','multipart/form-data'</span></span><br><span class="line">timeOut: <span class="number">5000</span>,</span><br><span class="line">files:[],</span><br><span class="line">progress: <span class="literal">null</span>,</span><br><span class="line">before: fn,</span><br><span class="line">success: fn,</span><br><span class="line">error: fn,</span><br><span class="line">complete: fn</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//参数对象继承获取新参数对象</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">Object</span>.assign)&#123;</span><br><span class="line"><span class="keyword">var</span> opt = <span class="built_in">Object</span>.assign(&#123;&#125;, defaultOpt, opt);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> name <span class="keyword">in</span> defaultOpt)&#123;</span><br><span class="line">defaultOpt[name] = opt[name] || defaultOpt[name];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> opt = defaultOpt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">requestData(opt);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将json格式数据转成application/x-www-form-urlencoded格式数据</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encodeFormData</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!data) <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line"><span class="keyword">var</span> pairs = [];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> name <span class="keyword">in</span> data)&#123;</span><br><span class="line"><span class="keyword">if</span>(!data.hasOwnProperty(name)) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span> data[name] === <span class="string">'function'</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">var</span> value = data[name].toString();</span><br><span class="line">name = <span class="built_in">encodeURIComponent</span>(name.replace(<span class="string">'%20'</span>,<span class="string">'+'</span>));</span><br><span class="line">value = <span class="built_in">encodeURIComponent</span>(value.replace(<span class="string">'%20'</span>,<span class="string">'+'</span>));</span><br><span class="line">pairs.push(name + <span class="string">'='</span> + value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> pairs.join(<span class="string">'&amp;'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ajax的get请求函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params">opt</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> request = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"><span class="keyword">var</span> timeoutFlag = <span class="literal">false</span>; <span class="comment">//是否超时</span></span><br><span class="line"><span class="comment">//启动计时器，做超时处理</span></span><br><span class="line"><span class="keyword">var</span> timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">timeoutFlag = <span class="literal">true</span>;</span><br><span class="line">request.abort();</span><br><span class="line">&#125;,opt.timeOut);</span><br><span class="line"></span><br><span class="line">request.open(<span class="string">'GET'</span>,opt.url +<span class="string">'?'</span>+ encodeFormData(opt.data));</span><br><span class="line">opt.before(); <span class="comment">//请求之前执行before函数</span></span><br><span class="line">request.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(request.readyState === <span class="number">4</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(timeoutFlag) <span class="keyword">return</span>;</span><br><span class="line">clearTimeout(timer);</span><br><span class="line"><span class="keyword">if</span>(request.status === <span class="number">200</span>)&#123;</span><br><span class="line"><span class="keyword">var</span> type = request.getResponseHeader(<span class="string">'Content-Type'</span>);</span><br><span class="line"><span class="comment">//检查type类型做相应的解析处理</span></span><br><span class="line"><span class="keyword">if</span>(type.indexOf(<span class="string">'xml'</span>) !== <span class="number">-1</span> &amp;&amp; request.responseXML)&#123; <span class="comment">//xml相应</span></span><br><span class="line">opt.success(request.responseXML);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(type.indexOf(<span class="string">'application/json'</span>) !== <span class="number">-1</span>) &#123; <span class="comment">//json相应</span></span><br><span class="line">opt.success(<span class="built_in">JSON</span>.parse(request.responseText));</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">opt.success(request.responseText);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">opt.error(request);</span><br><span class="line">&#125;</span><br><span class="line">opt.complete();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">request.send(<span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ajax的post请求函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">postData</span>(<span class="params">opt</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> request = <span class="keyword">new</span> XMLHttpRequest(), sendData=<span class="literal">null</span>;</span><br><span class="line"><span class="keyword">var</span> timeoutFlag = <span class="literal">false</span>; <span class="comment">//是否超时</span></span><br><span class="line"><span class="comment">//启动计时器，做超时处理</span></span><br><span class="line"><span class="keyword">var</span> timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">timeoutFlag = <span class="literal">true</span>;</span><br><span class="line">request.abort();</span><br><span class="line">&#125;,opt.timeOut);</span><br><span class="line"></span><br><span class="line">request.open(<span class="string">'POST'</span>,opt.url);</span><br><span class="line">request.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(request.readyState === <span class="number">4</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(timeoutFlag) <span class="keyword">return</span>;</span><br><span class="line">clearTimeout(timer);</span><br><span class="line"><span class="keyword">if</span>(request.status === <span class="number">200</span>)&#123;</span><br><span class="line"><span class="keyword">var</span> type = request.getResponseHeader(<span class="string">'Content-Type'</span>);</span><br><span class="line"><span class="comment">//检查type类型做相应的解析处理</span></span><br><span class="line"><span class="keyword">if</span>(type.indexOf(<span class="string">'xml'</span>) !== <span class="number">-1</span> &amp;&amp; request.responseXML)&#123; <span class="comment">//xml相应</span></span><br><span class="line">opt.success(request.responseXML);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(type.indexOf(<span class="string">'application/json'</span>) !== <span class="number">-1</span>) &#123; <span class="comment">//json相应</span></span><br><span class="line">opt.success(<span class="built_in">JSON</span>.parse(request.responseText));</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">opt.success(request.responseText);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">opt.error(request);</span><br><span class="line">&#125;</span><br><span class="line">opt.complete();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//处理接收进度事件</span></span><br><span class="line"><span class="keyword">if</span>(opt.progress.enable &amp;&amp; request.upload)&#123;</span><br><span class="line">request.upload.onprogress = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(ev.lengthComputable)&#123;</span><br><span class="line">opt.progress.receiveHandle(ev);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">request.upload.onload = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;</span><br><span class="line">opt.progress.successHandle(ev);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(opt.contentType === <span class="string">'application/x-www-form-urlencoded'</span>)&#123;</span><br><span class="line">request.setRequestHeader(<span class="string">'Content-Type'</span>,<span class="string">'application/x-www-form-urlencoded; charset=UTF-8'</span>);</span><br><span class="line">sendData = encodeFormData(opt.data);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(opt.contentType === <span class="string">'application/json'</span>) &#123;</span><br><span class="line">request.setRequestHeader(<span class="string">'Content-Type'</span>,<span class="string">'application/json; charset=utf-8'</span>);</span><br><span class="line">sendData = <span class="built_in">JSON</span>.stringify(opt.data);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(opt.contentType === <span class="string">'multipart/form-data'</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> fd = <span class="keyword">new</span> FormData();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> name <span class="keyword">in</span> opt.data)&#123;</span><br><span class="line"><span class="keyword">if</span>( !opt.data.hasOwnProperty(name) ) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">typeof</span> opt.data[name] === <span class="string">'function'</span> ) <span class="keyword">continue</span>; </span><br><span class="line">fd.append(name,opt.data[name]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;opt.files.length; i++)&#123;</span><br><span class="line">fd.append(<span class="string">'file'</span>+i,opt.files[i]);</span><br><span class="line">&#125;</span><br><span class="line">sendData = fd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">request.send(sendData);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ajax请求函数，在函数内再调用get或者post</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">requestData</span>(<span class="params">opt</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(opt.type === <span class="string">'GET'</span>)&#123;</span><br><span class="line">getData(opt);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">postData(opt);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个空函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果是ie6，创建XMLHttpRequest对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ieAjaxInit</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">window</span>.XMLHttpRequest === <span class="literal">undefined</span>)&#123;</span><br><span class="line"><span class="built_in">window</span>.XMLHttpRequest = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject(<span class="string">'Msxml2.XMLHTTP.6.0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (e1) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject(<span class="string">'Msxml2.XMLHTTP.3.0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (e2) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'不支持XMLHttpRequest'</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line">&#125;)(<span class="built_in">window</span>);</span><br></pre></td></tr></table></figure></p><p>详细代码请<a href="https://github.com/jinux7/jinux-ajax" target="_blank" rel="noopener">点击这里看源码</a></p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ajax </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>防抖与节流</title>
      <link href="/2019/04/03/%E9%98%B2%E6%8A%96%E4%B8%8E%E8%8A%82%E6%B5%81/"/>
      <url>/2019/04/03/%E9%98%B2%E6%8A%96%E4%B8%8E%E8%8A%82%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<p>简单的介绍一下防抖与节流<br><a id="more"></a><br>作为一名前端开发者，我们经常会处理各种事件，比如常见的click、scroll、 resize等等。仔细一想，会发现像scroll、scroll、onchange这类事件会频繁触发，如果我们在回调中计算元素位置、做一些跟DOM相关的操作，引起浏览器回流和重绘，频繁触发回调，很可能会造成浏览器掉帧，甚至会使浏览器崩溃，影响用户体验。针对这种现象，目前有两种常用的解决方案：防抖和节流。</p><h2 id="防抖（debounce）"><a href="#防抖（debounce）" class="headerlink" title="防抖（debounce）"></a>防抖（debounce）</h2><p>所谓防抖，就是指触发事件后，就是把触发非常频繁的事件合并成一次去执行。即在指定时间内只执行一次回调函数，如果在指定的时间内又触发了该事件，则回调函数的执行时间会基于此刻重新开始计算。</p><ul><li>以我们生活中乘车刷卡的情景举例，只要乘客不断地在刷卡，司机师傅就不能开车，乘客刷卡完毕之后，司机会等待几分钟，确定乘客坐稳再开车。如果司机在最后等待的时间内又有新的乘客上车，那么司机等乘客刷卡完毕之后，还要再等待一会，等待所有乘客坐稳再开车。<br><img src="/2019/04/03/防抖与节流/1.jpg" alt="img"><br>具体应该怎么去实现这样的功能呢？第一时间肯定会想到使用setTimeout方法，那我们就尝试写一个简单的函数来实现这个功能吧~<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> debounce = <span class="function"><span class="keyword">function</span>(<span class="params">fn, delayTime</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> timeId;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> context = <span class="keyword">this</span>, args = <span class="built_in">arguments</span>;</span><br><span class="line">    timeId &amp;&amp; clearTimeout(timeout);</span><br><span class="line">    timeId = setTimeout(<span class="function"><span class="keyword">function</span> </span>&#123;</span><br><span class="line">          fn.apply(context, args);</span><br><span class="line">        &#125;, delayTime)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>思路解析：<br>执行debounce函数之后会返回一个新的函数，通过闭包的形式，维护一个变量timeId，每次执行该函数的时候会结束之前的延迟操作，重新执行setTimeout方法，也就实现了上面所说的指定的时间内多次触发同一个事件，会合并执行一次。<br>温馨提示：<br>1、上述代码中arguments只会保存事件回调函数中的参数，譬如：事件对象等，并不会保存fn、delayTime<br>2、使用apply改变传入的fn方法中的this指向，指向绑定事件的DOM元素。</p><h2 id="节流（throttle）"><a href="#节流（throttle）" class="headerlink" title="节流（throttle）"></a>节流（throttle）</h2><p>所谓节流，是指频繁触发事件时，只会在指定的时间段内执行事件回调，即触发事件间隔大于等于指定的时间才会执行回调函数。</p><ul><li>类比到生活中的水龙头，拧紧水龙头到某种程度会发现，每隔一段时间，就会有水滴流出。<br><img src="/2019/04/03/防抖与节流/2.jpg" alt="img"><br>说到时间间隔，大家肯定会想到使用setTimeout来实现，在这里，我们使用两种方法来简单实现这种功能：时间戳和setTimeout定时器。</li><li>时间戳<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> throttle = (fn, delayTime) = &gt;&#123;</span><br><span class="line">    <span class="keyword">var</span> _start = <span class="built_in">Date</span>.now();</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> _now = <span class="built_in">Date</span>.now(),</span><br><span class="line">        context = <span class="keyword">this</span>,</span><br><span class="line">        args = <span class="built_in">arguments</span>;</span><br><span class="line">        <span class="keyword">if</span> (_now - _start &gt;= delayTime) &#123;</span><br><span class="line">            fn.apply(context, args);</span><br><span class="line">            _start = <span class="built_in">Date</span>.now();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>通过比较两次时间戳的间隔是否大于等于我们事先指定的时间来决定是否执行事件回调。</p><ul><li>定时器<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> throttle = <span class="function"><span class="keyword">function</span>(<span class="params">fn, delayTime</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> flag;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> context = <span class="keyword">this</span>,</span><br><span class="line">        args = <span class="built_in">arguments</span>;</span><br><span class="line">        <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">            flag = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                fn.apply(context, args);</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">            &#125;,delayTime);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>在上述实现过程中，我们设置了一个标志变量flag，当delayTime之后执行事件回调，便会把这个变量重置，表示一次回调已经执行结束。 对比上述两种实现，我们会发现一个有趣的现象：<br>1、使用时间戳方式，页面加载的时候就会开始计时，如果页面加载时间大于我们设定的delayTime，第一次触发事件回调的时候便会立即fn，并不会延迟。如果最后一次触发回调与前一次触发回调的时间差小于delayTime，则最后一次触发事件并不会执行fn；<br>2、使用定时器方式，我们第一次触发回调的时候才会开始计时，如果最后一次触发回调事件与前一次时间间隔小于delayTime，delayTime之后仍会执行fn。<br>这两种方式有点优势互补的意思，哈哈~<br>我们考虑把这两种方式结合起来，便会在第一次触发事件时执行fn，最后一次与前一次间隔比较短，delayTime之后再次执行fn。<br>想法简单实现如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> throttle = <span class="function"><span class="keyword">function</span>(<span class="params">fn, delayTime</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> flag, _start = <span class="built_in">Date</span>.now();</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> context = <span class="keyword">this</span>,</span><br><span class="line">        args = <span class="built_in">arguments</span>,</span><br><span class="line">        _now = <span class="built_in">Date</span>.now(),</span><br><span class="line">        remainTime = delayTime - (_now - _start);</span><br><span class="line">        <span class="keyword">if</span> (remainTime &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            fn.apply(<span class="keyword">this</span>, args);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                fn.apply(<span class="keyword">this</span>, args);</span><br><span class="line">            &#125;,remainTime)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过上面的分析，可以很明显的看出函数防抖和函数节流的区别：<br>频繁触发事件时，函数防抖只会在最后一次触发事件只会才会执行回调内容，其他情况下会重新计算延迟事件，而函数节流便会很有规律的每隔一定时间执行一次回调函数。</p><ul><li>requestAnimationFrame<br>之前，我们使用setTimeout简单实现了防抖和节流功能，如果我们不考虑兼容性，追求精度比较高的页面效果，可以考虑试试html5提供的API–requestAnimationFrame。<br>与setTimeout相比，requestAnimationFrame的时间间隔是有系统来决定，保证屏幕刷新一次，回调函数只会执行一次，比如屏幕的刷新频率是60HZ，即间隔1000ms/60会执行一次回调。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> throttle = <span class="function"><span class="keyword">function</span>(<span class="params">fn, delayTime</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> flag;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">            requestAnimationFrame(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                fn();</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">            &#125;);</span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><p>上述代码的基本功能就是保证在屏幕刷新的时候（对于大多数的屏幕来说，大约16.67ms），可以执行一次回调函数fn。使用这种方式也存在一种比较明显的缺点，时间间隔只能跟随系统变化，我们无法修改，但是准确性会比setTimeout高一些。<br>注意：</p><ul><li>防抖和节流只是减少了事件回调函数的执行次数，并不会减少事件的触发频率。</li><li>防抖和节流并没有从本质上解决性能问题，我们还应该注意优化我们事件回调函数的逻辑功能，避免在回调中执行比较复杂的DOM操作，减少浏览器reflow和repaint。<br>上面的示例代码比较简单，只是说明了基本的思路。目前已经有工具库实现了这些功能，比如underscore，考虑的情况也会比较多，大家可以去查看源码，学习作者的思路，加深理解。<br>underscore的debounce方法源码：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">_.debounce = <span class="function"><span class="keyword">function</span>(<span class="params">func, wait, immediate</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> timeout, result;</span><br><span class="line">    <span class="keyword">var</span> later = <span class="function"><span class="keyword">function</span>(<span class="params">context, args</span>) </span>&#123;</span><br><span class="line">        timeout = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (args) result = func.apply(context, args);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">var</span> debounced = restArguments(<span class="function"><span class="keyword">function</span>(<span class="params">args</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (timeout) clearTimeout(timeout);</span><br><span class="line">        <span class="keyword">if</span> (immediate) &#123;</span><br><span class="line">            <span class="keyword">var</span> callNow = !timeout;</span><br><span class="line">            timeout = setTimeout(later, wait);</span><br><span class="line">            <span class="keyword">if</span> (callNow) result = func.apply(<span class="keyword">this</span>, args);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            timeout = _.delay(later, wait, <span class="keyword">this</span>, args);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;);</span><br><span class="line">    debounced.cancel = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        clearTimeout(timeout);</span><br><span class="line">        timeout = <span class="literal">null</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> debounced;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><p>underscore的throttle源码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">_.throttle = <span class="function"><span class="keyword">function</span>(<span class="params">func, wait, options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> timeout, context, args, result;</span><br><span class="line">    <span class="keyword">var</span> previous = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (!options) options = &#123;&#125;;</span><br><span class="line">    <span class="keyword">var</span> later = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        previous = options.leading === <span class="literal">false</span> ? <span class="number">0</span> : _.now();</span><br><span class="line">        timeout = <span class="literal">null</span>;</span><br><span class="line">        result = func.apply(context, args);</span><br><span class="line">        <span class="keyword">if</span> (!timeout) context = args = <span class="literal">null</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">var</span> throttled = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> now = _.now();</span><br><span class="line">        <span class="keyword">if</span> (!previous &amp;&amp; options.leading === <span class="literal">false</span>) previous = now;</span><br><span class="line">        <span class="keyword">var</span> remaining = wait - (now - previous);</span><br><span class="line">        context = <span class="keyword">this</span>;</span><br><span class="line">        args = <span class="built_in">arguments</span>;</span><br><span class="line">        <span class="keyword">if</span> (remaining &lt;= <span class="number">0</span> || remaining &gt; wait) &#123;</span><br><span class="line">            <span class="keyword">if</span> (timeout) &#123;</span><br><span class="line">                clearTimeout(timeout);</span><br><span class="line">                timeout = <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            previous = now;</span><br><span class="line">            result = func.apply(context, args);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!timeout) context = args = <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">if</span> (!timeout &amp;&amp; options.trailing !== <span class="literal">false</span>) &#123;</span><br><span class="line">            timeout = setTimeout(later, remaining);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;;</span><br><span class="line">    throttled.cancel = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        clearTimeout(timeout);</span><br><span class="line">        previous = <span class="number">0</span>;</span><br><span class="line">        timeout = context = args = <span class="literal">null</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> throttled;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HTML5中Video标签无法播放mp4的解决办法</title>
      <link href="/2019/03/21/HTML5%E4%B8%ADVideo%E6%A0%87%E7%AD%BE%E6%97%A0%E6%B3%95%E6%92%AD%E6%94%BEmp4%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
      <url>/2019/03/21/HTML5%E4%B8%ADVideo%E6%A0%87%E7%AD%BE%E6%97%A0%E6%B3%95%E6%92%AD%E6%94%BEmp4%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>解决其它格式视频转mp4格式文件，video标签无法播放问题<br><a id="more"></a></p><h2 id="HTML5中Video标签无法播放mp4的解决办法"><a href="#HTML5中Video标签无法播放mp4的解决办法" class="headerlink" title="HTML5中Video标签无法播放mp4的解决办法"></a>HTML5中Video标签无法播放mp4的解决办法</h2><p>首先，浏览器使用环境chrome<br>在使用video标签播放视频的时候，我一般都选择mp4格式的文件，在网上下载的demo视频或者是手机拍摄的mp4文件都可以播放，但是，我用格式工厂把avi格式的文件转换成mp4文件就无法播放，为什么呢？<br>带着疑问，上网找答案，找到了原因，如下：<br><img src="/2019/03/21/HTML5中Video标签无法播放mp4的解决办法/1.png" alt="img"><br>使用格式工厂的mp4转换功能转出来的mp4文件并不能使用，于是把能播放的视频文件和不能播放的视频文件的编码格式对比了一下<br>可以播放的：<br><img src="/2019/03/21/HTML5中Video标签无法播放mp4的解决办法/2.png" alt="img"><br>不可以播放的：<br><img src="/2019/03/21/HTML5中Video标签无法播放mp4的解决办法/3.png" alt="img"><br>所以，在格式工厂转换的时候需要转成AVC编码格式的mp4文件<br><img src="/2019/03/21/HTML5中Video标签无法播放mp4的解决办法/4.png" alt="img"><br>好了，按照这种方式就可以正常播放了。<br>*补充更新：<br>上边的方式在pc端chrome浏览器上可以，但是在移动端上还是无法播放，最后没有办法，我采用了WebM格式。<br>格式工厂可以转换，见下图<br><img src="/2019/03/21/HTML5中Video标签无法播放mp4的解决办法/5.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>移动端兼容性</title>
      <link href="/2019/03/05/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%85%BC%E5%AE%B9%E6%80%A7/"/>
      <url>/2019/03/05/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%85%BC%E5%AE%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<p>移动端有关html标签节点的兼容性问题<br><a id="more"></a></p><h2 id="移动端兼容性"><a href="#移动端兼容性" class="headerlink" title="移动端兼容性"></a>移动端兼容性</h2><h3 id="meta标签"><a href="#meta标签" class="headerlink" title="meta标签"></a>meta标签</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// viewport就啥也不说了，必须得加</span></span><br><span class="line">&lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0"</span> /&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动或禁用自动识别页面中的电话号码</span></span><br><span class="line">&lt;meta name=<span class="string">"format-detection"</span> content=<span class="string">"telephone=no"</span> /&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动或禁用自动识别邮箱地址</span></span><br><span class="line">&lt;meta name=<span class="string">"format-detection"</span>  content=<span class="string">"email=no"</span> /&gt; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置 Web 应用是否以全屏模式运行。</span></span><br><span class="line">&lt;meta name=<span class="string">"apple-mobile-web-app-capable"</span> content=<span class="string">"yes"</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ios 的 safari 顶端状态条的样式，可选的参数有：default、black、black-translucent</span></span><br><span class="line">&lt;meta name=<span class="string">"apple-mobile-web-app-status-bar-style"</span>  content=<span class="string">"black"</span> /&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// winphone 系统 a、input 标签被点击时产生的半透明灰色背景怎么去掉</span></span><br><span class="line">&lt;meta name=<span class="string">"msapplication-tap-highlight"</span>  content=<span class="string">"no"</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="body-img等标签"><a href="#body-img等标签" class="headerlink" title="body,img等标签"></a>body,img等标签</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 禁止 ios 长按时不触发系统的菜单，禁止 ios&amp;android 长按时下载图片</span></span><br><span class="line">.css &#123;</span><br><span class="line">  -webkit-touch-callout: none</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 禁止ios和android用户选中文字</span></span><br><span class="line">.css &#123;</span><br><span class="line">  -webkit-user-select:none</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="图片不清晰"><a href="#图片不清晰" class="headerlink" title="图片不清晰"></a>图片不清晰</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 比如，iphone6，设备款375，物理像素750，正常一张占1/3屏幕的图片，125px，如果准备一张125的</span></span><br><span class="line"><span class="comment">// 肯定会模糊，必须准备250px的。如果像iphone6 plus，像素比3， 占1/3的图片138px，实际需要414px。</span></span><br><span class="line"><span class="comment">// 解决方案：</span></span><br><span class="line">@media screen and (-webkit-min-device-pixel-ratio: <span class="number">2</span>) &#123;</span><br><span class="line">    .css &#123;</span><br><span class="line">      background-image: url(<span class="string">'2x.png'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">@media screen and (-webkit-min-device-pixel-ratio: <span class="number">3</span>) &#123;</span><br><span class="line">    .css &#123;</span><br><span class="line">      background-image: url(<span class="string">'3x.png'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="表单的标签"><a href="#表单的标签" class="headerlink" title="表单的标签"></a>表单的标签</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// input 输入框不可编辑</span></span><br><span class="line">&lt;input type=<span class="string">"text"</span> name=<span class="string">"name"</span> value=<span class="string">"xxx"</span> disabled=<span class="string">"true"</span>/&gt;</span><br><span class="line">&lt;input type=<span class="string">"text"</span> name=<span class="string">"name"</span> value=<span class="string">"xxx"</span> readonly=<span class="string">"true"</span>/&gt;</span><br><span class="line"><span class="comment">/* disabled 文本框变灰，通过request.getParameter("name")得不到文本框中的内容</span></span><br><span class="line"><span class="comment">readonly 只是使文本框不能输入，样式没有变化，通过request.getParameter("name")可以得到内容 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ios 输入的时候英文首字母的默认大写</span></span><br><span class="line">&lt;input autocapitalize=<span class="string">"off"</span> autocorrect=<span class="string">"off"</span> /&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// android 上去掉语音输入按钮</span></span><br><span class="line">input::-webkit-input-speech-button &#123;</span><br><span class="line">  display: none</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ios系统中元素被触摸时产生的半透明灰色遮罩怎么去掉</span></span><br><span class="line">a,button,input,textarea&#123;</span><br><span class="line">  -webkit-tap-highlight-color: rgba(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>;)</span><br><span class="line">  -webkit-user-modify:read-write-plaintext-only;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">/* -webkit-user-modify 这个属性使用需谨慎，副作用就是输入法不再能够输入多个字符</span></span><br><span class="line"><span class="comment">另外，有些机型去除不了，如小米2</span></span><br><span class="line"><span class="comment">对于按钮类，不使用a或者input标签，直接用div标签 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 表单元素的默认外观重置</span></span><br><span class="line">  -webkit-appearance:none;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改表单输入框 placeholder 的颜色值</span></span><br><span class="line">  input::-webkit-input-placeholder&#123;color:#ccc;&#125; </span><br><span class="line">  input:focus::-webkit-input-placeholder&#123;color:#eee;&#125; </span><br><span class="line"><span class="comment">// 注意 placeholder,  ios 可以换行，android 不可以</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Input 的placeholder会出现文本位置偏上的情况</span></span><br><span class="line">input 的placeholder会出现文本位置偏上的情况：PC端设置line-height等于height能够对齐，而移动端仍然是偏上，解决是设置line-height：normal</span><br><span class="line"></span><br><span class="line"><span class="comment">// 禁用 select 默认下拉箭头</span></span><br><span class="line">select::-ms-expand &#123;<span class="attr">display</span>: none;&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 禁用 radio 和 checkbox 默认样式</span></span><br><span class="line">input[type=radio]::-ms-check,</span><br><span class="line">input[type=checkbox]::-ms-check &#123; </span><br><span class="line">  display: none; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="a标签"><a href="#a标签" class="headerlink" title="a标签"></a>a标签</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">部分安卓手机 a 标签用作按钮的时候，页面显示空白</span><br><span class="line">解决办法：用 button 标签替换 a 标签</span><br></pre></td></tr></table></figure><h3 id="button"><a href="#button" class="headerlink" title="button"></a>button</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 去除button在ios上的默认样式</span></span><br><span class="line">.css &#123;</span><br><span class="line">  -webkit-appearance: none;</span><br><span class="line">  border-radius: <span class="number">0</span> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不想让按钮touch时有蓝色的边框     </span></span><br><span class="line">.css &#123;</span><br><span class="line">  -webkit-tap-highlight-color:rgba(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="audio和video"><a href="#audio和video" class="headerlink" title="audio和video"></a>audio和video</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在ios和andriod中,audio元素和video元素在无法自动播放</span></span><br><span class="line"><span class="comment">// 应对方案：触屏即播</span></span><br><span class="line">$(<span class="string">'html'</span>).one(<span class="string">'touchstart'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    audio.play()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ios 视频默认全屏播放，如何阻止全屏播放－ webkit-playsinline</span></span><br><span class="line">&lt;video id=<span class="string">"video"</span> src=<span class="string">""</span> webkit-playsinline poster=<span class="string">""</span> &gt;<span class="xml"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 视频，音频获取播放结束后的回调函数－ended</span></span><br><span class="line">$(<span class="string">'#video'</span>).on(<span class="string">'ended'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  alert(<span class="number">0</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="click点击事件"><a href="#click点击事件" class="headerlink" title="click点击事件"></a>click点击事件</h3><h4 id="300毫秒延迟"><a href="#300毫秒延迟" class="headerlink" title="300毫秒延迟"></a>300毫秒延迟</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 300毫秒延迟解决方案</span></span><br><span class="line"><span class="number">1.</span>fastclick可以解决在手机上点击事件的<span class="number">300</span>ms延迟</span><br><span class="line"><span class="number">2.</span>zepto的touch模块，tap事件也是为了解决在click的延迟问题</span><br><span class="line"><span class="number">3.</span>触摸事件的响应顺序为 touchstart --&gt; touchmove --&gt; touchend --&gt; click,也可以通过绑定ontouchstart事件，加快对事件的响应，解决<span class="number">300</span>ms延迟问题</span><br></pre></td></tr></table></figure><h4 id="ios-label-span-监听click事件-不触发"><a href="#ios-label-span-监听click事件-不触发" class="headerlink" title="ios(label,span)监听click事件,不触发"></a>ios(label,span)监听click事件,不触发</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 所监听元素加上</span></span><br><span class="line">.css &#123;</span><br><span class="line">  cursor:pointer</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="css部分"><a href="#css部分" class="headerlink" title="css部分"></a>css部分</h2><h3 id="webkit-keyframes-注意"><a href="#webkit-keyframes-注意" class="headerlink" title="@-webkit-keyframes 注意"></a>@-webkit-keyframes 注意</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">以<span class="number">0</span>%开始<span class="number">100</span>%结束，<span class="number">0</span>%的百分号不能去掉</span><br><span class="line">after和before伪类无法使用动画</span><br></pre></td></tr></table></figure><h3 id="border-radius-注意"><a href="#border-radius-注意" class="headerlink" title="border-radius 注意"></a>border-radius 注意</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">不支持%单位</span><br><span class="line">三星 Galaxy S4中自带浏览器不支持 border-radius 缩写</span><br><span class="line">同时写入 border-radius 和背景色的时候，背景色会溢出到圆角以外部分</span><br></pre></td></tr></table></figure><h3 id="解决-transition-闪屏"><a href="#解决-transition-闪屏" class="headerlink" title="解决 transition 闪屏"></a>解决 transition 闪屏</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.css&#123; </span><br><span class="line">  <span class="comment">/*设置内嵌的元素在 3D 空间如何呈现：保留 3D*/</span> </span><br><span class="line">  -webkit-transform-style: preserve<span class="number">-3</span>d; </span><br><span class="line">  <span class="comment">/*（设置进行转换的元素的背面在面对用户时是否可见：隐藏）*/</span> </span><br><span class="line">  -webkit-backface-visibility: hidden; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="阻止用户调整微信浏览器字体大小"><a href="#阻止用户调整微信浏览器字体大小" class="headerlink" title="阻止用户调整微信浏览器字体大小"></a>阻止用户调整微信浏览器字体大小</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ios 管事，android 暂无解决方案</span></span><br><span class="line">body&#123;</span><br><span class="line">  -webkit-text-size-adjust: <span class="number">100</span>%!important;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="屏幕旋转的事件和样式"><a href="#屏幕旋转的事件和样式" class="headerlink" title="屏幕旋转的事件和样式"></a>屏幕旋转的事件和样式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 事件</span></span><br><span class="line"><span class="built_in">window</span>.orientation，取值：正负<span class="number">90</span>表示横屏模式、<span class="number">0</span>和<span class="number">180</span>表现为竖屏模式；</span><br><span class="line"><span class="comment">// 代码判断</span></span><br><span class="line"><span class="built_in">window</span>.onorientationchange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">  <span class="keyword">switch</span>(<span class="built_in">window</span>.orientation)&#123; </span><br><span class="line">    <span class="keyword">case</span> <span class="number">-90</span>: </span><br><span class="line">    <span class="keyword">case</span> <span class="number">90</span>: </span><br><span class="line">        alert(<span class="string">"横屏:"</span> + <span class="built_in">window</span>.orientation); </span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>: </span><br><span class="line">    <span class="keyword">case</span> <span class="number">180</span>: </span><br><span class="line">        alert(<span class="string">"竖屏:"</span> + <span class="built_in">window</span>.orientation); </span><br><span class="line">    <span class="keyword">break</span>; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 样式</span></span><br><span class="line"><span class="comment">/*竖屏时使用的样式*/</span> </span><br><span class="line">@media all and (orientation:portrait) &#123;</span><br><span class="line">  .css&#123;&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*横屏时使用的样式*/</span> </span><br><span class="line">@media all and (orientation:landscape) &#123;</span><br><span class="line">  .css&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="fixed元素无法点击"><a href="#fixed元素无法点击" class="headerlink" title="fixed元素无法点击"></a>fixed元素无法点击</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">场景：父元素设置position: fixed;</span><br><span class="line">子元素设置position: absolute;</span><br><span class="line">此时，如果父元素/子元素还设置了overflow: hidden 则出现“父元素遮挡该子元素“的bug。</span><br><span class="line">视觉(view)层并没有出现遮挡，只是无法触发绑定在该子元素上的事件。可理解为：「看到点不到」。</span><br><span class="line">补充： 页面往下滚动，触发position: fixed;的特性时，才会出现这个bug，在最顶不会出现。</span><br><span class="line">测试平台： 小米<span class="number">1</span>S，Android4<span class="number">.0</span>的Chrome18</span><br><span class="line">解决办法： 把父元素和子元素的overflow: hidden去掉。</span><br></pre></td></tr></table></figure><h3 id="overflow"><a href="#overflow" class="headerlink" title="overflow"></a>overflow</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">body如果设置height:<span class="number">100</span>%;overflow:hidden是依然可以滑动的，如果需禁止，</span><br><span class="line">要再加一层div设置 height:<span class="number">100</span>%加overflow：hidden（html,body加height:<span class="number">100</span>%） ，</span><br><span class="line">这样元素超出body的高度也不能滑动了。</span><br><span class="line">或者同时给html，body加height:<span class="number">100</span>%;overflow:hidden</span><br></pre></td></tr></table></figure><h3 id="ios阻止旋转屏幕时自动调整字体大小"><a href="#ios阻止旋转屏幕时自动调整字体大小" class="headerlink" title="ios阻止旋转屏幕时自动调整字体大小"></a>ios阻止旋转屏幕时自动调整字体大小</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">html, body, form, fieldset, p, div, h1, h2, h3, h4, h5, h6 &#123;</span><br><span class="line">  -webkit-text-size-adjust:none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通过transform进行skew变形，rotate旋转会造成出现锯齿现象"><a href="#通过transform进行skew变形，rotate旋转会造成出现锯齿现象" class="headerlink" title="通过transform进行skew变形，rotate旋转会造成出现锯齿现象"></a>通过transform进行skew变形，rotate旋转会造成出现锯齿现象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-webkit-transform: rotate(<span class="number">-4</span>deg) skew(<span class="number">10</span>deg) translateZ(<span class="number">0</span>);</span><br><span class="line">transform: rotate(<span class="number">-4</span>deg) skew(<span class="number">10</span>deg) translateZ(<span class="number">0</span>);</span><br><span class="line">outline: <span class="number">1</span>px solid rgba(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h3 id="iOS6下伪类-hover"><a href="#iOS6下伪类-hover" class="headerlink" title="iOS6下伪类:hover"></a>iOS6下伪类:hover</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">除了&lt;a&gt;之外的元素无效；在Android下则有效。类似</span><br><span class="line">div#topFloatBar_l:hover #topFloatBar_menu &#123;</span><br><span class="line">  display:block; </span><br><span class="line">&#125;</span><br><span class="line">这样的导航显示在iOS6点击没有点击效果，只能通过增加点击侦听器给元素增减<span class="class"><span class="keyword">class</span>来控制子元素。</span></span><br></pre></td></tr></table></figure><h3 id="点击按钮时背景变黑色的解决"><a href="#点击按钮时背景变黑色的解决" class="headerlink" title="点击按钮时背景变黑色的解决"></a>点击按钮时背景变黑色的解决</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 点击按钮时背景变黑色的解决</span></span><br><span class="line">-webkit-tap-highlight-color: transparent;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当我们去掉默认的大黑块儿后，要添加自己想要的点击时按住按钮的效果，用以下代码：</span></span><br><span class="line">span:active&#123;</span><br><span class="line">  box-shadow: inset 0 5px 10px #B41313,inset 0 -5px 10px #B41313;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 添加完上述代码后，在安卓上，都可以看到想要的效果，但是iphone上依旧不行，</span></span><br><span class="line"><span class="comment">// :active  需要一个触发事件才可以，于是乎，用以下代码：</span></span><br><span class="line"><span class="built_in">document</span>.body.addEventListener(<span class="string">'touchstart'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;);</span><br></pre></td></tr></table></figure><h3 id="retina屏下border的1px会变粗"><a href="#retina屏下border的1px会变粗" class="headerlink" title="retina屏下border的1px会变粗"></a>retina屏下border的1px会变粗</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 因为像素比，比如，iphone6的像素比是2，window.devicePixelRatio可以查看，</span></span><br><span class="line"><span class="comment">// iphone6的设备宽是375,而物理像素是750，在css中的1px，实际控制的是2px的像素，</span></span><br><span class="line"><span class="comment">// 所以看起来会变粗了</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 解决一：IOS8下已经支持带小数的px值, media query对应devicePixelRatio有个查询值-webkit-min-device-pixel-ratio, css可以写成这样</span></span><br><span class="line">.border &#123; border: 1px solid #999 &#125;</span><br><span class="line">@media screen and (-webkit-min-device-pixel-ratio: <span class="number">2</span>) &#123;</span><br><span class="line">    .border &#123; border: 0.5px solid #999 &#125;</span><br><span class="line">&#125;</span><br><span class="line">@media screen and (-webkit-min-device-pixel-ratio: <span class="number">3</span>) &#123;</span><br><span class="line">    .border &#123; border: 0.333333px solid #999 &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解决二：background渐变</span></span><br><span class="line"><span class="comment">// 背景渐变, 渐变在透明色和边框色中间分割, frozenUI用的就是这种方法, 借用它的上边框写法:</span></span><br><span class="line">@media screen and (-webkit-min-device-pixel-ratio: <span class="number">2</span>)&#123;</span><br><span class="line">    .ui-border-t &#123;</span><br><span class="line">        background-position: left top;</span><br><span class="line">        background-image: -webkit-gradient(linear,left bottom,left top,color-stop(0.5,transparent),color-stop(0.5,#e0e0e0),to(#e0e0e0));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解决三：</span></span><br><span class="line"><span class="comment">// :before, :after与transform</span></span><br><span class="line">.radius-border&#123;</span><br><span class="line">    position: relative;</span><br><span class="line">&#125;</span><br><span class="line">@media screen and (-webkit-min-device-pixel-ratio: <span class="number">2</span>)&#123;</span><br><span class="line">    .radius-border:before&#123;</span><br><span class="line">        content: <span class="string">""</span>;</span><br><span class="line">        pointer-events: none; <span class="comment">/* 防止点击触发 */</span></span><br><span class="line">        box-sizing: border-box;</span><br><span class="line">        position: absolute;</span><br><span class="line">        width: <span class="number">200</span>%;</span><br><span class="line">        height: <span class="number">200</span>%;</span><br><span class="line">        left: <span class="number">0</span>;</span><br><span class="line">        top: <span class="number">0</span>;</span><br><span class="line">        border-radius: <span class="number">8</span>px;</span><br><span class="line">        border:1px solid #999;</span><br><span class="line">        -webkit-transform(scale(<span class="number">0.5</span>));</span><br><span class="line">        -webkit-transform-origin: <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">        transform(scale(<span class="number">0.5</span>));</span><br><span class="line">        transform-origin: <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
            <tag> 兼容性 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vue自定义指令之输入框限制字数</title>
      <link href="/2019/03/01/vue%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4%E4%B9%8B%E8%BE%93%E5%85%A5%E6%A1%86%E9%99%90%E5%88%B6%E5%AD%97%E6%95%B0/"/>
      <url>/2019/03/01/vue%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4%E4%B9%8B%E8%BE%93%E5%85%A5%E6%A1%86%E9%99%90%E5%88%B6%E5%AD%97%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>input输入框限制字数的指令制作<br><a id="more"></a></p><h2 id="vue自定义指令之输入框限制字数"><a href="#vue自定义指令之输入框限制字数" class="headerlink" title="vue自定义指令之输入框限制字数"></a>vue自定义指令之输入框限制字数</h2><p>vue自定义指令没啥说的，说明见<a href="https://cn.vuejs.org/v2/guide/custom-directive.html" target="_blank" rel="noopener">官网</a>,具体代码见下面:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Vue.directive(<span class="string">'inputvalidatecounter'</span>, &#123;</span><br><span class="line">  inserted: <span class="function"><span class="keyword">function</span> (<span class="params">el, binding</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> nSpan = <span class="built_in">document</span>.createElement(<span class="string">'span'</span>),</span><br><span class="line">        nInput = el.querySelector(<span class="string">'input'</span>),</span><br><span class="line">        count = +binding.expression || <span class="number">50</span>;</span><br><span class="line">    el.appendChild(nSpan);</span><br><span class="line">    nSpan.innerHTML = <span class="string">'还可以填写'</span>+count+<span class="string">'字'</span>;</span><br><span class="line">    nInput.addEventListener(<span class="string">'input'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> num = count - <span class="keyword">this</span>.value.length;</span><br><span class="line">      <span class="keyword">if</span>(num&lt;=<span class="number">0</span>) &#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">var</span> substr = <span class="keyword">this</span>.value.substring(<span class="number">0</span>,count<span class="number">-1</span>);</span><br><span class="line">          <span class="keyword">this</span>.value = substr;</span><br><span class="line">        &#125;, <span class="number">10</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      nSpan.innerHTML = <span class="string">'还可以填写'</span>+(num&lt;<span class="number">0</span>?<span class="number">0</span>:num)+<span class="string">'字'</span>;</span><br><span class="line">    &#125;, <span class="literal">false</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>需要注意的地方：</p><ul><li>这个指令只适用于iview的Input组件，看里边操作dom元素就可以看出来，想改成其它的也是简单。</li><li><h1 id="在更改input的value的时候，最开始改不过来，后来我做了下延迟才解决这个问题，我想应该是在直接给input的value赋值后由于vue还在做监控，所以又给改回去了，所以来个延迟，在它监控触发结束后再改正。"><a href="#在更改input的value的时候，最开始改不过来，后来我做了下延迟才解决这个问题，我想应该是在直接给input的value赋值后由于vue还在做监控，所以又给改回去了，所以来个延迟，在它监控触发结束后再改正。" class="headerlink" title="在更改input的value的时候，最开始改不过来，后来我做了下延迟才解决这个问题，我想应该是在直接给input的value赋值后由于vue还在做监控，所以又给改回去了，所以来个延迟，在它监控触发结束后再改正。"></a>在更改input的value的时候，最开始改不过来，后来我做了下延迟才解决这个问题，我想应该是在直接给input的value赋值后由于vue还在做监控，所以又给改回去了，所以来个延迟，在它监控触发结束后再改正。</h1>2019年3月4日更改<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Vue.directive(<span class="string">'inputvalidatecounter'</span>, &#123;</span><br><span class="line">  inserted: <span class="function"><span class="keyword">function</span> (<span class="params">el, binding, vnode</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> nSpan = <span class="built_in">document</span>.createElement(<span class="string">'span'</span>),</span><br><span class="line">        nInput = el.querySelector(<span class="string">'input'</span>) || el.querySelector(<span class="string">'textarea'</span>),</span><br><span class="line">        count = +binding.expression || <span class="number">50</span>;</span><br><span class="line">    el.appendChild(nSpan);</span><br><span class="line">    nSpan.innerHTML = <span class="string">'还可以填写'</span>+count+<span class="string">'字'</span>;</span><br><span class="line">    nInput.addEventListener(<span class="string">'input'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> num = count - <span class="keyword">this</span>.value.length;</span><br><span class="line">      <span class="keyword">if</span>(num&lt;=<span class="number">0</span>) &#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">var</span> substr = <span class="keyword">this</span>.value.substring(<span class="number">0</span>,count);</span><br><span class="line">          <span class="keyword">this</span>.value = substr;</span><br><span class="line">          <span class="comment">// 新添加开始</span></span><br><span class="line">          <span class="keyword">var</span> keyArr = vnode.data.model.expression.split(<span class="string">'.'</span>);</span><br><span class="line">          <span class="keyword">var</span> evalStr = <span class="string">'vnode.context._data'</span>;</span><br><span class="line">          keyArr.forEach(<span class="function">(<span class="params">item, index</span>)=&gt;</span> &#123;</span><br><span class="line">            evalStr += <span class="string">'["'</span>+item+<span class="string">'"]'</span>;</span><br><span class="line">          &#125;);</span><br><span class="line">          <span class="built_in">eval</span>(evalStr+<span class="string">'="'</span>+<span class="keyword">this</span>.value+<span class="string">'"'</span>)</span><br><span class="line">          <span class="comment">// 新添加结束</span></span><br><span class="line">        &#125;, <span class="number">10</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      nSpan.innerHTML = <span class="string">'还可以填写'</span>+(num&lt;<span class="number">0</span>?<span class="number">0</span>:num)+<span class="string">'字'</span>;</span><br><span class="line">    &#125;, <span class="literal">false</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><p>新添加的内容只有几行，其实是为了修改第一版的bug，当在input里输入内容的时候，超过一定字数后，进入延迟函数，这里把input的value值更改了，但是并没有更改这个指令所在组件里v-model的值，所以，这里需要修正。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vnode是这个指令所在的组建的虚拟dom</span></span><br><span class="line"><span class="comment">// vnode.data.model.expression 这就可以直接找到v-model里的变量名</span></span><br><span class="line"><span class="keyword">var</span> keyArr = vnode.data.model.expression.split(<span class="string">'.'</span>);</span><br><span class="line"><span class="comment">// vnode知道了，vnode.context很显然就是组件所在的父级组件，可以通过 _data 这个数据去改变v-model里变量的值。</span></span><br><span class="line"><span class="keyword">var</span> evalStr = <span class="string">'vnode.context._data'</span>;</span><br><span class="line">keyArr.forEach(<span class="function">(<span class="params">item, index</span>)=&gt;</span> &#123;</span><br><span class="line">  evalStr += <span class="string">'["'</span>+item+<span class="string">'"]'</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 经过上边的循环是因为这种情况, v-model="formitem.name"，像这种的值，而不是v-model="name"这种。</span></span><br><span class="line"><span class="comment">// 最后需要eval来执行这些字符串组成的代码。</span></span><br><span class="line"><span class="built_in">eval</span>(evalStr+<span class="string">'="'</span>+<span class="keyword">this</span>.value+<span class="string">'"'</span>)</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>js图片下载之后端部分</title>
      <link href="/2019/02/27/js%E5%9B%BE%E7%89%87%E4%B8%8B%E8%BD%BD%E4%B9%8B%E5%90%8E%E7%AB%AF%E9%83%A8%E5%88%86/"/>
      <url>/2019/02/27/js%E5%9B%BE%E7%89%87%E4%B8%8B%E8%BD%BD%E4%B9%8B%E5%90%8E%E7%AB%AF%E9%83%A8%E5%88%86/</url>
      
        <content type="html"><![CDATA[<p>nodejs服务返回图片二进制数据<br><a id="more"></a></p><h2 id="js图片下载之后端部分"><a href="#js图片下载之后端部分" class="headerlink" title="js图片下载之后端部分"></a>js图片下载之后端部分</h2><p>本站<a href="/2019/02/27/js图片下载之前端部分/">《js图片下载之前端部分》</a>,写了如何利用js来下载图片，第二种方式需要后端返回图片的二进制数据，这篇文章我来写一下如何使用nodejs向前端返图片的二进制数据，我总结了三种方法。</p><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app.post(<span class="string">'/downimg'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  res.header(<span class="string">"Content-Type"</span>, <span class="string">"application/octet-stream"</span>);</span><br><span class="line">  fs.createReadStream(<span class="string">'./img/1.jpg'</span>)</span><br><span class="line">  .pipe(res);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这种方法利用了stream和pipe，一行代码就解决了，利用fs去读取图片的流只有，用pipe方法把流转给res，res自动就把数据返回给前端。</p><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">app.post(<span class="string">'/downimg'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.header(<span class="string">"Content-Type"</span>, <span class="string">"application/octet-stream"</span>);</span><br><span class="line">  <span class="keyword">var</span> data = <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">var</span> readerStream = fs.createReadStream(process.cwd() + <span class="string">'/img/1.jpg'</span>);</span><br><span class="line">  <span class="comment">// 设置编码为 binary 必须</span></span><br><span class="line">  readerStream.setEncoding(<span class="string">'binary'</span>);</span><br><span class="line">  readerStream.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>) </span>&#123;</span><br><span class="line">     data += chunk;</span><br><span class="line">  &#125;);</span><br><span class="line">  readerStream.on(<span class="string">'end'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 必须加上binary，返回的是二进制</span></span><br><span class="line">    res.end(data, <span class="string">'binary'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  readerStream.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(err.stack);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这个方法其实跟第一个差不多，都是使用了fs的流来读取图片，但是没有使用pipe直接把数据流转给res，需要自己监听数据来处理，这里我试验了好多方式，终于成功了，注意readerStream.setEncoding(‘binary’)和res.end(data, ‘binary’)，都需要加上binary格式。</p><h3 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">app.post(<span class="string">'/downimg'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.header(<span class="string">"Content-Type"</span>, <span class="string">"application/octet-stream"</span>);</span><br><span class="line">    fs.readFile(<span class="string">'./img/1.jpg'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (err) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</span><br><span class="line">     &#125;</span><br><span class="line">     res.end(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这种方法时最简单的，但是遇到大文件会影响计算机的性能。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>最后整体代码贴一下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"> </span><br><span class="line">app.all(<span class="string">'*'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    res.header(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"*"</span>);</span><br><span class="line">    res.header(<span class="string">"Access-Control-Allow-Headers"</span>, <span class="string">"X-Requested-With"</span>);</span><br><span class="line">    res.header(<span class="string">"Access-Control-Allow-Methods"</span>,<span class="string">"PUT,POST,GET,DELETE,OPTIONS"</span>);</span><br><span class="line">    res.header(<span class="string">"X-Powered-By"</span>,<span class="string">' 3.2.1'</span>)</span><br><span class="line">    res.header(<span class="string">"Content-Type"</span>, <span class="string">"application/json;charset=utf-8"</span>);</span><br><span class="line">    next();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// stream+pipe方式一</span></span><br><span class="line">app.post(<span class="string">'/downimg'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  res.header(<span class="string">"Content-Type"</span>, <span class="string">"application/octet-stream"</span>);</span><br><span class="line">  fs.createReadStream(<span class="string">'./img/1.jpg'</span>)</span><br><span class="line">  .pipe(res);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// stream方式二</span></span><br><span class="line">app.post(<span class="string">'/downimg'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.header(<span class="string">"Content-Type"</span>, <span class="string">"application/octet-stream"</span>);</span><br><span class="line">  <span class="keyword">var</span> data = <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">var</span> readerStream = fs.createReadStream(process.cwd() + <span class="string">'/img/1.jpg'</span>);</span><br><span class="line">  <span class="comment">// 设置编码为 binary 必须</span></span><br><span class="line">  readerStream.setEncoding(<span class="string">'binary'</span>);</span><br><span class="line">  readerStream.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>) </span>&#123;</span><br><span class="line">     data += chunk;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  readerStream.on(<span class="string">'end'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 必须加上binary，返回的是二进制</span></span><br><span class="line">    res.end(data, <span class="string">'binary'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  readerStream.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(err.stack);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接读取整个文件方式三</span></span><br><span class="line">app.post(<span class="string">'/downimg'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.header(<span class="string">"Content-Type"</span>, <span class="string">"application/octet-stream"</span>);</span><br><span class="line">    fs.readFile(<span class="string">'./img/1.jpg'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (err) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</span><br><span class="line">     &#125;</span><br><span class="line">     res.end(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> server = app.listen(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"应用实例，访问地址为 http://%s:%s"</span>, <span class="string">'127.0.0.1'</span>, <span class="string">'3000'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图片处理 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>js图片下载之前端部分</title>
      <link href="/2019/02/27/js%E5%9B%BE%E7%89%87%E4%B8%8B%E8%BD%BD%E4%B9%8B%E5%89%8D%E7%AB%AF%E9%83%A8%E5%88%86/"/>
      <url>/2019/02/27/js%E5%9B%BE%E7%89%87%E4%B8%8B%E8%BD%BD%E4%B9%8B%E5%89%8D%E7%AB%AF%E9%83%A8%E5%88%86/</url>
      
        <content type="html"><![CDATA[<p>js控制图片下载<br><a id="more"></a></p><h2 id="js图片下载之前端部分"><a href="#js图片下载之前端部分" class="headerlink" title="js图片下载之前端部分"></a>js图片下载之前端部分</h2><p>这两天有一个小需求，就是点击页面中的下载按钮，下载指定的图片。经过一番的小研究，发现想实现这个功能，基本上都用到a标签的download属性，也就a标签的href指向图片地址，加上download属性后，点a标签就可以下载图片了。但是，有个问题，这需要在同域名下才好用，跨域貌似都不行，所以，在跨域的情况下就得另想办法。我总结了两种方法，一一道来。</p><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>利用canvas，就是有一个图片地址，利用canvas把图片画出来，之后再通过canvas的toDataURL方法，将图片转为base64的数据，再把这个数据赋值给a标签的href属性，就可以了。这里注意一点，canvas调取toDataURL方法时，如果是跨域图片需要后台允许跨域，还需要在img标签的”crossOrigin”属性设置为’Anonymous’才管用，最后贴出具体代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">downloadImg</span>(<span class="params">url</span>)</span>&#123;</span><br><span class="line">        <span class="comment">// 通过构造函数来创建的 img 实例，在赋予 src 值后就会立刻下载图片，相比 createElement() 创建 &lt;img&gt; 省去了 append()，也就避免了文档冗余和污染</span></span><br><span class="line">        <span class="keyword">var</span> Img = <span class="keyword">new</span> Image(),</span><br><span class="line">            dataURL=<span class="string">''</span>;</span><br><span class="line">        Img.setAttribute(<span class="string">"crossOrigin"</span>,<span class="string">'Anonymous'</span>); <span class="comment">// 这里允许了跨域图片</span></span><br><span class="line">        Img.src=url;</span><br><span class="line">        Img.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">// 要先确保图片完整获取到，这是个异步事件</span></span><br><span class="line">            <span class="keyword">var</span> canvas = <span class="built_in">document</span>.createElement(<span class="string">"canvas"</span>), <span class="comment">// 创建canvas元素</span></span><br><span class="line">                width=Img.width, <span class="comment">// 确保canvas的尺寸和图片一样</span></span><br><span class="line">                height=Img.height;</span><br><span class="line">            canvas.width=width;</span><br><span class="line">            canvas.height=height;</span><br><span class="line">            canvas.getContext(<span class="string">"2d"</span>).drawImage(Img,<span class="number">0</span>,<span class="number">0</span>,width,height); <span class="comment">// 将图片绘制到canvas中</span></span><br><span class="line">            dataURL=canvas.toDataURL(<span class="string">'image/jpeg'</span>); <span class="comment">// 转换图片为dataURL</span></span><br><span class="line">            <span class="keyword">var</span> a = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>),</span><br><span class="line">        body = <span class="built_in">document</span>.body;</span><br><span class="line">            a.download = <span class="string">'img.jpg'</span>;</span><br><span class="line">            a.href = dataURL;</span><br><span class="line">            body.append(a); </span><br><span class="line">            a.click();</span><br><span class="line">            body.removeChild(a);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>第二种方法就需要后端配合了，前端使用ajax请求到图片的二进制数据，之后利用了FileReader这个API，具体看代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">downloadImg</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">  xhr.open(<span class="string">'POST'</span>, url, <span class="literal">true</span>);    <span class="comment">// 请求方式</span></span><br><span class="line">  xhr.responseType = <span class="string">"blob"</span>;  <span class="comment">// 返回类型blob</span></span><br><span class="line">  xhr.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 请求完成</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.status === <span class="number">200</span>) &#123;</span><br><span class="line">      <span class="comment">// 返回200</span></span><br><span class="line">      <span class="keyword">var</span> blob = <span class="keyword">this</span>.response;</span><br><span class="line">      <span class="keyword">var</span> reader = <span class="keyword">new</span> FileReader();</span><br><span class="line">      reader.readAsDataURL(blob);  <span class="comment">// 转换为base64，可以直接放入a标签的href</span></span><br><span class="line">      reader.onload = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 转换完成，创建一个a标签用于下载</span></span><br><span class="line">        <span class="keyword">var</span> a = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>),</span><br><span class="line">        body = <span class="built_in">document</span>.body;</span><br><span class="line">        a.download = <span class="string">'img.jpg'</span>;</span><br><span class="line">        a.href = e.target.result;</span><br><span class="line">        body.append(a); </span><br><span class="line">        a.click();</span><br><span class="line">        body.removeChild(a);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 发送ajax请求</span></span><br><span class="line">  xhr.send()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个方法需要后端发送图片的二进制数据，我也写了nodejs的发送方法，见<a href="/2019/02/27/js图片下载之后端部分/">《js图片下载之后端部分》</a></p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
            <tag> 图片处理 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>浏览器消息提示Notification</title>
      <link href="/2019/02/14/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B6%88%E6%81%AF%E6%8F%90%E7%A4%BANotification/"/>
      <url>/2019/02/14/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B6%88%E6%81%AF%E6%8F%90%E7%A4%BANotification/</url>
      
        <content type="html"><![CDATA[<p>浏览器自带的消息提示框<br><a id="more"></a></p><h2 id="浏览器消息提示Notification"><a href="#浏览器消息提示Notification" class="headerlink" title="浏览器消息提示Notification"></a>浏览器消息提示Notification</h2><p>这两天有一个新需求，微信网页版有这个功能，就是当浏览器最小化后，微信来消息，这时在电脑桌面的右下角会有消息提示框。<br>这个功能用到了浏览器新特性的Notification接口，虽说兼容性不好，但是在现代浏览器上使用还是可以的。<br>直接贴出demo:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">  &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">  &lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"ie=edge"</span>&gt;</span><br><span class="line">  &lt;title&gt;Notification&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;button id=<span class="string">"message"</span>&gt;弹消息&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">  &lt;button id="message-delay"&gt;弹消息延迟&lt;/</span>button&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">  var btn = document.getElementById('message');</span></span><br><span class="line"><span class="regexp">  var btnDelay = document.getElementById('message-delay');</span></span><br><span class="line"><span class="regexp">  btn.addEventListener('click', ()=&gt; &#123;</span></span><br><span class="line"><span class="regexp">    notifyMe(&#123;</span></span><br><span class="line"><span class="regexp">      title: '消息通知',</span></span><br><span class="line"><span class="regexp">      body: '菜品订单',</span></span><br><span class="line"><span class="regexp">      icon: './</span>asset/image/icon.png<span class="string">'</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string">  &#125;, false);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  btnDelay.addEventListener('</span>click<span class="string">', ()=&gt; &#123;</span></span><br><span class="line"><span class="string">      setTimeout(()=&gt; &#123;</span></span><br><span class="line"><span class="string">        notifyMe(&#123;</span></span><br><span class="line"><span class="string">          title: '</span>消息通知<span class="string">',</span></span><br><span class="line"><span class="string">          body: '</span>菜品订单<span class="string">',</span></span><br><span class="line"><span class="string">          icon: '</span>./asset/image/icon.png<span class="string">'</span></span><br><span class="line"><span class="string">        &#125;);</span></span><br><span class="line"><span class="string">      &#125;, 5000);</span></span><br><span class="line"><span class="string">  &#125;, false);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  function notifyMe(options) &#123;</span></span><br><span class="line"><span class="string">    // if(!document.hidden) return; // 判断浏览器是否最小化</span></span><br><span class="line"><span class="string">    // 先检查浏览器是否支持</span></span><br><span class="line"><span class="string">    if (!("Notification" in window)) &#123;</span></span><br><span class="line"><span class="string">      alert("This browser does not support desktop notification");</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    // 检查用户是否同意接受通知</span></span><br><span class="line"><span class="string">    else if (Notification.permission === "granted") &#123;</span></span><br><span class="line"><span class="string">      // If it'</span>s okay <span class="keyword">let</span><span class="string">'s create a notification</span></span><br><span class="line"><span class="string">      var notification = new Notification(options.title, &#123;</span></span><br><span class="line"><span class="string">        body: options.body,</span></span><br><span class="line"><span class="string">        icon: options.icon,</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      &#125;);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    // 否则我们需要向用户获取权限</span></span><br><span class="line"><span class="string">    else if (Notification.permission !== '</span>denied<span class="string">') &#123;</span></span><br><span class="line"><span class="string">      Notification.requestPermission(function (permission) &#123;</span></span><br><span class="line"><span class="string">        // 如果用户同意，就可以向他们发送通知</span></span><br><span class="line"><span class="string">        if (permission === "granted") &#123;</span></span><br><span class="line"><span class="string">          var notification = new Notification(options.title, &#123;</span></span><br><span class="line"><span class="string">            body: options.body,</span></span><br><span class="line"><span class="string">            icon: options.icon,</span></span><br><span class="line"><span class="string">          &#125;);</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    // 过3秒关闭提示框</span></span><br><span class="line"><span class="string">    setTimeout(function() &#123;</span></span><br><span class="line"><span class="string">      notification.close();</span></span><br><span class="line"><span class="string">    &#125;, 3000);</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>git常用命令</title>
      <link href="/2019/01/31/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2019/01/31/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>工作中常用的git命令小总结<br><a id="more"></a></p><h2 id="git常用命令"><a href="#git常用命令" class="headerlink" title="git常用命令"></a>git常用命令</h2><p>git在我们工作中使用的很多，还有想github这样牛逼的代码托管网站，所以，git这个版本管理工具越来越多的被使用，其实git使用起来还是很复杂的，但是，我平时只是提交代码，所以就用到了几个命令而已，在这里做一下记录。</p><h3 id="先来个简单点的"><a href="#先来个简单点的" class="headerlink" title="先来个简单点的"></a>先来个简单点的</h3><ul><li><p>首先就是把现有的项目clone到本地。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/jixoba/jQuery-Seat-Charts.git</span><br></pre></td></tr></table></figure></li><li><p>之后就是我常用的几个提交命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git status  // 查看更改的文件有哪些</span><br><span class="line">git add .   // add后边.的话，就是把所有改动的文件添加进去</span><br><span class="line">git commit -m &quot;提交log信息&quot; // 提交信息</span><br><span class="line">git push    // 最后把更改内容推到远程仓库中</span><br></pre></td></tr></table></figure></li></ul><p>以上就是我经常用到的简单命令，如果有分支的话可能会复杂点，根据提示就可以了</p><h3 id="说点复杂的"><a href="#说点复杂的" class="headerlink" title="说点复杂的"></a>说点复杂的</h3><ul><li><p>新建分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch branchname // branchname就是分支名</span><br></pre></td></tr></table></figure></li><li><p>查看分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch -a  //查看所有分支</span><br><span class="line">git branch -r  //查看远程分支</span><br></pre></td></tr></table></figure></li><li><p>本地切换分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout branchname</span><br></pre></td></tr></table></figure></li><li><p>克隆带有分支的项目方法一</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b template https://github.com/iview/iview-admin.git  // clone template分支</span><br></pre></td></tr></table></figure></li><li><p>克隆带有分支的项目方法二</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/iview/iview-admin.git // clone整个项目</span><br><span class="line"></span><br><span class="line">git branch -a  //列出所有分支名称如下： * 号表示当前分支</span><br><span class="line">  * dev  </span><br><span class="line">  remotes/origin/HEAD -&gt; origin/dev</span><br><span class="line">  remotes/origin/desktop</span><br><span class="line">  remotes/origin/template</span><br></pre></td></tr></table></figure></li><li><p>接下来，可以在本地新建分支并与远程仓库的分支进行关联了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b template origin/template   // 作用是checkout远程仓库origin的分支template，在本地起名为template分支，并切换到本地的template分支</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>jquery座位插件</title>
      <link href="/2019/01/29/jquery%E5%BA%A7%E4%BD%8D%E6%8F%92%E4%BB%B6/"/>
      <url>/2019/01/29/jquery%E5%BA%A7%E4%BD%8D%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>一个画座位图的jquery插件<br><a id="more"></a></p><h2 id="jquery座位插件"><a href="#jquery座位插件" class="headerlink" title="jquery座位插件"></a>jquery座位插件</h2><p>最近这两天在画飞机的座位布局图和选座系统，本来想自己直接用原生画出来的，但是领导说其他部门做过相关功能，别的部门用的是jQuery-Seat-Charts这个插件，所以我也得使用。<br><a href="https://github.com/jixoba/jQuery-Seat-Charts" target="_blank" rel="noopener">这里是插件地址，我fork了下来</a><br>其实，这个插件的使用很简单，按照giyhub的文档就可以使用，因为需要定制开发，所以我大致的看了一下源码，觉得很好，主要是它在每个座位上加的事件，如果是我写的话，可能使用click事件，但是它用的focus事件和blur事件，正常情况下只有form表单的一些元素才有focus事件，但是想在div上也使用focus事件的话，需要给这个div加上tabIndex属性，一般情况下设为-1，就可以直接使用div的el.focus()方法了，我觉得这个好处就是，当点击其它座位时，之前focus的座位会触发blur事件，可以在这里做一些操作，简化了代码。<br>以后再画座位的时候还可以使用这个插件，比如电影院选做系统，动车，飞机等，还是很方便的的。</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jquery </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>手写一个trigger插件</title>
      <link href="/2019/01/22/%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AAtrigger%E6%8F%92%E4%BB%B6/"/>
      <url>/2019/01/22/%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AAtrigger%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>自己写一个简单的trigger来触发事件<br><a id="more"></a></p><h2 id="手写一个trigger插件"><a href="#手写一个trigger插件" class="headerlink" title="手写一个trigger插件"></a>手写一个trigger插件</h2><p>各位小伙伴们，jquery大家超级熟悉吧，jquery的trigger函数一定知道吧，反正我是非常喜欢用它，有时候比如要把一个弹出层隐藏掉，大家可能会去改这个弹出层的css，但是我可能会直接trigger一下这个弹出层取消按钮，因为我懒嘛，哈哈。<br>但是，有时候可能想用trigger的时候，发现并没有使用jquery，额，自己写一个吧，其实，这段代码的核心部分我是参考了百度的一个手势库，好像叫touch.js,当时看的时候貌似这个库已经5年没人维护了，不过，模拟触发事件的代码被我留下了。见下面：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params">root, factory</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span> exports === <span class="string">'object'</span> &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">module</span> === <span class="string">'object'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = factory;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> define === <span class="string">'function'</span> &amp;&amp; define.amd)</span><br><span class="line">define([], factory);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> exports === <span class="string">'object'</span>)</span><br><span class="line">exports[<span class="string">"jinuxTrigger"</span>] = factory;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">root[<span class="string">"jinuxTrigger"</span>] = factory;</span><br><span class="line">&#125;)(<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span>(<span class="params">el, evt, detail</span>) </span>&#123;</span><br><span class="line">detail = detail || &#123;&#125;;</span><br><span class="line">    <span class="keyword">var</span> e, opt = &#123;</span><br><span class="line">            bubbles: <span class="literal">true</span>,</span><br><span class="line">            cancelable: <span class="literal">true</span>,</span><br><span class="line">            detail: detail</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> CustomEvent !== <span class="string">'undefined'</span>) &#123;</span><br><span class="line">            e = <span class="keyword">new</span> CustomEvent(evt, opt);</span><br><span class="line">            <span class="keyword">if</span> (el) &#123;</span><br><span class="line">                el.dispatchEvent(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            e = <span class="built_in">document</span>.createEvent(<span class="string">"CustomEvent"</span>);</span><br><span class="line">            e.initCustomEvent(evt, <span class="literal">true</span>, <span class="literal">true</span>, detail);</span><br><span class="line">            <span class="keyword">if</span> (el) &#123;</span><br><span class="line">                el.dispatchEvent(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ex) &#123;</span><br><span class="line">        <span class="built_in">console</span>.warn(<span class="string">"jinux-trigger is not supported by environment."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>再附上一个小demo<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>jinux-trigger<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./trigger.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>页面加载进来之后，等待3秒后代码触发按钮的点击事件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>点击...<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">'button'</span>);</span></span><br><span class="line"><span class="javascript">    btn.addEventListener(<span class="string">'click'</span>,()=&gt;&#123;</span></span><br><span class="line"><span class="javascript">        alert(<span class="string">'点击按钮被点击了！！！'</span>);</span></span><br><span class="line"><span class="javascript">    &#125;,<span class="literal">false</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">//页面加载进来之后，等待3秒后代码触发按钮的点击</span></span></span><br><span class="line"><span class="javascript">    setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">        jinuxTrigger(btn,<span class="string">'click'</span>);</span></span><br><span class="line"><span class="undefined">    &#125;,3000);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js工具库 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>谷歌黑语法</title>
      <link href="/2019/01/14/%E8%B0%B7%E6%AD%8C%E9%BB%91%E8%AF%AD%E6%B3%95/"/>
      <url>/2019/01/14/%E8%B0%B7%E6%AD%8C%E9%BB%91%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>关于搜索引擎的一些使用技巧<br><a id="more"></a></p><h2 id="谷歌黑语法"><a href="#谷歌黑语法" class="headerlink" title="谷歌黑语法"></a>谷歌黑语法</h2><p>平时，我们经常用百度来搜索一些东西，由于墙的原因，我们很少用谷歌，但是我们工作生活中使用百度就已经足够了。<br>今天这篇文章介绍一下谷歌搜索的使用技巧，因为谷歌是所搜的老大，所以其它搜索引擎也来效仿谷歌，因而，下边介绍的这些搜索知识，基本上所有的搜索引擎都会适用的。</p><h3 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h3><p>谷歌的默认搜索是and逻辑，意思就是，我们在输入关键字后进行搜索时，如输入：“program google”后，会搜出包含“program”和“google”的文件内容，如下图1所示。<br><img src="/2019/01/14/谷歌黑语法/1.png" alt="img"><br>说到这里，我就插入一个小知识点：基础布尔逻辑。<br>对于一个搜索引擎来说，进行搜索的时候是要搜索到匹配到所有关键词的页面，还是包含关键词中的任意关键词就可以，取决于一个搜索引擎的一些特别算法，称之为搜索引擎的布尔逻辑默认值。<br>而google就是用and作为默认逻辑（搜索到所有的关键词），当然这个前提是我们没有输入一些特殊的命令。如果你不确定你要搜索的内容，或者你想搜索两个中的任意一个，那么就要使用关键词“OR”。注意：OR是大写的，小写是不起作用的，而且，每一个关键词与“OR”之间是有一个空格的，我们来看一下搜索结果。<br><img src="/2019/01/14/谷歌黑语法/2.png" alt="img"><br>当然，可以预想的是，google的结果要比program多得多，所以结果第一页全是有关google的内容。此外，还可以借助计算机体系语言中的“|”来代替“OR”，效果是一样的。<br>当然，如果你希望搜索“programgoogle”的内容，而不希望这两个单词之间有任何其他的内容，那么就要使用双引号把搜索的内容组成一个词组来达到目的。如下图3所示。<br><img src="/2019/01/14/谷歌黑语法/3.png" alt="img"><br>如上图所示，结果中的programgoogle都是在一起的，没有分割。当然这样的结果比较少，只有2740个，但是看图1，结果却有7亿多个。而且，大部分搜索引擎都有智能断句的功能，如果没有特殊的命令，搜索引擎会一定量的根据大众的语言使用习惯来判断你要搜索什么，而这样的做法，不仅仅没有使搜索引擎显得不听话，反而对大众来讲搜索引擎变得十分智能和高效！<br>但是如果我们只想看到“program”的内容，而不希望看到“google”的内容，就可以把“-”（减号或者破折号）应用到搜索当中去，语法为“program -google”，注意，“-”之前是有一个空格的，而其后却是和下一个关键词是紧紧相连的！搜索的结果如下图4所示。可以看得到结果中都会包含program，而不包含google。<br><img src="/2019/01/14/谷歌黑语法/4.png" alt="img"><br>说到这里，还要提一下google的约束扩展问题了。一般来说，当输入关键词后，google会把相关网页和信息的结果呈现在我们面前。然而，有一些单词在搜索引擎中是会被智能忽略的，导致我们得不到想要的结果。比如十分常用的“www”和“the”，基本上任何一个网页上都会找到的东西，就会被google自动忽略（不要觉得这样不好，还是那个道理，在实际引用当中这样做反而显得更加高效和智能）。如果我们不想忽略这些词进行查询，就得在这些关键词的前面加上符号“+”。如下图5所示：<br><img src="/2019/01/14/谷歌黑语法/5.png" alt="img"><br>看上去两者好像没有什么大的区别，其实仔细比较一下搜索结果就可以看得出，加上加号的搜索结果有一万多个，而不加加号的结果却有着55亿多！而因为google和www的关联度比较高，所以在前面的结果表现的差别不大。<br>除了上述字符之外，一些搜索引擎支持一种叫做“stemming”（填充）的技术。Stemming是指在查询的关键词中添加一些通配符，通常是“*”，有时候也可能是“？”，这些通配符的作用是要求搜索引擎进行查询是可以返回多个不同的结果。其中通配符代表占位，可以匹配其他任意字母和单词，而其他的字或词组与用户输入的相同。如我们想要搜索“Lionel Messi”的内容，却忘记了第一个单词的一些拼写，就可以输入“l*Messi”进行查询，注意：此处整个字符串是要用一个英文半角双引号括住的！结果如下图所示。<br><img src="/2019/01/14/谷歌黑语法/6.png" alt="img"><br>可以看到，google自动匹配出Lionel Messi的内容并且进行了搜索。这样的方式有利于我们只能记住单词或短语的一部分的内容时使用。<br>基本的语法就讲到这里，上述的内容也没有列全，因为有些搜索功能不太常用。不过，这些语法就已经够我们日常使用的了，基本语法就是做基本的事，google也有一些高级的语法，见下边高级语法。</p><h3 id="高级语法"><a href="#高级语法" class="headerlink" title="高级语法"></a>高级语法</h3><h4 id="intitle"><a href="#intitle" class="headerlink" title="intitle"></a>intitle</h4><p>首先要介绍的就是“intitle:”的用法，这个串的作用是将搜索的范围局限在标题上。在关键词前面加上这个，就会只对网页的标题进行搜索并且配对，最后将结果返回给用户。例如输入“intitle:program moon”进行搜索，就会返回如下图所示的结果。<br><img src="/2019/01/14/谷歌黑语法/7.png" alt="img"><br>但是可以看到，貌似搜索结果中只出现了关于program的内容，而并没有moon相关的内容，这里其实还是牵扯到搜索引擎的基础布尔逻辑问题，在intitle:语法上，google会检索所有的网页，只要出现program或者moon其中的一个就会被匹配，意料之中的是，关于program的内容肯定是要远远多于moon的内容的，所以搜索结果里关于program的内容占据了主导，可以理解为moon这个关键词被一定量的智能忽略了。但是如果我们想要找到网页标题中既有program又有moon的网页呢?那么我们就要使用“intitle:”的一个变体“allintitle:”，使用这个前缀后，就能得到我们想要的结果了。如下图所示，除了第一条为google的图片推荐，其余的结果中网页的标题既含有program这个关键词，又含有moon这个关键词。<br><img src="/2019/01/14/谷歌黑语法/8.png" alt="img"></p><h4 id="intext"><a href="#intext" class="headerlink" title="intext"></a>intext</h4><p>看到这个单词，大概就可以猜到它的意义了，“intext:”是用来搜索网页正文内容的，这样就可以忽略网页中的超文本链接、URL和题目。我们输入“intext:2018 program”进行搜索，结果如下图所示，结果中显示的网页大部分标题几乎没有规律，但是网页的索引中都包含着 “2018 program”，但是因为2018和program的同时出现的网页实在比较少，两个关键词的关联度实在不高（笔者此时的时间为2016年12月25日00:07:10），因为现在才是2016年，如果换成“2016 program”我相信应该会有更多的结果出现。但是我们要明白，这时搜索引擎关注的内容是网页的正文。与之相对应的也有一个变体：“allintext:”，用法和上面的“allintitle”相似，我就不做过多的介绍了。<br><img src="/2019/01/14/谷歌黑语法/9.png" alt="img"><br>到这里恐怕就有读者要问了，这与我们平时的搜索相比没有什么高级的地方啊？确实，就平时的搜索来讲，这个语法的意义确实不太重大，但是在某些领域，例如黑客作为一名攻击者，构造好关键词配合适当的语法就可以进行撒网式的攻击，这个呢，我们点到为止，这里就不谈了。</p><h4 id="inanchor"><a href="#inanchor" class="headerlink" title="inanchor"></a>inanchor</h4><p>这个语法的意思是在页面的链接锚点进行搜索。<br>链接锚点指的是一个链接的描述文本，如这样的一段HTML代码：&lt;a href=<a href="https://www.baidu.com&gt;百度" target="_blank" rel="noopener">https://www.baidu.com&gt;百度</a>，链接的锚点就是“百度”了。<br>我们搜索“inanchor:login”就可以搜索到有那些含有锚点的网页了，如下图所示。当然，这个语法也有一个变体“allinanchor:”，意思也与前面的类似。<br><img src="/2019/01/14/谷歌黑语法/10.png" alt="img"></p><h4 id="site"><a href="#site" class="headerlink" title="site"></a>site</h4><p>这个语法是把搜索限制在站点域名之内。例如我们搜索“program site:google.com”，结果如下图所示，这里呢，我们通常不需要加上前面的www，这样搜索的结果就会是包括所有含有google.com域名的有关内容，包括顶级域名和二级域名甚至三级域名的内容。也就是说我们甚至可以通过搜索，确定google.com大概有多少个子域名！<br><img src="/2019/01/14/谷歌黑语法/11.png" alt="img"></p><h4 id="inurl"><a href="#inurl" class="headerlink" title="inurl"></a>inurl</h4><p>inurl:会将搜索的范围限制在URL或者网站的页面上，这个语法对于查找搜索和帮助是很有用的，不仅适合我们普通的搜索，在黑客搜索中用处也很大。例如我们输入“inurl:password”，结果如下图所示，结果显示了所有URL中含有password的网页。另外，这个语法也有一个变体：“allinurl:”，用法与前面的相似。<br><img src="/2019/01/14/谷歌黑语法/12.png" alt="img"><br>在黑客领域，inurl和site的使用是十分的频繁的，利用他们组合可以搜索到有用的信息，如我们可以使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">“site:google.com –inurl:www.google.com”，而这个语法的含义就是搜索google到底有多少个子域名。</span><br></pre></td></tr></table></figure></p><h4 id="link"><a href="#link" class="headerlink" title="link"></a>link</h4><p>这个的功能是查询所有链接到某个特定URL上的列表。要注意的是，是特定的URL页面，如输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">“link:www.baidu.com”</span><br></pre></td></tr></table></figure></p><p>进行搜索，如下图所示，就会返回所有链接到百度主页的网页了。因此，我们同样可以指定特定的URL页面来进行搜索。<br><img src="/2019/01/14/谷歌黑语法/13.png" alt="img"></p><h4 id="cache"><a href="#cache" class="headerlink" title="cache"></a>cache</h4><p>Cache可以帮助我们查找到google索引过的页面副本，它最大的好处就是即使源文件界面不存在了，或者变成了其它的内容，我们依然可以搜索的到。例如输入:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">“cache：www.baidu.com”</span><br></pre></td></tr></table></figure></p><p>结果如下所示，可以看到，格式虽然乱糟糟的，但是依稀可以从中获取一些有用的信息的。在国内的搜索引擎上，可能也有类似的功能，比如百度的网页快照，其功能与这个类似。<br><img src="/2019/01/14/谷歌黑语法/14.png" alt="img"></p><h4 id="filetype"><a href="#filetype" class="headerlink" title="filetype"></a>filetype</h4><p>filetype是指搜索指定后缀的文件。这个不太常用，但是在黑客领域有一定的作用。但是我们的重点是讲解语法，所以这里就一笔带过（关于filetype的一些其他内容我会在以后的博文中展示），如下图所示，输入“filetype:mdb”，结果就会显示出一些网站的数据库文件。<br><img src="/2019/01/14/谷歌黑语法/15.png" alt="img"></p><h4 id="related"><a href="#related" class="headerlink" title="related"></a>related</h4><p>这个语法是用于搜索与某些页面相关的网站的，可以辅助我们搜索同类的页面。比如我们输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">“related:www.google.com”</span><br></pre></td></tr></table></figure></p><p>显示的结果都是一些其他的搜索引擎。<br><img src="/2019/01/14/谷歌黑语法/16.png" alt="img"></p><h4 id="info"><a href="#info" class="headerlink" title="info"></a>info</h4><p>这个语法可以搜索到关于一个URL的更多信息的页面列表，这里的信息包括这个网页的cache，还有与这个网页相似的网页等等，注意下面的英文信息就好。输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">“info:www.google.com”</span><br></pre></td></tr></table></figure></p><p>结果如下图所示。<br><img src="/2019/01/14/谷歌黑语法/17.png" alt="img"></p><p>好了，大概就这么多了，还用别的这里就不介绍了，对于我这种小白来说已经够用的了。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络基础 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>es6-async-await</title>
      <link href="/2019/01/03/es6-async-await/"/>
      <url>/2019/01/03/es6-async-await/</url>
      
        <content type="html"><![CDATA[<p>es6中async-await的demo<br><a id="more"></a></p><h2 id="es6-async-await"><a href="#es6-async-await" class="headerlink" title="es6-async-await"></a>es6-async-await</h2><p>es6现在已经在项目中使用了，async偶尔用，所以要用的时候总是忘记，写个小demo，用的时候看一眼，哈哈<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;es7-<span class="keyword">async</span>-<span class="keyword">await</span>&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;es7-<span class="keyword">async</span>-<span class="keyword">await</span>&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="comment">//写一个返回Promise的异步函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">asyncTime</span>(<span class="params">val, ms</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">resolve(val);</span><br><span class="line">&#125;,ms);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//async函数</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">testAsync</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">let</span> a = <span class="keyword">await</span> asyncTime(<span class="number">1</span>, <span class="number">1000</span>); <span class="comment">//a的值就是Promise函数里面resolve的参数值</span></span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">await</span> asyncTime(a+<span class="number">1</span>, <span class="number">1000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br><span class="line"><span class="keyword">let</span> c = <span class="keyword">await</span> asyncTime(b+<span class="number">1</span>, <span class="number">1000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(c);</span><br><span class="line"><span class="keyword">let</span> d = <span class="keyword">await</span> <span class="number">123</span>; <span class="comment">//await后面可以不是Promise函数，但是会自动包装成一个Promise函数并且立即向后执行</span></span><br><span class="line"><span class="built_in">console</span>.log(d);</span><br><span class="line"><span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line">testAsync().then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'async函数的then函数-&gt;'</span>,res);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//async函数</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">testAsync_2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">let</span> a = <span class="keyword">await</span> testAsync(); <span class="comment">//因为async本身执行后会返回一个Promise函数(async函数内部return的值只作为async返回的Promise函数的then里的参数传入)，所以此处也可以在await后边写async函数。</span></span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line">testAsync_2().then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'async函数2的then函数-&gt;'</span>,res);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//再来一个多个异步函数执行的例子</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">testAsync_3</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">let</span> a = <span class="keyword">await</span> <span class="built_in">Promise</span>.all([asyncTime(<span class="string">'all1'</span>,<span class="number">2000</span>),asyncTime(<span class="string">'all2'</span>,<span class="number">2000</span>),asyncTime(<span class="string">'all3'</span>,<span class="number">2000</span>)]);</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line">testAsync_3().then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">alert(res);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>github预览静态库页面</title>
      <link href="/2019/01/02/github%E9%A2%84%E8%A7%88%E9%9D%99%E6%80%81%E5%BA%93%E9%A1%B5%E9%9D%A2/"/>
      <url>/2019/01/02/github%E9%A2%84%E8%A7%88%E9%9D%99%E6%80%81%E5%BA%93%E9%A1%B5%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<p>github预览静态库页面<br><a id="more"></a></p><h2 id="github预览静态库页面"><a href="#github预览静态库页面" class="headerlink" title="github预览静态库页面"></a>github预览静态库页面</h2><p>类似于 <a href="https://jinux7.github.io" target="_blank" rel="noopener">https://jinux7.github.io</a> 这样的github静态网站展示大家都知道怎么弄，在网上可以搜索到很多教程，我自己的blog网站就是这么搞的，但是这种方法我发现一个github账户只能弄出一个，今天我想说的是另一种方式，直接可以访问到普通库里的静态页面。<br>这里需要github提供的一个服务地址，见下边：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://htmlpreview.github.io/?https://raw.githubusercontent.com/jixoba/mobile_company/master/index.html</span><br></pre></td></tr></table></figure></p><p>上边的这段地址就可以访问普通库里的静态页面了，注意jixoba/mobile_company这个，是库的名称，只需要更改这个库名，其它地方不需要动。</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>cordova android打包配置详解</title>
      <link href="/2018/12/18/cordova-android%E6%89%93%E5%8C%85%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/"/>
      <url>/2018/12/18/cordova-android%E6%89%93%E5%8C%85%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>cordova打包android app<br><a id="more"></a></p><h2 id="cordova-android打包配置详解"><a href="#cordova-android打包配置详解" class="headerlink" title="cordova android打包配置详解"></a>cordova android打包配置详解</h2><p>前几天在网上看到了cordova的东西，之前有过鼓捣react native和weex，所以看看它有什么特点。<br>由于我用的是win10系统，所以在配置环境的时候相当的麻烦，这里稍微的屡一下。</p><h3 id="一-安装JDK"><a href="#一-安装JDK" class="headerlink" title="一 安装JDK"></a>一 安装JDK</h3><p>JDK是java的开发工具包，因为我们打包安卓的apk文件，安卓是依赖java的，所以这个必须安装。<br>我刚开始安装的是最新版的，但是与cordova版本好像不是很搭，于是安装了JDK8这个版本。<br>安装好了之后要配置环境变量，首先是新建变量名JAVA_HOME，指向JDK的安装目录，之后再配置一下path，指向JDK里的bin目录。<br>再配置一下jre的path，也是指向jre里的bin目录。（jre安装有的直接安装JDK的时候顺便安装了，有的版本需要另外单独安装）</p><h3 id="二-安装SDK"><a href="#二-安装SDK" class="headerlink" title="二 安装SDK"></a>二 安装SDK</h3><p>SDK稍微有点复杂，首先还是下载SDK并且安装，这里需要注意，安装路径，我用的win10，必须安装在 用户/用户名/AppData/Local,<br>其它系统可能无所谓。安装好了之后，还是配置环境变量，新建变量名ANDROID_SDK_HOME，指向安装的SDK目录，再配置path，指向SDK下的<br>tools和platform-tools。</p><h3 id="三-安装Gradle"><a href="#三-安装Gradle" class="headerlink" title="三 安装Gradle"></a>三 安装Gradle</h3><p>Gradle好像是一个打包工具，直接下载安装，之后配置一下Gradle的bin目录环境变量。</p><h3 id="四-安装cordova"><a href="#四-安装cordova" class="headerlink" title="四 安装cordova"></a>四 安装cordova</h3><p>cordova的安装和运行需要nodejs，所以用npm来安装。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g cordova@6.1.1</span><br></pre></td></tr></table></figure></p><p>注意，这里我安装的是6.1.1版本，高版本莫名其妙的报错，这个稳妥一些。<br>之后就是使用cordova来创建项目喽。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cordova create app jinux.com.cn app  // 创建一个项目</span><br><span class="line">cd app // 进入app项目</span><br><span class="line">cordova platform android  // 添加安卓模板</span><br><span class="line">cordova requirements  // 查看打包缺少什么依赖项</span><br><span class="line">cordova build android  // 打包apk</span><br></pre></td></tr></table></figure></p><p>以上的这些命令，在查看依赖项的时候肯定回报一些错误，SDK的一些依赖没有安装，进入SDK文件夹，打开SDK Manager.exe，根据依赖的提示下载相应的包，注意，这里是从谷歌上拉取，所以要开代理哦。<br>第一次build的时候，Gradle需要从网络上下载一堆包，还是注意需要代理拉取谷歌的文件，很慢的，耐心等待。<br>*下面是一个别人写的cordova博文，可供参考<br><a href="http://www.xiaoxiaohan.com/js/58.html#comments" target="_blank" rel="noopener">参考</a></p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cordova </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>setTimeout&amp;async&amp;Promise执行顺序</title>
      <link href="/2018/12/11/setTimeout-async-Promise%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F/"/>
      <url>/2018/12/11/setTimeout-async-Promise%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>setTimeout&amp;async&amp;Promise执行顺序简要分析<br><a id="more"></a></p><h2 id="setTimeout-amp-async-amp-Promise执行顺序"><a href="#setTimeout-amp-async-amp-Promise执行顺序" class="headerlink" title="setTimeout&amp;async&amp;Promise执行顺序"></a>setTimeout&amp;async&amp;Promise执行顺序</h2><p>看到标题，觉得这种需求在实际项目中基本遇不到，是的，我从没有遇到过，而且，要用就用一种，既然用了async，还用啥Promise。不过，网上有一道面试题，据说是今日头条的面试题，考的就是这方面的知识，先贴出代码。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'async1 start'</span>)</span><br><span class="line">    <span class="keyword">await</span> async2()</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'async1 end'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'async2'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'script start'</span>)</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'setTimeout'</span>)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line">async1();</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'promise1'</span>)</span><br><span class="line">    resolve();</span><br><span class="line">&#125; ).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'promise2'</span>)</span><br><span class="line">&#125; )</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'script end'</span>)</span><br></pre></td></tr></table></figure></p><p>答案一会再说。<br>先来分析一下，setTimeout,async,Promise执行的有先顺序。其实，要想研究明白这个问题，需要了解异步执行的宏任务，微任务知识，而且，在浏览器和nodejs环境下还不一样，这里我不对这些知识作深入分析，因为我看了些相关知识，看的晕头转向，所以，我只简单的记一下在浏览器环境下的优先顺序。<br>异步发生的节点是：<br>1.setTimeout的回调函数。<br>2.Promise实例的then方法中的回调函数。<br>3.async函数中await 后面紧跟着的函数（如async2），这个地方比较有意思，进入async2的时候是同步的，async2里边如果都是同步函数，那就继续执行，等执行完毕，返回先关东西后，”await async2()”这句话下边的语句不会马上执行，有点像Promise实例的then方法中的回调一样，需要排队等待。<br>所以，优先顺序是Promise的then方法回调第一，async await 之后的语句排第二，setTimeout的回调排第三。<br>记住了吗？我没有考虑理论知识，只是简单地死记硬背而已。<br>最后，把上边代码的结果写出来，看看与你想的是否一样。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">script start</span><br><span class="line">async1 start</span><br><span class="line">async2</span><br><span class="line">promise1</span><br><span class="line">script end</span><br><span class="line">promise2</span><br><span class="line">async1 end</span><br><span class="line">setTimeout</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>nodejs搭建https服务器</title>
      <link href="/2018/12/07/nodejs%E6%90%AD%E5%BB%BAhttps%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2018/12/07/nodejs%E6%90%AD%E5%BB%BAhttps%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>ssl证书的创建，https服务器的搭建<br><a id="more"></a></p><h2 id="nodejs搭建https服务器"><a href="#nodejs搭建https服务器" class="headerlink" title="nodejs搭建https服务器"></a>nodejs搭建https服务器</h2><p>虽然作者是一名菜鸟前端，但是学习https相关的知识还是必须的。之前看过很多理论的文章，http与https的区别，ssl证书如何起作用的等等，说实话，我都忘记了，今天正好有时间，早上坐地铁就看了相关的文章，刚才写出了一个demo，现在就记录一下整个过程。</p><h3 id="http与https区别"><a href="#http与https区别" class="headerlink" title="http与https区别"></a>http与https区别</h3><ul><li>HTTP: 超文本传输协议 (Hypertext transfer protocol) 是一种详细规定了浏览器和万维网服务器之间互相通信的规则，通过因特网传送万维网文档的数据传送协议。</li><li>HTTPS:（Hypertext Transfer Protocol over Secure Socket Layer），是以安全为目标的HTTP通道，简单讲是HTTP的安全版。即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。 它是一个URI scheme（抽象标识符体系），句法类同http:体系。用于安全的HTTP数据传输。https:URL表明它使用了HTTP，但HTTPS存在不同于HTTP的默认端口及一个加密/身份验证层（在HTTP与TCP之间）。这个系统的最初研发由网景公司进行，提供了身份验证与加密通讯方法，现在它被广泛用于万维网上安全敏感的通讯，例如交易支付方面。<blockquote><p>区别：</p></blockquote></li><li>https协议需要到ca申请证书，一般免费证书很少，需要交费。</li><li>http是超文本传输协议，信息是明文传输，https 则是具有安全性的ssl加密传输协议。</li><li>http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。</li><li>http的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。<h3 id="创建ssl证书"><a href="#创建ssl证书" class="headerlink" title="创建ssl证书"></a>创建ssl证书</h3><h4 id="第一步，安装openssl"><a href="#第一步，安装openssl" class="headerlink" title="第一步，安装openssl"></a>第一步，安装openssl</h4>安装openssl，很简单，按照正常的window软件按照下一步按照就可以，下面是下载地址，注意选择是64bit还是32bit哦,我下载了“Win64 OpenSSL v1.1.1a Ligh”这个版本，因为体积小，所以下载了light的版本。<br><a href="https://slproweb.com/products/Win32OpenSSL.html" target="_blank" rel="noopener">openssl下载地址</a><br>安装好了之后，配置一下环境变量，这样在哪个文件夹下都可以直接使用openssl命令了。<h4 id="第二部，使用openssl创建ssl证书"><a href="#第二部，使用openssl创建ssl证书" class="headerlink" title="第二部，使用openssl创建ssl证书"></a>第二部，使用openssl创建ssl证书</h4>这个步骤还是有点小困难，在网上按照有的教程弄不好使，后来找到一个教程，好使，直接贴出命令行代码。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">#生成私钥key文件：</span><br><span class="line">~ D:\workspace\javascript\nodejs-https&gt;openssl genrsa -out privatekey.pem 1024</span><br><span class="line">Generating RSA private key, 1024 bit long modulus</span><br><span class="line">...........................++++++</span><br><span class="line">........++++++</span><br><span class="line">e is 65537 (0x10001)</span><br><span class="line"></span><br><span class="line">#通过私钥生成CSR证书签名</span><br><span class="line">~ D:\workspace\javascript\nodejs-https&gt;openssl req -new -key privatekey.pem -out certrequest.csr</span><br><span class="line">You are about to be asked to enter information that will be incorporated</span><br><span class="line">into your certificate request.</span><br><span class="line">What you are about to enter is what is called a Distinguished Name or a DN.</span><br><span class="line">There are quite a few fields but you can leave some blank</span><br><span class="line">For some fields there will be a default value,</span><br><span class="line">If you enter &apos;.&apos;, the field will be left blank.</span><br><span class="line">-----</span><br><span class="line">Country Name (2 letter code) [AU]:CN</span><br><span class="line">State or Province Name (full name) [Some-State]:Beijing</span><br><span class="line">Locality Name (eg, city) []:Beijing</span><br><span class="line">Organization Name (eg, company) [Internet Widgits Pty Ltd]:fens.me</span><br><span class="line">Organizational Unit Name (eg, section) []:fens.me</span><br><span class="line">Common Name (eg, YOUR name) []:Conan Zhang</span><br><span class="line">Email Address []:bsspirit@gmail.com</span><br><span class="line"></span><br><span class="line">Please enter the following &apos;extra&apos; attributes</span><br><span class="line">to be sent with your certificate request</span><br><span class="line">A challenge password []:</span><br><span class="line">An optional company name []:</span><br><span class="line"></span><br><span class="line"># 通过私钥和证书签名生成证书文件</span><br><span class="line">~ D:\workspace\javascript\nodejs-https&gt;openssl x509 -req -in certrequest.csr -signkey privatekey.pem -out certificate.pem</span><br><span class="line">Signature ok</span><br><span class="line">subject=/C=CN/ST=Beijing/L=Beijing/O=fens.me/OU=fens.me/CN=Conan Zhang/emailAddress=bsspirit@gmail.com</span><br><span class="line">Getting Private key</span><br></pre></td></tr></table></figure></li></ul><p>注意在通过私钥生成CSR证书签名的时候需要添加一些个人信息。<br>新生成了3个文件：certificate.pem, certrequest.csr, privatekey.pem</p><ul><li>privatekey.pem: 私钥</li><li>certrequest.csr: CSR证书签名</li><li>certificate.pem: 证书文件<br>接下来，直接在nodejs的服务代码中引入相关文件就可以了。<h3 id="nodejs创建https服务器"><a href="#nodejs创建https服务器" class="headerlink" title="nodejs创建https服务器"></a>nodejs创建https服务器</h3>直接贴代码了，这步骤就很简单了<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="built_in">require</span>(<span class="string">'express'</span>)();</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">var</span> https = <span class="built_in">require</span>(<span class="string">'https'</span>);</span><br><span class="line"><span class="keyword">var</span> privateKey  = fs.readFileSync(<span class="string">'./ssl/privatekey.pem'</span>, <span class="string">'utf8'</span>),</span><br><span class="line">    certificate = fs.readFileSync(<span class="string">'./ssl/certificate.pem'</span>, <span class="string">'utf8'</span>);</span><br><span class="line"><span class="keyword">var</span> credentials = &#123;<span class="attr">key</span>: privateKey, <span class="attr">cert</span>: certificate&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> httpServer = http.createServer(app);</span><br><span class="line"><span class="keyword">var</span> httpsServer = https.createServer(credentials, app);</span><br><span class="line"><span class="keyword">var</span> PORT = <span class="number">18080</span>;</span><br><span class="line"><span class="keyword">var</span> SSLPORT = <span class="number">18081</span>;</span><br><span class="line"></span><br><span class="line">httpServer.listen(PORT, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'HTTP Server is running on: http://localhost:%s'</span>, PORT);</span><br><span class="line">&#125;);</span><br><span class="line">httpsServer.listen(SSLPORT, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'HTTPS Server is running on: https://localhost:%s'</span>, SSLPORT);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Welcome</span></span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(req.protocol === <span class="string">'https'</span>) &#123;</span><br><span class="line">        res.status(<span class="number">200</span>).send(<span class="string">'Welcome to Safety Land!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        res.status(<span class="number">200</span>).send(<span class="string">'Welcome!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><p>好了，https服务器搭建完成，原来这么简单。不过，有个问题，因为这个ssl证书属于个人证书，并不是第三方的安全CA证书，所以在浏览器访问https协议时候会有不安全的提醒文字，这个对于我们测试来说是没问题的，如果想在正规的网站上使用，我们还得去阿里云申请CA证书哦。<br>最后，本想把本demo的代码上传到github，不过，代码实在是简单，不传了，直接放个截图得了。<br><img src="/2018/12/07/nodejs搭建https服务器/1.png" alt="img"><br>ssl文件夹里放了3个ssl文件哦。</p>]]></content>
      
      
      <categories>
          
          <category> nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络基础 </tag>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vue-iview Modal组件简单分析</title>
      <link href="/2018/12/04/vue-iview-Modal%E7%BB%84%E4%BB%B6%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90/"/>
      <url>/2018/12/04/vue-iview-Modal%E7%BB%84%E4%BB%B6%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>vue-iview Modal组件简单分析<br><a id="more"></a></p><h2 id="vue-iview-Modal组件简单分析"><a href="#vue-iview-Modal组件简单分析" class="headerlink" title="vue-iview Modal组件简单分析"></a>vue-iview Modal组件简单分析</h2><p>现在公司的项目前端框架用的是vue，在工作中避免不了要写一些组件，其实写组件的方法千千种，怎么写都行，但是，总想写出来的组件像一些ui框架里的组件一样高大上，于是乎，今天有点时间，大致的看了一下iview的Modal组件，简单的记录一下思想。<br>由于时间原因，代码并没有深入往里边看，只是把大致的框框看了一下。<br>首先，我们看看Modal组件的用法，<a href="https://www.iviewui.com/components/modal#API" target="_blank" rel="noopener">官方文档点这里</a><br>简单的用法如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;Modal v-model=<span class="string">"modal12"</span> draggable scrollable title=<span class="string">"Modal 1"</span>&gt;</span><br><span class="line">    &lt;div&gt;This is the first modal&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>Modal&gt;</span><br><span class="line"><span class="comment">// 上边这个是基础写法</span></span><br><span class="line"><span class="comment">// 下边这个写法可以直接调用，不需要在html中写出&lt;Modal&gt;&lt;/Modal&gt;标签</span></span><br><span class="line"><span class="keyword">this</span>.$Modal.info(config)</span><br><span class="line"><span class="keyword">this</span>.$Modal.success(config)</span><br></pre></td></tr></table></figure></p><p>先看一下iview的Modal组件文件夹结构<br><img src="/2018/12/04/vue-iview-Modal组件简单分析/1.png" alt="img"><br>index文件是入口文件，里边导出了Modal对象。也就是可以使用<modal></modal>标签的原因，因为给Modal对象加一大堆方法，但是它还是一个vue的基础组件。大家可能注意到了，当使用<modal></modal>标签定义组建的时候，发现最后组件的dom元素被插入到了body下，而不是在具体引入的位置，这是因为Modal组件里有一个指令：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  Modal组件里有</span></span><br><span class="line">directives: &#123; TransferDom &#125;</span><br><span class="line"><span class="comment">// 追溯TransferDom指令，发现有如下代码</span></span><br><span class="line">parentNode.replaceChild(home, el); <span class="comment">// moving out, el is no longer in the document</span></span><br><span class="line">getTarget(value).appendChild(el); <span class="comment">// moving into new place</span></span><br></pre></td></tr></table></figure></p><p>modal.vue文件是组件的基础文件，也就是页面显示出来的东西，index文件里的东西可以看出来，只是给Modal对象添加了一些静态方法，为了this.$Modal.info(config)这样调用的时候使用。<br>confrim文件里主要做了this.$Modal.info()这样调用的时候动态new Vue()实例，也是以modal.vue这个组件为基础，动态的插入到body节点里，代码见下边:<br><img src="/2018/12/04/vue-iview-Modal组件简单分析/2.png" alt="img"><br>就是通过new Vue()的实例获取到这个组建的html代码片段，再插入到body节点中。<br>最后，再看看iview如何变成vue的全局组件的。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> install = <span class="function"><span class="keyword">function</span>(<span class="params">Vue, opts = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里添加全局组件</span></span><br><span class="line">    <span class="built_in">Object</span>.keys(iview).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">        Vue.component(key, iview[key]);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里添加实例方法</span></span><br><span class="line">    Vue.prototype.$Modal = Modal;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>以上就是大概思路哈。</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>小巧的html模板引擎</title>
      <link href="/2018/11/30/%E5%B0%8F%E5%B7%A7%E7%9A%84html%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/"/>
      <url>/2018/11/30/%E5%B0%8F%E5%B7%A7%E7%9A%84html%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/</url>
      
        <content type="html"><![CDATA[<p>小巧的html模板引擎<br><a id="more"></a></p><h2 id="小巧的html模板引擎"><a href="#小巧的html模板引擎" class="headerlink" title="小巧的html模板引擎"></a>小巧的html模板引擎</h2><p>今天看coco大神的github，看到了他写的html模板引擎，默默地记录下来，其实，模板引擎我自己也写过一个，不过总觉得大神写的一定比我的好，<a href="https://github.com/jinux7/jinux-template" target="_blank" rel="noopener">点击这是我写的</a><br>先贴出代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * coTemplate</span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">name, definition</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> define === <span class="string">'function'</span>) &#123;</span><br><span class="line">        define(definition);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>[name] = definition();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)(<span class="string">'cotemplate'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> tplReg = <span class="regexp">/\$\&#123;\s*([^\&#123;\&#125;\s]+)\s*\&#125;/g</span>;</span><br><span class="line">    <span class="keyword">var</span> jsReg = <span class="regexp">/(^( )?(if|for|else|switch|case|break|&#123;|&#125;))(.*)?/g</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> code = <span class="string">'var r=[];\n'</span>;</span><br><span class="line">    <span class="keyword">var</span> match = <span class="string">'undefined'</span>;</span><br><span class="line">    <span class="keyword">var</span> pointer = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加单行逻辑</span></span><br><span class="line"><span class="comment">     * @param &#123;*&#125; line </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">lineAdd</span>(<span class="params">line</span>) </span>&#123;</span><br><span class="line">        code += <span class="string">'r.push("'</span> + line.replace(<span class="regexp">/"/g</span>, <span class="string">'\\"'</span>) + <span class="string">'");\n'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模板拼接</span></span><br><span class="line"><span class="comment">     * @param &#123;String&#125; tpl 模板字符串 </span></span><br><span class="line"><span class="comment">     * @param &#123;Objcet&#125; data 模板内替换对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">cotemplate</span>(<span class="params">tpl, data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (match = tplReg.exec(tpl)) &#123;</span><br><span class="line">            <span class="comment">// 添加非逻辑部分</span></span><br><span class="line">            lineAdd(tpl.slice(pointer, match.index)); </span><br><span class="line"></span><br><span class="line">            <span class="comment">// 添加逻辑部分 "$&#123;" + match[1] + "&#125;";</span></span><br><span class="line">            code += (<span class="string">'r.push(String(this.'</span> + match[<span class="number">1</span>] + <span class="string">'));'</span>);</span><br><span class="line"></span><br><span class="line">            pointer = match.index + match[<span class="number">0</span>].length;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加代码的最后一截</span></span><br><span class="line">        lineAdd(tpl.substr(pointer, tpl.length - pointer)); </span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回结果，在这里我们就拿到了装入数组后的代码</span></span><br><span class="line">        code += <span class="string">'return r.join("");'</span>; </span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(code);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Function</span>(code.replace(<span class="regexp">/[\r\t\n]/g</span>, <span class="string">''</span>)).apply(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * export</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">return</span> cotemplate;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>用法Demo<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"../js/cotemplate.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">var</span> data = &#123;</span><br><span class="line">    name: <span class="string">'Coco'</span>,</span><br><span class="line">    info: &#123;</span><br><span class="line">        age: <span class="number">18</span></span><br><span class="line">    &#125;,</span><br><span class="line">    bar: &#123;</span><br><span class="line">        foo: &#123;</span><br><span class="line">            <span class="keyword">else</span>: <span class="string">'co-template'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> tpl = <span class="string">`</span></span><br><span class="line"><span class="string">            &lt;p&gt;name:<span class="subst">$&#123;coco&#125;</span>&lt;/p&gt;</span></span><br><span class="line"><span class="string">            &lt;p&gt;Age:<span class="subst">$&#123;info.age&#125;</span>&lt;/p&gt;</span></span><br><span class="line"><span class="string">            &lt;div&gt;<span class="subst">$&#123;bar.foo.<span class="keyword">else</span>&#125;</span>&lt;/div&gt;</span></span><br><span class="line"><span class="string">          `</span>;</span><br><span class="line"></span><br><span class="line">cotemplate(tpl, data);</span><br><span class="line"><span class="comment">// &lt;p&gt;Name:Coco&lt;/p&gt;        </span></span><br><span class="line"><span class="comment">// &lt;p&gt;Age:18&lt;/p&gt;        </span></span><br><span class="line"><span class="comment">// &lt;div&gt;HTML-template:co-template&lt;/div&gt;</span></span><br><span class="line">    </span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js工具库 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>传入标准时间，返回指定日期格式</title>
      <link href="/2018/11/30/%E4%BC%A0%E5%85%A5%E6%A0%87%E5%87%86%E6%97%B6%E9%97%B4%EF%BC%8C%E8%BF%94%E5%9B%9E%E6%8C%87%E5%AE%9A%E6%97%A5%E6%9C%9F%E6%A0%BC%E5%BC%8F/"/>
      <url>/2018/11/30/%E4%BC%A0%E5%85%A5%E6%A0%87%E5%87%86%E6%97%B6%E9%97%B4%EF%BC%8C%E8%BF%94%E5%9B%9E%E6%8C%87%E5%AE%9A%E6%97%A5%E6%9C%9F%E6%A0%BC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>传入标准时间，返回指定日期格式<br><a id="more"></a></p><h2 id="传入标准时间，返回指定日期格式"><a href="#传入标准时间，返回指定日期格式" class="headerlink" title="传入标准时间，返回指定日期格式"></a>传入标准时间，返回指定日期格式</h2><p>平时在开发时经常会用到获取当前日期，有时候会自己写一个，今天网上闲逛，发现一个写的不错的，记录一下，以备后用。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> common = &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 传入标准时间，返回指定日期格式</span></span><br><span class="line"><span class="comment">     * @param &#123;Number&#125; date </span></span><br><span class="line"><span class="comment">     * @param &#123;String&#125; format </span></span><br><span class="line"><span class="comment">     * @example </span></span><br><span class="line"><span class="comment">     *      - dateSerialization(1511181312647, "y-mm-dd h:i:s")</span></span><br><span class="line"><span class="comment">     *      - @return 2017-11-20 20:35:12</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    dateSerialization(date, format) &#123;</span><br><span class="line">        <span class="keyword">let</span> dateObj;</span><br><span class="line">        <span class="keyword">let</span> DEFAULT_FORMAT = <span class="string">"y-mm-dd h:i:s"</span>;</span><br><span class="line">        <span class="keyword">let</span> _patternArr = [<span class="string">"y"</span>, <span class="string">"mm"</span>, <span class="string">"dd"</span>, <span class="string">"h"</span>, <span class="string">"i"</span>, <span class="string">"s"</span>];</span><br><span class="line">        <span class="keyword">let</span> _patternMap = &#123;</span><br><span class="line">            y: <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> d.getFullYear();</span><br><span class="line">            &#125;,</span><br><span class="line">            m: <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> d.getMonth() + <span class="number">1</span>;</span><br><span class="line">            &#125;,</span><br><span class="line">            mm: <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> _pad(d.getMonth() + <span class="number">1</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">            d: <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> d.getDate();</span><br><span class="line">            &#125;,</span><br><span class="line">            dd: <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> _pad(d.getDate());</span><br><span class="line">            &#125;,</span><br><span class="line">            h: <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> _pad(d.getHours());</span><br><span class="line">            &#125;,</span><br><span class="line">            i: <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> _pad(d.getMinutes());</span><br><span class="line">            &#125;,</span><br><span class="line">            s: <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> _pad(d.getSeconds());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="regexp">/^\d+$/</span>.test(date)) &#123;</span><br><span class="line">            dateObj = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">parseInt</span>(date));</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> date == <span class="string">"string"</span>) &#123;</span><br><span class="line">            dateObj = <span class="keyword">new</span> <span class="built_in">Date</span>(date.replace(<span class="regexp">/-/g</span>, <span class="string">"/"</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (_isDate(date)) &#123;</span><br><span class="line">            dateObj = date;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 非法数据</span></span><br><span class="line">        <span class="keyword">if</span> (!dateObj || dateObj.toString() == <span class="string">"Invalid Date"</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"[common.date.format]the input cannot be converted to date object("</span> + date + <span class="string">")"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        format = format || DEFAULT_FORMAT;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> _resultArr = format.split(<span class="regexp">/-|:|\s/</span>);</span><br><span class="line">        <span class="keyword">let</span> resultObj = &#123;&#125;;</span><br><span class="line">        <span class="keyword">let</span> result = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">        _patternArr.forEach(<span class="function"><span class="params">k</span> =&gt;</span> &#123;</span><br><span class="line">            resultObj[k] = _patternMap[k](dateObj);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        _resultArr.forEach(<span class="function"><span class="params">k</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> regExp = <span class="keyword">new</span> <span class="built_in">RegExp</span>(k);</span><br><span class="line"></span><br><span class="line">            format = format.replace(regExp, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> resultObj[e];</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> format;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_toString</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_isDate</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> _toString(v) == <span class="string">"[object Date]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_pad</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n &gt; <span class="number">9</span> ? n : <span class="string">"0"</span> + n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> common;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js工具库 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>高阶函数和高阶组件</title>
      <link href="/2018/11/29/%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0%E5%92%8C%E9%AB%98%E9%98%B6%E7%BB%84%E4%BB%B6/"/>
      <url>/2018/11/29/%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0%E5%92%8C%E9%AB%98%E9%98%B6%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>高阶函数和高阶组件简介<br><a id="more"></a></p><h2 id="高阶函数和高阶组件"><a href="#高阶函数和高阶组件" class="headerlink" title="高阶函数和高阶组件"></a>高阶函数和高阶组件</h2><h3 id="什么是高阶函数"><a href="#什么是高阶函数" class="headerlink" title="什么是高阶函数"></a>什么是高阶函数</h3><p>高阶函数就是传入的参数有函数的函数。（有点绕口:)）</p><h3 id="什么是高阶组件"><a href="#什么是高阶组件" class="headerlink" title="什么是高阶组件"></a>什么是高阶组件</h3><p>高阶组件就是传入的参数有组件的组件。:)<br>react比较容易实现高阶组件</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>web安全之CSRF</title>
      <link href="/2018/11/28/web%E5%AE%89%E5%85%A8%E4%B9%8BCSRF/"/>
      <url>/2018/11/28/web%E5%AE%89%E5%85%A8%E4%B9%8BCSRF/</url>
      
        <content type="html"><![CDATA[<p>CSRF攻击的简要介绍<br><a id="more"></a></p><h2 id="web安全之CSRF"><a href="#web安全之CSRF" class="headerlink" title="web安全之CSRF"></a>web安全之CSRF</h2><h3 id="一-CSRF是什么？"><a href="#一-CSRF是什么？" class="headerlink" title="一.CSRF是什么？"></a>一.CSRF是什么？</h3><p>CSRF（Cross-site request forgery），中文名称：跨站请求伪造，也被称为：one click attack/session riding，缩写为：CSRF/XSRF。</p><h3 id="二-CSRF可以做什么？"><a href="#二-CSRF可以做什么？" class="headerlink" title="二.CSRF可以做什么？"></a>二.CSRF可以做什么？</h3><p>你这可以这么理解CSRF攻击：攻击者盗用了你的身份，以你的名义发送恶意请求。CSRF能够做的事情包括：以你名义发送邮件，发消息，盗取你的账号，甚至于购买商品，虚拟货币转账……造成的问题包括：个人隐私泄露以及财产安全。</p><h3 id="三-CSRF漏洞现状"><a href="#三-CSRF漏洞现状" class="headerlink" title="三.CSRF漏洞现状"></a>三.CSRF漏洞现状</h3><p>CSRF这种攻击方式在2000年已经被国外的安全人员提出，但在国内，直到06年才开始被关注，08年，国内外的多个大型社区和交互网站分别 爆出CSRF漏洞，如：NYTimes.com（纽约时报）、Metafilter（一个大型的BLOG网站），YouTube和百度HI……而 现在，互联网上的许多站点仍对此毫无防备，以至于安全业界称CSRF为“沉睡的巨人”。</p><h3 id="四-CSRF的原理"><a href="#四-CSRF的原理" class="headerlink" title="四.CSRF的原理"></a>四.CSRF的原理</h3><p>下图简单阐述了CSRF攻击的思想：<br><img src="/2018/11/28/web安全之CSRF/1.jpg" alt="img"><br>从上图可以看出，要完成一次CSRF攻击，受害者必须依次完成两个步骤：<br>1.登录受信任网站A，并在本地生成Cookie。<br>2.在不登出A的情况下，访问危险网站B。</p><p>看到这里，你也许会说：“如果我不满足以上两个条件中的一个，我就不会受到CSRF的攻击”。是的，确实如此，但你不能保证以下情况不会发生：<br>1.你不能保证你登录了一个网站后，不再打开一个tab页面并访问另外的网站。<br>2.你不能保证你关闭浏览器了后，你本地的Cookie立刻过期，你上次的会话已经结束。（事实上，关闭浏览器不能结束一个会话，但大多数人都会错误的认为关闭浏览器就等于退出登录/结束会话了……）<br>3.上图中所谓的攻击网站，可能是一个存在其他漏洞的可信任的经常被人访问的网站。</p><h3 id="五例子"><a href="#五例子" class="headerlink" title="五例子"></a>五例子</h3><p>上面大概地讲了一下CSRF攻击的思想，下面我将用几个例子详细说说具体的CSRF攻击，这里我以一个银行转账的操作作为例子（仅仅是例子，真实的银行网站没这么傻:&gt;）</p><h4 id="示例1："><a href="#示例1：" class="headerlink" title="示例1："></a>示例1：</h4><p>银行网站A，它以GET请求来完成银行转账的操作，如：<a href="http://www.mybank.com/Transfer.php?toBankId=11&amp;money=1000" target="_blank" rel="noopener">http://www.mybank.com/Transfer.php?toBankId=11&amp;money=1000</a><br>危险网站B，它里面有一段HTML的代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=http:<span class="comment">//www.mybank.com/Transfer.php?toBankId=11&amp;money=1000&gt;</span></span><br></pre></td></tr></table></figure></p><p>首先，你登录了银行网站A，然后访问危险网站B，噢，这时你会发现你的银行账户少了1000块……<br>为什么会这样呢？原因是银行网站A违反了HTTP规范，使用GET请求更新资源。在访问危险网站B的之前，你已经登录了银行网站A，而B中 的<img>以GET的方式请求第三方资源（这里的第三方就是指银行网站了，原本这是一个合法的请求，但这里被不法分子利用了），所以你的浏 览器会带上你的银行网站A的Cookie发出Get请求，去获取资源“<a href="http://www.mybank.com" target="_blank" rel="noopener">http://www.mybank.com</a> /Transfer.php?toBankId=11&amp;money=1000”，结果银行网站服务器收到请求后，认为这是一个更新资源操作（转账 操作），所以就立刻进行转账操作……</p><h4 id="示例2："><a href="#示例2：" class="headerlink" title="示例2："></a>示例2：</h4><p>为了杜绝上面的问题，银行决定改用POST请求完成转账操作。<br>银行网站A的WEB表单如下：<br>危险网站B，它里面有一段HTML的代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">"Transfer.php"</span> method=<span class="string">"POST"</span>&gt;</span><br><span class="line">　　　　&lt;p&gt;ToBankId: <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"toBankId"</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">　　　　&lt;p&gt;Money: <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"money"</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">　　　　&lt;p&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Transfer"</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">　　&lt;<span class="regexp">/form&gt;</span></span><br></pre></td></tr></table></figure></p><p>后台处理页面Transfer.php如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">　　　　session_start();</span><br><span class="line">　　　　<span class="keyword">if</span> (<span class="keyword">isset</span>($_REQUEST[<span class="string">'toBankId'</span>] &amp;&amp;　<span class="keyword">isset</span>($_REQUEST[<span class="string">'money'</span>]))</span><br><span class="line">　　　　&#123;</span><br><span class="line">　　　　    buy_stocks($_REQUEST[<span class="string">'toBankId'</span>],　$_REQUEST[<span class="string">'money'</span>]);</span><br><span class="line">　　　　&#125;</span><br><span class="line">　　<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>危险网站B，仍然只是包含那句HTML代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=http:<span class="comment">//www.mybank.com/Transfer.php?toBankId=11&amp;money=1000&gt;</span></span><br></pre></td></tr></table></figure></p><p>和示例1中的操作一样，你首先登录了银行网站A，然后访问危险网站B，结果…..和示例1一样，你再次没了1000块～T_T，这次事故的 原因是：银行后台使用了$_REQUEST去获取请求的数据，而$_REQUEST既可以获取GET请求的数据，也可以获取POST请求的数据，这就造成 了在后台处理程序无法区分这到底是GET请求的数据还是POST请求的数据。在PHP中，可以使用$_GET和$_POST分别获取GET请求和POST 请求的数据。在JAVA中，用于获取请求数据request一样存在不能区分GET请求数据和POST数据的问题。</p><h4 id="示例3："><a href="#示例3：" class="headerlink" title="示例3："></a>示例3：</h4><p>经过前面2个惨痛的教训，银行决定把获取请求数据的方法也改了，改用$_POST，只获取POST请求的数据，后台处理页面Transfer.php代码如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">　　　　session_start();</span><br><span class="line">　　　　<span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'toBankId'</span>] &amp;&amp;　<span class="keyword">isset</span>($_POST[<span class="string">'money'</span>]))</span><br><span class="line">　　　　&#123;</span><br><span class="line">　　　　    buy_stocks($_POST[<span class="string">'toBankId'</span>],　$_POST[<span class="string">'money'</span>]);</span><br><span class="line">　　　　&#125;</span><br><span class="line">　　<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>然而，危险网站B与时俱进，它改了一下代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">　　&lt;head&gt;</span><br><span class="line">　　　　&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">　　　　　　<span class="function"><span class="keyword">function</span> <span class="title">steal</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">　　　　　　</span>&#123;</span><br><span class="line">          　　　　 iframe = <span class="built_in">document</span>.frames[<span class="string">"steal"</span>];</span><br><span class="line">　　     　　      iframe.document.Submit(<span class="string">"transfer"</span>);</span><br><span class="line">　　　　　　&#125;</span><br><span class="line">　　　　&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">　　&lt;/</span>head&gt;</span><br><span class="line"></span><br><span class="line">　　&lt;body onload=<span class="string">"steal()"</span>&gt;</span><br><span class="line">　　　　&lt;iframe name=<span class="string">"steal"</span> display=<span class="string">"none"</span>&gt;</span><br><span class="line">　　　　　　&lt;form method=<span class="string">"POST"</span> name=<span class="string">"transfer"</span>　action=<span class="string">"http://www.myBank.com/Transfer.php"</span>&gt;</span><br><span class="line">　　　　　　　　&lt;input type=<span class="string">"hidden"</span> name=<span class="string">"toBankId"</span> value=<span class="string">"11"</span>&gt;</span><br><span class="line">　　　　　　　　&lt;input type=<span class="string">"hidden"</span> name=<span class="string">"money"</span> value=<span class="string">"1000"</span>&gt;</span><br><span class="line">　　　　　　&lt;<span class="regexp">/form&gt;</span></span><br><span class="line"><span class="regexp">　　　　&lt;/i</span>frame&gt;</span><br><span class="line">　　&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure></p><p>如果用户仍是继续上面的操作，很不幸，结果将会是再次不见1000块……因为这里危险网站B暗地里发送了POST请求到银行!</p><p>总结一下上面3个例子，CSRF主要的攻击模式基本上是以上的3种，其中以第1,2种最为严重，因为触发条件很简单，一 个<img>就可以了，而第3种比较麻烦，需要使用JavaScript，所以使用的机会会比前面的少很多，但无论是哪种情况，只要触发了 CSRF攻击，后果都有可能很严重。</p><p>理解上面的3种攻击模式，其实可以看出，CSRF攻击是源于WEB的隐式身份验证机制！WEB的身份验证机制虽然可以保证一个请求是来自于某个用户的浏览器，但却无法保证该请求是用户批准发送的！</p><h3 id="六-CSRF的防御"><a href="#六-CSRF的防御" class="headerlink" title="六.CSRF的防御"></a>六.CSRF的防御</h3><p>我总结了一下看到的资料，CSRF的防御可以从服务端和客户端两方面着手，防御效果是从服务端着手效果比较好，现在一般的CSRF防御也都在服务端进行。</p><h4 id="1-服务端进行CSRF防御"><a href="#1-服务端进行CSRF防御" class="headerlink" title="1.服务端进行CSRF防御"></a>1.服务端进行CSRF防御</h4><p>服务端的CSRF方式方法很多样，但总的思想都是一致的，就是在客户端页面增加伪随机数。</p><h5 id="1-Cookie-Hashing-所有表单都包含同一个伪随机值-："><a href="#1-Cookie-Hashing-所有表单都包含同一个伪随机值-：" class="headerlink" title="(1).Cookie Hashing(所有表单都包含同一个伪随机值)："></a>(1).Cookie Hashing(所有表单都包含同一个伪随机值)：</h5><p>这可能是最简单的解决方案了，因为攻击者不能获得第三方的Cookie(理论上)，所以表单中的数据也就构造失败了:&gt;<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">　　　　<span class="comment">//构造加密的Cookie信息</span></span><br><span class="line">　　　　$value = “DefenseSCRF”;</span><br><span class="line">　　　　setcookie(”cookie”, $value, time()+<span class="number">3600</span>);</span><br><span class="line">　　<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>在表单里增加Hash值，以认证这确实是用户发送的请求。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">　　　　$hash = md5($_COOKIE[<span class="string">'cookie'</span>]);</span><br><span class="line">　　<span class="meta">?&gt;</span></span><br><span class="line">　　&lt;form method=”POST” action=”transfer.php”&gt;</span><br><span class="line">　　　　&lt;input type=”text” name=”toBankId”&gt;</span><br><span class="line">　　　　&lt;input type=”text” name=”money”&gt;</span><br><span class="line">　　　　&lt;input type=”hidden” name=”hash” value=”<span class="meta">&lt;?</span>=$hash;<span class="meta">?&gt;</span>”&gt;</span><br><span class="line">　　　　&lt;input type=”submit” name=”submit” value=”Submit”&gt;</span><br><span class="line">　　&lt;/form&gt;</span><br></pre></td></tr></table></figure></p><p>然后在服务器端进行Hash值验证<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">　　      <span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'check'</span>])) &#123;</span><br><span class="line">     　　      $hash = md5($_COOKIE[<span class="string">'cookie'</span>]);</span><br><span class="line">    　　 <span class="keyword">if</span>($_POST[<span class="string">'check'</span>] == $hash) &#123;</span><br><span class="line">         　　 doJob();</span><br><span class="line">　　           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">　　　　　　　　<span class="comment">//...</span></span><br><span class="line">    　　 &#125;</span><br><span class="line">　　      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">　　　　　　<span class="comment">//...</span></span><br><span class="line">　　      &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>这个方法个人觉得已经可以杜绝99%的CSRF攻击了，那还有1%呢….由于用户的Cookie很容易由于网站的XSS漏洞而被盗取，这就 另外的1%。一般的攻击者看到有需要算Hash值，基本都会放弃了，某些除外，所以如果需要100%的杜绝，这个不是最好的方法。</p><h5 id="2-验证码"><a href="#2-验证码" class="headerlink" title="(2).验证码"></a>(2).验证码</h5><p>这个方案的思路是：每次的用户提交都需要用户在表单中填写一个图片上的随机字符串，厄….这个方案可以完全解决CSRF，但个人觉得在易用性方面似乎不是太好，还有听闻是验证码图片的使用涉及了一个被称为MHTML的Bug，可能在某些版本的微软IE中受影响。</p><h5 id="3-One-Time-Tokens-不同的表单包含一个不同的伪随机值"><a href="#3-One-Time-Tokens-不同的表单包含一个不同的伪随机值" class="headerlink" title="(3).One-Time Tokens(不同的表单包含一个不同的伪随机值)"></a>(3).One-Time Tokens(不同的表单包含一个不同的伪随机值)</h5><p>在实现One-Time Tokens时，需要注意一点：就是“并行会话的兼容”。如果用户在一个站点上同时打开了两个不同的表单，CSRF保护措施不应该影响到他对任何表单的提 交。考虑一下如果每次表单被装入时站点生成一个伪随机值来覆盖以前的伪随机值将会发生什么情况：用户只能成功地提交他最后打开的表单，因为所有其他的表单 都含有非法的伪随机值。必须小心操作以确保CSRF保护措施不会影响选项卡式的浏览或者利用多个浏览器窗口浏览一个站点。<br>以下我的实现:</p><h6 id="1-先是令牌生成函数-gen-token-："><a href="#1-先是令牌生成函数-gen-token-：" class="headerlink" title="1).先是令牌生成函数(gen_token())："></a>1).先是令牌生成函数(gen_token())：</h6><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">gen_token</span><span class="params">()</span> </span>&#123;</span><br><span class="line">　　　　<span class="comment">//这里我是贪方便，实际上单使用Rand()得出的随机数作为令牌，也是不安全的。</span></span><br><span class="line">　　　　<span class="comment">//这个可以参考我写的Findbugs笔记中的《Random object created and used only once》</span></span><br><span class="line">      $token =md5(uniqid(rand(), <span class="keyword">true</span>));</span><br><span class="line">      <span class="keyword">return</span> $token;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h6 id="2-然后是Session令牌生成函数-gen-stoken-："><a href="#2-然后是Session令牌生成函数-gen-stoken-：" class="headerlink" title="2).然后是Session令牌生成函数(gen_stoken())："></a>2).然后是Session令牌生成函数(gen_stoken())：</h6><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line">　　<span class="function"><span class="keyword">function</span> <span class="title">gen_stoken</span><span class="params">()</span> </span>&#123;</span><br><span class="line">　　　　　　$pToken = <span class="string">""</span>;</span><br><span class="line">　　　　　　<span class="keyword">if</span>($_SESSION[STOKEN_NAME]  == $pToken)&#123;</span><br><span class="line">　　　　　　　　<span class="comment">//没有值，赋新值</span></span><br><span class="line">　　　　　　　　$_SESSION[STOKEN_NAME] =gen_token();</span><br><span class="line">　　　　　　&#125;    </span><br><span class="line">　　　　　　<span class="keyword">else</span>&#123;</span><br><span class="line">　　　　　　　　<span class="comment">//继续使用旧的值</span></span><br><span class="line">　　　　　　&#125;</span><br><span class="line">　　&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h6 id="3-WEB表单生成隐藏输入域的函数："><a href="#3-WEB表单生成隐藏输入域的函数：" class="headerlink" title="3).WEB表单生成隐藏输入域的函数："></a>3).WEB表单生成隐藏输入域的函数：</h6><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">　　     <span class="function"><span class="keyword">function</span> <span class="title">gen_input</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     　　     gen_stoken();</span><br><span class="line">　　          <span class="keyword">echo</span> “&lt;input type=\”hidden\” name=\”<span class="string">" . FTOKEN_NAME . “\”</span></span><br><span class="line"><span class="string">    　　     value=\”"</span> . $_SESSION[STOKEN_NAME] . “\”&gt; “;</span><br><span class="line">     　　&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h6 id="4-WEB表单结构："><a href="#4-WEB表单结构：" class="headerlink" title="4).WEB表单结构："></a>4).WEB表单结构：</h6><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">     session_start();</span><br><span class="line">     <span class="keyword">include</span>(”functions.php”);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;form method=”POST” action=”transfer.php”&gt;</span><br><span class="line">     &lt;input type=”text” name=”toBankId”&gt;</span><br><span class="line">     &lt;input type=”text” name=”money”&gt;</span><br><span class="line">     <span class="meta">&lt;?</span> gen_input(); <span class="meta">?&gt;</span></span><br><span class="line">     &lt;input type=”submit” name=”submit” value=”Submit”&gt;</span><br><span class="line">&lt;/FORM&gt;</span><br></pre></td></tr></table></figure><h6 id="5-服务端核对令牌："><a href="#5-服务端核对令牌：" class="headerlink" title="5).服务端核对令牌："></a>5).服务端核对令牌：</h6><p>这个很简单，这里就不再啰嗦了。<br>上面这个其实不完全符合“并行会话的兼容”的规则，大家可以在此基础上修改。</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>web安全之XSS</title>
      <link href="/2018/11/28/web%E5%AE%89%E5%85%A8%E4%B9%8BXSS/"/>
      <url>/2018/11/28/web%E5%AE%89%E5%85%A8%E4%B9%8BXSS/</url>
      
        <content type="html"><![CDATA[<p>XSS攻击的简要介绍<br><a id="more"></a></p><h2 id="web安全之XSS"><a href="#web安全之XSS" class="headerlink" title="web安全之XSS"></a>web安全之XSS</h2><p>首先说下最常见的 XSS 漏洞，XSS (Cross Site Script)，跨站脚本攻击，因为缩写和 CSS (Cascading Style Sheets) 重叠，所以只能叫 XSS。<br>XSS 的原理是恶意攻击者往 Web 页面里插入恶意可执行网页脚本代码，当用户浏览该页之时，嵌入其中 Web 里面的脚本代码会被执行，从而可以达到攻击者盗取用户信息或其他侵犯用户安全隐私的目的。XSS 的攻击方式千变万化，但还是可以大致细分为几种类型。</p><h3 id="非持久型-XSS"><a href="#非持久型-XSS" class="headerlink" title="非持久型 XSS"></a>非持久型 XSS</h3><p>非持久型 XSS 漏洞，也叫反射型 XSS 漏洞，一般是通过给别人发送带有恶意脚本代码参数的 URL，当 URL 地址被打开时，特有的恶意代码参数被 HTML 解析、执行。<br><img src="/2018/11/28/web安全之XSS/1.webp" alt="img"><br>一个例子，比如你的 Web 页面中包含有以下代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;select&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="built_in">document</span>.write(<span class="string">''</span></span><br><span class="line">            + <span class="string">'&lt;option value=1&gt;'</span></span><br><span class="line">            +     location.href.substring(location.href.indexOf(<span class="string">'default='</span>) + <span class="number">8</span>)</span><br><span class="line">            + <span class="string">'&lt;/option&gt;'</span></span><br><span class="line">        );</span><br><span class="line">        <span class="built_in">document</span>.write(<span class="string">'&lt;option value=2&gt;English&lt;/option&gt;'</span>);</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>select&gt;</span><br></pre></td></tr></table></figure></p><p>攻击者可以直接通过 URL<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(类似：https:<span class="comment">//xx.com/xx?default=&lt;script&gt;alert(document.cookie)&lt;/script&gt;)</span></span><br></pre></td></tr></table></figure></p><h4 id="注入可执行的脚本代码"><a href="#注入可执行的脚本代码" class="headerlink" title="注入可执行的脚本代码"></a>注入可执行的脚本代码</h4><p>非持久型 XSS 漏洞攻击有以下几点特征 :<br>1 . 即时性，不经过服务器存储，直接通过 HTTP 的 GET 和 POST 请求就能完成一次攻击，拿到用户隐私数据<br>2 . 攻击者需要诱骗点击<br>3 . 反馈率低，所以较难发现和响应修复<br>4 . 盗取用户敏感保密信息</p><h4 id="为了防止出现非持久型-XSS-漏洞，需要确保这么几件事情"><a href="#为了防止出现非持久型-XSS-漏洞，需要确保这么几件事情" class="headerlink" title="为了防止出现非持久型 XSS 漏洞，需要确保这么几件事情 :"></a>为了防止出现非持久型 XSS 漏洞，需要确保这么几件事情 :</h4><p>1 . Web 页面渲染的所有内容或者渲染的数据都必须来自于服务端。<br>2 . 尽量不要从 URL，document.referrer，document.forms 等这种 DOM API 中获取数据直接渲染。<br>3 . 尽量不要使用 eval, new Function()，document.write()，document.writeln()，window.setInterval()，window.setTimeout()，<br>innerHTML，document.creteElement() 等可执行字符串的方法。<br>4 . 如果做不到以上几点，也必须对涉及 DOM 渲染的方法传入的字符串参数做 escape 转义。<br>5 . 前端渲染的时候对任何的字段都需要做 escape 转义编码。</p><p>escape 转义的目的是将一些构成 HTML 标签的元素转义，比如 &lt;，&gt;，空格 等，转义成 &lt;，&gt;，  等显示转义字符。有很多开源的工具可以协助我们做 escape 转义。</p><h3 id="持久型-XSS"><a href="#持久型-XSS" class="headerlink" title="持久型 XSS"></a>持久型 XSS</h3><p>持久型 XSS 漏洞，也被称为存储型 XSS 漏洞，一般存在于 Form 表单提交等交互功能，如发帖留言，提交文本信息等，黑客利用的 XSS 漏洞，将内容经正常功能提交进入数据库持久保存，当前端页面获得后端从数据库中读出的注入代码时，恰好将其渲染执行。</p><p>主要注入页面方式和非持久型 XSS 漏洞类似，只不过持久型的不是来源于 URL，refferer，forms 等，而是来源于后端从数据库中读出来的数据。持久型 XSS 攻击不需要诱骗点击，黑客只需要在提交表单的地方完成注入即可，但是这种 XSS 攻击的成本相对还是很高。</p><h4 id="攻击成功需要同时满足以下几个条件"><a href="#攻击成功需要同时满足以下几个条件" class="headerlink" title="攻击成功需要同时满足以下几个条件 :"></a>攻击成功需要同时满足以下几个条件 :</h4><p>1 . POST 请求提交表单后端没做转义直接入库。<br>2 . 后端从数据库中取出数据没做转义直接输出给前端。<br>3 . 前端拿到后端数据没做转义直接渲染成 DOM。</p><h4 id="持久型-XSS-有以下几个特点"><a href="#持久型-XSS-有以下几个特点" class="headerlink" title="持久型 XSS 有以下几个特点 :"></a>持久型 XSS 有以下几个特点 :</h4><p>1 . 持久性，植入在数据库中<br>2 . 危害面广，甚至可以让用户机器变成 DDoS 攻击的肉鸡。<br>3 . 盗取用户敏感私密信息</p><h4 id="为了防止持久型-XSS-漏洞，需要前后端共同努力"><a href="#为了防止持久型-XSS-漏洞，需要前后端共同努力" class="headerlink" title="为了防止持久型 XSS 漏洞，需要前后端共同努力 :"></a>为了防止持久型 XSS 漏洞，需要前后端共同努力 :</h4><p>1 . 后端在入库前应该选择不相信任何前端数据，将所有的字段统一进行转义处理。<br>2 . 后端在输出给前端数据统一进行转义处理。<br>3 . 前端在渲染页面 DOM 的时候应该选择不相信任何后端数据，任何字段都需要做转义处理。</p><h3 id="基于字符集的-XSS"><a href="#基于字符集的-XSS" class="headerlink" title="基于字符集的 XSS"></a>基于字符集的 XSS</h3><p>其实现在很多的浏览器以及各种开源的库都专门针对了 XSS 进行转义处理，尽量默认抵御绝大多数 XSS 攻击，但是还是有很多方式可以绕过转义规则，让人防不胜防。比如「基于字符集的 XSS 攻击」就是绕过这些转义处理的一种攻击方式，比如有些 Web 页面字符集不固定，用户输入非期望字符集的字符，有时会绕过转义过滤规则。</p><h4 id="以基于-utf-7-的-XSS-为例"><a href="#以基于-utf-7-的-XSS-为例" class="headerlink" title="以基于 utf-7 的 XSS 为例"></a>以基于 utf-7 的 XSS 为例</h4><p>utf-7 是可以将所有的 unicode 通过 7bit 来表示的一种字符集 (但现在已经从 Unicode 规格中移除)。<br>这个字符集为了通过 7bit 来表示所有的文字, 除去数字和一部分的符号,其它的部分将都以 base64 编码为基础的方式呈现。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;alert(<span class="string">"xss"</span>)&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">可以被解释为：</span></span><br><span class="line"><span class="regexp">+ADw-script+AD4-alert(+ACI-xss+ACI-)+ADw-/</span>script+AD4-</span><br></pre></td></tr></table></figure></p><p>可以形成「基于字符集的 XSS 攻击」的原因是由于浏览器在 meta 没有指定 charset 的时候有自动识别编码的机制，所以这类攻击通常就是发生在没有指定或者没来得及指定 meta 标签的 charset 的情况下。</p><h4 id="所以我们有什么办法避免这种-XSS-呢"><a href="#所以我们有什么办法避免这种-XSS-呢" class="headerlink" title="所以我们有什么办法避免这种 XSS 呢 ?"></a>所以我们有什么办法避免这种 XSS 呢 ?</h4><p>1 . 记住指定 <meta charset="utf-8"><br>2 . XML 中不仅要指定字符集为 utf-8，而且标签要闭合<br>3 . 牛文推荐：<a href="http://drops.wooyun.org/papers/1327" target="_blank" rel="noopener">http://drops.wooyun.org/papers/1327</a> （这个讲的很详细）</p><h3 id="基于-Flash-的跨站-XSS"><a href="#基于-Flash-的跨站-XSS" class="headerlink" title="基于 Flash 的跨站 XSS"></a>基于 Flash 的跨站 XSS</h3><p>基于 Flash 的跨站 XSS 也是属于反射型 XSS 的一种，虽然现在开发 ActionScript 的产品线几乎没有了，但还是提一句吧，AS 脚本可以接受用户输入并操作 cookie，攻击者可以配合其他 XSS（持久型或者非持久型）方法将恶意 swf 文件嵌入页面中。主要是因为 AS 有时候需要和 JS 传参交互，攻击者会通过恶意的 XSS 注入篡改参数，窃取并操作cookie。</p><p>避免方法 :<br>1 . 严格管理 cookie 的读写权限<br>2 . 对 Flash 能接受用户输入的参数进行过滤 escape 转义处理</p><h3 id="未经验证的跳转-XSS"><a href="#未经验证的跳转-XSS" class="headerlink" title="未经验证的跳转 XSS"></a>未经验证的跳转 XSS</h3><p>有一些场景是后端需要对一个传进来的待跳转的 URL 参数进行一个 302 跳转，可能其中会带有一些用户的敏感（cookie）信息。如果服务器端做302 跳转，跳转的地址来自用户的输入，攻击者可以输入一个恶意的跳转地址来执行脚本。</p><p>这时候需要通过以下方式来防止这类漏洞 :<br>1 . 对待跳转的 URL 参数做白名单或者某种规则过滤<br>2 . 后端注意对敏感信息的保护, 比如 cookie 使用来源验证。</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>利用正则表达式统计代码行数</title>
      <link href="/2018/11/27/%E5%88%A9%E7%94%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%BB%9F%E8%AE%A1%E4%BB%A3%E7%A0%81%E8%A1%8C%E6%95%B0/"/>
      <url>/2018/11/27/%E5%88%A9%E7%94%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%BB%9F%E8%AE%A1%E4%BB%A3%E7%A0%81%E8%A1%8C%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>利用ide编辑器统计代码行数<br><a id="more"></a></p><h2 id="利用正则表达式统计代码行数"><a href="#利用正则表达式统计代码行数" class="headerlink" title="利用正则表达式统计代码行数"></a>利用正则表达式统计代码行数</h2><p>在项目中，我们常常有统计代码行数的需要，但是如果不利用第三方工具的话，面对一个项目（甚至一个工程或解决方案中若干个项目）中成百上千的代码文件，实在有一种力不从心的感觉。</p><p>但利用正则表达式可以巧妙解决。用的工具不是别的，正是所有的IDE（Visual Studio、Eclipse等等）和常用的文本编辑器（SublimeText2、Notepad++等）日常必备软件的“在文件中查找”，不同的软件略有不同，但大同小异。</p><p>再复杂的IDE，其搜索功能也是基于字符串的匹配进行的。我们知道，文本中每次换行会增加一个 \n 。如果直接用正则\n每一个匹配项就代表一次换行。但需要注意的是文件的最后一行是没有换行符的，所以文本行数=文件数+换行符数目，因而把两个看到的两个数字加起来才是文本行数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^.*$</span><br></pre></td></tr></table></figure><p>表示搜索条件为行首与行尾之间包含任意个任意字符（非换行符）。</p><p>上面的方法可以很迅速地得到代码行数，不过遗憾的是统计结果把空行（仅包含空格和制表符的行）也统计进去了，然而很多时候我们并不想把这些文本也给算进代码量里去，怎么办呢？别急，我们只要对正则表达式做一点点修改。我的思路是，只需要找出一个不是空格或制表符的字符即可，于是可写出了这个正则表达式<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^\s*[^\s]+.*$</span><br></pre></td></tr></table></figure></p><p>它表示先忽略一行前面的连续空格和制表符等，然后寻找是否有一个字符不为空格、制表符、换行符和回车符，如果有则表明这行不为空行。<br>不用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^\s*\S+.*$</span><br></pre></td></tr></table></figure></p><p>是为了下面方便添加其他要排除的注释行或者独立的括号行。</p><p>在实际项目中，我们或许认为注释行不应成为生产量，应从统计数据中排除出去。我们首先要能够对注释行有一个认识。很多程序设计语言中，注释行都会用“/”或者“#”等字符开头。我们假设项目中的注释行都是以“/”或“#”开头的（请读者考虑自己项目的特点自行修改）。下面的正则表示，我们要查找的是一行中第一个非空字符不是“/”或“#”或“{”或“}”的行<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">^\s*[^\s/#&#123;&#125;]+.*$ </span><br><span class="line">^\s*[^ \t\n\r/#&#123;&#125;]+.*$</span><br></pre></td></tr></table></figure></p><p>作用同上，说明在中括号[]内自定义原子表，打个空格，也可以代表空格。<br>因为控制开头和结尾，所以 + 后不必加问号 ? 取消贪婪模式了。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^\s*[^\s/#&#123;&#125;]+</span><br></pre></td></tr></table></figure><p>也行，但是上面加上控制结尾比较严谨。另外，文本编辑框默认是视为单行的，没有设置多行模式，如果设为多行模式就得注意了。php 中，在定界符最右边加 m 即可视为多行。</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>zepto源码</title>
      <link href="/2018/11/16/zepto%E6%BA%90%E7%A0%81/"/>
      <url>/2018/11/16/zepto%E6%BA%90%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<p>zepto源码，有注释<br><a id="more"></a></p><h2 id="zepto源码"><a href="#zepto源码" class="headerlink" title="zepto源码"></a>zepto源码</h2><p>最近在看zepto源码，所以把一些注释也加上了，还没看完，以后继续加。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br><span class="line">1037</span><br><span class="line">1038</span><br><span class="line">1039</span><br><span class="line">1040</span><br><span class="line">1041</span><br><span class="line">1042</span><br><span class="line">1043</span><br><span class="line">1044</span><br><span class="line">1045</span><br><span class="line">1046</span><br><span class="line">1047</span><br><span class="line">1048</span><br><span class="line">1049</span><br><span class="line">1050</span><br><span class="line">1051</span><br><span class="line">1052</span><br><span class="line">1053</span><br><span class="line">1054</span><br><span class="line">1055</span><br><span class="line">1056</span><br><span class="line">1057</span><br><span class="line">1058</span><br><span class="line">1059</span><br><span class="line">1060</span><br><span class="line">1061</span><br><span class="line">1062</span><br><span class="line">1063</span><br><span class="line">1064</span><br><span class="line">1065</span><br><span class="line">1066</span><br><span class="line">1067</span><br><span class="line">1068</span><br><span class="line">1069</span><br><span class="line">1070</span><br><span class="line">1071</span><br><span class="line">1072</span><br><span class="line">1073</span><br><span class="line">1074</span><br><span class="line">1075</span><br><span class="line">1076</span><br><span class="line">1077</span><br><span class="line">1078</span><br><span class="line">1079</span><br><span class="line">1080</span><br><span class="line">1081</span><br><span class="line">1082</span><br><span class="line">1083</span><br><span class="line">1084</span><br><span class="line">1085</span><br><span class="line">1086</span><br><span class="line">1087</span><br><span class="line">1088</span><br><span class="line">1089</span><br><span class="line">1090</span><br><span class="line">1091</span><br><span class="line">1092</span><br><span class="line">1093</span><br><span class="line">1094</span><br><span class="line">1095</span><br><span class="line">1096</span><br><span class="line">1097</span><br><span class="line">1098</span><br><span class="line">1099</span><br><span class="line">1100</span><br><span class="line">1101</span><br><span class="line">1102</span><br><span class="line">1103</span><br><span class="line">1104</span><br><span class="line">1105</span><br><span class="line">1106</span><br><span class="line">1107</span><br><span class="line">1108</span><br><span class="line">1109</span><br><span class="line">1110</span><br><span class="line">1111</span><br><span class="line">1112</span><br><span class="line">1113</span><br><span class="line">1114</span><br><span class="line">1115</span><br><span class="line">1116</span><br><span class="line">1117</span><br><span class="line">1118</span><br><span class="line">1119</span><br><span class="line">1120</span><br><span class="line">1121</span><br><span class="line">1122</span><br><span class="line">1123</span><br><span class="line">1124</span><br><span class="line">1125</span><br><span class="line">1126</span><br><span class="line">1127</span><br><span class="line">1128</span><br><span class="line">1129</span><br><span class="line">1130</span><br><span class="line">1131</span><br><span class="line">1132</span><br><span class="line">1133</span><br><span class="line">1134</span><br><span class="line">1135</span><br><span class="line">1136</span><br><span class="line">1137</span><br><span class="line">1138</span><br><span class="line">1139</span><br><span class="line">1140</span><br><span class="line">1141</span><br><span class="line">1142</span><br><span class="line">1143</span><br><span class="line">1144</span><br><span class="line">1145</span><br><span class="line">1146</span><br><span class="line">1147</span><br><span class="line">1148</span><br><span class="line">1149</span><br><span class="line">1150</span><br><span class="line">1151</span><br><span class="line">1152</span><br><span class="line">1153</span><br><span class="line">1154</span><br><span class="line">1155</span><br><span class="line">1156</span><br><span class="line">1157</span><br><span class="line">1158</span><br><span class="line">1159</span><br><span class="line">1160</span><br><span class="line">1161</span><br><span class="line">1162</span><br><span class="line">1163</span><br><span class="line">1164</span><br><span class="line">1165</span><br><span class="line">1166</span><br><span class="line">1167</span><br><span class="line">1168</span><br><span class="line">1169</span><br><span class="line">1170</span><br><span class="line">1171</span><br><span class="line">1172</span><br><span class="line">1173</span><br><span class="line">1174</span><br><span class="line">1175</span><br><span class="line">1176</span><br><span class="line">1177</span><br><span class="line">1178</span><br><span class="line">1179</span><br><span class="line">1180</span><br><span class="line">1181</span><br><span class="line">1182</span><br><span class="line">1183</span><br><span class="line">1184</span><br><span class="line">1185</span><br><span class="line">1186</span><br><span class="line">1187</span><br><span class="line">1188</span><br><span class="line">1189</span><br><span class="line">1190</span><br><span class="line">1191</span><br><span class="line">1192</span><br><span class="line">1193</span><br><span class="line">1194</span><br><span class="line">1195</span><br><span class="line">1196</span><br><span class="line">1197</span><br><span class="line">1198</span><br><span class="line">1199</span><br><span class="line">1200</span><br><span class="line">1201</span><br><span class="line">1202</span><br><span class="line">1203</span><br><span class="line">1204</span><br><span class="line">1205</span><br><span class="line">1206</span><br><span class="line">1207</span><br><span class="line">1208</span><br><span class="line">1209</span><br><span class="line">1210</span><br><span class="line">1211</span><br><span class="line">1212</span><br><span class="line">1213</span><br><span class="line">1214</span><br><span class="line">1215</span><br><span class="line">1216</span><br><span class="line">1217</span><br><span class="line">1218</span><br><span class="line">1219</span><br><span class="line">1220</span><br><span class="line">1221</span><br><span class="line">1222</span><br><span class="line">1223</span><br><span class="line">1224</span><br><span class="line">1225</span><br><span class="line">1226</span><br><span class="line">1227</span><br><span class="line">1228</span><br><span class="line">1229</span><br><span class="line">1230</span><br><span class="line">1231</span><br><span class="line">1232</span><br><span class="line">1233</span><br><span class="line">1234</span><br><span class="line">1235</span><br><span class="line">1236</span><br><span class="line">1237</span><br><span class="line">1238</span><br><span class="line">1239</span><br><span class="line">1240</span><br><span class="line">1241</span><br><span class="line">1242</span><br><span class="line">1243</span><br><span class="line">1244</span><br><span class="line">1245</span><br><span class="line">1246</span><br><span class="line">1247</span><br><span class="line">1248</span><br><span class="line">1249</span><br><span class="line">1250</span><br><span class="line">1251</span><br><span class="line">1252</span><br><span class="line">1253</span><br><span class="line">1254</span><br><span class="line">1255</span><br><span class="line">1256</span><br><span class="line">1257</span><br><span class="line">1258</span><br><span class="line">1259</span><br><span class="line">1260</span><br><span class="line">1261</span><br><span class="line">1262</span><br><span class="line">1263</span><br><span class="line">1264</span><br><span class="line">1265</span><br><span class="line">1266</span><br><span class="line">1267</span><br><span class="line">1268</span><br><span class="line">1269</span><br><span class="line">1270</span><br><span class="line">1271</span><br><span class="line">1272</span><br><span class="line">1273</span><br><span class="line">1274</span><br><span class="line">1275</span><br><span class="line">1276</span><br><span class="line">1277</span><br><span class="line">1278</span><br><span class="line">1279</span><br><span class="line">1280</span><br><span class="line">1281</span><br><span class="line">1282</span><br><span class="line">1283</span><br><span class="line">1284</span><br><span class="line">1285</span><br><span class="line">1286</span><br><span class="line">1287</span><br><span class="line">1288</span><br><span class="line">1289</span><br><span class="line">1290</span><br><span class="line">1291</span><br><span class="line">1292</span><br><span class="line">1293</span><br><span class="line">1294</span><br><span class="line">1295</span><br><span class="line">1296</span><br><span class="line">1297</span><br><span class="line">1298</span><br><span class="line">1299</span><br><span class="line">1300</span><br><span class="line">1301</span><br><span class="line">1302</span><br><span class="line">1303</span><br><span class="line">1304</span><br><span class="line">1305</span><br><span class="line">1306</span><br><span class="line">1307</span><br><span class="line">1308</span><br><span class="line">1309</span><br><span class="line">1310</span><br><span class="line">1311</span><br><span class="line">1312</span><br><span class="line">1313</span><br><span class="line">1314</span><br><span class="line">1315</span><br><span class="line">1316</span><br><span class="line">1317</span><br><span class="line">1318</span><br><span class="line">1319</span><br><span class="line">1320</span><br><span class="line">1321</span><br><span class="line">1322</span><br><span class="line">1323</span><br><span class="line">1324</span><br><span class="line">1325</span><br><span class="line">1326</span><br><span class="line">1327</span><br><span class="line">1328</span><br><span class="line">1329</span><br><span class="line">1330</span><br><span class="line">1331</span><br><span class="line">1332</span><br><span class="line">1333</span><br><span class="line">1334</span><br><span class="line">1335</span><br><span class="line">1336</span><br><span class="line">1337</span><br><span class="line">1338</span><br><span class="line">1339</span><br><span class="line">1340</span><br><span class="line">1341</span><br><span class="line">1342</span><br><span class="line">1343</span><br><span class="line">1344</span><br><span class="line">1345</span><br><span class="line">1346</span><br><span class="line">1347</span><br><span class="line">1348</span><br><span class="line">1349</span><br><span class="line">1350</span><br><span class="line">1351</span><br><span class="line">1352</span><br><span class="line">1353</span><br><span class="line">1354</span><br><span class="line">1355</span><br><span class="line">1356</span><br><span class="line">1357</span><br><span class="line">1358</span><br><span class="line">1359</span><br><span class="line">1360</span><br><span class="line">1361</span><br><span class="line">1362</span><br><span class="line">1363</span><br><span class="line">1364</span><br><span class="line">1365</span><br><span class="line">1366</span><br><span class="line">1367</span><br><span class="line">1368</span><br><span class="line">1369</span><br><span class="line">1370</span><br><span class="line">1371</span><br><span class="line">1372</span><br><span class="line">1373</span><br><span class="line">1374</span><br><span class="line">1375</span><br><span class="line">1376</span><br><span class="line">1377</span><br><span class="line">1378</span><br><span class="line">1379</span><br><span class="line">1380</span><br><span class="line">1381</span><br><span class="line">1382</span><br><span class="line">1383</span><br><span class="line">1384</span><br><span class="line">1385</span><br><span class="line">1386</span><br><span class="line">1387</span><br><span class="line">1388</span><br><span class="line">1389</span><br><span class="line">1390</span><br><span class="line">1391</span><br><span class="line">1392</span><br><span class="line">1393</span><br><span class="line">1394</span><br><span class="line">1395</span><br><span class="line">1396</span><br><span class="line">1397</span><br><span class="line">1398</span><br><span class="line">1399</span><br><span class="line">1400</span><br><span class="line">1401</span><br><span class="line">1402</span><br><span class="line">1403</span><br><span class="line">1404</span><br><span class="line">1405</span><br><span class="line">1406</span><br><span class="line">1407</span><br><span class="line">1408</span><br><span class="line">1409</span><br><span class="line">1410</span><br><span class="line">1411</span><br><span class="line">1412</span><br><span class="line">1413</span><br><span class="line">1414</span><br><span class="line">1415</span><br><span class="line">1416</span><br><span class="line">1417</span><br><span class="line">1418</span><br><span class="line">1419</span><br><span class="line">1420</span><br><span class="line">1421</span><br><span class="line">1422</span><br><span class="line">1423</span><br><span class="line">1424</span><br><span class="line">1425</span><br><span class="line">1426</span><br><span class="line">1427</span><br><span class="line">1428</span><br><span class="line">1429</span><br><span class="line">1430</span><br><span class="line">1431</span><br><span class="line">1432</span><br><span class="line">1433</span><br><span class="line">1434</span><br><span class="line">1435</span><br><span class="line">1436</span><br><span class="line">1437</span><br><span class="line">1438</span><br><span class="line">1439</span><br><span class="line">1440</span><br><span class="line">1441</span><br><span class="line">1442</span><br><span class="line">1443</span><br><span class="line">1444</span><br><span class="line">1445</span><br><span class="line">1446</span><br><span class="line">1447</span><br><span class="line">1448</span><br><span class="line">1449</span><br><span class="line">1450</span><br><span class="line">1451</span><br><span class="line">1452</span><br><span class="line">1453</span><br><span class="line">1454</span><br><span class="line">1455</span><br><span class="line">1456</span><br><span class="line">1457</span><br><span class="line">1458</span><br><span class="line">1459</span><br><span class="line">1460</span><br><span class="line">1461</span><br><span class="line">1462</span><br><span class="line">1463</span><br><span class="line">1464</span><br><span class="line">1465</span><br><span class="line">1466</span><br><span class="line">1467</span><br><span class="line">1468</span><br><span class="line">1469</span><br><span class="line">1470</span><br><span class="line">1471</span><br><span class="line">1472</span><br><span class="line">1473</span><br><span class="line">1474</span><br><span class="line">1475</span><br><span class="line">1476</span><br><span class="line">1477</span><br><span class="line">1478</span><br><span class="line">1479</span><br><span class="line">1480</span><br><span class="line">1481</span><br><span class="line">1482</span><br><span class="line">1483</span><br><span class="line">1484</span><br><span class="line">1485</span><br><span class="line">1486</span><br><span class="line">1487</span><br><span class="line">1488</span><br><span class="line">1489</span><br><span class="line">1490</span><br><span class="line">1491</span><br><span class="line">1492</span><br><span class="line">1493</span><br><span class="line">1494</span><br><span class="line">1495</span><br><span class="line">1496</span><br><span class="line">1497</span><br><span class="line">1498</span><br><span class="line">1499</span><br><span class="line">1500</span><br><span class="line">1501</span><br><span class="line">1502</span><br><span class="line">1503</span><br><span class="line">1504</span><br><span class="line">1505</span><br><span class="line">1506</span><br><span class="line">1507</span><br><span class="line">1508</span><br><span class="line">1509</span><br><span class="line">1510</span><br><span class="line">1511</span><br><span class="line">1512</span><br><span class="line">1513</span><br><span class="line">1514</span><br><span class="line">1515</span><br><span class="line">1516</span><br><span class="line">1517</span><br><span class="line">1518</span><br><span class="line">1519</span><br><span class="line">1520</span><br><span class="line">1521</span><br><span class="line">1522</span><br><span class="line">1523</span><br><span class="line">1524</span><br><span class="line">1525</span><br><span class="line">1526</span><br><span class="line">1527</span><br><span class="line">1528</span><br><span class="line">1529</span><br><span class="line">1530</span><br><span class="line">1531</span><br><span class="line">1532</span><br><span class="line">1533</span><br><span class="line">1534</span><br><span class="line">1535</span><br><span class="line">1536</span><br><span class="line">1537</span><br><span class="line">1538</span><br><span class="line">1539</span><br><span class="line">1540</span><br><span class="line">1541</span><br><span class="line">1542</span><br><span class="line">1543</span><br><span class="line">1544</span><br><span class="line">1545</span><br><span class="line">1546</span><br><span class="line">1547</span><br><span class="line">1548</span><br><span class="line">1549</span><br><span class="line">1550</span><br><span class="line">1551</span><br><span class="line">1552</span><br><span class="line">1553</span><br><span class="line">1554</span><br><span class="line">1555</span><br><span class="line">1556</span><br><span class="line">1557</span><br><span class="line">1558</span><br><span class="line">1559</span><br><span class="line">1560</span><br><span class="line">1561</span><br><span class="line">1562</span><br><span class="line">1563</span><br><span class="line">1564</span><br><span class="line">1565</span><br><span class="line">1566</span><br><span class="line">1567</span><br><span class="line">1568</span><br><span class="line">1569</span><br><span class="line">1570</span><br><span class="line">1571</span><br><span class="line">1572</span><br><span class="line">1573</span><br><span class="line">1574</span><br><span class="line">1575</span><br><span class="line">1576</span><br><span class="line">1577</span><br><span class="line">1578</span><br><span class="line">1579</span><br><span class="line">1580</span><br><span class="line">1581</span><br><span class="line">1582</span><br><span class="line">1583</span><br><span class="line">1584</span><br><span class="line">1585</span><br><span class="line">1586</span><br><span class="line">1587</span><br><span class="line">1588</span><br><span class="line">1589</span><br><span class="line">1590</span><br><span class="line">1591</span><br><span class="line">1592</span><br><span class="line">1593</span><br><span class="line">1594</span><br><span class="line">1595</span><br><span class="line">1596</span><br><span class="line">1597</span><br><span class="line">1598</span><br><span class="line">1599</span><br><span class="line">1600</span><br><span class="line">1601</span><br><span class="line">1602</span><br><span class="line">1603</span><br><span class="line">1604</span><br><span class="line">1605</span><br><span class="line">1606</span><br><span class="line">1607</span><br><span class="line">1608</span><br><span class="line">1609</span><br><span class="line">1610</span><br><span class="line">1611</span><br><span class="line">1612</span><br><span class="line">1613</span><br><span class="line">1614</span><br><span class="line">1615</span><br><span class="line">1616</span><br><span class="line">1617</span><br><span class="line">1618</span><br><span class="line">1619</span><br><span class="line">1620</span><br><span class="line">1621</span><br><span class="line">1622</span><br><span class="line">1623</span><br><span class="line">1624</span><br><span class="line">1625</span><br><span class="line">1626</span><br><span class="line">1627</span><br><span class="line">1628</span><br><span class="line">1629</span><br><span class="line">1630</span><br><span class="line">1631</span><br><span class="line">1632</span><br><span class="line">1633</span><br><span class="line">1634</span><br><span class="line">1635</span><br><span class="line">1636</span><br><span class="line">1637</span><br><span class="line">1638</span><br><span class="line">1639</span><br><span class="line">1640</span><br><span class="line">1641</span><br><span class="line">1642</span><br><span class="line">1643</span><br><span class="line">1644</span><br><span class="line">1645</span><br><span class="line">1646</span><br><span class="line">1647</span><br><span class="line">1648</span><br><span class="line">1649</span><br><span class="line">1650</span><br><span class="line">1651</span><br><span class="line">1652</span><br><span class="line">1653</span><br><span class="line">1654</span><br><span class="line">1655</span><br><span class="line">1656</span><br><span class="line">1657</span><br><span class="line">1658</span><br><span class="line">1659</span><br><span class="line">1660</span><br><span class="line">1661</span><br><span class="line">1662</span><br><span class="line">1663</span><br><span class="line">1664</span><br><span class="line">1665</span><br><span class="line">1666</span><br><span class="line">1667</span><br><span class="line">1668</span><br><span class="line">1669</span><br><span class="line">1670</span><br><span class="line">1671</span><br><span class="line">1672</span><br><span class="line">1673</span><br><span class="line">1674</span><br><span class="line">1675</span><br><span class="line">1676</span><br><span class="line">1677</span><br><span class="line">1678</span><br><span class="line">1679</span><br><span class="line">1680</span><br><span class="line">1681</span><br><span class="line">1682</span><br><span class="line">1683</span><br><span class="line">1684</span><br><span class="line">1685</span><br><span class="line">1686</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Zepto v1.2.0 - zepto event ajax form ie - zeptojs.com/license */</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">global, factory</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> define === <span class="string">'function'</span> &amp;&amp; define.amd)</span><br><span class="line">    define(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> factory(global) &#125;)</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    factory(global)</span><br><span class="line">&#125;(<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span>(<span class="params">window</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> Zepto = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> <span class="literal">undefined</span>, key, $, classList, emptyArray = [], concat = emptyArray.concat, filter = emptyArray.filter, slice = emptyArray.slice,</span><br><span class="line">    <span class="built_in">document</span> = <span class="built_in">window</span>.document,</span><br><span class="line">    elementDisplay = &#123;&#125;, classCache = &#123;&#125;,</span><br><span class="line">    cssNumber = &#123; <span class="string">'column-count'</span>: <span class="number">1</span>, <span class="string">'columns'</span>: <span class="number">1</span>, <span class="string">'font-weight'</span>: <span class="number">1</span>, <span class="string">'line-height'</span>: <span class="number">1</span>,<span class="string">'opacity'</span>: <span class="number">1</span>, <span class="string">'z-index'</span>: <span class="number">1</span>, <span class="string">'zoom'</span>: <span class="number">1</span> &#125;,</span><br><span class="line">    fragmentRE = <span class="regexp">/^\s*&lt;(\w+|!)[^&gt;]*&gt;/</span>, <span class="comment">// &lt;...&gt;都匹配</span></span><br><span class="line">    singleTagRE = <span class="regexp">/^&lt;(\w+)\s*\/?&gt;(?:&lt;\/\1&gt;|)$/</span>, <span class="comment">// 只匹配没有内容的标签，如: &lt;div&gt;&lt;/div&gt;或&lt;input /&gt;</span></span><br><span class="line">    <span class="comment">// 匹配&lt;div /&gt;, &lt;: /&gt;这样的，除了&lt;input /&gt;,&lt;img /&gt;这样的</span></span><br><span class="line">    tagExpanderRE = <span class="regexp">/&lt;(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^&gt;]*)\/&gt;/ig</span>,</span><br><span class="line">    rootNodeRE = <span class="regexp">/^(?:body|html)$/i</span>,</span><br><span class="line">    capitalRE = <span class="regexp">/([A-Z])/g</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// special attributes that should be get/set via method calls</span></span><br><span class="line">    methodAttributes = [<span class="string">'val'</span>, <span class="string">'css'</span>, <span class="string">'html'</span>, <span class="string">'text'</span>, <span class="string">'data'</span>, <span class="string">'width'</span>, <span class="string">'height'</span>, <span class="string">'offset'</span>],</span><br><span class="line"></span><br><span class="line">    adjacencyOperators = [ <span class="string">'after'</span>, <span class="string">'prepend'</span>, <span class="string">'before'</span>, <span class="string">'append'</span> ],</span><br><span class="line">    table = <span class="built_in">document</span>.createElement(<span class="string">'table'</span>),</span><br><span class="line">    tableRow = <span class="built_in">document</span>.createElement(<span class="string">'tr'</span>),</span><br><span class="line">    containers = &#123;</span><br><span class="line">      <span class="string">'tr'</span>: <span class="built_in">document</span>.createElement(<span class="string">'tbody'</span>),</span><br><span class="line">      <span class="string">'tbody'</span>: table, </span><br><span class="line">      <span class="string">'thead'</span>: table, </span><br><span class="line">      <span class="string">'tfoot'</span>: table,</span><br><span class="line">      <span class="string">'td'</span>: tableRow, </span><br><span class="line">      <span class="string">'th'</span>: tableRow,</span><br><span class="line">      <span class="string">'*'</span>: <span class="built_in">document</span>.createElement(<span class="string">'div'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    readyRE = <span class="regexp">/complete|loaded|interactive/</span>,</span><br><span class="line">    simpleSelectorRE = <span class="regexp">/^[\w-]*$/</span>,</span><br><span class="line">    class2type = &#123;&#125;,</span><br><span class="line">    toString = class2type.toString,</span><br><span class="line">    zepto = &#123;&#125;,</span><br><span class="line">    camelize, </span><br><span class="line">    uniq,</span><br><span class="line">    tempParent = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>),</span><br><span class="line">    propMap = &#123;</span><br><span class="line">      <span class="string">'tabindex'</span>: <span class="string">'tabIndex'</span>,</span><br><span class="line">      <span class="string">'readonly'</span>: <span class="string">'readOnly'</span>,</span><br><span class="line">      <span class="string">'for'</span>: <span class="string">'htmlFor'</span>,</span><br><span class="line">      <span class="string">'class'</span>: <span class="string">'className'</span>,</span><br><span class="line">      <span class="string">'maxlength'</span>: <span class="string">'maxLength'</span>,</span><br><span class="line">      <span class="string">'cellspacing'</span>: <span class="string">'cellSpacing'</span>,</span><br><span class="line">      <span class="string">'cellpadding'</span>: <span class="string">'cellPadding'</span>,</span><br><span class="line">      <span class="string">'rowspan'</span>: <span class="string">'rowSpan'</span>,</span><br><span class="line">      <span class="string">'colspan'</span>: <span class="string">'colSpan'</span>,</span><br><span class="line">      <span class="string">'usemap'</span>: <span class="string">'useMap'</span>,</span><br><span class="line">      <span class="string">'frameborder'</span>: <span class="string">'frameBorder'</span>,</span><br><span class="line">      <span class="string">'contenteditable'</span>: <span class="string">'contentEditable'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 判断是否为数组</span></span><br><span class="line">    isArray = <span class="built_in">Array</span>.isArray ||</span><br><span class="line">      <span class="function"><span class="keyword">function</span>(<span class="params">object</span>)</span>&#123; <span class="keyword">return</span> object <span class="keyword">instanceof</span> <span class="built_in">Array</span> &#125;</span><br><span class="line">  <span class="comment">// 判断节点是否包含选择器</span></span><br><span class="line">  zepto.matches = <span class="function"><span class="keyword">function</span>(<span class="params">element, selector</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!selector || !element || element.nodeType !== <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">var</span> matchesSelector = element.matches || element.webkitMatchesSelector ||</span><br><span class="line">                          element.mozMatchesSelector || element.oMatchesSelector ||</span><br><span class="line">                          element.matchesSelector</span><br><span class="line">    <span class="keyword">if</span> (matchesSelector) <span class="keyword">return</span> matchesSelector.call(element, selector)</span><br><span class="line">    <span class="comment">// fall back to performing a selector:</span></span><br><span class="line">    <span class="keyword">var</span> match, parent = element.parentNode, temp = !parent</span><br><span class="line">    <span class="keyword">if</span> (temp) (parent = tempParent).appendChild(element)</span><br><span class="line">    <span class="comment">// ~这个符号可以将-1转化为0，直接判断就是false了</span></span><br><span class="line">    match = ~zepto.qsa(parent, selector).indexOf(element)</span><br><span class="line">    temp &amp;&amp; tempParent.removeChild(element)</span><br><span class="line">    <span class="keyword">return</span> match</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 查看数据类型</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">type</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> obj == <span class="literal">null</span> ? <span class="built_in">String</span>(obj) :</span><br><span class="line">      class2type[toString.call(obj)] || <span class="string">"object"</span></span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 判断是否为函数</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">isFunction</span>(<span class="params">value</span>) </span>&#123; <span class="keyword">return</span> type(value) == <span class="string">"function"</span> &#125;</span><br><span class="line">  <span class="comment">// 判断是否为window对象</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">isWindow</span>(<span class="params">obj</span>)     </span>&#123; <span class="keyword">return</span> obj != <span class="literal">null</span> &amp;&amp; obj == obj.window &#125;</span><br><span class="line">  <span class="comment">// 判断是否为document对象  </span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">isDocument</span>(<span class="params">obj</span>)   </span>&#123; <span class="keyword">return</span> obj != <span class="literal">null</span> &amp;&amp; obj.nodeType == obj.DOCUMENT_NODE &#125;</span><br><span class="line">  <span class="comment">// 判断是否为object对象  </span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">isObject</span>(<span class="params">obj</span>)     </span>&#123; <span class="keyword">return</span> type(obj) == <span class="string">"object"</span> &#125;</span><br><span class="line">  <span class="comment">// 判断是不是纯对象，如 &#123;&#125;,prototype没有添加的</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">isPlainObject</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> isObject(obj) &amp;&amp; !isWindow(obj) &amp;&amp; <span class="built_in">Object</span>.getPrototypeOf(obj) == <span class="built_in">Object</span>.prototype</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 判断是不是类数组对象</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">likeArray</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> length = !!obj &amp;&amp; <span class="string">'length'</span> <span class="keyword">in</span> obj &amp;&amp; obj.length,</span><br><span class="line">      type = $.type(obj)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'function'</span> != type &amp;&amp; !isWindow(obj) &amp;&amp; (</span><br><span class="line">      <span class="string">'array'</span> == type || length === <span class="number">0</span> ||</span><br><span class="line">        (<span class="keyword">typeof</span> length == <span class="string">'number'</span> &amp;&amp; length &gt; <span class="number">0</span> &amp;&amp; (length - <span class="number">1</span>) <span class="keyword">in</span> obj)</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 压缩精简数组，去掉null，undefined</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">compact</span>(<span class="params">array</span>) </span>&#123; <span class="keyword">return</span> filter.call(array, <span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123; <span class="keyword">return</span> item != <span class="literal">null</span> &#125;) &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">flatten</span>(<span class="params">array</span>) </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> array.length &gt; <span class="number">0</span> ? $.fn.concat.apply([], array) : array </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 将font-size形式转换为fontSize驼峰形式</span></span><br><span class="line">  camelize = <span class="function"><span class="keyword">function</span>(<span class="params">str</span>)</span>&#123; </span><br><span class="line">    <span class="keyword">return</span> str.replace(<span class="regexp">/-+(.)?/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params">match, chr</span>)</span>&#123; <span class="keyword">return</span> chr ? chr.toUpperCase() : <span class="string">''</span> &#125;) </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 将驼峰命名转为-形式,正则的$1,$2...代表前边小括号里的内容</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">dasherize</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> str.replace(<span class="regexp">/::/g</span>, <span class="string">'/'</span>)</span><br><span class="line">           .replace(<span class="regexp">/([A-Z]+)([A-Z][a-z])/g</span>, <span class="string">'$1_$2'</span>)</span><br><span class="line">           .replace(<span class="regexp">/([a-z\d])([A-Z])/g</span>, <span class="string">'$1_$2'</span>)</span><br><span class="line">           .replace(<span class="regexp">/_/g</span>, <span class="string">'-'</span>)</span><br><span class="line">           .toLowerCase()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 删除数组中重复的元素，这个方法好牛逼</span></span><br><span class="line">  uniq = <span class="function"><span class="keyword">function</span>(<span class="params">array</span>)</span>&#123; </span><br><span class="line">    <span class="keyword">return</span> filter.call(array, <span class="function"><span class="keyword">function</span>(<span class="params">item, idx</span>)</span>&#123; <span class="keyword">return</span> array.indexOf(item) == idx &#125;) </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如果classCache中没有name的话，则新建一个这个name的正则</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">classRE</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name <span class="keyword">in</span> classCache ?</span><br><span class="line">      classCache[name] : (classCache[name] = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'(^|\\s)'</span> + name + <span class="string">'(\\s|$)'</span>))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 应该是给css赋值的时候，如果没在cssNumber这个表中的话就加上'px'后缀</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">maybeAddPx</span>(<span class="params">name, value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">typeof</span> value == <span class="string">"number"</span> &amp;&amp; !cssNumber[dasherize(name)]) ? value + <span class="string">"px"</span> : value</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 应该是查看如div,table这样的元素的默认display的值</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">defaultDisplay</span>(<span class="params">nodeName</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> element, display</span><br><span class="line">    <span class="keyword">if</span> (!elementDisplay[nodeName]) &#123;</span><br><span class="line">      element = <span class="built_in">document</span>.createElement(nodeName)</span><br><span class="line">      <span class="built_in">document</span>.body.appendChild(element)</span><br><span class="line">      display = getComputedStyle(element, <span class="string">''</span>).getPropertyValue(<span class="string">"display"</span>)</span><br><span class="line">      element.parentNode.removeChild(element)</span><br><span class="line">      display == <span class="string">"none"</span> &amp;&amp; (display = <span class="string">"block"</span>)</span><br><span class="line">      elementDisplay[nodeName] = display</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> elementDisplay[nodeName]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 获取节点的子元素</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">children</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'children'</span> <span class="keyword">in</span> element ?</span><br><span class="line">      slice.call(element.children) :</span><br><span class="line">      $.map(element.childNodes, <span class="function"><span class="keyword">function</span>(<span class="params">node</span>)</span>&#123; <span class="keyword">if</span> (node.nodeType == <span class="number">1</span>) <span class="keyword">return</span> node &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// </span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Z</span>(<span class="params">dom, selector</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> i, len = dom ? dom.length : <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) <span class="keyword">this</span>[i] = dom[i]</span><br><span class="line">    <span class="keyword">this</span>.length = len</span><br><span class="line">    <span class="keyword">this</span>.selector = selector || <span class="string">''</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `$.zepto.fragment` takes a html string and an optional tag name</span></span><br><span class="line">  <span class="comment">// to generate DOM nodes from the given html string.</span></span><br><span class="line">  <span class="comment">// The generated DOM nodes are returned as an array.</span></span><br><span class="line">  <span class="comment">// This function can be overridden in plugins for example to make</span></span><br><span class="line">  <span class="comment">// it compatible with browsers that don't support the DOM fully.</span></span><br><span class="line">  zepto.fragment = <span class="function"><span class="keyword">function</span>(<span class="params">html, name, properties</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> dom, nodes, container</span><br><span class="line"></span><br><span class="line">    <span class="comment">// A special case optimization for a single tag</span></span><br><span class="line">    <span class="keyword">if</span> (singleTagRE.test(html)) dom = $(<span class="built_in">document</span>.createElement(<span class="built_in">RegExp</span>.$<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!dom) &#123;</span><br><span class="line">      <span class="keyword">if</span> (html.replace) html = html.replace(tagExpanderRE, <span class="string">"&lt;$1&gt;&lt;/$2&gt;"</span>) <span class="comment">// 将&lt;div/&gt;转化成&lt;div&gt;&lt;/div&gt;</span></span><br><span class="line">      <span class="keyword">if</span> (name === <span class="literal">undefined</span>) name = fragmentRE.test(html) &amp;&amp; <span class="built_in">RegExp</span>.$<span class="number">1</span></span><br><span class="line">      <span class="keyword">if</span> (!(name <span class="keyword">in</span> containers)) name = <span class="string">'*'</span></span><br><span class="line">      <span class="comment">// 下面的做法就是将'&lt;span&gt;12345&lt;/span&gt;'这样的字符串转为dom节点的形式</span></span><br><span class="line">      container = containers[name]</span><br><span class="line">      container.innerHTML = <span class="string">''</span> + html</span><br><span class="line">      dom = $.each(slice.call(container.childNodes), <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        container.removeChild(<span class="keyword">this</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isPlainObject(properties)) &#123;</span><br><span class="line">      nodes = $(dom)</span><br><span class="line">      $.each(properties, <span class="function"><span class="keyword">function</span>(<span class="params">key, value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (methodAttributes.indexOf(key) &gt; <span class="number">-1</span>) nodes[key](value)</span><br><span class="line">        <span class="keyword">else</span> nodes.attr(key, value)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dom</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">window</span>.haha = zepto;</span><br><span class="line">  <span class="comment">// `$.zepto.Z` swaps out the prototype of the given `dom` array</span></span><br><span class="line">  <span class="comment">// of nodes with `$.fn` and thus supplying all the Zepto functions</span></span><br><span class="line">  <span class="comment">// to the array. This method can be overridden in plugins.</span></span><br><span class="line">  zepto.Z = <span class="function"><span class="keyword">function</span>(<span class="params">dom, selector</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Z(dom, selector)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `$.zepto.isZ` should return `true` if the given object is a Zepto</span></span><br><span class="line">  <span class="comment">// collection. This method can be overridden in plugins.</span></span><br><span class="line">  zepto.isZ = <span class="function"><span class="keyword">function</span>(<span class="params">object</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> object <span class="keyword">instanceof</span> zepto.Z</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `$.zepto.init` is Zepto's counterpart to jQuery's `$.fn.init` and</span></span><br><span class="line">  <span class="comment">// takes a CSS selector and an optional context (and handles various</span></span><br><span class="line">  <span class="comment">// special cases).</span></span><br><span class="line">  <span class="comment">// This method can be overridden in plugins.</span></span><br><span class="line">  zepto.init = <span class="function"><span class="keyword">function</span>(<span class="params">selector, context</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> dom</span><br><span class="line">    <span class="comment">// If nothing given, return an empty Zepto collection</span></span><br><span class="line">    <span class="keyword">if</span> (!selector) <span class="keyword">return</span> zepto.Z()</span><br><span class="line">    <span class="comment">// Optimize for string selectors</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> selector == <span class="string">'string'</span>) &#123;</span><br><span class="line">      selector = selector.trim()</span><br><span class="line">      <span class="comment">// If it's a html fragment, create nodes from it</span></span><br><span class="line">      <span class="comment">// Note: In both Chrome 21 and Firefox 15, DOM error 12</span></span><br><span class="line">      <span class="comment">// is thrown if the fragment doesn't begin with &lt;</span></span><br><span class="line">      <span class="keyword">if</span> (selector[<span class="number">0</span>] == <span class="string">'&lt;'</span> &amp;&amp; fragmentRE.test(selector))</span><br><span class="line">        dom = zepto.fragment(selector, <span class="built_in">RegExp</span>.$<span class="number">1</span>, context), selector = <span class="literal">null</span></span><br><span class="line">      <span class="comment">// If there's a context, create a collection on that context first, and select</span></span><br><span class="line">      <span class="comment">// nodes from there</span></span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (context !== <span class="literal">undefined</span>) <span class="keyword">return</span> $(context).find(selector)</span><br><span class="line">      <span class="comment">// If it's a CSS selector, use it to select nodes.</span></span><br><span class="line">      <span class="keyword">else</span> dom = zepto.qsa(<span class="built_in">document</span>, selector)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// If a function is given, call it when the DOM is ready</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (isFunction(selector)) <span class="keyword">return</span> $(<span class="built_in">document</span>).ready(selector)</span><br><span class="line">    <span class="comment">// If a Zepto collection is given, just return it</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (zepto.isZ(selector)) <span class="keyword">return</span> selector</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// normalize array if an array of nodes is given</span></span><br><span class="line">      <span class="keyword">if</span> (isArray(selector)) dom = compact(selector)</span><br><span class="line">      <span class="comment">// Wrap DOM nodes.</span></span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (isObject(selector))</span><br><span class="line">        dom = [selector], selector = <span class="literal">null</span></span><br><span class="line">      <span class="comment">// If it's a html fragment, create nodes from it</span></span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (fragmentRE.test(selector))</span><br><span class="line">        dom = zepto.fragment(selector.trim(), <span class="built_in">RegExp</span>.$<span class="number">1</span>, context), selector = <span class="literal">null</span></span><br><span class="line">      <span class="comment">// If there's a context, create a collection on that context first, and select</span></span><br><span class="line">      <span class="comment">// nodes from there</span></span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (context !== <span class="literal">undefined</span>) <span class="keyword">return</span> $(context).find(selector)</span><br><span class="line">      <span class="comment">// And last but no least, if it's a CSS selector, use it to select nodes.</span></span><br><span class="line">      <span class="keyword">else</span> dom = zepto.qsa(<span class="built_in">document</span>, selector)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// create a new Zepto collection from the nodes found</span></span><br><span class="line">    <span class="keyword">return</span> zepto.Z(dom, selector)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `$` will be the base `Zepto` object. When calling this</span></span><br><span class="line">  <span class="comment">// function just call `$.zepto.init, which makes the implementation</span></span><br><span class="line">  <span class="comment">// details of selecting nodes and creating Zepto collections</span></span><br><span class="line">  <span class="comment">// patchable in plugins.</span></span><br><span class="line">  $ = <span class="function"><span class="keyword">function</span>(<span class="params">selector, context</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> zepto.init(selector, context)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 深度拷贝的函数</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">extend</span>(<span class="params">target, source, deep</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (key <span class="keyword">in</span> source)</span><br><span class="line">      <span class="keyword">if</span> (deep &amp;&amp; (isPlainObject(source[key]) || isArray(source[key]))) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isPlainObject(source[key]) &amp;&amp; !isPlainObject(target[key]))</span><br><span class="line">          target[key] = &#123;&#125;</span><br><span class="line">        <span class="keyword">if</span> (isArray(source[key]) &amp;&amp; !isArray(target[key]))</span><br><span class="line">          target[key] = []</span><br><span class="line">        extend(target[key], source[key], deep)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (source[key] !== <span class="literal">undefined</span>) target[key] = source[key]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Copy all but undefined properties from one or more</span></span><br><span class="line">  <span class="comment">// objects to the `target` object.</span></span><br><span class="line">  $.extend = <span class="function"><span class="keyword">function</span>(<span class="params">target</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> deep, args = slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> target == <span class="string">'boolean'</span>) &#123;</span><br><span class="line">      deep = target</span><br><span class="line">      target = args.shift()</span><br><span class="line">    &#125;</span><br><span class="line">    args.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">arg</span>)</span>&#123; extend(target, arg, deep) &#125;)</span><br><span class="line">    <span class="keyword">return</span> target</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `$.zepto.qsa` is Zepto's CSS selector implementation which</span></span><br><span class="line">  <span class="comment">// uses `document.querySelectorAll` and optimizes for some special cases, like `#id`.</span></span><br><span class="line">  <span class="comment">// This method can be overridden in plugins.</span></span><br><span class="line">  zepto.qsa = <span class="function"><span class="keyword">function</span>(<span class="params">element, selector</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> found,</span><br><span class="line">        maybeID = selector[<span class="number">0</span>] == <span class="string">'#'</span>,</span><br><span class="line">        maybeClass = !maybeID &amp;&amp; selector[<span class="number">0</span>] == <span class="string">'.'</span>,</span><br><span class="line">        nameOnly = maybeID || maybeClass ? selector.slice(<span class="number">1</span>) : selector, <span class="comment">// Ensure that a 1 char tag name still gets checked</span></span><br><span class="line">        isSimple = simpleSelectorRE.test(nameOnly)</span><br><span class="line">    <span class="keyword">return</span> (element.getElementById &amp;&amp; isSimple &amp;&amp; maybeID) ? <span class="comment">// Safari DocumentFragment doesn't have getElementById</span></span><br><span class="line">      ( (found = element.getElementById(nameOnly)) ? [found] : [] ) :</span><br><span class="line">      (element.nodeType !== <span class="number">1</span> &amp;&amp; element.nodeType !== <span class="number">9</span> &amp;&amp; element.nodeType !== <span class="number">11</span>) ? [] :</span><br><span class="line">      slice.call(</span><br><span class="line">        isSimple &amp;&amp; !maybeID &amp;&amp; element.getElementsByClassName ? <span class="comment">// DocumentFragment doesn't have getElementsByClassName/TagName</span></span><br><span class="line">          maybeClass ? element.getElementsByClassName(nameOnly) : <span class="comment">// If it's simple, it could be a class</span></span><br><span class="line">          element.getElementsByTagName(selector) : <span class="comment">// Or a tag</span></span><br><span class="line">          element.querySelectorAll(selector) <span class="comment">// Or it's not simple, and we need to query all</span></span><br><span class="line">      )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">filtered</span>(<span class="params">nodes, selector</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> selector == <span class="literal">null</span> ? $(nodes) : $(nodes).filter(selector)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断父节点中是否包含子节点，parent为父节点，node为子节点</span></span><br><span class="line">  $.contains = <span class="built_in">document</span>.documentElement.contains ?</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">parent, node</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> parent !== node &amp;&amp; parent.contains(node)</span><br><span class="line">    &#125; :</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">parent, node</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">while</span> (node &amp;&amp; (node = node.parentNode))</span><br><span class="line">        <span class="keyword">if</span> (node === parent) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">funcArg</span>(<span class="params">context, arg, idx, payload</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> isFunction(arg) ? arg.call(context, idx, payload) : arg</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 设置node节点的属性值</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">setAttribute</span>(<span class="params">node, name, value</span>) </span>&#123;</span><br><span class="line">    value == <span class="literal">null</span> ? node.removeAttribute(name) : node.setAttribute(name, value)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// access className property while respecting SVGAnimatedString</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">className</span>(<span class="params">node, value</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> klass = node.className || <span class="string">''</span>,</span><br><span class="line">        svg   = klass &amp;&amp; klass.baseVal !== <span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (value === <span class="literal">undefined</span>) <span class="keyword">return</span> svg ? klass.baseVal : klass</span><br><span class="line">    svg ? (klass.baseVal = value) : (node.className = value)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// "true"  =&gt; true</span></span><br><span class="line">  <span class="comment">// "false" =&gt; false</span></span><br><span class="line">  <span class="comment">// "null"  =&gt; null</span></span><br><span class="line">  <span class="comment">// "42"    =&gt; 42</span></span><br><span class="line">  <span class="comment">// "42.5"  =&gt; 42.5</span></span><br><span class="line">  <span class="comment">// "08"    =&gt; "08"</span></span><br><span class="line">  <span class="comment">// JSON    =&gt; parse if valid</span></span><br><span class="line">  <span class="comment">// String  =&gt; self</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 反序列化</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">deserializeValue</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> value ?</span><br><span class="line">        value == <span class="string">"true"</span> ||</span><br><span class="line">        ( value == <span class="string">"false"</span> ? <span class="literal">false</span> :</span><br><span class="line">          value == <span class="string">"null"</span> ? <span class="literal">null</span> :</span><br><span class="line">          +value + <span class="string">""</span> == value ? +value :</span><br><span class="line">          /^[\[\&#123;]/.test(value) ? $.parseJSON(value) :</span><br><span class="line">          value )</span><br><span class="line">        : value</span><br><span class="line">    &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">      <span class="keyword">return</span> value</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  $.type = type</span><br><span class="line">  $.isFunction = isFunction</span><br><span class="line">  $.isWindow = isWindow</span><br><span class="line">  $.isArray = isArray</span><br><span class="line">  $.isPlainObject = isPlainObject</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断是否为空对象函数</span></span><br><span class="line">  $.isEmptyObject = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name</span><br><span class="line">    <span class="keyword">for</span> (name <span class="keyword">in</span> obj) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断是否是数字形式的 123或'123'</span></span><br><span class="line">  $.isNumeric = <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="built_in">Number</span>(val), type = <span class="keyword">typeof</span> val</span><br><span class="line">    <span class="keyword">return</span> val != <span class="literal">null</span> &amp;&amp; type != <span class="string">'boolean'</span> &amp;&amp;</span><br><span class="line">      (type != <span class="string">'string'</span> || val.length) &amp;&amp;</span><br><span class="line">      !<span class="built_in">isNaN</span>(num) &amp;&amp; <span class="built_in">isFinite</span>(num) || <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断元素是否在数组中，array数组，elem元素，i是从数组中的第几位开始查找</span></span><br><span class="line">  $.inArray = <span class="function"><span class="keyword">function</span>(<span class="params">elem, array, i</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> emptyArray.indexOf.call(array, elem, i)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  $.camelCase = camelize</span><br><span class="line">  $.trim = <span class="function"><span class="keyword">function</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> str == <span class="literal">null</span> ? <span class="string">""</span> : <span class="built_in">String</span>.prototype.trim.call(str)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// plugin compatibility</span></span><br><span class="line">  $.uuid = <span class="number">0</span></span><br><span class="line">  $.support = &#123; &#125;</span><br><span class="line">  $.expr = &#123; &#125;</span><br><span class="line">  $.noop = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// map函数，对elements进行处理后返回新数组</span></span><br><span class="line">  $.map = <span class="function"><span class="keyword">function</span>(<span class="params">elements, callback</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> value, values = [], i, key</span><br><span class="line">    <span class="keyword">if</span> (likeArray(elements))</span><br><span class="line">      <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; elements.length; i++) &#123;</span><br><span class="line">        value = callback(elements[i], i)</span><br><span class="line">        <span class="keyword">if</span> (value != <span class="literal">null</span>) values.push(value)</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="keyword">for</span> (key <span class="keyword">in</span> elements) &#123;</span><br><span class="line">        value = callback(elements[key], key)</span><br><span class="line">        <span class="keyword">if</span> (value != <span class="literal">null</span>) values.push(value)</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">return</span> flatten(values)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 遍历elements，执行callback函数，如果执行时返回false，则停止遍历操作</span></span><br><span class="line">  $.each = <span class="function"><span class="keyword">function</span>(<span class="params">elements, callback</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> i, key</span><br><span class="line">    <span class="keyword">if</span> (likeArray(elements)) &#123;</span><br><span class="line">      <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; elements.length; i++)</span><br><span class="line">        <span class="keyword">if</span> (callback.call(elements[i], i, elements[i]) === <span class="literal">false</span>) <span class="keyword">return</span> elements</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (key <span class="keyword">in</span> elements)</span><br><span class="line">        <span class="keyword">if</span> (callback.call(elements[key], key, elements[key]) === <span class="literal">false</span>) <span class="keyword">return</span> elements</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> elements</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 过滤数组</span></span><br><span class="line">  $.grep = <span class="function"><span class="keyword">function</span>(<span class="params">elements, callback</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> filter.call(elements, callback)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>.JSON) $.parseJSON = <span class="built_in">JSON</span>.parse</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Populate the class2type map</span></span><br><span class="line">  $.each(<span class="string">"Boolean Number String Function Array Date RegExp Object Error"</span>.split(<span class="string">" "</span>), <span class="function"><span class="keyword">function</span>(<span class="params">i, name</span>) </span>&#123;</span><br><span class="line">    class2type[ <span class="string">"[object "</span> + name + <span class="string">"]"</span> ] = name.toLowerCase()</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Define methods that will be available on all</span></span><br><span class="line">  <span class="comment">// Zepto collections</span></span><br><span class="line">  $.fn = &#123;</span><br><span class="line">    <span class="keyword">constructor</span>: zepto.Z,</span><br><span class="line">    length: 0,</span><br><span class="line"></span><br><span class="line">    // Because a collection acts like an array</span><br><span class="line">    // copy over these useful array functions.</span><br><span class="line">    forEach: emptyArray.forEach,</span><br><span class="line">    reduce: emptyArray.reduce,</span><br><span class="line">    push: emptyArray.push,</span><br><span class="line">    sort: emptyArray.sort,</span><br><span class="line">    splice: emptyArray.splice,</span><br><span class="line">    indexOf: emptyArray.indexOf,</span><br><span class="line">    concat: function()&#123;</span><br><span class="line">      <span class="keyword">var</span> i, value, args = []</span><br><span class="line">      <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">        value = <span class="built_in">arguments</span>[i]</span><br><span class="line">        args[i] = zepto.isZ(value) ? value.toArray() : value</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> concat.apply(zepto.isZ(<span class="keyword">this</span>) ? <span class="keyword">this</span>.toArray() : <span class="keyword">this</span>, args)</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// `map` and `slice` in the jQuery API work differently</span></span><br><span class="line">    <span class="comment">// from their array counterparts</span></span><br><span class="line">    map: <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> $($.map(<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span>(<span class="params">el, i</span>)</span>&#123; <span class="keyword">return</span> fn.call(el, i, el) &#125;))</span><br><span class="line">    &#125;,</span><br><span class="line">    slice: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> $(slice.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>))</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    ready: <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>)</span>&#123;</span><br><span class="line">      <span class="comment">// need to check if document.body exists for IE as that browser reports</span></span><br><span class="line">      <span class="comment">// document ready when it hasn't yet created the body element</span></span><br><span class="line">      <span class="keyword">if</span> (readyRE.test(<span class="built_in">document</span>.readyState) &amp;&amp; <span class="built_in">document</span>.body) callback($)</span><br><span class="line">      <span class="keyword">else</span> <span class="built_in">document</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; callback($) &#125;, <span class="literal">false</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">    &#125;,</span><br><span class="line">    get: <span class="function"><span class="keyword">function</span>(<span class="params">idx</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> idx === <span class="literal">undefined</span> ? slice.call(<span class="keyword">this</span>) : <span class="keyword">this</span>[idx &gt;= <span class="number">0</span> ? idx : idx + <span class="keyword">this</span>.length]</span><br><span class="line">    &#125;,</span><br><span class="line">    toArray: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>.get() &#125;,</span><br><span class="line">    size: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.length</span><br><span class="line">    &#125;,</span><br><span class="line">    remove: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.parentNode != <span class="literal">null</span>)</span><br><span class="line">          <span class="keyword">this</span>.parentNode.removeChild(<span class="keyword">this</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    each: <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>)</span>&#123;</span><br><span class="line">      emptyArray.every.call(<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span>(<span class="params">el, idx</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> callback.call(el, idx, el) !== <span class="literal">false</span></span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">    &#125;,</span><br><span class="line">    filter: <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (isFunction(selector)) <span class="keyword">return</span> <span class="keyword">this</span>.not(<span class="keyword">this</span>.not(selector))</span><br><span class="line">      <span class="keyword">return</span> $(filter.call(<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span>(<span class="params">element</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> zepto.matches(element, selector)</span><br><span class="line">      &#125;))</span><br><span class="line">    &#125;,</span><br><span class="line">    add: <span class="function"><span class="keyword">function</span>(<span class="params">selector,context</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> $(uniq(<span class="keyword">this</span>.concat($(selector,context))))</span><br><span class="line">    &#125;,</span><br><span class="line">    is: <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.length &gt; <span class="number">0</span> &amp;&amp; zepto.matches(<span class="keyword">this</span>[<span class="number">0</span>], selector)</span><br><span class="line">    &#125;,</span><br><span class="line">    not: <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> nodes=[]</span><br><span class="line">      <span class="keyword">if</span> (isFunction(selector) &amp;&amp; selector.call !== <span class="literal">undefined</span>)</span><br><span class="line">        <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">idx</span>)</span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (!selector.call(<span class="keyword">this</span>,idx)) nodes.push(<span class="keyword">this</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> excludes = <span class="keyword">typeof</span> selector == <span class="string">'string'</span> ? <span class="keyword">this</span>.filter(selector) :</span><br><span class="line">          (likeArray(selector) &amp;&amp; isFunction(selector.item)) ? slice.call(selector) : $(selector)</span><br><span class="line">        <span class="keyword">this</span>.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">el</span>)</span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (excludes.indexOf(el) &lt; <span class="number">0</span>) nodes.push(el)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> $(nodes)</span><br><span class="line">    &#125;,</span><br><span class="line">    has: <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.filter(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> isObject(selector) ?</span><br><span class="line">          $.contains(<span class="keyword">this</span>, selector) :</span><br><span class="line">          $(<span class="keyword">this</span>).find(selector).size()</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    eq: <span class="function"><span class="keyword">function</span>(<span class="params">idx</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> idx === <span class="number">-1</span> ? <span class="keyword">this</span>.slice(idx) : <span class="keyword">this</span>.slice(idx, + idx + <span class="number">1</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    first: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> el = <span class="keyword">this</span>[<span class="number">0</span>]</span><br><span class="line">      <span class="keyword">return</span> el &amp;&amp; !isObject(el) ? el : $(el)</span><br><span class="line">    &#125;,</span><br><span class="line">    last: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> el = <span class="keyword">this</span>[<span class="keyword">this</span>.length - <span class="number">1</span>]</span><br><span class="line">      <span class="keyword">return</span> el &amp;&amp; !isObject(el) ? el : $(el)</span><br><span class="line">    &#125;,</span><br><span class="line">    find: <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> result, $<span class="keyword">this</span> = <span class="keyword">this</span></span><br><span class="line">      <span class="keyword">if</span> (!selector) result = $()</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> selector == <span class="string">'object'</span>)</span><br><span class="line">        result = $(selector).filter(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          <span class="keyword">var</span> node = <span class="keyword">this</span></span><br><span class="line">          <span class="keyword">return</span> emptyArray.some.call($<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span>(<span class="params">parent</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> $.contains(parent, node)</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.length == <span class="number">1</span>) result = $(zepto.qsa(<span class="keyword">this</span>[<span class="number">0</span>], selector))</span><br><span class="line">      <span class="keyword">else</span> result = <span class="keyword">this</span>.map(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> zepto.qsa(<span class="keyword">this</span>, selector) &#125;)</span><br><span class="line">      <span class="keyword">return</span> result</span><br><span class="line">    &#125;,</span><br><span class="line">    closest: <span class="function"><span class="keyword">function</span>(<span class="params">selector, context</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> nodes = [], collection = <span class="keyword">typeof</span> selector == <span class="string">'object'</span> &amp;&amp; $(selector)</span><br><span class="line">      <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">_, node</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (node &amp;&amp; !(collection ? collection.indexOf(node) &gt;= <span class="number">0</span> : zepto.matches(node, selector)))</span><br><span class="line">          node = node !== context &amp;&amp; !isDocument(node) &amp;&amp; node.parentNode</span><br><span class="line">        <span class="keyword">if</span> (node &amp;&amp; nodes.indexOf(node) &lt; <span class="number">0</span>) nodes.push(node)</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">return</span> $(nodes)</span><br><span class="line">    &#125;,</span><br><span class="line">    parents: <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> ancestors = [], nodes = <span class="keyword">this</span></span><br><span class="line">      <span class="keyword">while</span> (nodes.length &gt; <span class="number">0</span>)</span><br><span class="line">        nodes = $.map(nodes, <span class="function"><span class="keyword">function</span>(<span class="params">node</span>)</span>&#123;</span><br><span class="line">          <span class="keyword">if</span> ((node = node.parentNode) &amp;&amp; !isDocument(node) &amp;&amp; ancestors.indexOf(node) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            ancestors.push(node)</span><br><span class="line">            <span class="keyword">return</span> node</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      <span class="keyword">return</span> filtered(ancestors, selector)</span><br><span class="line">    &#125;,</span><br><span class="line">    parent: <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> filtered(uniq(<span class="keyword">this</span>.pluck(<span class="string">'parentNode'</span>)), selector)</span><br><span class="line">    &#125;,</span><br><span class="line">    children: <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> filtered(<span class="keyword">this</span>.map(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> children(<span class="keyword">this</span>) &#125;), selector)</span><br><span class="line">    &#125;,</span><br><span class="line">    contents: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.map(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>.contentDocument || slice.call(<span class="keyword">this</span>.childNodes) &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    siblings: <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> filtered(<span class="keyword">this</span>.map(<span class="function"><span class="keyword">function</span>(<span class="params">i, el</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> filter.call(children(el.parentNode), <span class="function"><span class="keyword">function</span>(<span class="params">child</span>)</span>&#123; <span class="keyword">return</span> child!==el &#125;)</span><br><span class="line">      &#125;), selector)</span><br><span class="line">    &#125;,</span><br><span class="line">    empty: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">this</span>.innerHTML = <span class="string">''</span> &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// `pluck` is borrowed from Prototype.js</span></span><br><span class="line">    pluck: <span class="function"><span class="keyword">function</span>(<span class="params">property</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> $.map(<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span>(<span class="params">el</span>)</span>&#123; <span class="keyword">return</span> el[property] &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    show: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.style.display == <span class="string">"none"</span> &amp;&amp; (<span class="keyword">this</span>.style.display = <span class="string">''</span>)</span><br><span class="line">        <span class="keyword">if</span> (getComputedStyle(<span class="keyword">this</span>, <span class="string">''</span>).getPropertyValue(<span class="string">"display"</span>) == <span class="string">"none"</span>)</span><br><span class="line">          <span class="keyword">this</span>.style.display = defaultDisplay(<span class="keyword">this</span>.nodeName)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    replaceWith: <span class="function"><span class="keyword">function</span>(<span class="params">newContent</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.before(newContent).remove()</span><br><span class="line">    &#125;,</span><br><span class="line">    wrap: <span class="function"><span class="keyword">function</span>(<span class="params">structure</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> func = isFunction(structure)</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>[<span class="number">0</span>] &amp;&amp; !func)</span><br><span class="line">        <span class="keyword">var</span> dom   = $(structure).get(<span class="number">0</span>),</span><br><span class="line">            clone = dom.parentNode || <span class="keyword">this</span>.length &gt; <span class="number">1</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">index</span>)</span>&#123;</span><br><span class="line">        $(<span class="keyword">this</span>).wrapAll(</span><br><span class="line">          func ? structure.call(<span class="keyword">this</span>, index) :</span><br><span class="line">            clone ? dom.cloneNode(<span class="literal">true</span>) : dom</span><br><span class="line">        )</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    wrapAll: <span class="function"><span class="keyword">function</span>(<span class="params">structure</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>[<span class="number">0</span>]) &#123;</span><br><span class="line">        $(<span class="keyword">this</span>[<span class="number">0</span>]).before(structure = $(structure))</span><br><span class="line">        <span class="keyword">var</span> children</span><br><span class="line">        <span class="comment">// drill down to the inmost element</span></span><br><span class="line">        <span class="keyword">while</span> ((children = structure.children()).length) structure = children.first()</span><br><span class="line">        $(structure).append(<span class="keyword">this</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">    &#125;,</span><br><span class="line">    wrapInner: <span class="function"><span class="keyword">function</span>(<span class="params">structure</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> func = isFunction(structure)</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">index</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> self = $(<span class="keyword">this</span>), contents = self.contents(),</span><br><span class="line">            dom  = func ? structure.call(<span class="keyword">this</span>, index) : structure</span><br><span class="line">        contents.length ? contents.wrapAll(dom) : self.append(dom)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    unwrap: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.parent().each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="keyword">this</span>).replaceWith($(<span class="keyword">this</span>).children())</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">    &#125;,</span><br><span class="line">    clone: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.map(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>.cloneNode(<span class="literal">true</span>) &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    hide: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.css(<span class="string">"display"</span>, <span class="string">"none"</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    toggle: <span class="function"><span class="keyword">function</span>(<span class="params">setting</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> el = $(<span class="keyword">this</span>)</span><br><span class="line">        ;(setting === <span class="literal">undefined</span> ? el.css(<span class="string">"display"</span>) == <span class="string">"none"</span> : setting) ? el.show() : el.hide()</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    prev: <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>)</span>&#123; <span class="keyword">return</span> $(<span class="keyword">this</span>.pluck(<span class="string">'previousElementSibling'</span>)).filter(selector || <span class="string">'*'</span>) &#125;,</span><br><span class="line">    next: <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>)</span>&#123; <span class="keyword">return</span> $(<span class="keyword">this</span>.pluck(<span class="string">'nextElementSibling'</span>)).filter(selector || <span class="string">'*'</span>) &#125;,</span><br><span class="line">    html: <span class="function"><span class="keyword">function</span>(<span class="params">html</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">in</span> <span class="built_in">arguments</span> ?</span><br><span class="line">        <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">idx</span>)</span>&#123;</span><br><span class="line">          <span class="keyword">var</span> originHtml = <span class="keyword">this</span>.innerHTML</span><br><span class="line">          $(<span class="keyword">this</span>).empty().append( funcArg(<span class="keyword">this</span>, html, idx, originHtml) )</span><br><span class="line">        &#125;) :</span><br><span class="line">        (<span class="number">0</span> <span class="keyword">in</span> <span class="keyword">this</span> ? <span class="keyword">this</span>[<span class="number">0</span>].innerHTML : <span class="literal">null</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    text: <span class="function"><span class="keyword">function</span>(<span class="params">text</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">in</span> <span class="built_in">arguments</span> ?</span><br><span class="line">        <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">idx</span>)</span>&#123;</span><br><span class="line">          <span class="keyword">var</span> newText = funcArg(<span class="keyword">this</span>, text, idx, <span class="keyword">this</span>.textContent)</span><br><span class="line">          <span class="keyword">this</span>.textContent = newText == <span class="literal">null</span> ? <span class="string">''</span> : <span class="string">''</span>+newText</span><br><span class="line">        &#125;) :</span><br><span class="line">        (<span class="number">0</span> <span class="keyword">in</span> <span class="keyword">this</span> ? <span class="keyword">this</span>.pluck(<span class="string">'textContent'</span>).join(<span class="string">""</span>) : <span class="literal">null</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    attr: <span class="function"><span class="keyword">function</span>(<span class="params">name, value</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> result</span><br><span class="line">      <span class="keyword">return</span> (<span class="keyword">typeof</span> name == <span class="string">'string'</span> &amp;&amp; !(<span class="number">1</span> <span class="keyword">in</span> <span class="built_in">arguments</span>)) ?</span><br><span class="line">        (<span class="number">0</span> <span class="keyword">in</span> <span class="keyword">this</span> &amp;&amp; <span class="keyword">this</span>[<span class="number">0</span>].nodeType == <span class="number">1</span> &amp;&amp; (result = <span class="keyword">this</span>[<span class="number">0</span>].getAttribute(name)) != <span class="literal">null</span> ? result : <span class="literal">undefined</span>) :</span><br><span class="line">        <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">idx</span>)</span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">this</span>.nodeType !== <span class="number">1</span>) <span class="keyword">return</span></span><br><span class="line">          <span class="keyword">if</span> (isObject(name)) <span class="keyword">for</span> (key <span class="keyword">in</span> name) setAttribute(<span class="keyword">this</span>, key, name[key])</span><br><span class="line">          <span class="keyword">else</span> setAttribute(<span class="keyword">this</span>, name, funcArg(<span class="keyword">this</span>, value, idx, <span class="keyword">this</span>.getAttribute(name)))</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    removeAttr: <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">this</span>.nodeType === <span class="number">1</span> &amp;&amp; name.split(<span class="string">' '</span>).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">attribute</span>)</span>&#123;</span><br><span class="line">        setAttribute(<span class="keyword">this</span>, attribute)</span><br><span class="line">      &#125;, <span class="keyword">this</span>)&#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    prop: <span class="function"><span class="keyword">function</span>(<span class="params">name, value</span>)</span>&#123;</span><br><span class="line">      name = propMap[name] || name</span><br><span class="line">      <span class="keyword">return</span> (<span class="number">1</span> <span class="keyword">in</span> <span class="built_in">arguments</span>) ?</span><br><span class="line">        <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">idx</span>)</span>&#123;</span><br><span class="line">          <span class="keyword">this</span>[name] = funcArg(<span class="keyword">this</span>, value, idx, <span class="keyword">this</span>[name])</span><br><span class="line">        &#125;) :</span><br><span class="line">        (<span class="keyword">this</span>[<span class="number">0</span>] &amp;&amp; <span class="keyword">this</span>[<span class="number">0</span>][name])</span><br><span class="line">    &#125;,</span><br><span class="line">    removeProp: <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">      name = propMap[name] || name</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">delete</span> <span class="keyword">this</span>[name] &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    data: <span class="function"><span class="keyword">function</span>(<span class="params">name, value</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> attrName = <span class="string">'data-'</span> + name.replace(capitalRE, <span class="string">'-$1'</span>).toLowerCase()</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> data = (<span class="number">1</span> <span class="keyword">in</span> <span class="built_in">arguments</span>) ?</span><br><span class="line">        <span class="keyword">this</span>.attr(attrName, value) :</span><br><span class="line">        <span class="keyword">this</span>.attr(attrName)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> data !== <span class="literal">null</span> ? deserializeValue(data) : <span class="literal">undefined</span></span><br><span class="line">    &#125;,</span><br><span class="line">    val: <span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="number">0</span> <span class="keyword">in</span> <span class="built_in">arguments</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (value == <span class="literal">null</span>) value = <span class="string">""</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">idx</span>)</span>&#123;</span><br><span class="line">          <span class="keyword">this</span>.value = funcArg(<span class="keyword">this</span>, value, idx, <span class="keyword">this</span>.value)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>[<span class="number">0</span>] &amp;&amp; (<span class="keyword">this</span>[<span class="number">0</span>].multiple ?</span><br><span class="line">           $(<span class="keyword">this</span>[<span class="number">0</span>]).find(<span class="string">'option'</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>.selected &#125;).pluck(<span class="string">'value'</span>) :</span><br><span class="line">           <span class="keyword">this</span>[<span class="number">0</span>].value)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    offset: <span class="function"><span class="keyword">function</span>(<span class="params">coordinates</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (coordinates) <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">index</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> $<span class="keyword">this</span> = $(<span class="keyword">this</span>),</span><br><span class="line">            coords = funcArg(<span class="keyword">this</span>, coordinates, index, $<span class="keyword">this</span>.offset()),</span><br><span class="line">            parentOffset = $<span class="keyword">this</span>.offsetParent().offset(),</span><br><span class="line">            props = &#123;</span><br><span class="line">              top:  coords.top  - parentOffset.top,</span><br><span class="line">              left: coords.left - parentOffset.left</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ($<span class="keyword">this</span>.css(<span class="string">'position'</span>) == <span class="string">'static'</span>) props[<span class="string">'position'</span>] = <span class="string">'relative'</span></span><br><span class="line">        $<span class="keyword">this</span>.css(props)</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">if</span> (!<span class="keyword">this</span>.length) <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">document</span>.documentElement !== <span class="keyword">this</span>[<span class="number">0</span>] &amp;&amp; !$.contains(<span class="built_in">document</span>.documentElement, <span class="keyword">this</span>[<span class="number">0</span>]))</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="attr">top</span>: <span class="number">0</span>, <span class="attr">left</span>: <span class="number">0</span>&#125;</span><br><span class="line">      <span class="keyword">var</span> obj = <span class="keyword">this</span>[<span class="number">0</span>].getBoundingClientRect()</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        left: obj.left + <span class="built_in">window</span>.pageXOffset,</span><br><span class="line">        top: obj.top + <span class="built_in">window</span>.pageYOffset,</span><br><span class="line">        width: <span class="built_in">Math</span>.round(obj.width),</span><br><span class="line">        height: <span class="built_in">Math</span>.round(obj.height)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    css: <span class="function"><span class="keyword">function</span>(<span class="params">property, value</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">arguments</span>.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> element = <span class="keyword">this</span>[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> property == <span class="string">'string'</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (!element) <span class="keyword">return</span></span><br><span class="line">          <span class="keyword">return</span> element.style[camelize(property)] || getComputedStyle(element, <span class="string">''</span>).getPropertyValue(property)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isArray(property)) &#123;</span><br><span class="line">          <span class="keyword">if</span> (!element) <span class="keyword">return</span></span><br><span class="line">          <span class="keyword">var</span> props = &#123;&#125;</span><br><span class="line">          <span class="keyword">var</span> computedStyle = getComputedStyle(element, <span class="string">''</span>)</span><br><span class="line">          $.each(property, <span class="function"><span class="keyword">function</span>(<span class="params">_, prop</span>)</span>&#123;</span><br><span class="line">            props[prop] = (element.style[camelize(prop)] || computedStyle.getPropertyValue(prop))</span><br><span class="line">          &#125;)</span><br><span class="line">          <span class="keyword">return</span> props</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> css = <span class="string">''</span></span><br><span class="line">      <span class="keyword">if</span> (type(property) == <span class="string">'string'</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!value &amp;&amp; value !== <span class="number">0</span>)</span><br><span class="line">          <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">this</span>.style.removeProperty(dasherize(property)) &#125;)</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          css = dasherize(property) + <span class="string">":"</span> + maybeAddPx(property, value)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (key <span class="keyword">in</span> property)</span><br><span class="line">          <span class="keyword">if</span> (!property[key] &amp;&amp; property[key] !== <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">this</span>.style.removeProperty(dasherize(key)) &#125;)</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">            css += dasherize(key) + <span class="string">':'</span> + maybeAddPx(key, property[key]) + <span class="string">';'</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">this</span>.style.cssText += <span class="string">';'</span> + css &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    index: <span class="function"><span class="keyword">function</span>(<span class="params">element</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> element ? <span class="keyword">this</span>.indexOf($(element)[<span class="number">0</span>]) : <span class="keyword">this</span>.parent().children().indexOf(<span class="keyword">this</span>[<span class="number">0</span>])</span><br><span class="line">    &#125;,</span><br><span class="line">    hasClass: <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (!name) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">      <span class="keyword">return</span> emptyArray.some.call(<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span>(<span class="params">el</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.test(className(el))</span><br><span class="line">      &#125;, classRE(name))</span><br><span class="line">    &#125;,</span><br><span class="line">    addClass: <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (!name) <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">idx</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!(<span class="string">'className'</span> <span class="keyword">in</span> <span class="keyword">this</span>)) <span class="keyword">return</span></span><br><span class="line">        classList = []</span><br><span class="line">        <span class="keyword">var</span> cls = className(<span class="keyword">this</span>), newName = funcArg(<span class="keyword">this</span>, name, idx, cls)</span><br><span class="line">        newName.split(<span class="regexp">/\s+/g</span>).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">klass</span>)</span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (!$(<span class="keyword">this</span>).hasClass(klass)) classList.push(klass)</span><br><span class="line">        &#125;, <span class="keyword">this</span>)</span><br><span class="line">        classList.length &amp;&amp; className(<span class="keyword">this</span>, cls + (cls ? <span class="string">" "</span> : <span class="string">""</span>) + classList.join(<span class="string">" "</span>))</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    removeClass: <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">idx</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!(<span class="string">'className'</span> <span class="keyword">in</span> <span class="keyword">this</span>)) <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> (name === <span class="literal">undefined</span>) <span class="keyword">return</span> className(<span class="keyword">this</span>, <span class="string">''</span>)</span><br><span class="line">        classList = className(<span class="keyword">this</span>)</span><br><span class="line">        funcArg(<span class="keyword">this</span>, name, idx, classList).split(<span class="regexp">/\s+/g</span>).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">klass</span>)</span>&#123;</span><br><span class="line">          classList = classList.replace(classRE(klass), <span class="string">" "</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">        className(<span class="keyword">this</span>, classList.trim())</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    toggleClass: <span class="function"><span class="keyword">function</span>(<span class="params">name, when</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (!name) <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">idx</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> $<span class="keyword">this</span> = $(<span class="keyword">this</span>), names = funcArg(<span class="keyword">this</span>, name, idx, className(<span class="keyword">this</span>))</span><br><span class="line">        names.split(<span class="regexp">/\s+/g</span>).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">klass</span>)</span>&#123;</span><br><span class="line">          (when === <span class="literal">undefined</span> ? !$<span class="keyword">this</span>.hasClass(klass) : when) ?</span><br><span class="line">            $<span class="keyword">this</span>.addClass(klass) : $<span class="keyword">this</span>.removeClass(klass)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    scrollTop: <span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (!<span class="keyword">this</span>.length) <span class="keyword">return</span></span><br><span class="line">      <span class="keyword">var</span> hasScrollTop = <span class="string">'scrollTop'</span> <span class="keyword">in</span> <span class="keyword">this</span>[<span class="number">0</span>]</span><br><span class="line">      <span class="keyword">if</span> (value === <span class="literal">undefined</span>) <span class="keyword">return</span> hasScrollTop ? <span class="keyword">this</span>[<span class="number">0</span>].scrollTop : <span class="keyword">this</span>[<span class="number">0</span>].pageYOffset</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.each(hasScrollTop ?</span><br><span class="line">        <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">this</span>.scrollTop = value &#125; :</span><br><span class="line">        <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">this</span>.scrollTo(<span class="keyword">this</span>.scrollX, value) &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    scrollLeft: <span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (!<span class="keyword">this</span>.length) <span class="keyword">return</span></span><br><span class="line">      <span class="keyword">var</span> hasScrollLeft = <span class="string">'scrollLeft'</span> <span class="keyword">in</span> <span class="keyword">this</span>[<span class="number">0</span>]</span><br><span class="line">      <span class="keyword">if</span> (value === <span class="literal">undefined</span>) <span class="keyword">return</span> hasScrollLeft ? <span class="keyword">this</span>[<span class="number">0</span>].scrollLeft : <span class="keyword">this</span>[<span class="number">0</span>].pageXOffset</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.each(hasScrollLeft ?</span><br><span class="line">        <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">this</span>.scrollLeft = value &#125; :</span><br><span class="line">        <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">this</span>.scrollTo(value, <span class="keyword">this</span>.scrollY) &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    position: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (!<span class="keyword">this</span>.length) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> elem = <span class="keyword">this</span>[<span class="number">0</span>],</span><br><span class="line">        <span class="comment">// Get *real* offsetParent</span></span><br><span class="line">        offsetParent = <span class="keyword">this</span>.offsetParent(),</span><br><span class="line">        <span class="comment">// Get correct offsets</span></span><br><span class="line">        offset       = <span class="keyword">this</span>.offset(),</span><br><span class="line">        parentOffset = rootNodeRE.test(offsetParent[<span class="number">0</span>].nodeName) ? &#123; <span class="attr">top</span>: <span class="number">0</span>, <span class="attr">left</span>: <span class="number">0</span> &#125; : offsetParent.offset()</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Subtract element margins</span></span><br><span class="line">      <span class="comment">// note: when an element has margin: auto the offsetLeft and marginLeft</span></span><br><span class="line">      <span class="comment">// are the same in Safari causing offset.left to incorrectly be 0</span></span><br><span class="line">      offset.top  -= <span class="built_in">parseFloat</span>( $(elem).css(<span class="string">'margin-top'</span>) ) || <span class="number">0</span></span><br><span class="line">      offset.left -= <span class="built_in">parseFloat</span>( $(elem).css(<span class="string">'margin-left'</span>) ) || <span class="number">0</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// Add offsetParent borders</span></span><br><span class="line">      parentOffset.top  += <span class="built_in">parseFloat</span>( $(offsetParent[<span class="number">0</span>]).css(<span class="string">'border-top-width'</span>) ) || <span class="number">0</span></span><br><span class="line">      parentOffset.left += <span class="built_in">parseFloat</span>( $(offsetParent[<span class="number">0</span>]).css(<span class="string">'border-left-width'</span>) ) || <span class="number">0</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// Subtract the two offsets</span></span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        top:  offset.top  - parentOffset.top,</span><br><span class="line">        left: offset.left - parentOffset.left</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    offsetParent: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.map(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> parent = <span class="keyword">this</span>.offsetParent || <span class="built_in">document</span>.body</span><br><span class="line">        <span class="keyword">while</span> (parent &amp;&amp; !rootNodeRE.test(parent.nodeName) &amp;&amp; $(parent).css(<span class="string">"position"</span>) == <span class="string">"static"</span>)</span><br><span class="line">          parent = parent.offsetParent</span><br><span class="line">        <span class="keyword">return</span> parent</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// for now</span></span><br><span class="line">  $.fn.detach = $.fn.remove</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Generate the `width` and `height` functions</span></span><br><span class="line">  ;[<span class="string">'width'</span>, <span class="string">'height'</span>].forEach(<span class="function"><span class="keyword">function</span>(<span class="params">dimension</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> dimensionProperty =</span><br><span class="line">      dimension.replace(<span class="regexp">/./</span>, <span class="function"><span class="keyword">function</span>(<span class="params">m</span>)</span>&#123; <span class="keyword">return</span> m[<span class="number">0</span>].toUpperCase() &#125;)</span><br><span class="line"></span><br><span class="line">    $.fn[dimension] = <span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> offset, el = <span class="keyword">this</span>[<span class="number">0</span>]</span><br><span class="line">      <span class="keyword">if</span> (value === <span class="literal">undefined</span>) <span class="keyword">return</span> isWindow(el) ? el[<span class="string">'inner'</span> + dimensionProperty] :</span><br><span class="line">        isDocument(el) ? el.documentElement[<span class="string">'scroll'</span> + dimensionProperty] :</span><br><span class="line">        (offset = <span class="keyword">this</span>.offset()) &amp;&amp; offset[dimension]</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">idx</span>)</span>&#123;</span><br><span class="line">        el = $(<span class="keyword">this</span>)</span><br><span class="line">        el.css(dimension, funcArg(<span class="keyword">this</span>, value, idx, el[dimension]()))</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">traverseNode</span>(<span class="params">node, fun</span>) </span>&#123;</span><br><span class="line">    fun(node)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = node.childNodes.length; i &lt; len; i++)</span><br><span class="line">      traverseNode(node.childNodes[i], fun)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Generate the `after`, `prepend`, `before`, `append`,</span></span><br><span class="line">  <span class="comment">// `insertAfter`, `insertBefore`, `appendTo`, and `prependTo` methods.</span></span><br><span class="line">  adjacencyOperators.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">operator, operatorIndex</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> inside = operatorIndex % <span class="number">2</span> <span class="comment">//=&gt; prepend, append</span></span><br><span class="line"></span><br><span class="line">    $.fn[operator] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="comment">// arguments can be nodes, arrays of nodes, Zepto objects and HTML strings</span></span><br><span class="line">      <span class="keyword">var</span> argType, nodes = $.map(<span class="built_in">arguments</span>, <span class="function"><span class="keyword">function</span>(<span class="params">arg</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> arr = []</span><br><span class="line">            argType = type(arg)</span><br><span class="line">            <span class="keyword">if</span> (argType == <span class="string">"array"</span>) &#123;</span><br><span class="line">              arg.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">el</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (el.nodeType !== <span class="literal">undefined</span>) <span class="keyword">return</span> arr.push(el)</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ($.zepto.isZ(el)) <span class="keyword">return</span> arr = arr.concat(el.get())</span><br><span class="line">                arr = arr.concat(zepto.fragment(el))</span><br><span class="line">              &#125;)</span><br><span class="line">              <span class="keyword">return</span> arr</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> argType == <span class="string">"object"</span> || arg == <span class="literal">null</span> ?</span><br><span class="line">              arg : zepto.fragment(arg)</span><br><span class="line">          &#125;),</span><br><span class="line">          parent, copyByClone = <span class="keyword">this</span>.length &gt; <span class="number">1</span></span><br><span class="line">      <span class="keyword">if</span> (nodes.length &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">_, target</span>)</span>&#123;</span><br><span class="line">        parent = inside ? target : target.parentNode</span><br><span class="line"></span><br><span class="line">        <span class="comment">// convert all methods to a "before" operation</span></span><br><span class="line">        target = operatorIndex == <span class="number">0</span> ? target.nextSibling :</span><br><span class="line">                 operatorIndex == <span class="number">1</span> ? target.firstChild :</span><br><span class="line">                 operatorIndex == <span class="number">2</span> ? target :</span><br><span class="line">                 <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> parentInDocument = $.contains(<span class="built_in">document</span>.documentElement, parent)</span><br><span class="line"></span><br><span class="line">        nodes.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">node</span>)</span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (copyByClone) node = node.cloneNode(<span class="literal">true</span>)</span><br><span class="line">          <span class="keyword">else</span> <span class="keyword">if</span> (!parent) <span class="keyword">return</span> $(node).remove()</span><br><span class="line"></span><br><span class="line">          parent.insertBefore(node, target)</span><br><span class="line">          <span class="keyword">if</span> (parentInDocument) traverseNode(node, <span class="function"><span class="keyword">function</span>(<span class="params">el</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (el.nodeName != <span class="literal">null</span> &amp;&amp; el.nodeName.toUpperCase() === <span class="string">'SCRIPT'</span> &amp;&amp;</span><br><span class="line">               (!el.type || el.type === <span class="string">'text/javascript'</span>) &amp;&amp; !el.src)&#123;</span><br><span class="line">              <span class="keyword">var</span> target = el.ownerDocument ? el.ownerDocument.defaultView : <span class="built_in">window</span></span><br><span class="line">              target[<span class="string">'eval'</span>].call(target, el.innerHTML)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// after    =&gt; insertAfter</span></span><br><span class="line">    <span class="comment">// prepend  =&gt; prependTo</span></span><br><span class="line">    <span class="comment">// before   =&gt; insertBefore</span></span><br><span class="line">    <span class="comment">// append   =&gt; appendTo</span></span><br><span class="line">    $.fn[inside ? operator+<span class="string">'To'</span> : <span class="string">'insert'</span>+(operatorIndex ? <span class="string">'Before'</span> : <span class="string">'After'</span>)] = <span class="function"><span class="keyword">function</span>(<span class="params">html</span>)</span>&#123;</span><br><span class="line">      $(html)[operator](<span class="keyword">this</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  zepto.Z.prototype = Z.prototype = $.fn</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Export internal API functions in the `$.zepto` namespace</span></span><br><span class="line">  zepto.uniq = uniq</span><br><span class="line">  zepto.deserializeValue = deserializeValue</span><br><span class="line">  $.zepto = zepto</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> $</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.Zepto = Zepto</span><br><span class="line"><span class="built_in">window</span>.$ === <span class="literal">undefined</span> &amp;&amp; (<span class="built_in">window</span>.$ = Zepto)</span><br><span class="line"></span><br><span class="line"><span class="comment">// zepto的事件代码</span></span><br><span class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> _zid = <span class="number">1</span>, <span class="literal">undefined</span>,</span><br><span class="line">      slice = <span class="built_in">Array</span>.prototype.slice,</span><br><span class="line">      isFunction = $.isFunction,</span><br><span class="line">      isString = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123; <span class="keyword">return</span> <span class="keyword">typeof</span> obj == <span class="string">'string'</span> &#125;,</span><br><span class="line">      handlers = &#123;&#125;,</span><br><span class="line">      specialEvents=&#123;&#125;,</span><br><span class="line">      focusinSupported = <span class="string">'onfocusin'</span> <span class="keyword">in</span> <span class="built_in">window</span>,</span><br><span class="line">      focus = &#123; <span class="attr">focus</span>: <span class="string">'focusin'</span>, <span class="attr">blur</span>: <span class="string">'focusout'</span> &#125;,</span><br><span class="line">      hover = &#123; <span class="attr">mouseenter</span>: <span class="string">'mouseover'</span>, <span class="attr">mouseleave</span>: <span class="string">'mouseout'</span> &#125;</span><br><span class="line"></span><br><span class="line">  specialEvents.click = specialEvents.mousedown = specialEvents.mouseup = specialEvents.mousemove = <span class="string">'MouseEvents'</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">zid</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> element._zid || (element._zid = _zid++)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">findHandlers</span>(<span class="params">element, event, fn, selector</span>) </span>&#123;</span><br><span class="line">    event = parse(event)</span><br><span class="line">    <span class="keyword">if</span> (event.ns) <span class="keyword">var</span> matcher = matcherFor(event.ns)</span><br><span class="line">    <span class="keyword">return</span> (handlers[zid(element)] || []).filter(<span class="function"><span class="keyword">function</span>(<span class="params">handler</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> handler</span><br><span class="line">        &amp;&amp; (!event.e  || handler.e == event.e)</span><br><span class="line">        &amp;&amp; (!event.ns || matcher.test(handler.ns))</span><br><span class="line">        &amp;&amp; (!fn       || zid(handler.fn) === zid(fn))</span><br><span class="line">        &amp;&amp; (!selector || handler.sel == selector)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">parse</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> parts = (<span class="string">''</span> + event).split(<span class="string">'.'</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="attr">e</span>: parts[<span class="number">0</span>], <span class="attr">ns</span>: parts.slice(<span class="number">1</span>).sort().join(<span class="string">' '</span>)&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">matcherFor</span>(<span class="params">ns</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'(?:^| )'</span> + ns.replace(<span class="string">' '</span>, <span class="string">' .* ?'</span>) + <span class="string">'(?: |$)'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">eventCapture</span>(<span class="params">handler, captureSetting</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> handler.del &amp;&amp;</span><br><span class="line">      (!focusinSupported &amp;&amp; (handler.e <span class="keyword">in</span> focus)) ||</span><br><span class="line">      !!captureSetting</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">realEvent</span>(<span class="params">type</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> hover[type] || (focusinSupported &amp;&amp; focus[type]) || type</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">element, events, fn, data, selector, delegator, capture</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> id = zid(element), set = (handlers[id] || (handlers[id] = []))</span><br><span class="line">    events.split(<span class="regexp">/\s/</span>).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (event == <span class="string">'ready'</span>) <span class="keyword">return</span> $(<span class="built_in">document</span>).ready(fn)</span><br><span class="line">      <span class="keyword">var</span> handler   = parse(event)</span><br><span class="line">      handler.fn    = fn</span><br><span class="line">      handler.sel   = selector</span><br><span class="line">      <span class="comment">// emulate mouseenter, mouseleave</span></span><br><span class="line">      <span class="keyword">if</span> (handler.e <span class="keyword">in</span> hover) fn = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> related = e.relatedTarget</span><br><span class="line">        <span class="keyword">if</span> (!related || (related !== <span class="keyword">this</span> &amp;&amp; !$.contains(<span class="keyword">this</span>, related)))</span><br><span class="line">          <span class="keyword">return</span> handler.fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      handler.del   = delegator</span><br><span class="line">      <span class="keyword">var</span> callback  = delegator || fn</span><br><span class="line">      handler.proxy = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">        e = compatible(e)</span><br><span class="line">        <span class="keyword">if</span> (e.isImmediatePropagationStopped()) <span class="keyword">return</span></span><br><span class="line">        e.data = data</span><br><span class="line">        <span class="keyword">var</span> result = callback.apply(element, e._args == <span class="literal">undefined</span> ? [e] : [e].concat(e._args))</span><br><span class="line">        <span class="keyword">if</span> (result === <span class="literal">false</span>) e.preventDefault(), e.stopPropagation()</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">      &#125;</span><br><span class="line">      handler.i = set.length</span><br><span class="line">      set.push(handler)</span><br><span class="line">      <span class="keyword">if</span> (<span class="string">'addEventListener'</span> <span class="keyword">in</span> element)</span><br><span class="line">        element.addEventListener(realEvent(handler.e), handler.proxy, eventCapture(handler, capture))</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">remove</span>(<span class="params">element, events, fn, selector, capture</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> id = zid(element)</span><br><span class="line">    ;(events || <span class="string">''</span>).split(<span class="regexp">/\s/</span>).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">      findHandlers(element, event, fn, selector).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">handler</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">delete</span> handlers[id][handler.i]</span><br><span class="line">      <span class="keyword">if</span> (<span class="string">'removeEventListener'</span> <span class="keyword">in</span> element)</span><br><span class="line">        element.removeEventListener(realEvent(handler.e), handler.proxy, eventCapture(handler, capture))</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  $.event = &#123; <span class="attr">add</span>: add, <span class="attr">remove</span>: remove &#125;</span><br><span class="line"></span><br><span class="line">  $.proxy = <span class="function"><span class="keyword">function</span>(<span class="params">fn, context</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> args = (<span class="number">2</span> <span class="keyword">in</span> <span class="built_in">arguments</span>) &amp;&amp; slice.call(<span class="built_in">arguments</span>, <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">if</span> (isFunction(fn)) &#123;</span><br><span class="line">      <span class="keyword">var</span> proxyFn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> fn.apply(context, args ? args.concat(slice.call(<span class="built_in">arguments</span>)) : <span class="built_in">arguments</span>) &#125;</span><br><span class="line">      proxyFn._zid = zid(fn)</span><br><span class="line">      <span class="keyword">return</span> proxyFn</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isString(context)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (args) &#123;</span><br><span class="line">        args.unshift(fn[context], fn)</span><br><span class="line">        <span class="keyword">return</span> $.proxy.apply(<span class="literal">null</span>, args)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> $.proxy(fn[context], fn)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">"expected function"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  $.fn.bind = <span class="function"><span class="keyword">function</span>(<span class="params">event, data, callback</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.on(event, data, callback)</span><br><span class="line">  &#125;</span><br><span class="line">  $.fn.unbind = <span class="function"><span class="keyword">function</span>(<span class="params">event, callback</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.off(event, callback)</span><br><span class="line">  &#125;</span><br><span class="line">  $.fn.one = <span class="function"><span class="keyword">function</span>(<span class="params">event, selector, data, callback</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.on(event, selector, data, callback, <span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> returnTrue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="literal">true</span>&#125;,</span><br><span class="line">      returnFalse = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="literal">false</span>&#125;,</span><br><span class="line">      ignoreProperties = <span class="regexp">/^([A-Z]|returnValue$|layer[XY]$|webkitMovement[XY]$)/</span>,</span><br><span class="line">      eventMethods = &#123;</span><br><span class="line">        preventDefault: <span class="string">'isDefaultPrevented'</span>,</span><br><span class="line">        stopImmediatePropagation: <span class="string">'isImmediatePropagationStopped'</span>,</span><br><span class="line">        stopPropagation: <span class="string">'isPropagationStopped'</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">compatible</span>(<span class="params">event, source</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (source || !event.isDefaultPrevented) &#123;</span><br><span class="line">      source || (source = event)</span><br><span class="line"></span><br><span class="line">      $.each(eventMethods, <span class="function"><span class="keyword">function</span>(<span class="params">name, predicate</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> sourceMethod = source[name]</span><br><span class="line">        event[name] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          <span class="keyword">this</span>[predicate] = returnTrue</span><br><span class="line">          <span class="keyword">return</span> sourceMethod &amp;&amp; sourceMethod.apply(source, <span class="built_in">arguments</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        event[predicate] = returnFalse</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      event.timeStamp || (event.timeStamp = <span class="built_in">Date</span>.now())</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (source.defaultPrevented !== <span class="literal">undefined</span> ? source.defaultPrevented :</span><br><span class="line">          <span class="string">'returnValue'</span> <span class="keyword">in</span> source ? source.returnValue === <span class="literal">false</span> :</span><br><span class="line">          source.getPreventDefault &amp;&amp; source.getPreventDefault())</span><br><span class="line">        event.isDefaultPrevented = returnTrue</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> event</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">createProxy</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> key, proxy = &#123; <span class="attr">originalEvent</span>: event &#125;</span><br><span class="line">    <span class="keyword">for</span> (key <span class="keyword">in</span> event)</span><br><span class="line">      <span class="keyword">if</span> (!ignoreProperties.test(key) &amp;&amp; event[key] !== <span class="literal">undefined</span>) proxy[key] = event[key]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> compatible(proxy, event)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  $.fn.delegate = <span class="function"><span class="keyword">function</span>(<span class="params">selector, event, callback</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.on(event, selector, callback)</span><br><span class="line">  &#125;</span><br><span class="line">  $.fn.undelegate = <span class="function"><span class="keyword">function</span>(<span class="params">selector, event, callback</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.off(event, selector, callback)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  $.fn.live = <span class="function"><span class="keyword">function</span>(<span class="params">event, callback</span>)</span>&#123;</span><br><span class="line">    $(<span class="built_in">document</span>.body).delegate(<span class="keyword">this</span>.selector, event, callback)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">  &#125;</span><br><span class="line">  $.fn.die = <span class="function"><span class="keyword">function</span>(<span class="params">event, callback</span>)</span>&#123;</span><br><span class="line">    $(<span class="built_in">document</span>.body).undelegate(<span class="keyword">this</span>.selector, event, callback)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  $.fn.on = <span class="function"><span class="keyword">function</span>(<span class="params">event, selector, data, callback, one</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> autoRemove, delegator, $<span class="keyword">this</span> = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">if</span> (event &amp;&amp; !isString(event)) &#123;</span><br><span class="line">      $.each(event, <span class="function"><span class="keyword">function</span>(<span class="params">type, fn</span>)</span>&#123;</span><br><span class="line">        $<span class="keyword">this</span>.on(type, selector, data, fn, one)</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">return</span> $<span class="keyword">this</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!isString(selector) &amp;&amp; !isFunction(callback) &amp;&amp; callback !== <span class="literal">false</span>)</span><br><span class="line">      callback = data, data = selector, selector = <span class="literal">undefined</span></span><br><span class="line">    <span class="keyword">if</span> (callback === <span class="literal">undefined</span> || data === <span class="literal">false</span>)</span><br><span class="line">      callback = data, data = <span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (callback === <span class="literal">false</span>) callback = returnFalse</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $<span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">_, element</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (one) autoRemove = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">        remove(element, e.type, callback)</span><br><span class="line">        <span class="keyword">return</span> callback.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (selector) delegator = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> evt, match = $(e.target).closest(selector, element).get(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">if</span> (match &amp;&amp; match !== element) &#123;</span><br><span class="line">          evt = $.extend(createProxy(e), &#123;<span class="attr">currentTarget</span>: match, <span class="attr">liveFired</span>: element&#125;)</span><br><span class="line">          <span class="keyword">return</span> (autoRemove || callback).apply(match, [evt].concat(slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>)))</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      add(element, event, callback, data, selector, delegator || autoRemove)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  $.fn.off = <span class="function"><span class="keyword">function</span>(<span class="params">event, selector, callback</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $<span class="keyword">this</span> = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">if</span> (event &amp;&amp; !isString(event)) &#123;</span><br><span class="line">      $.each(event, <span class="function"><span class="keyword">function</span>(<span class="params">type, fn</span>)</span>&#123;</span><br><span class="line">        $<span class="keyword">this</span>.off(type, selector, fn)</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">return</span> $<span class="keyword">this</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!isString(selector) &amp;&amp; !isFunction(callback) &amp;&amp; callback !== <span class="literal">false</span>)</span><br><span class="line">      callback = selector, selector = <span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (callback === <span class="literal">false</span>) callback = returnFalse</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $<span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      remove(<span class="keyword">this</span>, event, callback, selector)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  $.fn.trigger = <span class="function"><span class="keyword">function</span>(<span class="params">event, args</span>)</span>&#123;</span><br><span class="line">    event = (isString(event) || $.isPlainObject(event)) ? $.Event(event) : compatible(event)</span><br><span class="line">    event._args = args</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="comment">// handle focus(), blur() by calling them directly</span></span><br><span class="line">      <span class="keyword">if</span> (event.type <span class="keyword">in</span> focus &amp;&amp; <span class="keyword">typeof</span> <span class="keyword">this</span>[event.type] == <span class="string">"function"</span>) <span class="keyword">this</span>[event.type]()</span><br><span class="line">      <span class="comment">// items in the collection might not be DOM elements</span></span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">'dispatchEvent'</span> <span class="keyword">in</span> <span class="keyword">this</span>) <span class="keyword">this</span>.dispatchEvent(event)</span><br><span class="line">      <span class="keyword">else</span> $(<span class="keyword">this</span>).triggerHandler(event, args)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// triggers event handlers on current element just as if an event occurred,</span></span><br><span class="line">  <span class="comment">// doesn't trigger an actual event, doesn't bubble</span></span><br><span class="line">  $.fn.triggerHandler = <span class="function"><span class="keyword">function</span>(<span class="params">event, args</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> e, result</span><br><span class="line">    <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">i, element</span>)</span>&#123;</span><br><span class="line">      e = createProxy(isString(event) ? $.Event(event) : event)</span><br><span class="line">      e._args = args</span><br><span class="line">      e.target = element</span><br><span class="line">      $.each(findHandlers(element, event.type || event), <span class="function"><span class="keyword">function</span>(<span class="params">i, handler</span>)</span>&#123;</span><br><span class="line">        result = handler.proxy(e)</span><br><span class="line">        <span class="keyword">if</span> (e.isImmediatePropagationStopped()) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// shortcut methods for `.bind(event, fn)` for each event type</span></span><br><span class="line">  ;(<span class="string">'focusin focusout focus blur load resize scroll unload click dblclick '</span>+</span><br><span class="line">  <span class="string">'mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave '</span>+</span><br><span class="line">  <span class="string">'change select keydown keypress keyup error'</span>).split(<span class="string">' '</span>).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    $.fn[event] = <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> (<span class="number">0</span> <span class="keyword">in</span> <span class="built_in">arguments</span>) ?</span><br><span class="line">        <span class="keyword">this</span>.bind(event, callback) :</span><br><span class="line">        <span class="keyword">this</span>.trigger(event)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  $.Event = <span class="function"><span class="keyword">function</span>(<span class="params">type, props</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!isString(type)) props = type, type = props.type</span><br><span class="line">    <span class="keyword">var</span> event = <span class="built_in">document</span>.createEvent(specialEvents[type] || <span class="string">'Events'</span>), bubbles = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">if</span> (props) <span class="keyword">for</span> (<span class="keyword">var</span> name <span class="keyword">in</span> props) (name == <span class="string">'bubbles'</span>) ? (bubbles = !!props[name]) : (event[name] = props[name])</span><br><span class="line">    event.initEvent(type, bubbles, <span class="literal">true</span>)</span><br><span class="line">    <span class="keyword">return</span> compatible(event)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;)(Zepto)</span><br><span class="line"></span><br><span class="line"><span class="comment">// zepto的AJAX代码</span></span><br><span class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> jsonpID = +<span class="keyword">new</span> <span class="built_in">Date</span>(),</span><br><span class="line">      <span class="built_in">document</span> = <span class="built_in">window</span>.document,</span><br><span class="line">      key,</span><br><span class="line">      name,</span><br><span class="line">      rscript = <span class="regexp">/&lt;script\b[^&lt;]*(?:(?!&lt;\/script&gt;)&lt;[^&lt;]*)*&lt;\/script&gt;/gi</span>,</span><br><span class="line">      scriptTypeRE = <span class="regexp">/^(?:text|application)\/javascript/i</span>,</span><br><span class="line">      xmlTypeRE = <span class="regexp">/^(?:text|application)\/xml/i</span>,</span><br><span class="line">      jsonType = <span class="string">'application/json'</span>,</span><br><span class="line">      htmlType = <span class="string">'text/html'</span>,</span><br><span class="line">      blankRE = <span class="regexp">/^\s*$/</span>,</span><br><span class="line">      originAnchor = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>)</span><br><span class="line"></span><br><span class="line">  originAnchor.href = <span class="built_in">window</span>.location.href</span><br><span class="line"></span><br><span class="line">  <span class="comment">// trigger a custom event and return false if it was cancelled</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">triggerAndReturn</span>(<span class="params">context, eventName, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> event = $.Event(eventName)</span><br><span class="line">    $(context).trigger(event, data)</span><br><span class="line">    <span class="keyword">return</span> !event.isDefaultPrevented()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// trigger an Ajax "global" event</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">triggerGlobal</span>(<span class="params">settings, context, eventName, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (settings.global) <span class="keyword">return</span> triggerAndReturn(context || <span class="built_in">document</span>, eventName, data)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Number of active Ajax requests</span></span><br><span class="line">  $.active = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">ajaxStart</span>(<span class="params">settings</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (settings.global &amp;&amp; $.active++ === <span class="number">0</span>) triggerGlobal(settings, <span class="literal">null</span>, <span class="string">'ajaxStart'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">ajaxStop</span>(<span class="params">settings</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (settings.global &amp;&amp; !(--$.active)) triggerGlobal(settings, <span class="literal">null</span>, <span class="string">'ajaxStop'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// triggers an extra global event "ajaxBeforeSend" that's like "ajaxSend" but cancelable</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">ajaxBeforeSend</span>(<span class="params">xhr, settings</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> context = settings.context</span><br><span class="line">    <span class="keyword">if</span> (settings.beforeSend.call(context, xhr, settings) === <span class="literal">false</span> ||</span><br><span class="line">        triggerGlobal(settings, context, <span class="string">'ajaxBeforeSend'</span>, [xhr, settings]) === <span class="literal">false</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    triggerGlobal(settings, context, <span class="string">'ajaxSend'</span>, [xhr, settings])</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">ajaxSuccess</span>(<span class="params">data, xhr, settings, deferred</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> context = settings.context, status = <span class="string">'success'</span></span><br><span class="line">    settings.success.call(context, data, status, xhr)</span><br><span class="line">    <span class="keyword">if</span> (deferred) deferred.resolveWith(context, [data, status, xhr])</span><br><span class="line">    triggerGlobal(settings, context, <span class="string">'ajaxSuccess'</span>, [xhr, settings, data])</span><br><span class="line">    ajaxComplete(status, xhr, settings)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// type: "timeout", "error", "abort", "parsererror"</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">ajaxError</span>(<span class="params">error, type, xhr, settings, deferred</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> context = settings.context</span><br><span class="line">    settings.error.call(context, xhr, type, error)</span><br><span class="line">    <span class="keyword">if</span> (deferred) deferred.rejectWith(context, [xhr, type, error])</span><br><span class="line">    triggerGlobal(settings, context, <span class="string">'ajaxError'</span>, [xhr, settings, error || type])</span><br><span class="line">    ajaxComplete(type, xhr, settings)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// status: "success", "notmodified", "error", "timeout", "abort", "parsererror"</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">ajaxComplete</span>(<span class="params">status, xhr, settings</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> context = settings.context</span><br><span class="line">    settings.complete.call(context, xhr, status)</span><br><span class="line">    triggerGlobal(settings, context, <span class="string">'ajaxComplete'</span>, [xhr, settings])</span><br><span class="line">    ajaxStop(settings)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">ajaxDataFilter</span>(<span class="params">data, type, settings</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (settings.dataFilter == empty) <span class="keyword">return</span> data</span><br><span class="line">    <span class="keyword">var</span> context = settings.context</span><br><span class="line">    <span class="keyword">return</span> settings.dataFilter.call(context, data, type)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Empty function, used as default callback</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">empty</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">  $.ajaxJSONP = <span class="function"><span class="keyword">function</span>(<span class="params">options, deferred</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!(<span class="string">'type'</span> <span class="keyword">in</span> options)) <span class="keyword">return</span> $.ajax(options)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> _callbackName = options.jsonpCallback,</span><br><span class="line">      callbackName = ($.isFunction(_callbackName) ?</span><br><span class="line">        _callbackName() : _callbackName) || (<span class="string">'Zepto'</span> + (jsonpID++)),</span><br><span class="line">      script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>),</span><br><span class="line">      originalCallback = <span class="built_in">window</span>[callbackName],</span><br><span class="line">      responseData,</span><br><span class="line">      abort = <span class="function"><span class="keyword">function</span>(<span class="params">errorType</span>) </span>&#123;</span><br><span class="line">        $(script).triggerHandler(<span class="string">'error'</span>, errorType || <span class="string">'abort'</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      xhr = &#123; <span class="attr">abort</span>: abort &#125;, abortTimeout</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (deferred) deferred.promise(xhr)</span><br><span class="line"></span><br><span class="line">    $(script).on(<span class="string">'load error'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e, errorType</span>)</span>&#123;</span><br><span class="line">      clearTimeout(abortTimeout)</span><br><span class="line">      $(script).off().remove()</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (e.type == <span class="string">'error'</span> || !responseData) &#123;</span><br><span class="line">        ajaxError(<span class="literal">null</span>, errorType || <span class="string">'error'</span>, xhr, options, deferred)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ajaxSuccess(responseData[<span class="number">0</span>], xhr, options, deferred)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="built_in">window</span>[callbackName] = originalCallback</span><br><span class="line">      <span class="keyword">if</span> (responseData &amp;&amp; $.isFunction(originalCallback))</span><br><span class="line">        originalCallback(responseData[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">      originalCallback = responseData = <span class="literal">undefined</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ajaxBeforeSend(xhr, options) === <span class="literal">false</span>) &#123;</span><br><span class="line">      abort(<span class="string">'abort'</span>)</span><br><span class="line">      <span class="keyword">return</span> xhr</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">window</span>[callbackName] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      responseData = <span class="built_in">arguments</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    script.src = options.url.replace(<span class="regexp">/\?(.+)=\?/</span>, <span class="string">'?$1='</span> + callbackName)</span><br><span class="line">    <span class="built_in">document</span>.head.appendChild(script)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (options.timeout &gt; <span class="number">0</span>) abortTimeout = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      abort(<span class="string">'timeout'</span>)</span><br><span class="line">    &#125;, options.timeout)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> xhr</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  $.ajaxSettings = &#123;</span><br><span class="line">    <span class="comment">// Default type of request</span></span><br><span class="line">    type: <span class="string">'GET'</span>,</span><br><span class="line">    <span class="comment">// Callback that is executed before request</span></span><br><span class="line">    beforeSend: empty,</span><br><span class="line">    <span class="comment">// Callback that is executed if the request succeeds</span></span><br><span class="line">    success: empty,</span><br><span class="line">    <span class="comment">// Callback that is executed the the server drops error</span></span><br><span class="line">    error: empty,</span><br><span class="line">    <span class="comment">// Callback that is executed on request complete (both: error and success)</span></span><br><span class="line">    complete: empty,</span><br><span class="line">    <span class="comment">// The context for the callbacks</span></span><br><span class="line">    context: <span class="literal">null</span>,</span><br><span class="line">    <span class="comment">// Whether to trigger "global" Ajax events</span></span><br><span class="line">    global: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// Transport</span></span><br><span class="line">    xhr: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">window</span>.XMLHttpRequest()</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// MIME types mapping</span></span><br><span class="line">    <span class="comment">// IIS returns Javascript as "application/x-javascript"</span></span><br><span class="line">    accepts: &#123;</span><br><span class="line">      script: <span class="string">'text/javascript, application/javascript, application/x-javascript'</span>,</span><br><span class="line">      json:   jsonType,</span><br><span class="line">      xml:    <span class="string">'application/xml, text/xml'</span>,</span><br><span class="line">      html:   htmlType,</span><br><span class="line">      text:   <span class="string">'text/plain'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// Whether the request is to another domain</span></span><br><span class="line">    crossDomain: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// Default timeout</span></span><br><span class="line">    timeout: <span class="number">0</span>,</span><br><span class="line">    <span class="comment">// Whether data should be serialized to string</span></span><br><span class="line">    processData: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// Whether the browser should be allowed to cache GET responses</span></span><br><span class="line">    cache: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">//Used to handle the raw response data of XMLHttpRequest.</span></span><br><span class="line">    <span class="comment">//This is a pre-filtering function to sanitize the response.</span></span><br><span class="line">    <span class="comment">//The sanitized response should be returned</span></span><br><span class="line">    dataFilter: empty</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">mimeToDataType</span>(<span class="params">mime</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mime) mime = mime.split(<span class="string">';'</span>, <span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> mime &amp;&amp; ( mime == htmlType ? <span class="string">'html'</span> :</span><br><span class="line">      mime == jsonType ? <span class="string">'json'</span> :</span><br><span class="line">      scriptTypeRE.test(mime) ? <span class="string">'script'</span> :</span><br><span class="line">      xmlTypeRE.test(mime) &amp;&amp; <span class="string">'xml'</span> ) || <span class="string">'text'</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">appendQuery</span>(<span class="params">url, query</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (query == <span class="string">''</span>) <span class="keyword">return</span> url</span><br><span class="line">    <span class="keyword">return</span> (url + <span class="string">'&amp;'</span> + query).replace(<span class="regexp">/[&amp;?]&#123;1,2&#125;/</span>, <span class="string">'?'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// serialize payload and append it to the URL for GET requests</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">serializeData</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (options.processData &amp;&amp; options.data &amp;&amp; $.type(options.data) != <span class="string">"string"</span>)</span><br><span class="line">      options.data = $.param(options.data, options.traditional)</span><br><span class="line">    <span class="keyword">if</span> (options.data &amp;&amp; (!options.type || options.type.toUpperCase() == <span class="string">'GET'</span> || <span class="string">'jsonp'</span> == options.dataType))</span><br><span class="line">      options.url = appendQuery(options.url, options.data), options.data = <span class="literal">undefined</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  $.ajax = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> settings = $.extend(&#123;&#125;, options || &#123;&#125;),</span><br><span class="line">        deferred = $.Deferred &amp;&amp; $.Deferred(),</span><br><span class="line">        urlAnchor, hashIndex</span><br><span class="line">    <span class="keyword">for</span> (key <span class="keyword">in</span> $.ajaxSettings) <span class="keyword">if</span> (settings[key] === <span class="literal">undefined</span>) settings[key] = $.ajaxSettings[key]</span><br><span class="line"></span><br><span class="line">    ajaxStart(settings)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!settings.crossDomain) &#123;</span><br><span class="line">      urlAnchor = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>)</span><br><span class="line">      urlAnchor.href = settings.url</span><br><span class="line">      <span class="comment">// cleans up URL for .href (IE only), see https://github.com/madrobby/zepto/pull/1049</span></span><br><span class="line">      urlAnchor.href = urlAnchor.href</span><br><span class="line">      settings.crossDomain = (originAnchor.protocol + <span class="string">'//'</span> + originAnchor.host) !== (urlAnchor.protocol + <span class="string">'//'</span> + urlAnchor.host)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!settings.url) settings.url = <span class="built_in">window</span>.location.toString()</span><br><span class="line">    <span class="keyword">if</span> ((hashIndex = settings.url.indexOf(<span class="string">'#'</span>)) &gt; <span class="number">-1</span>) settings.url = settings.url.slice(<span class="number">0</span>, hashIndex)</span><br><span class="line">    serializeData(settings)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> dataType = settings.dataType, hasPlaceholder = <span class="regexp">/\?.+=\?/</span>.test(settings.url)</span><br><span class="line">    <span class="keyword">if</span> (hasPlaceholder) dataType = <span class="string">'jsonp'</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (settings.cache === <span class="literal">false</span> || (</span><br><span class="line">         (!options || options.cache !== <span class="literal">true</span>) &amp;&amp;</span><br><span class="line">         (<span class="string">'script'</span> == dataType || <span class="string">'jsonp'</span> == dataType)</span><br><span class="line">        ))</span><br><span class="line">      settings.url = appendQuery(settings.url, <span class="string">'_='</span> + <span class="built_in">Date</span>.now())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">'jsonp'</span> == dataType) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!hasPlaceholder)</span><br><span class="line">        settings.url = appendQuery(settings.url,</span><br><span class="line">          settings.jsonp ? (settings.jsonp + <span class="string">'=?'</span>) : settings.jsonp === <span class="literal">false</span> ? <span class="string">''</span> : <span class="string">'callback=?'</span>)</span><br><span class="line">      <span class="keyword">return</span> $.ajaxJSONP(settings, deferred)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> mime = settings.accepts[dataType],</span><br><span class="line">        headers = &#123; &#125;,</span><br><span class="line">        setHeader = <span class="function"><span class="keyword">function</span>(<span class="params">name, value</span>) </span>&#123; headers[name.toLowerCase()] = [name, value] &#125;,</span><br><span class="line">        protocol = <span class="regexp">/^([\w-]+:)\/\//</span>.test(settings.url) ? <span class="built_in">RegExp</span>.$<span class="number">1</span> : <span class="built_in">window</span>.location.protocol,</span><br><span class="line">        xhr = settings.xhr(),</span><br><span class="line">        nativeSetHeader = xhr.setRequestHeader,</span><br><span class="line">        abortTimeout</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (deferred) deferred.promise(xhr)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!settings.crossDomain) setHeader(<span class="string">'X-Requested-With'</span>, <span class="string">'XMLHttpRequest'</span>)</span><br><span class="line">    setHeader(<span class="string">'Accept'</span>, mime || <span class="string">'*/*'</span>)</span><br><span class="line">    <span class="keyword">if</span> (mime = settings.mimeType || mime) &#123;</span><br><span class="line">      <span class="keyword">if</span> (mime.indexOf(<span class="string">','</span>) &gt; <span class="number">-1</span>) mime = mime.split(<span class="string">','</span>, <span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line">      xhr.overrideMimeType &amp;&amp; xhr.overrideMimeType(mime)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (settings.contentType || (settings.contentType !== <span class="literal">false</span> &amp;&amp; settings.data &amp;&amp; settings.type.toUpperCase() != <span class="string">'GET'</span>))</span><br><span class="line">      setHeader(<span class="string">'Content-Type'</span>, settings.contentType || <span class="string">'application/x-www-form-urlencoded'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (settings.headers) <span class="keyword">for</span> (name <span class="keyword">in</span> settings.headers) setHeader(name, settings.headers[name])</span><br><span class="line">    xhr.setRequestHeader = setHeader</span><br><span class="line"></span><br><span class="line">    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span>) &#123;</span><br><span class="line">        xhr.onreadystatechange = empty</span><br><span class="line">        clearTimeout(abortTimeout)</span><br><span class="line">        <span class="keyword">var</span> result, error = <span class="literal">false</span></span><br><span class="line">        <span class="keyword">if</span> ((xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>) || xhr.status == <span class="number">304</span> || (xhr.status == <span class="number">0</span> &amp;&amp; protocol == <span class="string">'file:'</span>)) &#123;</span><br><span class="line">          dataType = dataType || mimeToDataType(settings.mimeType || xhr.getResponseHeader(<span class="string">'content-type'</span>))</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (xhr.responseType == <span class="string">'arraybuffer'</span> || xhr.responseType == <span class="string">'blob'</span>)</span><br><span class="line">            result = xhr.response</span><br><span class="line">          <span class="keyword">else</span> &#123;</span><br><span class="line">            result = xhr.responseText</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">              <span class="comment">// http://perfectionkills.com/global-eval-what-are-the-options/</span></span><br><span class="line">              <span class="comment">// sanitize response accordingly if data filter callback provided</span></span><br><span class="line">              result = ajaxDataFilter(result, dataType, settings)</span><br><span class="line">              <span class="keyword">if</span> (dataType == <span class="string">'script'</span>)    (<span class="number">1</span>,<span class="built_in">eval</span>)(result)</span><br><span class="line">              <span class="keyword">else</span> <span class="keyword">if</span> (dataType == <span class="string">'xml'</span>)  result = xhr.responseXML</span><br><span class="line">              <span class="keyword">else</span> <span class="keyword">if</span> (dataType == <span class="string">'json'</span>) result = blankRE.test(result) ? <span class="literal">null</span> : $.parseJSON(result)</span><br><span class="line">            &#125; <span class="keyword">catch</span> (e) &#123; error = e &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (error) <span class="keyword">return</span> ajaxError(error, <span class="string">'parsererror'</span>, xhr, settings, deferred)</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          ajaxSuccess(result, xhr, settings, deferred)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          ajaxError(xhr.statusText || <span class="literal">null</span>, xhr.status ? <span class="string">'error'</span> : <span class="string">'abort'</span>, xhr, settings, deferred)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ajaxBeforeSend(xhr, settings) === <span class="literal">false</span>) &#123;</span><br><span class="line">      xhr.abort()</span><br><span class="line">      ajaxError(<span class="literal">null</span>, <span class="string">'abort'</span>, xhr, settings, deferred)</span><br><span class="line">      <span class="keyword">return</span> xhr</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> <span class="keyword">async</span> = <span class="string">'async'</span> <span class="keyword">in</span> settings ? settings.async : <span class="literal">true</span></span><br><span class="line">    xhr.open(settings.type, settings.url, <span class="keyword">async</span>, settings.username, settings.password)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (settings.xhrFields) <span class="keyword">for</span> (name <span class="keyword">in</span> settings.xhrFields) xhr[name] = settings.xhrFields[name]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (name <span class="keyword">in</span> headers) nativeSetHeader.apply(xhr, headers[name])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (settings.timeout &gt; <span class="number">0</span>) abortTimeout = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        xhr.onreadystatechange = empty</span><br><span class="line">        xhr.abort()</span><br><span class="line">        ajaxError(<span class="literal">null</span>, <span class="string">'timeout'</span>, xhr, settings, deferred)</span><br><span class="line">      &#125;, settings.timeout)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// avoid sending empty string (#319)</span></span><br><span class="line">    xhr.send(settings.data ? settings.data : <span class="literal">null</span>)</span><br><span class="line">    <span class="keyword">return</span> xhr</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// handle optional data/success arguments</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">parseArguments</span>(<span class="params">url, data, success, dataType</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ($.isFunction(data)) dataType = success, success = data, data = <span class="literal">undefined</span></span><br><span class="line">    <span class="keyword">if</span> (!$.isFunction(success)) dataType = success, success = <span class="literal">undefined</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      url: url</span><br><span class="line">    , <span class="attr">data</span>: data</span><br><span class="line">    , <span class="attr">success</span>: success</span><br><span class="line">    , <span class="attr">dataType</span>: dataType</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  $.get = <span class="function"><span class="keyword">function</span>(<span class="params"><span class="regexp">/* url, data, success, dataType */</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $.ajax(parseArguments.apply(<span class="literal">null</span>, <span class="built_in">arguments</span>))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  $.post = <span class="function"><span class="keyword">function</span>(<span class="params"><span class="regexp">/* url, data, success, dataType */</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> options = parseArguments.apply(<span class="literal">null</span>, <span class="built_in">arguments</span>)</span><br><span class="line">    options.type = <span class="string">'POST'</span></span><br><span class="line">    <span class="keyword">return</span> $.ajax(options)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  $.getJSON = <span class="function"><span class="keyword">function</span>(<span class="params"><span class="regexp">/* url, data, success */</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> options = parseArguments.apply(<span class="literal">null</span>, <span class="built_in">arguments</span>)</span><br><span class="line">    options.dataType = <span class="string">'json'</span></span><br><span class="line">    <span class="keyword">return</span> $.ajax(options)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  $.fn.load = <span class="function"><span class="keyword">function</span>(<span class="params">url, data, success</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.length) <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>, parts = url.split(<span class="regexp">/\s/</span>), selector,</span><br><span class="line">        options = parseArguments(url, data, success),</span><br><span class="line">        callback = options.success</span><br><span class="line">    <span class="keyword">if</span> (parts.length &gt; <span class="number">1</span>) options.url = parts[<span class="number">0</span>], selector = parts[<span class="number">1</span>]</span><br><span class="line">    options.success = <span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</span><br><span class="line">      self.html(selector ?</span><br><span class="line">        $(<span class="string">'&lt;div&gt;'</span>).html(response.replace(rscript, <span class="string">""</span>)).find(selector)</span><br><span class="line">        : response)</span><br><span class="line">      callback &amp;&amp; callback.apply(self, <span class="built_in">arguments</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    $.ajax(options)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> <span class="built_in">escape</span> = <span class="built_in">encodeURIComponent</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">serialize</span>(<span class="params">params, obj, traditional, scope</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> type, array = $.isArray(obj), hash = $.isPlainObject(obj)</span><br><span class="line">    $.each(obj, <span class="function"><span class="keyword">function</span>(<span class="params">key, value</span>) </span>&#123;</span><br><span class="line">      type = $.type(value)</span><br><span class="line">      <span class="keyword">if</span> (scope) key = traditional ? scope :</span><br><span class="line">        scope + <span class="string">'['</span> + (hash || type == <span class="string">'object'</span> || type == <span class="string">'array'</span> ? key : <span class="string">''</span>) + <span class="string">']'</span></span><br><span class="line">      <span class="comment">// handle data in serializeArray() format</span></span><br><span class="line">      <span class="keyword">if</span> (!scope &amp;&amp; array) params.add(value.name, value.value)</span><br><span class="line">      <span class="comment">// recurse into nested objects</span></span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="string">"array"</span> || (!traditional &amp;&amp; type == <span class="string">"object"</span>))</span><br><span class="line">        serialize(params, value, traditional, key)</span><br><span class="line">      <span class="keyword">else</span> params.add(key, value)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  $.param = <span class="function"><span class="keyword">function</span>(<span class="params">obj, traditional</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> params = []</span><br><span class="line">    params.add = <span class="function"><span class="keyword">function</span>(<span class="params">key, value</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> ($.isFunction(value)) value = value()</span><br><span class="line">      <span class="keyword">if</span> (value == <span class="literal">null</span>) value = <span class="string">""</span></span><br><span class="line">      <span class="keyword">this</span>.push(<span class="built_in">escape</span>(key) + <span class="string">'='</span> + <span class="built_in">escape</span>(value))</span><br><span class="line">    &#125;</span><br><span class="line">    serialize(params, obj, traditional)</span><br><span class="line">    <span class="keyword">return</span> params.join(<span class="string">'&amp;'</span>).replace(<span class="regexp">/%20/g</span>, <span class="string">'+'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)(Zepto)</span><br><span class="line"></span><br><span class="line"><span class="comment">// zepro的form表单处理</span></span><br><span class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;</span><br><span class="line">  $.fn.serializeArray = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name, type, result = [],</span><br><span class="line">      add = <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (value.forEach) <span class="keyword">return</span> value.forEach(add)</span><br><span class="line">        result.push(&#123; <span class="attr">name</span>: name, <span class="attr">value</span>: value &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>[<span class="number">0</span>]) $.each(<span class="keyword">this</span>[<span class="number">0</span>].elements, <span class="function"><span class="keyword">function</span>(<span class="params">_, field</span>)</span>&#123;</span><br><span class="line">      type = field.type, name = field.name</span><br><span class="line">      <span class="keyword">if</span> (name &amp;&amp; field.nodeName.toLowerCase() != <span class="string">'fieldset'</span> &amp;&amp;</span><br><span class="line">        !field.disabled &amp;&amp; type != <span class="string">'submit'</span> &amp;&amp; type != <span class="string">'reset'</span> &amp;&amp; type != <span class="string">'button'</span> &amp;&amp; type != <span class="string">'file'</span> &amp;&amp;</span><br><span class="line">        ((type != <span class="string">'radio'</span> &amp;&amp; type != <span class="string">'checkbox'</span>) || field.checked))</span><br><span class="line">          add($(field).val())</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  $.fn.serialize = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = []</span><br><span class="line">    <span class="keyword">this</span>.serializeArray().forEach(<span class="function"><span class="keyword">function</span>(<span class="params">elm</span>)</span>&#123;</span><br><span class="line">      result.push(<span class="built_in">encodeURIComponent</span>(elm.name) + <span class="string">'='</span> + <span class="built_in">encodeURIComponent</span>(elm.value))</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> result.join(<span class="string">'&amp;'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  $.fn.submit = <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> <span class="keyword">in</span> <span class="built_in">arguments</span>) <span class="keyword">this</span>.bind(<span class="string">'submit'</span>, callback)</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.length) &#123;</span><br><span class="line">      <span class="keyword">var</span> event = $.Event(<span class="string">'submit'</span>)</span><br><span class="line">      <span class="keyword">this</span>.eq(<span class="number">0</span>).trigger(event)</span><br><span class="line">      <span class="keyword">if</span> (!event.isDefaultPrevented()) <span class="keyword">this</span>.get(<span class="number">0</span>).submit()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;)(Zepto)</span><br><span class="line"></span><br><span class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// getComputedStyle shouldn't freak out when called</span></span><br><span class="line">  <span class="comment">// without a valid element as argument</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    getComputedStyle(<span class="literal">undefined</span>)</span><br><span class="line">  &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">    <span class="keyword">var</span> nativeGetComputedStyle = getComputedStyle</span><br><span class="line">    <span class="built_in">window</span>.getComputedStyle = <span class="function"><span class="keyword">function</span>(<span class="params">element, pseudoElement</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> nativeGetComputedStyle(element, pseudoElement)</span><br><span class="line">      &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br><span class="line">  <span class="keyword">return</span> Zepto</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jquery </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>javascript获取数据类型</title>
      <link href="/2018/11/14/javascript%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2018/11/14/javascript%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p>判断js的数据类型，如：Boolean Number String等<br><a id="more"></a></p><h2 id="javascript获取数据类型"><a href="#javascript获取数据类型" class="headerlink" title="javascript获取数据类型"></a>javascript获取数据类型</h2><p>平时在工作中，偶尔会用到判断一下这个数据是什么类型，是数组的？string的？function的？我一般都直接按照代码的需求，只写了需要判断的类型，用完就丢到一边，最近在看jquery源码，人家大牛写的真不错，改一改，封装一下，自己用哈。<br>话不多说，直接贴出代码，其实很简单的：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toType</span>(<span class="params"> obj </span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> class2type = &#123;&#125;,</span><br><span class="line">        toString = class2type.toString;</span><br><span class="line"></span><br><span class="line">    <span class="string">"Boolean Number String Function Array Date RegExp Object Error Symbol"</span></span><br><span class="line">    .split( <span class="string">" "</span> )</span><br><span class="line">    .forEach(<span class="function"><span class="keyword">function</span>(<span class="params"> name </span>) </span>&#123;</span><br><span class="line">        class2type[ <span class="string">"[object "</span> + name + <span class="string">"]"</span> ] = name.toLowerCase();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( obj == <span class="literal">null</span> ) &#123;</span><br><span class="line">      <span class="keyword">return</span> obj + <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> obj === <span class="string">"object"</span> || <span class="keyword">typeof</span> obj === <span class="string">"function"</span> ?</span><br><span class="line">      class2type[ toString.call( obj ) ] || <span class="string">"object"</span> :</span><br><span class="line">      <span class="keyword">typeof</span> obj;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>代码一共没有几行，接下来看看管不管用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试一下</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'对象的类型-&gt;'</span>,toType(&#123;&#125;));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'函数的类型-&gt;'</span>,toType(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'null的类型-&gt;'</span>,toType(<span class="literal">null</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'undefined的类型-&gt;'</span>,toType(<span class="literal">undefined</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'boolean的类型-&gt;'</span>,toType(<span class="literal">true</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'number的类型-&gt;'</span>,toType(<span class="number">555</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'string的类型-&gt;'</span>,toType(<span class="string">'abc'</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'array的类型-&gt;'</span>,toType([]));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'date的类型-&gt;'</span>,toType(<span class="keyword">new</span> <span class="built_in">Date</span>()));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'正则的类型-&gt;'</span>,toType(<span class="regexp">/abc/g</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'symbol-&gt;'</span>,toType(<span class="built_in">Symbol</span>()));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Error的类型-&gt;'</span>,toType(<span class="keyword">new</span> <span class="built_in">Error</span>()));</span><br></pre></td></tr></table></figure></p><p>基本上的类型都判断出来了，不错吧。</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jquery </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>tcp三次握手和四次挥手</title>
      <link href="/2018/11/07/tcp%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%92%8C%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/"/>
      <url>/2018/11/07/tcp%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%92%8C%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/</url>
      
        <content type="html"><![CDATA[<p>我的tcp三次握手和四次挥手简洁理解。<br><a id="more"></a></p><h2 id="tcp三次握手和四次挥手"><a href="#tcp三次握手和四次挥手" class="headerlink" title="tcp三次握手和四次挥手"></a>tcp三次握手和四次挥手</h2><p>tcp三次握手和四次挥手，这是一个很基础的计算机网络层面的基础问题，让我回答我也说不出来具体的东西，所以，为了加强记忆，按照自己的理解，把它记下来。</p><h3 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h3><p>我们用打电话的生活场景来模拟三次握手：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">client: 你好，能听到我说话吗？</span><br><span class="line">server：能听到，你能听到我说话吗？</span><br><span class="line">client：是的，我也能听到你说话。</span><br></pre></td></tr></table></figure></p><p>像上面这样，来回通过3次对话，确认了双方都可以接收到相互的信息。</p><h3 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h3><p>我们还用打电话的生活场景来模拟四次挥手：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">client: 我有事，不跟你聊了哈。</span><br><span class="line">server：知道了。</span><br><span class="line">server：最后说一句，明天把书给我带来。</span><br><span class="line">client：好的，知道了。</span><br></pre></td></tr></table></figure></p><p>好了，四次挥手也模拟完了。<br>我这只是模拟了这两个过程而已，如果想学习真正的原理，<a href="https://blog.csdn.net/qzcsu/article/details/72861891" target="_blank" rel="noopener">请参考这里</a></p>]]></content>
      
      
      <categories>
          
          <category> 计算机原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>js抽象语法树AST</title>
      <link href="/2018/11/06/js%E6%8A%BD%E8%B1%A1%E8%AF%AD%E6%B3%95%E6%A0%91AST/"/>
      <url>/2018/11/06/js%E6%8A%BD%E8%B1%A1%E8%AF%AD%E6%B3%95%E6%A0%91AST/</url>
      
        <content type="html"><![CDATA[<p>通过javascript parser将代码转化成抽象语法树，这棵树定义了代码本身，通过操作这颗树，可以精准的定位到赋值语句、声明语句和运算语句。<br><a id="more"></a></p><h2 id="js抽象语法树AST"><a href="#js抽象语法树AST" class="headerlink" title="js抽象语法树AST"></a>js抽象语法树AST</h2><p>最近在研究webpack，想研究一下它是如何打包的，不过，刚刚入门，就有一个知识点把我难住了，那就是AST抽象语法树。于是乎，上网查了查，原理就是把代码解析，解析成一个有各种属性状态的json树，便于对代码进行操作，具体的解析代码当然是很难的，像我们这种菜鸟只需要了解一下用法就可以了。<br>babel是现在几乎每个项目中必备的一个东西，但是其工作原理避不开对js的解析在生成的过程，babel有引擎babylon，早期fork了项目acron，了解这个之前我们先来看看这种引擎解析出来是什么东西。不光是babel还有webpack等。</p><h3 id="什么是抽象语法树"><a href="#什么是抽象语法树" class="headerlink" title="什么是抽象语法树"></a>什么是抽象语法树</h3><p>见下面例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> b = a + <span class="number">1</span>;</span><br></pre></td></tr></table></figure></p><p>之后我们通过这个<a href="http://esprima.org/demo/parse.html" target="_blank" rel="noopener">网站</a>，他是一个esprima引擎的网站，十分好用.画成流程图如下：<br><img src="/2018/11/06/js抽象语法树AST/astImg1.png" alt="img"><br>而他的json对象格式是这样的：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"type"</span>: <span class="string">"Program"</span>,</span><br><span class="line">    <span class="string">"body"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"type"</span>: <span class="string">"VariableDeclaration"</span>,</span><br><span class="line">            <span class="string">"declarations"</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">"type"</span>: <span class="string">"VariableDeclarator"</span>,</span><br><span class="line">                    <span class="string">"id"</span>: &#123;</span><br><span class="line">                        <span class="string">"type"</span>: <span class="string">"Identifier"</span>,</span><br><span class="line">                        <span class="string">"name"</span>: <span class="string">"a"</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="string">"init"</span>: &#123;</span><br><span class="line">                        <span class="string">"type"</span>: <span class="string">"Literal"</span>,</span><br><span class="line">                        <span class="string">"value"</span>: <span class="number">1</span>,</span><br><span class="line">                        <span class="string">"raw"</span>: <span class="string">"1"</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            <span class="string">"kind"</span>: <span class="string">"var"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"type"</span>: <span class="string">"VariableDeclaration"</span>,</span><br><span class="line">            <span class="string">"declarations"</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">"type"</span>: <span class="string">"VariableDeclarator"</span>,</span><br><span class="line">                    <span class="string">"id"</span>: &#123;</span><br><span class="line">                        <span class="string">"type"</span>: <span class="string">"Identifier"</span>,</span><br><span class="line">                        <span class="string">"name"</span>: <span class="string">"b"</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="string">"init"</span>: &#123;</span><br><span class="line">                        <span class="string">"type"</span>: <span class="string">"BinaryExpression"</span>,</span><br><span class="line">                        <span class="string">"operator"</span>: <span class="string">"+"</span>,</span><br><span class="line">                        <span class="string">"left"</span>: &#123;</span><br><span class="line">                            <span class="string">"type"</span>: <span class="string">"Identifier"</span>,</span><br><span class="line">                            <span class="string">"name"</span>: <span class="string">"a"</span></span><br><span class="line">                        &#125;,</span><br><span class="line">                        <span class="string">"right"</span>: &#123;</span><br><span class="line">                            <span class="string">"type"</span>: <span class="string">"Literal"</span>,</span><br><span class="line">                            <span class="string">"value"</span>: <span class="number">1</span>,</span><br><span class="line">                            <span class="string">"raw"</span>: <span class="string">"1"</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            <span class="string">"kind"</span>: <span class="string">"var"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"sourceType"</span>: <span class="string">"script"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="众多AST解析引擎"><a href="#众多AST解析引擎" class="headerlink" title="众多AST解析引擎"></a>众多AST解析引擎</h3><p>chrome有v8，firefix有spidermonkey.还有一些常用的引擎有：</p><ul><li>esprima</li><li>acron</li><li>Traceur</li><li>UglifyJS2</li><li>shift</li></ul><h3 id="AST的学习三板斧"><a href="#AST的学习三板斧" class="headerlink" title="AST的学习三板斧"></a>AST的学习三板斧</h3><ul><li>通过esprima生成AST</li><li>通过estraverse遍历和更新AST</li><li>通过escodegen将AST重新生成源码</li></ul><p>来一个简单例子，看看用法：<br>1.先新建一个test的工程目录<br>2.在test工程下安装esprima、estraverse、escodegen的npm模块<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i esprima estraverse escodegen --save</span><br></pre></td></tr></table></figure></p><p>3.在目录下面新建一个test.js文件,载入以下代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> esprima = <span class="built_in">require</span>(<span class="string">'esprima'</span>);</span><br><span class="line"><span class="keyword">let</span> code = <span class="string">'const a = 1'</span>;</span><br><span class="line"><span class="keyword">const</span> ast = esprima.parseScript(code);</span><br><span class="line"><span class="built_in">console</span>.log(ast);</span><br></pre></td></tr></table></figure></p><p>你将会看到输出结果：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Script &#123;</span><br><span class="line">  type: <span class="string">'Program'</span>,</span><br><span class="line">  body:</span><br><span class="line">   [ VariableDeclaration &#123;</span><br><span class="line">       type: <span class="string">'VariableDeclaration'</span>,</span><br><span class="line">       declarations: [<span class="built_in">Array</span>],</span><br><span class="line">       kind: <span class="string">'const'</span> &#125; ],</span><br><span class="line">  sourceType: <span class="string">'script'</span> &#125;</span><br></pre></td></tr></table></figure></p><p>4.再在test文件中，载入以下代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> estraverse = <span class="built_in">require</span>(<span class="string">'estraverse'</span>);</span><br><span class="line"></span><br><span class="line">estraverse.traverse(ast, &#123;</span><br><span class="line">    enter: <span class="function"><span class="keyword">function</span> (<span class="params">node</span>) </span>&#123;</span><br><span class="line">        node.kind = <span class="string">"var"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(ast);</span><br></pre></td></tr></table></figure></p><p>输出的结果：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Script &#123;</span><br><span class="line">  type: <span class="string">'Program'</span>,</span><br><span class="line">  body:</span><br><span class="line">   [ VariableDeclaration &#123;</span><br><span class="line">       type: <span class="string">'VariableDeclaration'</span>,</span><br><span class="line">       declarations: [<span class="built_in">Array</span>],</span><br><span class="line">       kind: <span class="string">'var'</span> &#125; ],</span><br><span class="line">  sourceType: <span class="string">'script'</span> &#125;</span><br></pre></td></tr></table></figure></p><p>5.最后在test文件中，加入以下代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> escodegen = <span class="built_in">require</span>(<span class="string">"escodegen"</span>);</span><br><span class="line"><span class="keyword">const</span> transformCode = escodegen.generate(ast)</span><br><span class="line"><span class="built_in">console</span>.log(transformCode);</span><br></pre></td></tr></table></figure></p><p>输出的结果：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br></pre></td></tr></table></figure></p><p>通过这三步，我们将const a = 1转化成了var a = 1</p><p>虽然，具体的解析原理我们并不知道，但是，通过这三个模块包，是不是有种自己搞出一个babel的赶脚。</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>对象链式取值(如loadsh的_.get()方法)在项目中的应用</title>
      <link href="/2018/11/05/%E5%AF%B9%E8%B1%A1%E9%93%BE%E5%BC%8F%E5%8F%96%E5%80%BC-%E5%A6%82loadsh%E7%9A%84-get-%E6%96%B9%E6%B3%95-%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/"/>
      <url>/2018/11/05/%E5%AF%B9%E8%B1%A1%E9%93%BE%E5%BC%8F%E5%8F%96%E5%80%BC-%E5%A6%82loadsh%E7%9A%84-get-%E6%96%B9%E6%B3%95-%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>对象的链式取值在项目中的应用场景。<br><a id="more"></a></p><h2 id="对象链式取值-如loadsh的-get-方法-在项目中的应用"><a href="#对象链式取值-如loadsh的-get-方法-在项目中的应用" class="headerlink" title="对象链式取值(如loadsh的_.get()方法)在项目中的应用"></a>对象链式取值(如loadsh的_.get()方法)在项目中的应用</h2><p>相信大家在从后端获取数据的时候，像这样res.data.rows.count来获取数据的情况很多，如果后台返回的格式不对了，或则data是个null，那么很容易报<strong>Uncaught TypeError: Cannot read property ‘goods’ of undefined</strong>这样的错。<br>我们一般会这样写：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(res &amp;&amp; res.data &amp;&amp; res.data.rows &amp;&amp; res.data.count) &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>不过这么写实在是有些麻烦，我一般的做法是直接catch住error，然后定位到具体错误在哪，在改正。<br>不过，最近在网上看到一篇专门写关于对象的链式取值的文章，里边写了大概4种解决方法，这里我只记录学习了其中一种，也是兼容性最好的一种，就想使用loadsh的_.get方法，先看看loadsh是怎么用的，见下边<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> object = &#123; <span class="string">'a'</span>: [&#123; <span class="string">'b'</span>: &#123; <span class="string">'c'</span>: <span class="number">3</span> &#125; &#125;] &#125;;</span><br><span class="line">_.get(object, <span class="string">'a[0].b.c'</span>);</span><br><span class="line"><span class="comment">// =&gt; 3</span></span><br><span class="line">_.get(object, [<span class="string">'a'</span>, <span class="string">'0'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]);</span><br><span class="line"><span class="comment">// =&gt; 3</span></span><br><span class="line">_.get(object, <span class="string">'a.b.c'</span>, <span class="string">'default'</span>);</span><br><span class="line"><span class="comment">// =&gt; 'default'</span></span><br></pre></td></tr></table></figure></p><p>使用方法一目了然，第一个参数：对象，第二个参数：链式字符串，第三个参数是，如果按照这个链式字符串在对象中取不到值，返回这个默认值。这样写的话，就像上边即使后台同事更改了数据结构，不会报错，而是返回默认值。（不过这种写法我觉得也有不好的地方，那就是不容易发现错误，后台返回的数据结构都变了，而我们前台并没有出现异常，而是返回来初始写的默认值，是不是有点。。。）不过，这种写法在其它场合我想一定会有用武之地。<br>我现在的项目中并没有用到loadsh这个库，但是还想用咋办呢？自己写一个喽，还好，写法简单，容易理解，注意，下边给出的代码交通过函数解析字符串方式来处理的。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span> (<span class="params">obj, props, def</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>((obj == <span class="literal">null</span>) || obj == <span class="literal">null</span> || <span class="keyword">typeof</span> props !== <span class="string">'string'</span>) <span class="keyword">return</span> def;</span><br><span class="line">    <span class="keyword">const</span> temp = props.split(<span class="string">'.'</span>);</span><br><span class="line">    <span class="keyword">const</span> fieldArr = [].concat(temp);</span><br><span class="line">    temp.forEach(<span class="function">(<span class="params">e, i</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="regexp">/^(\w+)\[(\w+)\]$/</span>.test(e)) &#123;</span><br><span class="line">            <span class="keyword">const</span> matchs = e.match(<span class="regexp">/^(\w+)\[(\w+)\]$/</span>);</span><br><span class="line">            <span class="keyword">const</span> field1 = matchs[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">const</span> field2 = matchs[<span class="number">2</span>];</span><br><span class="line">            <span class="keyword">const</span> index = fieldArr.indexOf(e);</span><br><span class="line">            fieldArr.splice(index, <span class="number">1</span>, field1, field2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> fieldArr.reduce(<span class="function">(<span class="params">pre, cur</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> target = pre[cur] || def;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(target <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> [].concat(target);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(target <span class="keyword">instanceof</span> <span class="built_in">Object</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, target)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> target;</span><br><span class="line">    &#125;, obj)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> c = &#123;<span class="attr">a</span>: &#123;<span class="attr">b</span> : [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] &#125;&#125;</span><br><span class="line">get(c ,<span class="string">'a.b'</span>)     <span class="comment">// [1,2,3]</span></span><br><span class="line">get(c, <span class="string">'a.b[1]'</span>)  <span class="comment">// 2</span></span><br><span class="line">get(c, <span class="string">'a.d'</span>, <span class="number">12</span>)  <span class="comment">// 12</span></span><br></pre></td></tr></table></figure></p><p>其实，在项目无论如何使用都没什么问题，即使什么都不做，最后项目完成时，也一定会因为出现报错而改正过来，最多就是不够健壮。我觉得这个函数解析字符串的方式很好，值得举一反三，值得学习。</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>webpack打包bundle.js文件代码分析</title>
      <link href="/2018/11/01/webpack%E6%89%93%E5%8C%85bundle-js%E6%96%87%E4%BB%B6%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90/"/>
      <url>/2018/11/01/webpack%E6%89%93%E5%8C%85bundle-js%E6%96%87%E4%BB%B6%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>webpack这个打包工具，现在可以说很火，前一段时间为了优化公司项目，搞了一个月的gulp，说实在的，gulp的功能我感觉很强大了，而且用起来很灵活，最关键是简单，需要什么的时候直接弄个gulp任务，但是，使用场景很少了，由于之前的项目是php的，现在一般都用vue，react等，都已经集成了webpack，虽然说不用太多配置，但是需要配置的时候还是有的，所以，webpack研究一下也是有必要的，今天，复杂的先不说，只说说bundle.js这个文件里的代码都是干吗用的。<br><a id="more"></a></p><h2 id="webpack打包bundle-js文件代码分析"><a href="#webpack打包bundle-js文件代码分析" class="headerlink" title="webpack打包bundle.js文件代码分析"></a>webpack打包bundle.js文件代码分析</h2><h3 id="一个入口，一个文件"><a href="#一个入口，一个文件" class="headerlink" title="一个入口，一个文件"></a>一个入口，一个文件</h3><p>首先，webpack.config.js配置文件是这样滴：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry:<span class="string">'./index.js'</span>,</span><br><span class="line">  output:&#123;</span><br><span class="line">    filename:<span class="string">'bundle.js'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>index.js内容是这样滴：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'index'</span>);</span><br></pre></td></tr></table></figure></p><p>最后再看看打完包后的bundle.js内容<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bundle.js</span></span><br><span class="line"><span class="comment">/******/</span> (<span class="function"><span class="keyword">function</span>(<span class="params">modules</span>) </span>&#123; <span class="comment">// webpackBootstrap</span></span><br><span class="line"><span class="comment">/******/</span>    <span class="comment">// The module cache</span></span><br><span class="line"><span class="comment">/******/</span>    <span class="keyword">var</span> installedModules = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******/</span>    <span class="comment">// The require function</span></span><br><span class="line"><span class="comment">/******/</span>    <span class="function"><span class="keyword">function</span> <span class="title">__webpack_require__</span>(<span class="params">moduleId</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******/</span>        <span class="comment">// Check if module is in cache</span></span><br><span class="line"><span class="comment">/******/</span>        <span class="keyword">if</span>(installedModules[moduleId])</span><br><span class="line"><span class="comment">/******/</span>            <span class="keyword">return</span> installedModules[moduleId].exports;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******/</span>        <span class="comment">// Create a new module (and put it into the cache)</span></span><br><span class="line"><span class="comment">/******/</span>        <span class="keyword">var</span> <span class="built_in">module</span> = installedModules[moduleId] = &#123;</span><br><span class="line"><span class="comment">/******/</span>            exports: &#123;&#125;,</span><br><span class="line"><span class="comment">/******/</span>            id: moduleId,</span><br><span class="line"><span class="comment">/******/</span>            loaded: <span class="literal">false</span></span><br><span class="line"><span class="comment">/******/</span>        &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******/</span>        <span class="comment">// Execute the module function</span></span><br><span class="line"><span class="comment">/******/</span>        modules[moduleId].call(<span class="built_in">module</span>.exports, <span class="built_in">module</span>, <span class="built_in">module</span>.exports, __webpack_require__);</span><br><span class="line"></span><br><span class="line"><span class="comment">/******/</span>        <span class="comment">// Flag the module as loaded</span></span><br><span class="line"><span class="comment">/******/</span>        <span class="built_in">module</span>.loaded = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******/</span>        <span class="comment">// Return the exports of the module</span></span><br><span class="line"><span class="comment">/******/</span>        <span class="keyword">return</span> <span class="built_in">module</span>.exports;</span><br><span class="line"><span class="comment">/******/</span>    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/******/</span>    <span class="comment">// expose the modules object (__webpack_modules__)</span></span><br><span class="line"><span class="comment">/******/</span>    __webpack_require__.m = modules;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******/</span>    <span class="comment">// expose the module cache</span></span><br><span class="line"><span class="comment">/******/</span>    __webpack_require__.c = installedModules;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******/</span>    <span class="comment">// __webpack_public_path__</span></span><br><span class="line"><span class="comment">/******/</span>    __webpack_require__.p = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******/</span>    <span class="comment">// Load entry module and return exports</span></span><br><span class="line"><span class="comment">/******/</span>    <span class="keyword">return</span> __webpack_require__(<span class="number">0</span>);</span><br><span class="line"><span class="comment">/******/</span> &#125;)</span><br><span class="line"><span class="comment">/************************************************************************/</span></span><br><span class="line"><span class="comment">/******/</span> ([</span><br><span class="line"><span class="comment">/* 0 */</span></span><br><span class="line"><span class="comment">/***/</span> <span class="function"><span class="keyword">function</span>(<span class="params">module, exports</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'index'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> &#125;</span><br><span class="line"><span class="comment">/******/</span> ]);</span><br></pre></td></tr></table></figure></p><p>我们来分析一下bundle.js这个文件</p><ul><li>1.整个内容是一个自执行函数，自执行函数传的参数是一个数组，数组里的元素是function函数，这个函数体的内容就是index.js文件的内容。</li><li>2.在这个闭包函数中，__webpack_require_是模块加载函数，接收模块id（对，webpack中每个模块都会有一个独一无二的id，其实也就是在IIFE传参数组中的索引值（0，1，2…..）。</li><li>3.真正执行module index里面语句的是个调用<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Execute the module function</span></span><br><span class="line">modules[moduleId].call(<span class="built_in">module</span>.exports, <span class="built_in">module</span>, <span class="built_in">module</span>.exports, __webpack_require__);</span><br></pre></td></tr></table></figure></li></ul><p>我们再来看一个例子</p><h3 id="一个入口，两个文件，A依赖B"><a href="#一个入口，两个文件，A依赖B" class="headerlink" title="一个入口，两个文件，A依赖B"></a>一个入口，两个文件，A依赖B</h3><p>先贴出文件内容：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a.js</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="built_in">require</span>(<span class="string">'./b.js'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'a'</span>);</span><br><span class="line"></span><br><span class="line">b.b1();</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// b.js</span></span><br><span class="line">exports.b1 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'b1'</span>)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">exports.b2 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'b2'</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bundle.js</span></span><br><span class="line"><span class="comment">/******/</span> (<span class="function"><span class="keyword">function</span>(<span class="params">modules</span>) </span>&#123; <span class="comment">// webpackBootstrap</span></span><br><span class="line"><span class="comment">// 省略一大段...........</span></span><br><span class="line"><span class="comment">/******/</span>    <span class="comment">// Load entry module and return exports</span></span><br><span class="line"><span class="comment">/******/</span>    <span class="keyword">return</span> __webpack_require__(<span class="number">0</span>);</span><br><span class="line"><span class="comment">/******/</span> &#125;)</span><br><span class="line"><span class="comment">/************************************************************************/</span></span><br><span class="line"><span class="comment">/******/</span> ([</span><br><span class="line"><span class="comment">/* 0 */</span></span><br><span class="line"><span class="comment">/***/</span> <span class="function"><span class="keyword">function</span>(<span class="params">module, exports, __webpack_require__</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> b = __webpack_require__(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'a'</span>);</span><br><span class="line"></span><br><span class="line">    b.b1();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> &#125;,</span><br><span class="line"><span class="comment">/* 1 */</span></span><br><span class="line"><span class="comment">/***/</span> <span class="function"><span class="keyword">function</span>(<span class="params">module, exports</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    exports.b1 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'b1'</span>)</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    exports.b2 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'b2'</span>)</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> &#125;</span><br><span class="line"><span class="comment">/******/</span> ]);</span><br></pre></td></tr></table></figure><p>我们再来分析一下上面的代码。</p><ul><li>1.由于有两个文件，所以IIFE得参数为长度是2的数组，并按照require的顺序排列。</li><li>2.IIFE函数体部分是一模一样的，也就是说再复杂的，多个依赖的文件，函数体部分也不变滴。</li><li><p>3.module a发生了变化，因为a依赖b，所以在a中调用webpack加载模块的函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1是模块b的id</span></span><br><span class="line"><span class="keyword">var</span> b = __webpack_require__(<span class="number">1</span>);</span><br></pre></td></tr></table></figure></li><li><p>4.我们再来分析一下modules[moduleId].call(module.exports, module, module.exports, <strong>webpack_require</strong>);<br>使用call是因为为了确保每个module中的this指向的是module本身。然后给它传__webpack_require函数是想让module有加载其他module的能力。</p><h3 id="其它情况"><a href="#其它情况" class="headerlink" title="其它情况"></a>其它情况</h3><p>其它的情况，比如多入口，多出口情况这里就不做过多分析，我也没搞明白，接下来准备手写一个简单的仿webpack打包工具。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>移动端webview模板</title>
      <link href="/2018/10/30/%E7%A7%BB%E5%8A%A8%E7%AB%AFwebview%E6%A8%A1%E6%9D%BF/"/>
      <url>/2018/10/30/%E7%A7%BB%E5%8A%A8%E7%AB%AFwebview%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<p>移动端的页面平时偶尔会有需求需要做，特别是webview嵌入的页面居多，由于是有时候做，有时候不做，所以，需求来的时候从新写页面还是有点麻烦，所以把之前写的记录一下，下次直接copy就好了。<br><a id="more"></a></p><h2 id="移动端webview模板"><a href="#移动端webview模板" class="headerlink" title="移动端webview模板"></a>移动端webview模板</h2><h3 id="css"><a href="#css" class="headerlink" title="css"></a>css</h3><p>一些css初始化的内容<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">charset</span> <span class="string">"utf-8"</span>;</span><br><span class="line"><span class="comment">/* CSS Document */</span></span><br><span class="line"><span class="selector-tag">body</span>,<span class="selector-tag">ul</span>,<span class="selector-tag">ol</span>,<span class="selector-tag">p</span>,<span class="selector-tag">h1</span>,<span class="selector-tag">h2</span>,<span class="selector-tag">h3</span>,<span class="selector-tag">h4</span>,<span class="selector-tag">h5</span>,<span class="selector-tag">dl</span>,<span class="selector-tag">dd</span>,<span class="selector-tag">form</span>,<span class="selector-tag">input</span>,<span class="selector-tag">textarea</span>,</span><br><span class="line"><span class="selector-tag">td</span>,<span class="selector-tag">th</span>,<span class="selector-tag">button</span>,<span class="selector-tag">strong</span>,<span class="selector-tag">em</span>,<span class="selector-tag">select</span>,<span class="selector-tag">video</span>,<span class="selector-tag">canvas</span>&#123;<span class="attribute">margin</span>:<span class="number">0</span>;<span class="attribute">padding</span>:<span class="number">0</span>;&#125;</span><br><span class="line"><span class="selector-tag">h1</span>,<span class="selector-tag">h2</span>,<span class="selector-tag">h3</span>,<span class="selector-tag">h4</span>,<span class="selector-tag">h5</span>,<span class="selector-tag">h6</span>&#123; <span class="attribute">font-weight</span>:normal;&#125;</span><br><span class="line"><span class="selector-tag">li</span>&#123;<span class="attribute">list-style</span>:none;<span class="attribute">vertical-align</span>:top;&#125;</span><br><span class="line"><span class="selector-tag">table</span>&#123; <span class="attribute">border-collapse</span>:collapse;&#125;</span><br><span class="line"><span class="selector-tag">textarea</span>&#123;<span class="attribute">resize</span>:none;<span class="attribute">overflow</span>:auto;&#125;</span><br><span class="line"><span class="selector-tag">img</span>&#123; <span class="attribute">border</span>:none; <span class="attribute">vertical-align</span>:middle; <span class="attribute">width</span>:<span class="number">100%</span>;&#125;</span><br><span class="line"><span class="selector-tag">em</span>,<span class="selector-tag">i</span>&#123; <span class="attribute">font-style</span>:normal;&#125;</span><br><span class="line"><span class="selector-tag">a</span>&#123; <span class="attribute">text-decoration</span>:none;&#125;</span><br><span class="line"><span class="selector-tag">a</span>,<span class="selector-tag">input</span>&#123;</span><br><span class="line">    <span class="attribute">-webkit-appearance</span>: none;<span class="comment">/*屏蔽阴影*/</span></span><br><span class="line">    <span class="attribute">-webkit-tap-highlight-color</span>:<span class="built_in">rgba</span>(0,0,0,0);</span><br><span class="line">    <span class="comment">/*ios android去除自带阴影的样式*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span>, <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="comment">/* 禁止长按链接与图片弹出菜单 */</span></span><br><span class="line">    <span class="attribute">-webkit-touch-callout</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">html</span>, <span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="comment">/* 禁止选中文本(如无文本选中需求,此为必选项) */</span></span><br><span class="line">    <span class="attribute">-webkit-user-select</span>: none;  </span><br><span class="line">    <span class="attribute">user-select</span>: none;</span><br><span class="line"> <span class="attribute">background</span>:<span class="number">#f5f5f5</span>;</span><br><span class="line"> <span class="attribute">overflow-x</span>:hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="js来控制rem大小代码"><a href="#js来控制rem大小代码" class="headerlink" title="js来控制rem大小代码"></a>js来控制rem大小代码</h3><p>js来修改html的font-size大小<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">doc, win</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> docEl = doc.documentElement,</span><br><span class="line">resizeEvt = <span class="string">'orientationchange'</span> <span class="keyword">in</span> <span class="built_in">window</span> ? <span class="string">'orientationchange'</span> : <span class="string">'resize'</span>,</span><br><span class="line">recalc = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> clientWidth = docEl.clientWidth;</span><br><span class="line">  <span class="keyword">if</span> (!clientWidth) <span class="keyword">return</span>;</span><br><span class="line">  docEl.style.fontSize = clientWidth/<span class="number">20</span> + <span class="string">'px'</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">if</span> (!doc.addEventListener) <span class="keyword">return</span>;</span><br><span class="line">win.addEventListener(resizeEvt, recalc, <span class="literal">false</span>);</span><br><span class="line">doc.addEventListener(<span class="string">'DOMContentLoaded'</span>, recalc, <span class="literal">false</span>);</span><br><span class="line">&#125;)(<span class="built_in">document</span>, <span class="built_in">window</span>);</span><br></pre></td></tr></table></figure></p><h3 id="html页面内容"><a href="#html页面内容" class="headerlink" title="html页面内容"></a>html页面内容</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"format-detection"</span> <span class="attr">content</span>=<span class="string">"telephone=no"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"email=no"</span> <span class="attr">name</span>=<span class="string">"format-detection"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-capable"</span> <span class="attr">content</span>=<span class="string">"yes"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-status-bar-style"</span> <span class="attr">content</span>=<span class="string">"black"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/config.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 判断ios android</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> u = navigator.userAgent;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> isAndroid = u.indexOf(<span class="string">'Android'</span>) &gt; <span class="number">-1</span> || u.indexOf(<span class="string">'Adr'</span>) &gt; <span class="number">-1</span>; <span class="comment">//android终端</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> isiOS = !!u.match(<span class="regexp">/\(i[^;]+;( U;)? CPU.+Mac OS X/</span>); <span class="comment">//ios终端</span></span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> goodsId = <span class="built_in">window</span>.location.search.split(<span class="string">'='</span>)[<span class="number">1</span>] </span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> reqUrl = BASEURL +<span class="string">'/goods/shopProduct/findSpuDescsBySpuId/'</span> + goodsId;</span></span><br><span class="line"><span class="javascript">    $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">        method: <span class="string">'POST'</span>,</span></span><br><span class="line"><span class="undefined">        url: reqUrl,</span></span><br><span class="line"><span class="undefined">        headers: &#123;</span></span><br><span class="line"><span class="javascript">              <span class="string">'client-token'</span>: <span class="string">'eyJhbGciOiJIUzUxMiJ9.eyJ1aWQiOiIxMjMiLCJjZXJ0Tm8iOiI0NTYifQ.xTR4SG0z3Nuf-siW34XtVgqNPr9PRpPb8XFKY6Hrj_Qg8kl9C0AeVFcQ8NnguQ-SrlHHcv5M16SkjVYX3PKweg'</span></span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        data: &#123;goodsId: goodsId&#125;,</span></span><br><span class="line"><span class="javascript">        dataType: <span class="string">'json'</span>,</span></span><br><span class="line"><span class="javascript">        success: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span>(res.code === <span class="string">'0000'</span>) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> innerContent = res.data;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> bodyContent = $.parseHTML(innerContent);</span></span><br><span class="line"><span class="javascript">                $(<span class="string">'.content'</span>).append(bodyContent);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span>(isiOS) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> imgNum = $(<span class="string">'img'</span>).size(), loadCount=<span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">                    $(<span class="string">'img'</span>).on(<span class="string">'load'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">                        loadCount++;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">if</span>(loadCount === imgNum)&#123;</span></span><br><span class="line"><span class="javascript">                            <span class="comment">// 获取到页面高度返给ios端</span></span></span><br><span class="line"><span class="javascript">                            <span class="keyword">var</span> bodyHeight = $(<span class="string">'body'</span>).height() + <span class="number">25</span>;</span></span><br><span class="line"><span class="javascript">                            <span class="comment">// 调取ios注入的方法</span></span></span><br><span class="line"><span class="javascript">                            <span class="built_in">window</span>.webkit.messageHandlers.jsCallNative.postMessage(&#123;<span class="attr">height</span>: bodyHeight&#125;);</span></span><br><span class="line"><span class="undefined">                        &#125;</span></span><br><span class="line"><span class="undefined">                    &#125;);</span></span><br><span class="line"><span class="undefined">                    </span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="javascript">        error: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个webview页面相对麻烦些，需求是在ios页面的固定位置显示webview内容，并不是新开一个新页面来整个显示webview内容，这样ios需要获取h5页面的高，而页面的内容又是h5页面通过ajax获取回来的，所以，ajax请求成功后，将内容插入到页面中，如果有图片的话，等待图片全部加载之后再计算页面的高，返给ios。这时，ios提供了一个函数注入到h5页面里了，我们直接调用就可以，代码中就是这个函数window.webkit.messageHandlers.jsCallNative.postMessage();</p><ul><li>补充点这方面的知识2019/2/2<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">if(isiOS) &#123; // 如果是ios的话</span><br><span class="line">window.webkit.messageHandlers.iosCallback.postMessage(null); // 我告诉ios端可以调我提供的callAppFnInfo函数，它会把值给我传过来。</span><br><span class="line">function callAppFnInfo(info) &#123;</span><br><span class="line">        alert(info);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;else &#123; // android环境</span><br><span class="line">var da = window.WebViewInterface.getId(); // 直接调取android提供的方法，它可以直接返回值</span><br><span class="line">alert(da);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>js基础知识思维导图</title>
      <link href="/2018/10/29/js%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
      <url>/2018/10/29/js%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<p>在网上无意间发现了一套js基础的思维导图，赶紧收为己用，呵呵。<br><a id="more"></a></p><h2 id="js基础知识思维导图"><a href="#js基础知识思维导图" class="headerlink" title="js基础知识思维导图"></a>js基础知识思维导图</h2><h4 id="1-变量"><a href="#1-变量" class="headerlink" title="1.变量"></a>1.变量</h4><p><img src="/2018/10/29/js基础知识思维导图/变量.gif" alt="img"></p><h4 id="2-数组"><a href="#2-数组" class="headerlink" title="2.数组"></a>2.数组</h4><p><img src="/2018/10/29/js基础知识思维导图/数组.gif" alt="img"></p><h4 id="3-运算符"><a href="#3-运算符" class="headerlink" title="3.运算符"></a>3.运算符</h4><p><img src="/2018/10/29/js基础知识思维导图/运算符.gif" alt="img"></p><h4 id="4-流程语句"><a href="#4-流程语句" class="headerlink" title="4.流程语句"></a>4.流程语句</h4><p><img src="/2018/10/29/js基础知识思维导图/流程语句.gif" alt="img"></p><h4 id="5-函数基础"><a href="#5-函数基础" class="headerlink" title="5.函数基础"></a>5.函数基础</h4><p><img src="/2018/10/29/js基础知识思维导图/函数基础.gif" alt="img"></p><h4 id="6-字符串函数"><a href="#6-字符串函数" class="headerlink" title="6.字符串函数"></a>6.字符串函数</h4><p><img src="/2018/10/29/js基础知识思维导图/字符串函数.gif" alt="img"></p><h4 id="7-基本dom操作"><a href="#7-基本dom操作" class="headerlink" title="7.基本dom操作"></a>7.基本dom操作</h4><p><img src="/2018/10/29/js基础知识思维导图/基本dom操作.gif" alt="img"></p><h4 id="8-浏览器Bom对象"><a href="#8-浏览器Bom对象" class="headerlink" title="8.浏览器Bom对象"></a>8.浏览器Bom对象</h4><p><img src="/2018/10/29/js基础知识思维导图/浏览器Bom对象.jpg" alt="img"></p><h4 id="9-正则表达式"><a href="#9-正则表达式" class="headerlink" title="9.正则表达式"></a>9.正则表达式</h4><p><img src="/2018/10/29/js基础知识思维导图/正则表达式.gif" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>js类的继承(ES5写法)</title>
      <link href="/2018/10/23/js%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BF-ES5%E5%86%99%E6%B3%95/"/>
      <url>/2018/10/23/js%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BF-ES5%E5%86%99%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>js继承之终极继承寄生组合式继承<br><a id="more"></a></p><h2 id="js类的继承-ES5写法"><a href="#js类的继承-ES5写法" class="headerlink" title="js类的继承(ES5写法)"></a>js类的继承(ES5写法)</h2><p>js的继承方式有很多，大致的罗列一下：</p><ul><li>构造继承</li><li>原型链继承</li><li>组合继承</li><li>原型式继承</li><li>寄生式继承</li><li>寄生组合式继承<br>这里只是列举了一些，还有很多其它方法，就不一一写出。<br>在这些方法中，寄生组合式继承被认为是最好的，所以，只要记住这一种写法不就可以了吗。<br>寄生组合式继承代码如下：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inheritPrototype</span>(<span class="params">Super,Sub</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> superProtoClone = <span class="built_in">Object</span>.Create(Super.prototype);</span><br><span class="line">  superProtoClone.constructor = Sub;</span><br><span class="line">  Sub.prototype = superProtoClone;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Super</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sub</span>(<span class="params">name, age, job</span>)</span>&#123;</span><br><span class="line">  Super.call(<span class="keyword">this</span>, name, age);</span><br><span class="line">  Sub.job = job;</span><br><span class="line">&#125;</span><br><span class="line">inheritPrototype(Super,Sub);</span><br><span class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> Sub(<span class="string">'mike'</span>, <span class="number">20</span>);</span><br></pre></td></tr></table></figure></li></ul><p>这里用到了Object.Create方法，如果浏览器不兼容的话，顺便把兼容写法写出来：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">Object</span>.create != <span class="string">'function'</span>) &#123;</span><br><span class="line">  <span class="comment">// Production steps of ECMA-262, Edition 5, 15.2.3.5</span></span><br><span class="line">  <span class="comment">// Reference: http://es5.github.io/#x15.2.3.5</span></span><br><span class="line">  <span class="built_in">Object</span>.create = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// To save on memory, use a shared constructor</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Temp</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// make a safe reference to Object.prototype.hasOwnProperty</span></span><br><span class="line">    <span class="keyword">var</span> hasOwn = <span class="built_in">Object</span>.prototype.hasOwnProperty;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">O</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 1. If Type(O) is not Object or Null throw a TypeError exception.</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> O != <span class="string">'object'</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="built_in">TypeError</span>(<span class="string">'Object prototype may only be an Object or null'</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 2. Let obj be the result of creating a new object as if by the</span></span><br><span class="line">      <span class="comment">//    expression new Object() where Object is the standard built-in</span></span><br><span class="line">      <span class="comment">//    constructor with that name</span></span><br><span class="line">      <span class="comment">// 3. Set the [[Prototype]] internal property of obj to O.</span></span><br><span class="line">      Temp.prototype = O;</span><br><span class="line">      <span class="keyword">var</span> obj = <span class="keyword">new</span> Temp();</span><br><span class="line">      Temp.prototype = <span class="literal">null</span>; <span class="comment">// Let's not keep a stray reference to O...</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 4. If the argument Properties is present and not undefined, add</span></span><br><span class="line">      <span class="comment">//    own properties to obj as if by calling the standard built-in</span></span><br><span class="line">      <span class="comment">//    function Object.defineProperties with arguments obj and</span></span><br><span class="line">      <span class="comment">//    Properties.</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">arguments</span>.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// Object.defineProperties does ToObject on its first argument.</span></span><br><span class="line">        <span class="keyword">var</span> Properties = <span class="built_in">Object</span>(<span class="built_in">arguments</span>[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> Properties) &#123;</span><br><span class="line">          <span class="keyword">if</span> (hasOwn.call(Properties, prop)) &#123;</span><br><span class="line">            obj[prop] = Properties[prop];</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 5. Return obj</span></span><br><span class="line">      <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;)();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>实现call函数</title>
      <link href="/2018/10/19/%E5%AE%9E%E7%8E%B0call%E5%87%BD%E6%95%B0/"/>
      <url>/2018/10/19/%E5%AE%9E%E7%8E%B0call%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>自己实现call函数<br><a id="more"></a></p><h2 id="实现call函数"><a href="#实现call函数" class="headerlink" title="实现call函数"></a>实现call函数</h2><p>实现代码很简单，直接贴出来<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.myCall = <span class="function"><span class="keyword">function</span>(<span class="params">context</span>) </span>&#123;</span><br><span class="line">  context.fn = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">var</span> args = <span class="built_in">arguments</span>, str=<span class="string">''</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>; i&lt;args.length; i++) &#123;</span><br><span class="line">    str += (args[i]+<span class="string">','</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> newStr = str.slice(<span class="number">0</span>,(str.length<span class="number">-1</span>));</span><br><span class="line">  <span class="built_in">eval</span>(<span class="string">'context.fn('</span>+newStr+<span class="string">')'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">abc</span>(<span class="params">a,b</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name+a+b);</span><br><span class="line">&#125;</span><br><span class="line">abc.myCall(&#123;</span><br><span class="line">  name: <span class="string">'join'</span></span><br><span class="line">&#125;,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">abc.myCall(&#123;</span><br><span class="line">  name: <span class="string">'mike'</span></span><br><span class="line">&#125;,<span class="number">3</span>,<span class="number">4</span>);</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ajax跨域请求自定义header字段问题</title>
      <link href="/2018/10/16/ajax%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82%E8%87%AA%E5%AE%9A%E4%B9%89header%E5%AD%97%E6%AE%B5%E9%97%AE%E9%A2%98/"/>
      <url>/2018/10/16/ajax%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82%E8%87%AA%E5%AE%9A%E4%B9%89header%E5%AD%97%E6%AE%B5%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>Access-Control-Allow-Headers 列表中不存在请求标头 XXXXXX的处理办法<br><a id="more"></a></p><h2 id="ajax跨域请求自定义header字段问题"><a href="#ajax跨域请求自定义header字段问题" class="headerlink" title="ajax跨域请求自定义header字段问题"></a>ajax跨域请求自定义header字段问题</h2><p>首先，在后端允许跨域请求的情况下，前端加上自定义的请求字段，如下<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">        method: <span class="string">'POST'</span>,</span><br><span class="line">        url: reqUrl,</span><br><span class="line">        headers: &#123;</span><br><span class="line">              <span class="string">'client-token'</span>: <span class="string">'123456'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        data: &#123;<span class="attr">goodsId</span>: goodsId&#125;,</span><br><span class="line">        dataType: <span class="string">'json'</span>,</span><br><span class="line">        success: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">        &#125;,</span><br><span class="line">        error: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></p><p>客户端 按照上面的写，你需要处理的是 服务端 响应头的设置</p><h3 id="1-第一步"><a href="#1-第一步" class="headerlink" title="1.第一步"></a>1.第一步</h3><p>设置响应头<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">header(<span class="string">'Access-Control-Allow-Origin:*'</span>);  <span class="comment">//支持全域名访问，不安全，部署后需要固定限制为客户端网址</span></span><br><span class="line">header(<span class="string">'Access-Control-Allow-Methods:POST,GET,OPTIONS,DELETE'</span>); <span class="comment">//支持的http 动作</span></span><br><span class="line">header(<span class="string">'Access-Control-Allow-Headers:x-requested-with,content-type'</span>);  <span class="comment">//响应头 请按照自己需求添加。</span></span><br></pre></td></tr></table></figure></p><h3 id="2-第二步"><a href="#2-第二步" class="headerlink" title="2.第二步"></a>2.第二步</h3><p>了解IE chrome 等浏览器 对于 跨域请求并要求设置Headers自定义参数的时候的 “预请求”   就是如果遇到 跨域并设置headers的请求，所有请求需要两步完成！<br>A 第一步：发送预请求 OPTIONS 请求。此时 服务器端需要对于OPTIONS请求作出响应 一般使用202响应即可 不用返回任何内容信息。（能看到这份手稿的人，本人不相信你后台处理不了一个options请求）<br>B 第二步：服务器accepted 第一步请求后 浏览器自动执行第二步 发送真正的请求。此时 大多数人 会发现请求成功了，但是 有那么几个人会发现 请求成功了但是没有任何信息返回 why？因为你自定义的请求头在服务器响应中不存在！<br>查看console输出 会发现一个问题：<br>“Access-Control-Allow-Headers 列表中不存在请求标头 XXXXXX”【IE】，<br>request header field xxxxxx is not allowed by Access-Control-Allow-Header【chrome】<br>这是因为 你的XXXX请求头 没有在服务器端被允许哦~<br>遇到这个问题 只有通过修改服务器端来完成，举例：需要设置 client-token这么一个自定义头，那么 你需要在 服务端里面 将header(‘Access-Control-Allow-Headers:x-requested-with,content-type，client-token’);  同学们自行体会吧 这种语法就是根据“,”分割 自己需要设置什么头，必须要在 服务端请求的响应头里面设置好，不然客户端永远永远提交不上去！<br>至此  JavaScript/ajax  跨域+ 修改httpheader 任务完美实现。<br>“人们都一直在抱怨 JavaScript同源策略限制了web前端的发展！然而是服务端做的不够细致！”</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ajax </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>scratch介绍</title>
      <link href="/2018/10/11/scratch%E4%BB%8B%E7%BB%8D/"/>
      <url>/2018/10/11/scratch%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<p>少儿编程神器scratch简单介绍<br><a id="more"></a></p><h2 id="scratch介绍"><a href="#scratch介绍" class="headerlink" title="scratch介绍"></a>scratch介绍</h2><p>scratch是一款儿童学习编程的软件，把具体的一些控制语句以图形的形式表现出来，可以用鼠标来拖动，很生动，简单，不理解编程的孩子们容易学习，本人也是刚刚接触学习scratch，跟孩子们一样需要重头来学习，因为我想做一名少儿编程启蒙老师。<br>先把scratch的网址贴出来：<br><a href="https://scratch.mit.edu/" target="_blank" rel="noopener">scratch官网</a></p><h3 id="安装scratch"><a href="#安装scratch" class="headerlink" title="安装scratch"></a>安装scratch</h3><h4 id="在线免安装"><a href="#在线免安装" class="headerlink" title="在线免安装"></a>在线免安装</h4><p>首页点击try it out就进入在线页面玩耍了。<br><img src="/2018/10/11/scratch介绍/1.png" alt="img"></p><h4 id="离线安装"><a href="#离线安装" class="headerlink" title="离线安装"></a>离线安装</h4><p>首页的footer位置，support下有Offline Editor连接，<a href="https://scratch.mit.edu/download" target="_blank" rel="noopener">也可以点这里</a><br>之后见下图位置可以下载安装了<br><img src="/2018/10/11/scratch介绍/2.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 少儿编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> scratch </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>编译与解释</title>
      <link href="/2018/10/10/%E7%BC%96%E8%AF%91%E4%B8%8E%E8%A7%A3%E9%87%8A/"/>
      <url>/2018/10/10/%E7%BC%96%E8%AF%91%E4%B8%8E%E8%A7%A3%E9%87%8A/</url>
      
        <content type="html"><![CDATA[<p>编译与解释的介绍<br><a id="more"></a></p><h2 id="编译与解释"><a href="#编译与解释" class="headerlink" title="编译与解释"></a>编译与解释</h2><h3 id="什么是编译器"><a href="#什么是编译器" class="headerlink" title="什么是编译器"></a>什么是编译器</h3><p>编译器是一种计算机程序，负责把一种编程语言编写的源码转换成另外一种计算机代码，后者往往是以二进制的形式被称为目标代码(object code)。这个转换的过程通常的目的是生成可执行的程序。<br><br>编译器的产出是「另外一种代码」，然后这些代码等着被别人拿来执行，如果还不能直接被执行，那么还需要再编译或解释一遍，再交由计算机硬件执行。<br>编译器，往往是在「执行」之前完成，产出是一种可执行或需要再编译或者解释的「代码」。</p><h3 id="什么是解释器"><a href="#什么是解释器" class="headerlink" title="什么是解释器"></a>什么是解释器</h3><p>在计算机科学中，解释器是一种计算机程序，它直接执行由编程语言或脚本语言编写的代码，并不会把源代码预编译成机器码。一个解释器，通常会用以下的姿势来执行程序代码：<br><br>1.分析源代码，并且直接执行。<br>2.把源代码翻译成相对更加高效率的中间码，然后立即执行它。<br>3.执行由解释器内部的编译器预编译后保存的代码<br>可以把解释器看成一个黑盒子，我们输入源码，它就会实时返回结果。<br>不同类型的解释器，黑盒子里面的构造不一样，有些还会集成编译器，缓存编译结果，用来提高执行效率（例如 Chrome V8 也是这么做的）。<br>解释器通常是工作在「运行时」，并且对于我们输入的源码，是一行一行的解释然后执行，然后返回结果。</p><h3 id="分两个维度比较一下"><a href="#分两个维度比较一下" class="headerlink" title="分两个维度比较一下"></a>分两个维度比较一下</h3><h4 id="表现-Behavior"><a href="#表现-Behavior" class="headerlink" title="表现 Behavior"></a>表现 Behavior</h4><ul><li>编译器把源代码转换成其他的更低级的代码(例如二进制码、机器码)，但是不会执行它。</li><li>解释器会读取源代码，并且直接生成指令让计算机硬件执行，不会输出另外一种代码。</li></ul><h4 id="性能-Performance"><a href="#性能-Performance" class="headerlink" title="性能 Performance"></a>性能 Performance</h4><ul><li>编译器会事先用比较多的时间把整个程序的源代码编译成另外一种代码，后者往往较前者更加接近机器码，所以执行的效率会更加高。时间是消耗在预编译的过程中。</li><li>解释器会一行一行的读取源代码，解释，然后立即执行。这中间往往使用相对简单的词法分析、语法分析，压缩解释的时间，最后生成机器码，交由硬件执行。解释器适合比较低级的语言。但是相对于预编译好的代码，效率往往会更低。如何减少解释的次数和复杂性，是提高解释器效率的难题。</li></ul><h3 id="关于代码，需要知道的几个概念"><a href="#关于代码，需要知道的几个概念" class="headerlink" title="关于代码，需要知道的几个概念"></a>关于代码，需要知道的几个概念</h3><p>在看了不少不多关于「编译和解释」的文章之后，我发现下面的词汇是大量出现的。<br>知道这些词汇代表的意思，以及对应的层次，能够更好地看懂别人所要表达的意思。</p><h4 id="高级语言代码-High-Level-Code"><a href="#高级语言代码-High-Level-Code" class="headerlink" title="高级语言代码 High-Level Code"></a>高级语言代码 High-Level Code</h4><p>高级语言代码，自然是指由高级编程语言编写代码，对计算机的细节有更高层次的抽象。<br>相对于低级编程语言（low-level programming language）更接近自然语言（人类的语言）。<br>集成一系列的自动工具（垃圾回收，内存管理等），会让程序员延长寿命，更快乐的编写出更简洁，更易读的程序代码。</p><h4 id="低级语言代码-Low-Level-Code"><a href="#低级语言代码-Low-Level-Code" class="headerlink" title="低级语言代码 Low-Level Code"></a>低级语言代码 Low-Level Code</h4><p>低级语言代码，指由低级编程语言编写的代码，相对高级语言，少了更多的抽象概念，更加接近于汇编或者机器指令。<br>但是这也意味着代码的可移植性很差。<br>在我看来，高与低，只是一组相对词而已。<br>越高级的语言，性能、自由度越不及低级语言。<br>但是在抽象、可读可写性、可移植性越比低级语言优秀。<br>在以前的年代，C/C++语言相对汇编语言，机器指令来说，肯定是高级语言。<br>而到了今天，我们更多人对C语言偏向认知为「低级语言」。<br>或许未来世界的开发者，看我们现在所熟悉的Java、PHP、Python、ECMAScript等等，都是「low」到爆的语言。</p><h4 id="汇编语言-Assembly-Language"><a href="#汇编语言-Assembly-Language" class="headerlink" title="汇编语言 Assembly Language"></a>汇编语言 Assembly Language</h4><p>汇编语言作为一门低级语言，对应于计算机或者其他可编程的硬件。<br>它和计算机的体系结构以及机器指令是强关联的。<br>换句话说，就是不同的汇编语言代码对应特定的硬件，所以不用谈可移植性了。<br>相对于需要编译和解释的高级语言代码来说，汇编代码只需要翻译成机器码就可以执行了。<br>所以汇编语言也往往被称作象征性机器码(symbolic machine code)</p><h4 id="字节码-Byte-Code"><a href="#字节码-Byte-Code" class="headerlink" title="字节码 Byte Code"></a>字节码 Byte Code</h4><p>字节码严格来说不算是编程语言，而是高级编程语言为了种种需求（可移植性、可传输性、预编译等）而产生的中间码（Intermediate Code）。<br>它是由一堆指令集组成的代码，例如在javac编译过后的java源码产生的就是字节码。<br>源码在编译的过程中，是需要进行「词法分析 → 语法分析 → 生成目标代码」等过程的，在预编译的过程中，就完成这部分工作，生成字节码。<br>然后在后面交由解释器（这里通常指编程语言的虚拟机）解释执行，省去前面预编译的开销。</p><h4 id="机器码-Machine-Code"><a href="#机器码-Machine-Code" class="headerlink" title="机器码 Machine Code"></a>机器码 Machine Code</h4><p>机器码是一组可以直接被CPU执行的指令集，<br>每一条指令都代表一个特定的任务，或者是加载，或者是跳转，亦或是计算操作等等。<br>所有可以直接被CPU执行的程序，都是由这么一系列的指令组成的。<br>机器码可是看作是编译过程中，最低级的代码，因外再往下就是交由硬件来执行了。<br>当然机器码也是可以被编辑的，但是以人类难以看懂的姿势存在，可读性非常差。</p><h3 id="从熟悉的编程语言的角度来看看"><a href="#从熟悉的编程语言的角度来看看" class="headerlink" title="从熟悉的编程语言的角度来看看"></a>从熟悉的编程语言的角度来看看</h3><p><img src="/2018/10/10/编译与解释/1.webp" alt="img"><br>从左往右看，<br>1.以 Java 为例，我们在文本编译器写好了 Java 代码，交由「编译器」编译成 Java Bytecode。然后 Bytecode 交由 JVM 来执行，这时候 JVM 充当了「解释器」的角色，在解释 Bytecode 成 Machine Code 的同时执行它，返回结果。<br>2.以 BASIC 语言（早期的可以由计算机直译的语言） 为例，通过文本编译器编写好，不用经历「编译」的过程，就可以直接交由操作系统内部来进行「解释」然后执行。<br>3.以 C 语言为例，我们在文本编译器编写好源代码，然后运行 gcc hello.c 编译出 hello.out 文件，该文件由一系列的机器指令组成的机器码，可以直接交由硬件来执行。</p><h3 id="抽象看本质：人与计算机之间的鸿沟"><a href="#抽象看本质：人与计算机之间的鸿沟" class="headerlink" title="抽象看本质：人与计算机之间的鸿沟"></a>抽象看本质：人与计算机之间的鸿沟</h3><p>无论是最近在看《暗时间》的作者刘未鹏，还是前一段时间听《以产品思维写文章》讲座的阿禅，还是其他的很多聪明的人。<br>他们都强调「抽象看本质」的能力，能从事物本身抽象出共通属性，看待本质。<br>这也是很多人所说的「跳出这个框框再看」的思维方式。</p><p>无论是「编译 Compile」还是「解释 Interpret」。<br>本质还是「人与计算机的交流形式」，人的语言最终转换成机器语言。<br>一句 「Hello World」，经过一些列的「编译」和「解释」，最终转换成一系列包含机器指令的那些0和1，机器傻傻执行完之后，告诉你结果。</p><p>就这么一个过程，我们就需要很多的翻译官。<br>有些翻译官可以做到同声传译（解释），有些翻译官却只能把我们的意图记下来再全部翻译（编译）给计算机。<br>而往往一个翻译官能力有限，也只能把你的语言，翻译成另外一种低级点的语言，再由另外懂这个语言的翻译官来翻译更接近计算机能读得懂的语言。<br><img src="/2018/10/10/编译与解释/2.webp" alt="img"></p><h3 id="最后用一张图来展示一下编译与解释"><a href="#最后用一张图来展示一下编译与解释" class="headerlink" title="最后用一张图来展示一下编译与解释"></a>最后用一张图来展示一下编译与解释</h3><p><img src="/2018/10/10/编译与解释/3.webp" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vue不同路由使用同一个组件重新加载这个组件</title>
      <link href="/2018/10/08/vue%E4%B8%8D%E5%90%8C%E8%B7%AF%E7%94%B1%E4%BD%BF%E7%94%A8%E5%90%8C%E4%B8%80%E4%B8%AA%E7%BB%84%E4%BB%B6%E9%87%8D%E6%96%B0%E5%8A%A0%E8%BD%BD%E8%BF%99%E4%B8%AA%E7%BB%84%E4%BB%B6/"/>
      <url>/2018/10/08/vue%E4%B8%8D%E5%90%8C%E8%B7%AF%E7%94%B1%E4%BD%BF%E7%94%A8%E5%90%8C%E4%B8%80%E4%B8%AA%E7%BB%84%E4%BB%B6%E9%87%8D%E6%96%B0%E5%8A%A0%E8%BD%BD%E8%BF%99%E4%B8%AA%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>vue不同路由使用同一个组件重新加载这个组件<br><a id="more"></a></p><h2 id="vue不同路由使用同一个组件重新加载这个组件"><a href="#vue不同路由使用同一个组件重新加载这个组件" class="headerlink" title="vue不同路由使用同一个组件重新加载这个组件"></a>vue不同路由使用同一个组件重新加载这个组件</h2><p>vue,react,angular都会有一个共同点，那就是如果两个路由用的是一个组件的话，在切换路由的时候组件的生命周期函数并没有被调用，比如有一些想在组件渲染之后调用的钩子函数并不会执行，这是为了性能的考虑。我之前用angular的时候有相应的解决办法，react也有，这里不做探讨，这里只说vue，昨天看到了一个这方面的解决方法，感觉很好，记录下来。<br><br>有两种解决方案：</p><h3 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h3><p>监听$route的变化来初始化数据，如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    loading: <span class="literal">false</span>,</span><br><span class="line">    error: <span class="literal">null</span>,</span><br><span class="line">    post: <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">watch: &#123;</span><br><span class="line">  <span class="string">'$route'</span>: &#123;</span><br><span class="line">    handler: <span class="string">'resetData'</span>,</span><br><span class="line">    immediate: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">  resetData() &#123;</span><br><span class="line">    <span class="keyword">this</span>.loading = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">this</span>.error = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">this</span>.post = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">this</span>.getPost(<span class="keyword">this</span>.$route.params.id)</span><br><span class="line">  &#125;,</span><br><span class="line">  getPost(id)&#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h3><p>给router-view添加一个unique的key，这样即使是公用组件，只要url变化了，就一定会重新创建这个组件，将key直接设置为路由的完整路径。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-view :key=<span class="string">"$route.fullpath"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><p>组件代码就可以正常的书写了，如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    loading: <span class="literal">false</span>,</span><br><span class="line">    error: <span class="literal">null</span>,</span><br><span class="line">    post: <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">created () &#123;</span><br><span class="line">  <span class="keyword">this</span>.getPost(<span class="keyword">this</span>.$route.params.id)</span><br><span class="line">&#125;,</span><br><span class="line">methods () &#123;</span><br><span class="line">  getPost(postId) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>图片类型转换(image base64 file canvas)</title>
      <link href="/2018/09/29/%E5%9B%BE%E7%89%87%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2-image-base64-file-canvas/"/>
      <url>/2018/09/29/%E5%9B%BE%E7%89%87%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2-image-base64-file-canvas/</url>
      
        <content type="html"><![CDATA[<p>图片的各种类型相互间的转换。<br><a id="more"></a></p><h2 id="图片类型转换-image-base64-file-canvas"><a href="#图片类型转换-image-base64-file-canvas" class="headerlink" title="图片类型转换(image base64 file canvas)"></a>图片类型转换(image base64 file canvas)</h2><p>dom中的img标签来显示图片，在src上给一个图片的连接即可，但是如果想把这个图片放在canvas上，或者ipput上传的图片想显示出来，或者canvas剪裁的图片想保存为Blob格式用ajax上传等等一系列操作，如果不缕清楚的话真是迷糊，所以做一下小小的总结。</p><h3 id="url连接"><a href="#url连接" class="headerlink" title="url连接"></a>url连接</h3><p>urltoImage(url,fn) 会通过一个url加载所需要的图片对象，其中 url 参数传入图片的 url , fn 为回调方法,包含一个Image对象的参数，代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">urltoImage</span> (<span class="params">url,fn</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">  img.src = url;</span><br><span class="line">  img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    fn(img);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="canvas画图片"><a href="#canvas画图片" class="headerlink" title="canvas画图片"></a>canvas画图片</h3><p>imagetoCanvas(image) 会将一个 Image 对象转变为一个 Canvas 类型对象，其中 image 参数传入一个Image对象，代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">imagetoCanvas</span>(<span class="params">image</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> cvs = <span class="built_in">document</span>.createElement(<span class="string">"canvas"</span>);</span><br><span class="line">  <span class="keyword">var</span> ctx = cvs.getContext(<span class="string">'2d'</span>);</span><br><span class="line">  cvs.width = image.width;</span><br><span class="line">  cvs.height = image.height;</span><br><span class="line">  ctx.drawImage(image, <span class="number">0</span>, <span class="number">0</span>, cvs.width, cvs.height);</span><br><span class="line">  <span class="keyword">return</span> cvs ;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="canvas图片转Blob"><a href="#canvas图片转Blob" class="headerlink" title="canvas图片转Blob"></a>canvas图片转Blob</h3><p> canvasResizetoFile(canvas,quality,fn) 会将一个 Canvas 对象压缩转变为一个 Blob 类型对象；其中 canvas 参数传入一个 Canvas 对象; quality 参数传入一个0-1的 number 类型，表示图片压缩质量; fn 为回调方法，包含一个 Blob 对象的参数;代码如下：<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">canvasResizetoFile</span>(<span class="params">canvas,quality,fn</span>)</span>&#123;</span><br><span class="line">  canvas.toBlob(<span class="function"><span class="keyword">function</span>(<span class="params">blob</span>) </span>&#123;</span><br><span class="line">    fn(blob);</span><br><span class="line">  &#125;,<span class="string">'image/jpeg'</span>,quality);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p> 这里的 Blob 对象表示不可变的类似文件对象的原始数据。 Blob 表示不一定是 JavaScript 原生形式的数据。 File 接口基于 Blob ，继承了 Blob 的功能并将其扩展使其支持用户系统上的文件。我们可以把它当做File类型对待，其他更具体的用法可以参考MDN文档</p><h3 id="canvas转dataURL"><a href="#canvas转dataURL" class="headerlink" title="canvas转dataURL"></a>canvas转dataURL</h3><p> canvasResizetoDataURL(canvas,quality) 会将一个 Canvas 对象压缩转变为一个 dataURL 字符串,其中 canvas 参数传入一个 Canvas 对象; quality 参数传入一个0-1的 number 类型，表示图片压缩质量;代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">methods.canvasResizetoDataURL = <span class="function"><span class="keyword">function</span>(<span class="params">canvas,quality</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> canvas.toDataURL(<span class="string">'image/jpeg'</span>,quality);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>其中的 toDataURL API可以参考MDN文档</p><h3 id="File-Blob-转dataURL"><a href="#File-Blob-转dataURL" class="headerlink" title="File(Blob)转dataURL"></a>File(Blob)转dataURL</h3><p> filetoDataURL(file,fn) 会将 File （ Blob ）类型文件转变为 dataURL 字符串,其中 file 参数传入一个 File （ Blob ）类型文件; fn 为回调方法，包含一个 dataURL 字符串的参数;代码如下：<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filetoDataURL</span>(<span class="params">file,fn</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> reader = <span class="keyword">new</span> FileReader();</span><br><span class="line">  reader.onloadend = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    fn(e.target.result);</span><br><span class="line">  &#125;;</span><br><span class="line">  reader.readAsDataURL(file);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="dataURL转为Image类型文件"><a href="#dataURL转为Image类型文件" class="headerlink" title="dataURL转为Image类型文件"></a>dataURL转为Image类型文件</h3><p> dataURLtoImage(dataurl,fn) 会将一串 dataURL 字符串转变为 Image 类型文件,其中 dataurl 参数传入一个 dataURL 字符串, fn 为回调方法，包含一个 Image 类型文件的参数，代码如下：<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dataURLtoImage</span>(<span class="params">dataurl,fn</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">  img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    fn(img);</span><br><span class="line">  &#125;;</span><br><span class="line">  img.src = dataurl;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="dataURL转为Blob类型"><a href="#dataURL转为Blob类型" class="headerlink" title="dataURL转为Blob类型"></a>dataURL转为Blob类型</h3><p>dataURLtoFile(dataurl) 会将一串 dataURL 字符串转变为 Blob 类型对象，其中 dataurl 参数传入一个 dataURL 字符串,代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dataURLtoFile</span>(<span class="params">dataurl</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> arr = dataurl.split(<span class="string">','</span>), mime = arr[<span class="number">0</span>].match(<span class="regexp">/:(.*?);/</span>)[<span class="number">1</span>],</span><br><span class="line">    bstr = atob(arr[<span class="number">1</span>]), n = bstr.length, u8arr = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(n);</span><br><span class="line">  <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">    u8arr[n] = bstr.charCodeAt(n);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Blob([u8arr], &#123;<span class="attr">type</span>:mime&#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="实际应用demo"><a href="#实际应用demo" class="headerlink" title="实际应用demo"></a>实际应用demo</h3><p>对于常用的将一个 File 对象压缩之后再变为 File 对象,我们可以将上面的方法再封装一下，参考如下代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fileResizetoFile</span>(<span class="params">file,quality,fn</span>)</span>&#123;</span><br><span class="line">  filetoDataURL (file,<span class="function"><span class="keyword">function</span>(<span class="params">dataurl</span>)</span>&#123;</span><br><span class="line">    dataURLtoImage(dataurl,<span class="function"><span class="keyword">function</span>(<span class="params">image</span>)</span>&#123;</span><br><span class="line">      canvasResizetoFile(imagetoCanvas(image),quality,fn);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其中， file 参数传入一个 File （ Blob ）类型文件； quality 参数传入一个 0-1 的 number 类型，表示图片压缩质量； fn 为回调方法，包含一个 Blob 类型文件的参数。<br>它使用起来就像下面这样：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> file = <span class="built_in">document</span>.getElementById(<span class="string">'demo'</span>).files[<span class="number">0</span>];</span><br><span class="line">fileResizetoFile(file,<span class="number">0.6</span>,<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res);</span><br><span class="line">  <span class="comment">//拿到res，做出你要上传的操作；</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h3 id="再来一个图片等比压缩的demo"><a href="#再来一个图片等比压缩的demo" class="headerlink" title="再来一个图片等比压缩的demo"></a>再来一个图片等比压缩的demo</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">proDownImage</span>(<span class="params">path,imgObj</span>) </span>&#123; <span class="comment">// 等比压缩图片工具</span></span><br><span class="line">  <span class="comment">//var proMaxHeight = 185;</span></span><br><span class="line">  <span class="keyword">var</span> proMaxHeight=<span class="number">300</span>;</span><br><span class="line">  <span class="keyword">var</span> proMaxWidth = <span class="number">175</span>;</span><br><span class="line">  <span class="keyword">var</span> size = <span class="keyword">new</span> <span class="built_in">Object</span>();　</span><br><span class="line">  <span class="keyword">var</span> image = <span class="keyword">new</span> Image();　</span><br><span class="line">  image.src = path;　</span><br><span class="line">  image.attachEvent(<span class="string">"onreadystatechange"</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">// 当加载状态改变时执行此方法,因为img的加载有延迟</span></span><br><span class="line">    <span class="keyword">if</span> (image.readyState == <span class="string">"complete"</span>) &#123; <span class="comment">// 当加载状态为完全结束时进入</span></span><br><span class="line">      <span class="keyword">if</span> (image.width &gt; <span class="number">0</span> &amp;&amp; image.height &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> ww = proMaxWidth / image.width;</span><br><span class="line">        <span class="keyword">var</span> hh = proMaxHeight / image.height;　</span><br><span class="line">        <span class="keyword">var</span> rate = (ww &lt; hh) ? ww: hh;</span><br><span class="line">        <span class="keyword">if</span> (rate &lt;= <span class="number">1</span>) &#123;　</span><br><span class="line">          alert(<span class="string">"imgage width*rate is:"</span> + image.width * rate);</span><br><span class="line">          size.width = image.width * rate;</span><br><span class="line">          size.height = image.height * rate;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          alert(<span class="string">"imgage width is:"</span> + image.width);　　</span><br><span class="line">          size.width = image.width;　　</span><br><span class="line">          size.height = image.height;　　　</span><br><span class="line">        &#125;　</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    imgObj.attr(<span class="string">"width"</span>,size.width);</span><br><span class="line">    imgObj.attr(<span class="string">"height"</span>,size.height);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图片处理 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>一些好的文章收集</title>
      <link href="/2018/09/28/%E4%B8%80%E4%BA%9B%E5%A5%BD%E7%9A%84%E6%96%87%E7%AB%A0%E6%94%B6%E9%9B%86/"/>
      <url>/2018/09/28/%E4%B8%80%E4%BA%9B%E5%A5%BD%E7%9A%84%E6%96%87%E7%AB%A0%E6%94%B6%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<p>网上看到的好文章，总结收集。<br><a id="more"></a></p><h2 id="一些好的文章收集"><a href="#一些好的文章收集" class="headerlink" title="一些好的文章收集"></a>一些好的文章收集</h2><p>自己写博客文章真的是一件耗时的事儿，写文章需要把各个方面的知识都整理好，有时候我都是在网上看到一篇不错的文章，想记录下来，就照猫画虎的copy，但是，copy下拉也需要时间啊，没办法，现在我只能把连接记录下来，等有时间再好好地记录一下。</p><h3 id="页面渲染优化"><a href="#页面渲染优化" class="headerlink" title="页面渲染优化"></a>页面渲染优化</h3><ul><li><a href="https://feclub.cn/post/content/dom" target="_blank" rel="noopener">高频dom操作和页面性能优化探索</a></li><li><a href="https://mp.weixin.qq.com/s/zO3W6WBt-mVW7j5iPYzSTQ" target="_blank" rel="noopener">送你43道JS面试题</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文章收集 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hexo中使用hexo-asset-image插件来加载本地图片</title>
      <link href="/2018/09/21/hexo%E4%B8%AD%E4%BD%BF%E7%94%A8hexo-asset-image%E6%8F%92%E4%BB%B6%E6%9D%A5%E5%8A%A0%E8%BD%BD%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/"/>
      <url>/2018/09/21/hexo%E4%B8%AD%E4%BD%BF%E7%94%A8hexo-asset-image%E6%8F%92%E4%BB%B6%E6%9D%A5%E5%8A%A0%E8%BD%BD%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/</url>
      
        <content type="html"><![CDATA[<p>hexo中使用hexo-asset-image插件来加载本地图片,因为版本兼容问题不显示图片的解决办法。<br><a id="more"></a></p><h2 id="hexo中使用hexo-asset-image插件来加载本地图片"><a href="#hexo中使用hexo-asset-image插件来加载本地图片" class="headerlink" title="hexo中使用hexo-asset-image插件来加载本地图片"></a>hexo中使用hexo-asset-image插件来加载本地图片</h2><p>在使用hexo时，在md文件里加载图片一般都会用到网络上的图片，但是如果有些图片不允许使用，怎么办？当然可以用七牛云这种图床网站，如果想使用本地的图片怎么办呢？那就用到了hexo-asset-image这个插件，但是这个插件写的很早，与现在新版本的hexo不兼容，于是乎就有一些大牛进行了修改，这里贴出这位大牛的github地址，<a href="https://github.com/7ym0n/hexo-asset-image" target="_blank" rel="noopener">兼容新版本hexo的hexo-asset-image插件</a>。<br><br>使用方法就是替换掉npm安装的hexo-asset-image插件中的文件,代码如下<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> cheerio = <span class="built_in">require</span>(<span class="string">'cheerio'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPosition</span>(<span class="params">str, m, i</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str.split(m, i).join(m).length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> version = <span class="built_in">String</span>(hexo.version).split(<span class="string">'.'</span>);</span><br><span class="line">hexo.extend.filter.register(<span class="string">'after_post_render'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> config = hexo.config;</span><br><span class="line">  <span class="keyword">if</span>(config.post_asset_folder)&#123;</span><br><span class="line">    <span class="keyword">var</span> link = data.permalink;</span><br><span class="line"><span class="keyword">if</span>(version.length &gt; <span class="number">0</span> &amp;&amp; <span class="built_in">Number</span>(version[<span class="number">0</span>]) == <span class="number">3</span>)</span><br><span class="line">   <span class="keyword">var</span> beginPos = getPosition(link, <span class="string">'/'</span>, <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="keyword">var</span> beginPos = getPosition(link, <span class="string">'/'</span>, <span class="number">3</span>) + <span class="number">1</span>;</span><br><span class="line"><span class="comment">// In hexo 3.1.1, the permalink of "about" page is like ".../about/index.html".</span></span><br><span class="line"><span class="keyword">var</span> endPos = link.lastIndexOf(<span class="string">'/'</span>) + <span class="number">1</span>;</span><br><span class="line">    link = link.substring(beginPos, endPos);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> toprocess = [<span class="string">'excerpt'</span>, <span class="string">'more'</span>, <span class="string">'content'</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; toprocess.length; i++)&#123;</span><br><span class="line">      <span class="keyword">var</span> key = toprocess[i];</span><br><span class="line"> </span><br><span class="line">      <span class="keyword">var</span> $ = cheerio.load(data[key], &#123;</span><br><span class="line">        ignoreWhitespace: <span class="literal">false</span>,</span><br><span class="line">        xmlMode: <span class="literal">false</span>,</span><br><span class="line">        lowerCaseTags: <span class="literal">false</span>,</span><br><span class="line">        decodeEntities: <span class="literal">false</span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      $(<span class="string">'img'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span> ($(<span class="keyword">this</span>).attr(<span class="string">'src'</span>))&#123;</span><br><span class="line"><span class="comment">// For windows style path, we replace '\' to '/'.</span></span><br><span class="line"><span class="keyword">var</span> src = $(<span class="keyword">this</span>).attr(<span class="string">'src'</span>).replace(<span class="string">'\\'</span>, <span class="string">'/'</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="regexp">/http[s]*.*|\/\/.*/</span>.test(src) &amp;&amp;</span><br><span class="line">   !<span class="regexp">/^\s*\//</span>.test(src)) &#123;</span><br><span class="line">  <span class="comment">// For "about" page, the first part of "src" can't be removed.</span></span><br><span class="line">  <span class="comment">// In addition, to support multi-level local directory.</span></span><br><span class="line">  <span class="keyword">var</span> linkArray = link.split(<span class="string">'/'</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> elem != <span class="string">''</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">var</span> srcArray = src.split(<span class="string">'/'</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> elem != <span class="string">''</span> &amp;&amp; elem != <span class="string">'.'</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">if</span>(srcArray.length &gt; <span class="number">1</span>)</span><br><span class="line">srcArray.shift();</span><br><span class="line">  src = srcArray.join(<span class="string">'/'</span>);</span><br><span class="line">  $(<span class="keyword">this</span>).attr(<span class="string">'src'</span>, config.root + link + src);</span><br><span class="line">  <span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">"update link as:--&gt;"</span>+config.root + link + src);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">"no src attr, skipped..."</span>);</span><br><span class="line"><span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info($(<span class="keyword">this</span>));</span><br><span class="line">&#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      data[key] = $.html();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>图片具体的引入方式：<br><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">MacGesture2-Publish</span><br><span class="line">├── apppicker.jpg</span><br><span class="line">├── logo.jpg</span><br><span class="line">└── rules.jpg</span><br><span class="line">MacGesture2-Publish.md</span><br><span class="line"></span><br><span class="line">Make sure post_asset_folder: <span class="literal">true</span> <span class="keyword">in</span> your _config.yml.</span><br><span class="line">Just use ![logo](logo.jpg) to insert logo.jpg.</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HTTP缓存机制及原理</title>
      <link href="/2018/09/19/HTTP%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6%E5%8F%8A%E5%8E%9F%E7%90%86/"/>
      <url>/2018/09/19/HTTP%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6%E5%8F%8A%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>HTTP缓存机制及原理的一些小总结<br><a id="more"></a></p><h2 id="HTTP缓存机制及原理"><a href="#HTTP缓存机制及原理" class="headerlink" title="HTTP缓存机制及原理"></a>HTTP缓存机制及原理</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Http 缓存机制作为 web 性能优化的重要手段，对于从事 Web 开发的同学们来说，应该是知识体系库中的一个基础环节，同时对于有志成为前端架构师的同学来说是必备的知识技能。<br><br>但是对于很多前端同学来说，仅仅只是知道浏览器会对请求的静态文件进行缓存，但是为什么被缓存，缓存是怎样生效的，却并不是很清楚。<br><br>在此，我会尝试用简单明了的文字，像大家系统的介绍HTTP缓存机制，期望对各位正确的理解前端缓存有所帮助。<br></p><h3 id="在介绍HTTP缓存之前，作为知识铺垫，先简单介绍一下HTTP报文"><a href="#在介绍HTTP缓存之前，作为知识铺垫，先简单介绍一下HTTP报文" class="headerlink" title="在介绍HTTP缓存之前，作为知识铺垫，先简单介绍一下HTTP报文"></a>在介绍HTTP缓存之前，作为知识铺垫，先简单介绍一下HTTP报文</h3><p>HTTP报文就是浏览器和服务器间通信时发送及响应的数据块。<br><br>浏览器向服务器请求数据，发送请求(request)报文；服务器向浏览器返回数据，返回响应(response)报文。<br><br>报文信息主要分为两部分<br><br>1.包含属性的首部(header)————————–附加信息（cookie，缓存信息等）与缓存相关的规则信息，均包含在header中<br><br>2.包含数据的主体部分(body)———————–HTTP请求真正想要传输的部分<br></p><h3 id="缓存规则解析"><a href="#缓存规则解析" class="headerlink" title="缓存规则解析"></a>缓存规则解析</h3><p>为方便大家理解，我们认为浏览器存在一个缓存数据库,用于存储缓存信息。<br><br>在客户端第一次请求数据时，此时缓存数据库中没有对应的缓存数据，需要请求服务器，服务器返回后，将数据存储至缓存数据库中。<br><br><img src="/2018/09/19/HTTP缓存机制及原理/632130-20170210141639213-1923993391.png" alt="img"><br>HTTP缓存有多种规则，根据是否需要重新向服务器发起请求来分类，我将其分为两大类(强制缓存，对比缓存)<br>在详细介绍这两种规则之前，先通过时序图的方式，让大家对这两种规则有个简单了解。<br><br>已存在缓存数据时，仅基于强制缓存，请求数据的流程如下<br><img src="/2018/09/19/HTTP缓存机制及原理/632130-20170210135521072-1812985836.png" alt="img"><br>已存在缓存数据时，仅基于对比缓存，请求数据的流程如<br><img src="/2018/09/19/HTTP缓存机制及原理/632130-20170210141716838-764535017.png" alt="img"><br>对缓存机制不太了解的同学可能会问，基于对比缓存的流程下，不管是否使用缓存，都需要向服务器发送请求，那么还用缓存干什么？<br><br>这个问题，我们暂且放下，后文在详细介绍每种缓存规则的时候，会带给大家答案。<br><br>我们可以看到两类缓存规则的不同，强制缓存如果生效，不需要再和服务器发生交互，而对比缓存不管是否生效，都需要与服务端发生交互。<br><br>两类缓存规则可以同时存在，强制缓存优先级高于对比缓存，也就是说，当执行强制缓存的规则时，如果缓存生效，直接使用缓存，不再执行对比缓存规则。<br></p><h3 id="强制缓存"><a href="#强制缓存" class="headerlink" title="强制缓存"></a>强制缓存</h3><p>从上文我们得知，强制缓存，在缓存数据未失效的情况下，可以直接使用缓存数据，那么浏览器是如何判断缓存数据是否失效呢？<br><br>我们知道，在没有缓存数据的时候，浏览器向服务器请求数据时，服务器会将数据和缓存规则一并返回，缓存规则信息包含在响应header中。<br><br>对于强制缓存来说，响应header中会有两个字段来标明失效规则（Expires/Cache-Control）<br><br>使用chrome的开发者工具，可以很明显的看到对于强制缓存生效时，网络请求的情况<br><br><img src="/2018/09/19/HTTP缓存机制及原理/632130-20170210141755072-1978466289.png" alt="img"></p><h3 id="Expires"><a href="#Expires" class="headerlink" title="Expires"></a>Expires</h3><p>Expires的值为服务端返回的到期时间，即下一次请求时，请求时间小于服务端返回的到期时间，直接使用缓存数据。<br><br>不过Expires 是HTTP 1.0的东西，现在默认浏览器均默认使用HTTP 1.1，所以它的作用基本忽略。<br><br>另一个问题是，到期时间是由服务端生成的，但是客户端时间可能跟服务端时间有误差，这就会导致缓存命中的误差。<br><br>所以HTTP 1.1 的版本，使用Cache-Control替代。<br></p><h3 id="Cache-Control"><a href="#Cache-Control" class="headerlink" title="Cache-Control"></a>Cache-Control</h3><p>Cache-Control 是最重要的规则。常见的取值有private、public、no-cache、max-age，no-store，默认为private。<br><br>private:             客户端可以缓存<br><br>public:              客户端和代理服务器都可缓存（前端的同学，可以认为public和private是一样的）<br><br>max-age=xxx:   缓存的内容将在 xxx 秒后失效<br><br>no-cache:          需要使用对比缓存来验证缓存数据（后面介绍）<br><br>no-store:           所有内容都不会缓存，强制缓存，对比缓存都不会触发（对于前端开发来说，缓存越多越好，so…基本上和它说886）<br><br><img src="/2018/09/19/HTTP缓存机制及原理/632130-20170210141836104-1513192908.png" alt="img"><br>图中Cache-Control仅指定了max-age，所以默认为private，缓存时间为31536000秒（365天）<br><br>也就是说，在365天内再次请求这条数据，都会直接获取缓存数据库中的数据，直接使用。<br></p><h3 id="对比缓存"><a href="#对比缓存" class="headerlink" title="对比缓存"></a>对比缓存</h3><p>对比缓存，顾名思义，需要进行比较判断是否可以使用缓存。<br><br>浏览器第一次请求数据时，服务器会将缓存标识与数据一起返回给客户端，客户端将二者备份至缓存数据库中。<br><br>再次请求数据时，客户端将备份的缓存标识发送给服务器，服务器根据缓存标识进行判断，判断成功后，返回304状态码，通知客户端比较成功，可以使用缓存数据。<br><br>第一次访问：<br><img src="/2018/09/19/HTTP缓存机制及原理/632130-20170210141911682-1756976419.png" alt="img"><br>再次访问：<br><img src="/2018/09/19/HTTP缓存机制及原理/632130-20170210141921697-379821074.png" alt="img"><br>通过两图的对比，我们可以很清楚的发现，在对比缓存生效时，状态码为304，并且报文大小和请求时间大大减少。<br><br>原因是，服务端在进行标识比较后，只返回header部分，通过状态码通知客户端使用缓存，不再需要将报文主体部分返回给客户端。<br><br>对于对比缓存来说，缓存标识的传递是我们着重需要理解的，它在请求header和响应header间进行传递，一共分为两种标识传递，接下来，我们分开介绍。<br></p><h3 id="Last-Modified-If-Modified-Since"><a href="#Last-Modified-If-Modified-Since" class="headerlink" title="Last-Modified  /  If-Modified-Since"></a>Last-Modified  /  If-Modified-Since</h3><h4 id="Last-Modified："><a href="#Last-Modified：" class="headerlink" title="Last-Modified："></a>Last-Modified：</h4><p>服务器在响应请求时，告诉浏览器资源的最后修改时间。<br><img src="/2018/09/19/HTTP缓存机制及原理/632130-20170210142249541-789089587.png" alt="img"></p><h4 id="If-Modified-Since："><a href="#If-Modified-Since：" class="headerlink" title="If-Modified-Since："></a>If-Modified-Since：</h4><p>再次请求服务器时，通过此字段通知服务器上次请求时，服务器返回的资源最后修改时间。<br><br>服务器收到请求后发现有头If-Modified-Since 则与被请求资源的最后修改时间进行比对。<br><br>若资源的最后修改时间大于If-Modified-Since，说明资源又被改动过，则响应整片资源内容，返回状态码200；<br><br>若资源的最后修改时间小于或等于If-Modified-Since，说明资源无新修改，则响应HTTP 304，告知浏览器继续使用所保存的cache。<br><br><img src="/2018/09/19/HTTP缓存机制及原理/632130-20170210142307166-135607673.png" alt="img"></p><h3 id="Etag-If-None-Match（优先级高于Last-Modified-If-Modified-Since）"><a href="#Etag-If-None-Match（优先级高于Last-Modified-If-Modified-Since）" class="headerlink" title="Etag  /  If-None-Match（优先级高于Last-Modified  /  If-Modified-Since）"></a>Etag  /  If-None-Match（优先级高于Last-Modified  /  If-Modified-Since）</h3><h4 id="Etag："><a href="#Etag：" class="headerlink" title="Etag："></a>Etag：</h4><p>服务器响应请求时，告诉浏览器当前资源在服务器的唯一标识（生成规则由服务器决定）。<br><img src="/2018/09/19/HTTP缓存机制及原理/632130-20170210142054182-1766818273.png" alt="img"></p><h4 id="If-None-Match："><a href="#If-None-Match：" class="headerlink" title="If-None-Match："></a>If-None-Match：</h4><p>再次请求服务器时，通过此字段通知服务器客户段缓存数据的唯一标识。<br><br>服务器收到请求后发现有头If-None-Match 则与被请求资源的唯一标识进行比对，不同，说明资源又被改动过，则响应整片资源内容，返回状态码200；<br><br>相同，说明资源无新修改，则响应HTTP 304，告知浏览器继续使用所保存的cache。<br><br><img src="/2018/09/19/HTTP缓存机制及原理/632130-20170210142115479-1921175758.png" alt="img"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>对于强制缓存，服务器通知浏览器一个缓存时间，在缓存时间内，下次请求，直接用缓存，不在时间内，执行比较缓存策略。<br><br>对于比较缓存，将缓存信息中的Etag和Last-Modified通过请求发送给服务器，由服务器校验，返回304状态码时，浏览器直接使用缓存。<br><br>浏览器第一次请求：<br><img src="/2018/09/19/HTTP缓存机制及原理/632130-20170210142134291-1976923079.png" alt="img"><br>浏览器再次请求时：<br><img src="/2018/09/19/HTTP缓存机制及原理/632130-20170210141453338-1263276228.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络基础 </tag>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>css省略号</title>
      <link href="/2018/09/14/css%E7%9C%81%E7%95%A5%E5%8F%B7/"/>
      <url>/2018/09/14/css%E7%9C%81%E7%95%A5%E5%8F%B7/</url>
      
        <content type="html"><![CDATA[<p>页面中文字溢出的省略号<br><a id="more"></a></p><h2 id="css文本溢出省略号"><a href="#css文本溢出省略号" class="headerlink" title="css文本溢出省略号"></a>css文本溢出省略号</h2><h3 id="单行文本省略号"><a href="#单行文本省略号" class="headerlink" title="单行文本省略号"></a>单行文本省略号</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">overflow: hidden;</span><br><span class="line">text-overflow: ellipsis;</span><br><span class="line">white-space: nowrap;</span><br><span class="line"><span class="comment">// 有些浏览器需要加上width</span></span><br></pre></td></tr></table></figure><h3 id="多行文本溢出省略号"><a href="#多行文本溢出省略号" class="headerlink" title="多行文本溢出省略号"></a>多行文本溢出省略号</h3><p>在WebKit浏览器或移动端（绝大部分是WebKit内核的浏览器）的页面实现比较简单，可以直接使用WebKit的CSS扩展属性(WebKit是私有属性)-webkit-line-clamp ；注意：这是一个 不规范的属性（unsupported WebKit property），它没有出现在 CSS 规范草案中。<br><br>-webkit-line-clamp用来限制在一个块元素显示的文本的行数。 为了实现该效果，它需要组合其他的WebKit属性。<br>常见结合属性：<br></p><ul><li>display: -webkit-box; 必须结合的属性 ，将对象作为弹性伸缩盒子模型显示 。</li><li>-webkit-box-orient 必须结合的属性 ，设置或检索伸缩盒对象的子元素的排列方式 。</li><li>text-overflow: ellipsis;，可以用来多行文本的情况下，用省略号“…”隐藏超出范围的文本 。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">overflow : hidden;</span><br><span class="line">text-overflow: ellipsis;</span><br><span class="line">display: -webkit-box;</span><br><span class="line">-webkit-line-clamp: <span class="number">2</span>;</span><br><span class="line">-webkit-box-orient: vertical;</span><br></pre></td></tr></table></figure></li></ul><h3 id="兼容其它浏览器的写法"><a href="#兼容其它浏览器的写法" class="headerlink" title="兼容其它浏览器的写法"></a>兼容其它浏览器的写法</h3><p>html:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;WebKit Browsers will clamp the number <span class="keyword">of</span> lines <span class="keyword">in</span> <span class="keyword">this</span> paragraph to <span class="number">2.</span> Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed <span class="keyword">do</span> eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor <span class="keyword">in</span> reprehenderit <span class="keyword">in</span> voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt <span class="keyword">in</span> culpa qui officia deserunt mollit anim id est laborum.&lt;<span class="regexp">/p&gt;</span></span><br></pre></td></tr></table></figure></p><p>css:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">p &#123;</span><br><span class="line">    position:relative;</span><br><span class="line">    line-height:<span class="number">1.4</span>em;</span><br><span class="line">    <span class="comment">/* 3 times the line-height to show 3 lines */</span></span><br><span class="line">    height:<span class="number">4.2</span>em;</span><br><span class="line">    overflow:hidden;</span><br><span class="line">&#125;</span><br><span class="line">p::after &#123;</span><br><span class="line">    content:<span class="string">"..."</span>;</span><br><span class="line">    font-weight:bold;</span><br><span class="line">    position:absolute;</span><br><span class="line">    bottom:<span class="number">0</span>;</span><br><span class="line">    right:<span class="number">0</span>;</span><br><span class="line">    padding:<span class="number">0</span> <span class="number">20</span>px <span class="number">1</span>px <span class="number">45</span>px;</span><br><span class="line">    background:url(http:<span class="comment">//css88.b0.upaiyun.com/css88/2014/09/ellipsis_bg.png) repeat-y;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里注意几点：<b></b></p><ul><li>height高度真好是line-height的3倍；</li><li>结束的省略好用了半透明的png做了减淡的效果，或者设置背景颜色；</li><li>IE6-7不显示content内容，所以要兼容IE6-7可以是在内容中加入一个标签，比如用<span class="line-clamp">…</span>去模拟；</li><li>要支持IE8，需要将::after替换成:after；</li></ul>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 样式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>技术博客网站收集整理</title>
      <link href="/2018/09/06/%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E6%94%B6%E9%9B%86%E6%95%B4%E7%90%86/"/>
      <url>/2018/09/06/%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E6%94%B6%E9%9B%86%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>对一些大牛的blog或者github的收集。<br><a id="more"></a></p><h2 id="技术博客列表"><a href="#技术博客列表" class="headerlink" title="技术博客列表"></a>技术博客列表</h2><ul><li><a href="https://github.com/chokcoco" target="_blank" rel="noopener">coco大神的github</a></li><li><a href="https://github.com/youngwind/blog/issues/99" target="_blank" rel="noopener">大神写webpack</a></li><li><a href="https://www.bougieblog.cn/article/Qk9VMTlHSUU.html" target="_blank" rel="noopener">比较不错的面试题收集</a></li><li><a href="https://feclub.cn/home" target="_blank" rel="noopener">前端俱乐部</a></li><li><a href="https://github.com/huruji" target="_blank" rel="noopener">灰风GreyWind的github,有面试题整理</a></li><li><a href="https://itxiaohao.github.io" target="_blank" rel="noopener">webpack4教程挺好</a></li><li><a href="https://juejin.im/post/5d23e750f265da1b855c7bbe" target="_blank" rel="noopener">前端面试100问</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 大牛分享 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>jquery上传文件</title>
      <link href="/2018/09/03/jquery%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/"/>
      <url>/2018/09/03/jquery%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>之前在项目中使用jquery，Formdata实现文件上传<br><a id="more"></a></p><h2 id="jquery上传文件"><a href="#jquery上传文件" class="headerlink" title="jquery上传文件"></a>jquery上传文件</h2><p>现在的上传文件插件非常的多，比如在一个表单中，上传身份证照片，点击上传按钮，选好图片，上传好了，一般都提交到了一个图片服务器上，这是常规做法，但是有遇到过，有的后端同事要求我在点击form的提交按钮时，图片和输入框，下拉信息一并提交，当然，直接用form来做都不用改什么就可以，但是，如果需要更灵活的话，我选择了FormData对象配合jquery来做，具体代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>upload file<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./jquery.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">.upload_area &gt; div, .userType_area &gt; div , .sendType_area &gt; div &#123;</span></span><br><span class="line"><span class="undefined">    border: 1px solid #DAD5D5;</span></span><br><span class="line"><span class="undefined">    padding: 10px 15px;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">#myUploadBtn&#123;</span></span><br><span class="line"><span class="undefined">    background-color:#1874D5;</span></span><br><span class="line"><span class="undefined">    border: none;</span></span><br><span class="line"><span class="undefined">    color: #ffffff;</span></span><br><span class="line"><span class="undefined">    padding: 5px 12px;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">h3 &#123;</span></span><br><span class="line"><span class="undefined">    margin: 5px 0;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">.fileName &#123;</span></span><br><span class="line"><span class="undefined">    margin-left: 15px;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">.userType_area &#123;&#125; </span></span><br><span class="line"><span class="undefined">.userType_area ul , .sendType_area ul &#123;</span></span><br><span class="line"><span class="undefined">    overflow: hidden;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">.userType_area ul li , .sendType_area ul li &#123;</span></span><br><span class="line"><span class="undefined">    position: relative;</span></span><br><span class="line"><span class="undefined">    float: left;</span></span><br><span class="line"><span class="undefined">    padding: 2px 5px;</span></span><br><span class="line"><span class="undefined">    background-color:#1874D5;</span></span><br><span class="line"><span class="undefined">    color: #ffffff;</span></span><br><span class="line"><span class="undefined">    color: #ffffff;</span></span><br><span class="line"><span class="undefined">    margin: 0 10px;</span></span><br><span class="line"><span class="undefined">    cursor: pointer;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">span.checkMark &#123;</span></span><br><span class="line"><span class="undefined">    position: absolute;</span></span><br><span class="line"><span class="undefined">    top: 0;</span></span><br><span class="line"><span class="undefined">    right: 0;</span></span><br><span class="line"><span class="undefined">    width: 20px;</span></span><br><span class="line"><span class="undefined">    height: 20px;</span></span><br><span class="line"><span class="undefined">    border-radius: 50%;</span></span><br><span class="line"><span class="undefined">    background-color: rgba(0,0,0,.5);</span></span><br><span class="line"><span class="undefined">    color: #fffff;</span></span><br><span class="line"><span class="undefined">    text-align: center;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">.text_area &#123;&#125;</span></span><br><span class="line"><span class="undefined">.text_area textarea &#123;</span></span><br><span class="line"><span class="undefined">    width: 100%;</span></span><br><span class="line"><span class="undefined">    height: 120px;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">.mes_box &#123;</span></span><br><span class="line"><span class="undefined">    display: none;</span></span><br><span class="line"><span class="undefined">    position: absolute;</span></span><br><span class="line"><span class="undefined">    top: 20%;</span></span><br><span class="line"><span class="undefined">    left: 50%;</span></span><br><span class="line"><span class="undefined">    margin:0 0 0 -150px;</span></span><br><span class="line"><span class="undefined">    width: 300px;</span></span><br><span class="line"><span class="undefined">    height: 200px;</span></span><br><span class="line"><span class="undefined">    background-color: gray;</span></span><br><span class="line"><span class="undefined">    border-radius: 5px;</span></span><br><span class="line"><span class="undefined">    text-align: center;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">.mes_box &gt; .cancel &#123;</span></span><br><span class="line"><span class="undefined">    position: absolute;</span></span><br><span class="line"><span class="undefined">    width: 30px;</span></span><br><span class="line"><span class="undefined">    height: 30px;</span></span><br><span class="line"><span class="undefined">    border-radius: 20px;</span></span><br><span class="line"><span class="undefined">    text-align: center;</span></span><br><span class="line"><span class="undefined">    line-height:23px;</span></span><br><span class="line"><span class="undefined">    color: #fff;</span></span><br><span class="line"><span class="undefined">    font-size: 25px;</span></span><br><span class="line"><span class="undefined">    right: 5px;</span></span><br><span class="line"><span class="undefined">    top: 3px;</span></span><br><span class="line"><span class="undefined">    border: 1px solid #fff;</span></span><br><span class="line"><span class="undefined">    cursor: pointer;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">.mes_box &gt; strong &#123;</span></span><br><span class="line"><span class="undefined">    color: #ffffff;</span></span><br><span class="line"><span class="undefined">    display: inline-block;</span></span><br><span class="line"><span class="undefined">    margin: 70px 0;</span></span><br><span class="line"><span class="undefined">    font-size: 16px;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mes_box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"cancel"</span>&gt;</span>x<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">id</span>=<span class="string">"choosefile"</span> <span class="attr">style</span>=<span class="string">"display:none;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"upload_area"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>上传文件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"myUploadBtn"</span>&gt;</span>请选择您要上传的文件<span class="tag">&lt;/<span class="name">button</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"fileName"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"userType_area"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>选择用户类型<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-code</span>=<span class="string">"1"</span>&gt;</span>余额不足<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-code</span>=<span class="string">"2"</span>&gt;</span>宽带到期<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-code</span>=<span class="string">"3"</span>&gt;</span>其它<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sendType_area"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>选择推送触点<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-code</span>=<span class="string">"1"</span>&gt;</span>辽宁联通为信号<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-code</span>=<span class="string">"2"</span>&gt;</span>短信<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-code</span>=<span class="string">"3"</span>&gt;</span>其它<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"text_area"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>输入推送需求<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">cols</span>=<span class="string">"30"</span> <span class="attr">rows</span>=<span class="string">"10"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"sendFile"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary bsok"</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> isok = <span class="literal">true</span> , isover = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//选择文件点击事件</span></span></span><br><span class="line"><span class="javascript">                    $(<span class="string">'#myUploadBtn'</span>).on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                       (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">return</span> $(<span class="string">'#choosefile'</span>)[<span class="number">0</span>].click();</span></span><br><span class="line"><span class="undefined">                        &#125;)();</span></span><br><span class="line"><span class="undefined">                    &#125;);</span></span><br><span class="line"><span class="javascript">            <span class="comment">//上传选择文件change事件</span></span></span><br><span class="line"><span class="javascript">                    $(<span class="string">'#choosefile'</span>).on(<span class="string">'change'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                        $(<span class="string">'.fileName'</span>).text(<span class="string">'上传的文件名：'</span>+$(<span class="keyword">this</span>)[<span class="number">0</span>].files[<span class="number">0</span>].name);</span></span><br><span class="line"><span class="undefined">                    &#125;);</span></span><br><span class="line"><span class="javascript">            <span class="comment">//被选中函数</span></span></span><br><span class="line"><span class="javascript">                    <span class="function"><span class="keyword">function</span> <span class="title">checkMark</span>(<span class="params">$el,isDan</span>)</span>&#123;</span></span><br><span class="line"><span class="xml">                        var strNode = '<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"checkMark"</span>&gt;</span>√<span class="tag">&lt;/<span class="name">span</span>&gt;</span>'</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">if</span>(isDan)&#123;</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">if</span>($el.data(<span class="string">'checkMark'</span>))&#123;</span></span><br><span class="line"><span class="javascript">                                $el.find(<span class="string">'span'</span>).remove();</span></span><br><span class="line"><span class="javascript">                                $el.data(<span class="string">'checkMark'</span>, <span class="literal">false</span>);</span></span><br><span class="line"><span class="javascript">                            &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">                                $el.siblings().data(<span class="string">'checkMark'</span>, <span class="literal">false</span>).find(<span class="string">'span'</span>).remove();</span></span><br><span class="line"><span class="javascript">                                $el.data(<span class="string">'checkMark'</span>, <span class="literal">true</span>).append(strNode); </span></span><br><span class="line"><span class="undefined">                            &#125;</span></span><br><span class="line"><span class="undefined">                                  </span></span><br><span class="line"><span class="javascript">                        &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">if</span>($el.data(<span class="string">'checkMark'</span>))&#123;</span></span><br><span class="line"><span class="javascript">                                $el.find(<span class="string">'span'</span>).remove();</span></span><br><span class="line"><span class="javascript">                                $el.data(<span class="string">'checkMark'</span>, <span class="literal">false</span>);</span></span><br><span class="line"><span class="javascript">                            &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">                                $el.data(<span class="string">'checkMark'</span>, <span class="literal">true</span>).append(strNode); </span></span><br><span class="line"><span class="undefined">                            &#125;</span></span><br><span class="line"><span class="undefined">                        &#125;</span></span><br><span class="line"><span class="undefined">                        </span></span><br><span class="line"><span class="undefined">                    &#125;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//获取被选中的code</span></span></span><br><span class="line"><span class="javascript">                    <span class="function"><span class="keyword">function</span> <span class="title">getCode</span>(<span class="params">$el</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">var</span> arr = [];</span></span><br><span class="line"><span class="javascript">                        $el.find(<span class="string">'li'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">index, el</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">if</span>($(<span class="keyword">this</span>).data(<span class="string">'checkMark'</span>) == <span class="literal">true</span>)&#123;</span></span><br><span class="line"><span class="javascript">                                arr.push($(<span class="keyword">this</span>).data(<span class="string">'code'</span>));</span></span><br><span class="line"><span class="undefined">                            &#125;</span></span><br><span class="line"><span class="undefined">                        &#125;);</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">return</span> arr;</span></span><br><span class="line"><span class="undefined">                    &#125;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//选择用户类型添加事件</span></span></span><br><span class="line"><span class="javascript">                    $(<span class="string">'.userType_area li'</span>).on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                        checkMark($(<span class="keyword">this</span>),<span class="literal">true</span>);</span></span><br><span class="line"><span class="undefined">                    &#125;);</span></span><br><span class="line"><span class="javascript">            <span class="comment">//推送触点添加事件</span></span></span><br><span class="line"><span class="javascript">                    $(<span class="string">'.sendType_area li'</span>).on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                        checkMark($(<span class="keyword">this</span>),<span class="literal">false</span>);</span></span><br><span class="line"><span class="undefined">                    &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="comment">//上传文件点击事件</span></span></span><br><span class="line"><span class="javascript">                    $(<span class="string">'#sendFile'</span>).on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">var</span> fd = <span class="keyword">new</span> FormData();</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">var</span> upload_file = $(<span class="string">'#choosefile'</span>)[<span class="number">0</span>].files[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">var</span> userType = getCode($(<span class="string">'.userType_area'</span>));</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">var</span> sendType = getCode($(<span class="string">'.sendType_area'</span>));</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">var</span> text = $(<span class="string">'.text_area textarea'</span>).val();</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">if</span>(upload_file)&#123;</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">var</span> houz = <span class="regexp">/\.[^\.]+$/</span>.exec(upload_file.name);</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">var</span> size = upload_file.size; </span></span><br><span class="line"><span class="undefined">                        &#125;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(upload_file);</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">if</span>(!upload_file)&#123;</span></span><br><span class="line"><span class="javascript">                            $(<span class="string">'.mes_box'</span>).show();</span></span><br><span class="line"><span class="javascript">                            $(<span class="string">'.mes_box strong'</span>).text(<span class="string">'请选择一个要上传的文件'</span>);</span></span><br><span class="line"><span class="javascript">                            isok = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">                        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(userType.length === <span class="number">0</span>)&#123;</span></span><br><span class="line"><span class="javascript">                            $(<span class="string">'.mes_box'</span>).show();</span></span><br><span class="line"><span class="javascript">                            $(<span class="string">'.mes_box strong'</span>).text(<span class="string">'请选择用户类型'</span>);</span></span><br><span class="line"><span class="javascript">                            isok = <span class="literal">false</span>;   </span></span><br><span class="line"><span class="javascript">                        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(sendType.length === <span class="number">0</span>)&#123;</span></span><br><span class="line"><span class="javascript">                            $(<span class="string">'.mes_box'</span>).show();</span></span><br><span class="line"><span class="javascript">                            $(<span class="string">'.mes_box strong'</span>).text(<span class="string">'请选择推送触点'</span>);</span></span><br><span class="line"><span class="javascript">                            isok = <span class="literal">false</span>;  </span></span><br><span class="line"><span class="javascript">                        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(!text)&#123;</span></span><br><span class="line"><span class="javascript">                            $(<span class="string">'.mes_box'</span>).show();</span></span><br><span class="line"><span class="javascript">                            $(<span class="string">'.mes_box strong'</span>).text(<span class="string">'请输入推送需求'</span>);</span></span><br><span class="line"><span class="javascript">                            isok = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">                        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(houz[<span class="number">0</span>] !== <span class="string">'.txt'</span>)&#123;</span></span><br><span class="line"><span class="javascript">                            $(<span class="string">'.mes_box'</span>).show();</span></span><br><span class="line"><span class="javascript">                            $(<span class="string">'.mes_box strong'</span>).text(<span class="string">'请上传以txt结尾的文件'</span>);</span></span><br><span class="line"><span class="javascript">                            isok = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">                        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(size &gt; <span class="number">4194304</span>)&#123;</span></span><br><span class="line"><span class="javascript">                            $(<span class="string">'.mes_box'</span>).show();</span></span><br><span class="line"><span class="javascript">                            $(<span class="string">'.mes_box strong'</span>).text(<span class="string">'您上传的文件过大，请上传小于4M的文件'</span>);</span></span><br><span class="line"><span class="javascript">                            isok = <span class="literal">false</span>;</span></span><br><span class="line"><span class="undefined">                        &#125;;</span></span><br><span class="line"><span class="javascript">                        fd.append(<span class="string">'userType'</span>,userType);</span></span><br><span class="line"><span class="javascript">                        fd.append(<span class="string">'sendType'</span>,userType);</span></span><br><span class="line"><span class="javascript">                        fd.append(<span class="string">'text'</span>,userType);</span></span><br><span class="line"><span class="javascript">                        fd.append(<span class="string">'file'</span>,upload_file);</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">if</span>(isok)&#123;</span></span><br><span class="line"><span class="javascript">                            $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">                                url:  ajaxUrl + <span class="string">"/module/channel/checkByWhere"</span>,</span></span><br><span class="line"><span class="javascript">                                type: <span class="string">'POST'</span>,</span></span><br><span class="line"><span class="javascript">                                cache: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">                                processData: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">                                contentType: <span class="literal">false</span>,</span></span><br><span class="line"><span class="undefined">                                data: fd,</span></span><br><span class="line"><span class="javascript">                                success:<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                                    $(<span class="string">".modal-content"</span>).mask(<span class="string">"hide"</span>);</span></span><br><span class="line"><span class="javascript">                                    <span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span></span><br><span class="line"><span class="javascript">                                        $(<span class="string">'.mes_box'</span>).show();</span></span><br><span class="line"><span class="javascript">                                        $(<span class="string">'.mes_box strong'</span>).text(<span class="string">'数据提交成功'</span>);</span></span><br><span class="line"><span class="javascript">                                        isover = <span class="literal">true</span>;    </span></span><br><span class="line"><span class="javascript">                                    &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">                                        $(<span class="string">'.mes_box'</span>).show();</span></span><br><span class="line"><span class="javascript">                                        $(<span class="string">'.mes_box strong'</span>).text(<span class="string">'服务器问题，数据提交失败'</span>);</span></span><br><span class="line"><span class="undefined">                                    &#125;</span></span><br><span class="line"><span class="undefined">                                &#125;,</span></span><br><span class="line"><span class="javascript">                                error:<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                                    $(<span class="string">".modal-content"</span>).mask(<span class="string">"hide"</span>);</span></span><br><span class="line"><span class="javascript">                                    $(<span class="string">'.mes_box'</span>).show();</span></span><br><span class="line"><span class="javascript">                                    $(<span class="string">'.mes_box strong'</span>).text(<span class="string">'由于网络原因提交失败'</span>);</span></span><br><span class="line"><span class="undefined">                                &#125;</span></span><br><span class="line"><span class="undefined">                            &#125;);</span></span><br><span class="line"><span class="javascript">                            $(<span class="string">".modal-content"</span>).mask(<span class="string">"show"</span>);<span class="comment">//ajax提交数据出现loading蒙层</span></span></span><br><span class="line"><span class="undefined">                        &#125;</span></span><br><span class="line"><span class="undefined">                        </span></span><br><span class="line"><span class="undefined">                    </span></span><br><span class="line"><span class="undefined">                    &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="comment">//提示框关闭按钮点击事件</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">'.mes_box .cancel'</span>).on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                $(<span class="keyword">this</span>).parent().hide();</span></span><br><span class="line"><span class="javascript">                isok = <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span>(isover === <span class="literal">true</span>)&#123;</span></span><br><span class="line"><span class="javascript">                    $(<span class="string">'#createModal'</span>).remove();</span></span><br><span class="line"><span class="javascript">                    $(<span class="string">'.modal-backdrop.fade.in'</span>).remove();</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;);</span></span><br><span class="line"><span class="undefined">&#125;)();</span></span><br><span class="line"><span class="undefined">        </span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>这是整个页面的内容，其实重要的几个点在这里：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#myUploadBtn'</span>).on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                       (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                            <span class="keyword">return</span> $(<span class="string">'#choosefile'</span>)[<span class="number">0</span>].click();</span><br><span class="line">                        &#125;)();</span><br><span class="line">                    &#125;);</span><br><span class="line">上边这个函数就是把实际的input file 标签隐藏，用其他的按钮来触发弹出选择文件的窗口，</span><br><span class="line">注意，不能直接用file.click()这种形式，要 (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                            <span class="keyword">return</span> file.click();</span><br><span class="line">                        &#125;)();</span><br><span class="line">这样做才可以调出选择文件的窗口。</span><br><span class="line"></span><br><span class="line">再有一点，利用了h5的 <span class="keyword">var</span> fd = <span class="keyword">new</span> FormData(); 类，把需要上传的文件起个key值，直接放到fd实例里，</span><br><span class="line">fd.append(<span class="string">'userType'</span>,userType);</span><br><span class="line">                        fd.append(<span class="string">'sendType'</span>,userType);</span><br><span class="line">                        fd.append(<span class="string">'text'</span>,userType);</span><br><span class="line">                        fd.append(<span class="string">'file'</span>,upload_file);</span><br><span class="line">之后用ajax直接把fd对象上传就可以了，以jquery为例</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">                            url:  ajaxUrl + <span class="string">"/module/channel/checkByWhere"</span>,</span><br><span class="line">                            type: <span class="string">'POST'</span>,</span><br><span class="line">                            cache: <span class="literal">false</span>,</span><br><span class="line">                            processData: <span class="literal">false</span>,<span class="comment">//不对数据进行处理，保持2进制</span></span><br><span class="line">                            contentType: <span class="literal">false</span>,<span class="comment">//不对数据进行处理，保持2进制</span></span><br><span class="line">                            data: fd</span><br><span class="line">                        &#125;);</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ajax </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>javascript提高性能</title>
      <link href="/2018/09/01/javascript%E6%8F%90%E9%AB%98%E6%80%A7%E8%83%BD/"/>
      <url>/2018/09/01/javascript%E6%8F%90%E9%AB%98%E6%80%A7%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<p>javascript提高性能的方式总结<br><a id="more"></a></p><h2 id="javascript提高性能"><a href="#javascript提高性能" class="headerlink" title="javascript提高性能"></a>javascript提高性能</h2><p>&emsp;&emsp;javascript如何提高性能，这个在面试中被问到的几率也是蛮高的，之前我也就是想到哪里说到哪里，面试官估计也都是菜鸟（我面的也都是小公司），也觉得我说的对，但是，有空冷静下来，觉得自己说的每次都不是很全面，所以，我想把平时能想到的记录下来，这样再去面试的时候，呵呵，一定把面试官说蒙。</p><h3 id="4种内存泄漏"><a href="#4种内存泄漏" class="headerlink" title="4种内存泄漏"></a>4种内存泄漏</h3><p>&emsp;&emsp;提高JavaScript性能，首先就是避免4种内存泄漏,这里只是简单列出。<br></p><h4 id="1-意外的全局变量"><a href="#1-意外的全局变量" class="headerlink" title="1.意外的全局变量"></a>1.意外的全局变量</h4><p>JavaScript的目标是开发一种看起来像Java但足够自由的被初学者使用的语言。JavaScript自由的其中一种方式是它可以处理没有声明的变量：一个未声明的变量的引用在全局对象中创建了一个新变量。在浏览器的环境中，全局对象是window。也就是说：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">arg</span>) </span>&#123;</span><br><span class="line">    bar = <span class="string">"this is a hidden global variable"</span>;</span><br><span class="line">&#125;</span><br><span class="line">实际上是：</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">arg</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">window</span>.bar = <span class="string">"this is an explicit global variable"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果bar是仅在foo函数作用域内承载引用，并且你忘记用var来声明的变量，一个意外的全局变量就被创建了。在这个例子中，泄漏一个单一字符串不会有太大害处，但这的确是不好的。<br><br>另一种意外全局变量被创建的方式是通过this：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.variable = <span class="string">"potential accidental global"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Foo called on its own, this points to the global object (window)</span></span><br><span class="line"><span class="comment">// rather than being undefined.</span></span><br><span class="line">foo();</span><br></pre></td></tr></table></figure></p><p>为了阻止这种错误发生，在你的Javascript文件最前面添加’use strict;’。这开启了解析JavaScript的阻止意外全局的更严格的模式。<br><br>全局变量的一个注意事项：<br><br>即使我们谈了不明的全局变量，仍然存在很多代码被显式的全局变量填充的情况。这是通过定义不可收集的情况（除非清零或重新赋值）。特别的，用来临时存储和处理大量信息的全局变量会引起关注。如果必须用全局变量来存储很多数据，在处理完之后，确保对其清零或重新赋值。 一个在与全局连接上增加内存消耗常见的原因是缓存)。 缓存存储重复被使用的数据。为此，为了有效，缓存必须有其大小的上限。飙出限制的缓存可能会因为内容不可被回收，导致高内存消耗。</p><h4 id="2-被遗忘的计时器或回调"><a href="#2-被遗忘的计时器或回调" class="headerlink" title="2.被遗忘的计时器或回调"></a>2.被遗忘的计时器或回调</h4><p>在JavaScript中setInterval的使用相当常见。其他库提供观察者和其他工具以回调。这些库中大多数，在引用的实例变成不可访问之后，负责让回调的任何引用也不可访问。在setInterval的情况下，这样的代码很常见：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> someResource = getData();</span><br><span class="line">    setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> node = <span class="built_in">document</span>.getElementById(<span class="string">'Node'</span>);</span><br><span class="line">    <span class="keyword">if</span>(node) &#123;</span><br><span class="line">    <span class="comment">// Do stuff with node and someResource.</span></span><br><span class="line">    node.innerHTML = <span class="built_in">JSON</span>.stringify(someResource));</span><br><span class="line">&#125;</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure></p><p>这个例子表明了跳动的计时器可能发生什么：计时器使得节点或数据的引用不再被需要了。代表node的对象将来可能被移除，使得整个块在间隔中的处理不必要。然而，处理函数，由于间隔仍然是活跃的，不能被回收（间隔需要被停掉才能回收）。如果间隔处理不能被回收，它的依赖也不能被回收。那意味着可能存储着大量数据的someResource，也不能被回收。<br><br>观察者情况下，一旦不被需要（或相关的对象快要访问不到）就创建明确移除他们的函数很重要。在过去，这由于特定浏览器（IE6）不能很好的管理循环引用（下面有更多相关信息），曾经尤为重要。现如今，一旦观察对象变成不可访问的，即使收听者没有明确的被移除，多数浏览器可以并会回收观察者处理函数。然而，它保持了在对象被处理前明确的移除这些观察者的好实践。例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> element = <span class="built_in">document</span>.getElementById(<span class="string">'button'</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onClick</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  element.innerHtml = <span class="string">'text'</span>;</span><br><span class="line">&#125;</span><br><span class="line">element.addEventListener(<span class="string">'click'</span>, onClick);</span><br><span class="line"><span class="comment">// Do stuff</span></span><br><span class="line">element.removeEventListener(<span class="string">'click'</span>, onClick);</span><br><span class="line">element.parentNode.removeChild(element);</span><br><span class="line"><span class="comment">// Now when element goes out of scope,</span></span><br><span class="line"><span class="comment">// both element and onClick will be collected even in old browsers that don't</span></span><br><span class="line"><span class="comment">// handle cycles well.</span></span><br></pre></td></tr></table></figure></p><p>一条关于对象观察者及循环引用的笔记<br><br>观察者和循环引用曾经是JavaScript开发者的祸患。这是由于IE垃圾回收的一个bug(或者设计决议)出现的情况。IE的老版本不能检测到DOM节点和JavaScript代码间的循环引用。 这是一个通常为观察到的保留引用（如同上面的例子）的观察者的典型。 也就是说，每次在IE中对一个节点添加观察者的时候，会导致泄漏。这是开发者在节点或空引用之前开始明确的移除处理函数的原因。 现在，现代浏览器（包括IE和MS Edge）使用可以剪裁这些循环和正确处理的现代垃圾回收算法。换言之，在使一个节点不可访问前，调用removeEventLister不是严格意义上必须的。<br><br>像Jquery一样的框架和库做了在处置一个节点前（当为其使用特定的API的时候）移除监听者的工作。这被在库内部处理，即使在像老版本IE一样有问题的浏览器里面跑，也会确保没有泄漏产生。</p><h4 id="3-超出DOM引用"><a href="#3-超出DOM引用" class="headerlink" title="3. 超出DOM引用"></a>3. 超出DOM引用</h4><p>有时存储DOM节点到数据结构中可能有用。假设你想要迅速的更新一个表格几行内容。存储每个DOM行节点的引用到一个字典或数组会起作用。当这发生是，两个对于同个DOM元素的引用被留存：一个在DOM树中，另外一个在字典中。如果在将来的某些点你决定要移除这些行，需要让两个引用都不可用。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> elements = &#123;</span><br><span class="line">    button: <span class="built_in">document</span>.getElementById(<span class="string">'button'</span>),</span><br><span class="line">    image: <span class="built_in">document</span>.getElementById(<span class="string">'image'</span>),</span><br><span class="line">    text: <span class="built_in">document</span>.getElementById(<span class="string">'text'</span>)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doStuff</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">image.src = <span class="string">'http://some.url/image'</span>;</span><br><span class="line">button.click();</span><br><span class="line"><span class="built_in">console</span>.log(text.innerHTML);</span><br><span class="line"><span class="comment">// Much more logic</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeButton</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">// The button is a direct child of body.</span></span><br><span class="line"><span class="built_in">document</span>.body.removeChild(<span class="built_in">document</span>.getElementById(<span class="string">'button'</span>));</span><br><span class="line"><span class="comment">// At this point, we still have a reference to #button in the global</span></span><br><span class="line"><span class="comment">// elements dictionary. In other words, the button element is still in</span></span><br><span class="line"><span class="comment">// memory and cannot be collected by the GC.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>对此的额外考虑，必须处理DOM树内的内部节点或叶子节点。假设你在JavaScript代码中保留了一个对于特定的表格内节点（一个td标签）的引用。在将来的某个点决定从DOM中移除这个表格，但是保留对于那个节点的引用。直观的，会假设GC会回收除那个节点之外的每个节点。在实践中，这不会发生的：这个单节点是那个表格的子节点，子节点保留对父节点引用。换句话说，来自JavaScript代码的表格元素的引用会引起在内存里存整个表格。当保留DOM元素的引用的时候，仔细考虑下。</p><h4 id="4-闭包"><a href="#4-闭包" class="headerlink" title="4.闭包"></a>4.闭包</h4><p>一个JavaScript开发的关键点是闭包：从父级作用域捕获变量的匿名函数。很多开发者发现，由于JavaScript runtime的实现细节，有以一种微妙的方式泄漏的可能，这种特殊的情况：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> theThing = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">var</span> replaceThing = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> originalThing = theThing;</span><br><span class="line">    <span class="keyword">var</span> unused = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (originalThing)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"hi"</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    theThing = &#123;</span><br><span class="line">        longStr: <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1000000</span>).join(<span class="string">'*'</span>),</span><br><span class="line">        someMethod: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(someMessage);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line">setInterval(replaceThing, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure></p><p>这个代码片段做了一件事：每次replaceThing被调用的时候，theThing获取到一个包括一个大数组和新闭包(somMethod)的新对象。同时，变量unused保留了一个有originalThing（theThing从之前的对replaceThing的调用）引用的闭包。已经有点疑惑了，哈？重要的是一旦一个作用域被在同个父作用域下的闭包创建，那个作用域是共享的。这种情况下，为闭包somMethod创建的作用域被unused共享了。unused有一个对originalThing的引用。即使unused从来没被用过，someMethod可以通过theTing被使用。由于someMethod和unused共享了闭包作用域，即使unused从来没被用过，它对originalThing的引用迫使它停留在活跃状态（不能回收）。当这个代码片段重复运行的时候，可以看到内存使用稳步的增长。GC运行的时候，这并不会减轻。本质上，一组关联的闭包被创建（同unused变量在表单中的根节点一起），这些闭包作用域中每个带了大数组一个非直接的引用，导致了大型的泄漏。</p><h4 id="垃圾回收的直观行为"><a href="#垃圾回收的直观行为" class="headerlink" title="垃圾回收的直观行为"></a>垃圾回收的直观行为</h4><p>即使垃圾回收很方便，他们有自己的一套权衡方法。其中一个权衡是nondeterminism。也就是说，GC是不可预期的。通常不能确定什么时候回收器被执行。这意味着在一些情况下，需要比程序正在使用的更多的内存。其他情况下，短的暂停在特别敏感的应用中很明显。即使不确定性意味着不能确定回收什么时候执行，大多数GC实现共享在分配期间，普通的回收通行证模式。如果没有执行分配，大多数CG停留在休息状态。考虑下面的方案：<br><br>1.执行一组大型的分配。<br><br>2.多数元素（或所有）被标记为不可访问（假设我们置空了一个指向不再需要的缓存的引用）。<br><br>3.没有进一步的分配执行了。<br><br>在这个方案中，大多GC不会运行任何进一步的回收通行了。换言之，即使有可用于回收的，不可访问的引用，回收器不会要求他了。这不是严格的泄漏，但是也会导致比平常更高的内存使用率。<br><br>Google在 JavaScript Memory Profiling docs, example #2.文章中，提供了一个优秀的例子。<br></p><h3 id="编写javascript代码时的优化"><a href="#编写javascript代码时的优化" class="headerlink" title="编写javascript代码时的优化"></a>编写javascript代码时的优化</h3><h4 id="1-从JavaScript的作用域谈起"><a href="#1-从JavaScript的作用域谈起" class="headerlink" title="1.从JavaScript的作用域谈起"></a>1.从JavaScript的作用域谈起</h4><p>当JavaScript代码执行时，JavaScript引擎会创建一个执行环境，又叫执行上下文。执行环境定义了变量或函数有权访问的其他数据，决定了它们的行为，每个执行环境都有一个与它关联的变量对象，环境中定义的所有函数、变量都保存在这个对象中。在页面加载的时候，JavaScript引擎会创建一个全局的执行环境，所有全局变量和函数都是作为window对象（浏览器中）的属性和方法创建的。在此之后，每执行一个函数，JavaScript引擎都会创建一个对应的执行环境，并将该环境放入环境栈中，所以当前正在执行的函数的执行环境是在环境栈的最顶部的，当函数执行完毕之后，其执行环境会弹出栈，并被销毁，保存在其中的变量和函数定义也会被销毁。<br><br>当代码在一个执行环境中执行时，JavaScript引擎会创建变量对象的一个作用域链，它可以保证对执行环境有权访问的变量和函数的有序访问。作用域链的前端始终是当前执行的代码所在的环境的变量对象。全局环境的作用域链中只有一个变量对象，它定义了所有可用的全局变量和函数。当函数被创建时，JavaScript引擎会把创建时执行环境的作用域链赋给函数的内部属性[[scope]]；当函数被执行时，JavaScript引擎会创建一个活动对象，最开始时这个活动对象只有一个变量，即arguments对象。该活动对象会出现在执行环境作用域链的顶端，接下来是函数[[scope]]属性中的对象。<br><br>当需要查找某个变量或函数时，JavaScript引擎会通过执行环境的作用域链来查找变量和函数，从作用域链的顶端开始，如果没找到，则向下寻找直至找到为止。若一直到全局作用域都没有找到,则该变量或函数为undefined。<br><br>举个栗子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a,b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> result = add(<span class="number">2</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure></p><p>代码执行时，add函数有一个仅包含全局变量对象的[[scope]]属性，add函数执行时，JavaScript引擎创建新的执行环境以及一个包含this、arguments、a、b的活动对象，并将其添加到作用域链中。如下图所示：<br><img src="https://images2015.cnblogs.com/blog/861963/201603/861963-20160324125541214-276062560.png" alt="img"></p><h4 id="2-使用局部变量"><a href="#2-使用局部变量" class="headerlink" title="2.使用局部变量"></a>2.使用局部变量</h4><p>了解了作用域链的概念，我们应该知道在查找变量会从作用域链的顶端开始一层一层的向下找。显然，查找的层数越多，花费的时间越多。所以为了提高查找的速度，我们应该尽量使用 局部变量（到目前为止，局部变量是JavaScript中读写最快的标识符）。<br><br>例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createEle</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createEle</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> doc = <span class="built_in">document</span>;</span><br><span class="line">    doc.createElement(<span class="string">"div"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>当document使用次数比较少时，可能无所谓，可是如果在一个函数的循环中大量使用document，我们可以提前将document变成局部变量。<br><br>来看看jquery怎么写的：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">window, undefined</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">var</span> jQuery = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">     <span class="comment">// ...</span></span><br><span class="line">     <span class="built_in">window</span>.jQuery = <span class="built_in">window</span>.$ = jQuery;</span><br><span class="line">&#125;)(<span class="built_in">window</span>);</span><br></pre></td></tr></table></figure></p><p>这样写的优势：<br><br>1、window和undefined都是为了减少变量查找所经过的scope作用域。当window通过传递给闭包内部之后，在闭包内部使用它的时候，可以把它当成一个局部变量，显然比原先在window scope下查找的时候要快一些。（原来的window处于作用域链的最顶端，查找速度慢）<br><br>2、在jquery压缩版本jquery.min.js中可以将局部变量window替换成单个字母，减小文件大小，提高加载速度<br><br><img src="https://images2015.cnblogs.com/blog/861963/201603/861963-20160306142846424-1341096196.png" alt="img"><br>3、undefined也是JavaScript中的全局属性。将undefined作为参数传递给闭包，因为没给它传递值，它的值就是undefined，这样闭包内部在使用它的时候就可以把它当做局部变量使用，从而提高查找速度。undefined并不是JavaScript的保留字或者关键字。<br><br>4、undefined在某些低版本的浏览器（例如IE8、IE7）中值是可以被修改的（在ECMAScript3中，undefined是可读/写的变量，可以给它赋任意值，这个错误在ECMAScript5中做了修正），将undefined作为参数并且不给它传值可以防止因undefined的值被修改而产生的错误。</p><h4 id="3-避免增长作用域链"><a href="#3-避免增长作用域链" class="headerlink" title="3.避免增长作用域链"></a>3.避免增长作用域链<br></h4><p>在JavaScript中，有两种语句可以临时增加作用域链：with、try-catch<br><br>with可以使对象的属性可以像全局变量来使用，它实际上是将一个新的变量对象添加到执行环境作用域的顶部，这个变量对象包含了指定对象的所有属性，因此可以直接访问。<br><br>这样看似很方便，但是增长了作用域链，原来函数中的局部变量不在处于作用域链的顶端，因此在访问这些变量的时候要查找到第二层才能找到它。当with语句块之行结束后，作用域链将回到原来的状态。鉴于with的这个缺点，所以不推荐使用。<br><br>try-catch中的catch从句和with类似，也是在作用域链的顶端增加了一个对象，该对象包含了由catch指定命名的异常对象。但是因为catch语句只有在放生错误的时候才执行，因此影响比较少。</p><h4 id="4-字符串链接优化"><a href="#4-字符串链接优化" class="headerlink" title="4.字符串链接优化"></a>4.字符串链接优化</h4><p>由于字符串是不可变的，所以在进行字符串连接时，需要创建临时字符串。频繁创建、销毁临时字符串会导致性能低下。<br><br>当然，这个问题在新版本浏览器包括IE8+中都得到了优化，所以不需要担心<br><br>在低版本浏览器（IE6、IE7）中，我们可以种数组的join方法来代替。<br><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> temp = [];</span><br><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line">temp[i++] = <span class="string">"Hello"</span>;</span><br><span class="line">temp[i++] = <span class="string">" "</span>;</span><br><span class="line">temp[i++] =<span class="string">"everyone"</span>;</span><br><span class="line"><span class="keyword">var</span> outcome = temp.join(<span class="string">""</span>);</span><br></pre></td></tr></table></figure></p><h4 id="5-条件判断"><a href="#5-条件判断" class="headerlink" title="5.条件判断"></a>5.条件判断</h4><p>当出现条件判断时，我们采用什么样的结构才能使性能最优？<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(val == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> v0;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(val == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> v1;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(val == <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> v2;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(val == <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> v3;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(val == <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> v4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>当条件分支比较多时，我们可以斟酌哪种条件出现的概率比较大，并将对应的语句放在最上面，这样可以减少判断次数。<br><br>使用switch语句，新版的浏览器基本上都对switch做了优化，这样层数比较深时，性能比if会更好<br><br>使用数组：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> v = [v0,v1,v2,v3,v4];</span><br><span class="line"><span class="keyword">return</span> v[valeue];</span><br></pre></td></tr></table></figure></p><p>要求：对应的结果是单一值，而不是一系列操作<br><br>另外，其他方面的优化，譬如<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(condition1) &#123;</span><br><span class="line">    <span class="keyword">return</span> v1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> v2</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 改成</span></span><br><span class="line"><span class="keyword">if</span>(condition1) &#123;</span><br><span class="line">    <span class="keyword">return</span> v1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> v2;</span><br></pre></td></tr></table></figure></p><h4 id="6-快速循环"><a href="#6-快速循环" class="headerlink" title="6.快速循环"></a>6.快速循环</h4><p>1、循环总次数使用局部变量<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>( <span class="keyword">var</span> i = <span class="number">0</span>;i &lt; arr.length;i++) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 改成</span></span><br><span class="line"><span class="keyword">var</span> len = arr.length;</span><br><span class="line"><span class="keyword">for</span>( <span class="keyword">var</span> i = <span class="number">0</span>;i &lt; len;i++) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样就避免了每次循环的属性查找。这点尤其重要，因为在进行dom操作时，很多人会这样写：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> divList = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"div"</span>);</span><br><span class="line"><span class="keyword">for</span>( <span class="keyword">var</span> i = <span class="number">0</span>;i &lt; divList.length;i++) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>查找DOM元素的属性是相对耗时的，所以应该避免这种写法。<br><br>2、如果可以，递减代替递增<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; arr.length;i++) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 改成</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = arr.length - <span class="number">1</span>;i--;) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(i &lt; arr.length) &#123;</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 改成</span></span><br><span class="line"><span class="keyword">var</span> i = arr.length - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(i--) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>i=0的时候会直接跳出，循环次数比较多时还是很有用的。</p><h4 id="7-展开循环"><a href="#7-展开循环" class="headerlink" title="7.展开循环"></a>7.展开循环</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = arr.length - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(i--) &#123;</span><br><span class="line">    dosomething(arr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>遇到这样的情况时，执行一次循环的时候我们可以选择不止执行一次函数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> interations = <span class="built_in">Math</span>.floor(arr.length / <span class="number">8</span>);</span><br><span class="line"><span class="keyword">var</span> left = arr.length % <span class="number">8</span>;</span><br><span class="line"><span class="keyword">var</span>  i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(left) &#123;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        dosomething(arr[i++]);</span><br><span class="line">    &#125; <span class="keyword">while</span>(--left);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    dosomething(arr[i++]);</span><br><span class="line">    dosomething(arr[i++]);</span><br><span class="line">    dosomething(arr[i++]);</span><br><span class="line">    dosomething(arr[i++]);</span><br><span class="line">    dosomething(arr[i++]);</span><br><span class="line">    dosomething(arr[i++]);</span><br><span class="line">    dosomething(arr[i++]);</span><br><span class="line">    dosomething(arr[i++]);</span><br><span class="line">&#125; <span class="keyword">while</span>(--interations);</span><br></pre></td></tr></table></figure></p><p>当遇到大数组，减少循环的开销，性能不就提上去了嘛。（至于为什么是每次循环，调8次函数，大牛测出来的，这样达到最佳）</p><h4 id="8-高效存取数据"><a href="#8-高效存取数据" class="headerlink" title="8.高效存取数据"></a>8.高效存取数据</h4><p>JavaScript中4种地方可以存取数据：<br><br>字面量值；变量；数组元素；对象属性<br><br>字面量值和变量中存取数据是最快的，从数组元素和对象属性中存取数据相对较慢，并且随着深度增加，存取速度会越来越慢，譬如obj.item.value就比obj.item慢。<br><br>某些情况下我们可以将对象、数组属性存成局部变量来提高速度，譬如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>( <span class="keyword">var</span> i = <span class="number">0</span>;i &lt; arr.length;i++) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 改成</span></span><br><span class="line"><span class="keyword">var</span> len = arr.length;</span><br><span class="line"><span class="keyword">for</span>( <span class="keyword">var</span> i = <span class="number">0</span>;i &lt; len;i++) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> divList = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"div"</span>);</span><br><span class="line"><span class="keyword">for</span>( <span class="keyword">var</span> i = <span class="number">0</span>;i &lt; divList.length;i++) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 改成</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="keyword">var</span> divList = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"div"</span>);</span><br><span class="line"><span class="keyword">for</span>( <span class="keyword">var</span> i = <span class="number">0</span>,len = divList.length;i &lt; len;i++) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="9-事件委托"><a href="#9-事件委托" class="headerlink" title="9.事件委托"></a>9.事件委托</h4><p>事件委托就是利用冒泡的原理，将原本应该添加在某些元素身上的监听事件，添加到其父元素身上，来达到提高性能的效果。<br><br>举个栗子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;<span class="number">1</span>&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">        &lt;li&gt;2&lt;/</span>li&gt;</span><br><span class="line">        &lt;li&gt;<span class="number">3</span>&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">        &lt;li&gt;4&lt;/</span>li&gt;</span><br><span class="line">        &lt;li&gt;<span class="number">5</span>&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">        &lt;li&gt;6&lt;/</span>li&gt;</span><br><span class="line">        &lt;li&gt;<span class="number">7</span>&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">        &lt;li&gt;8&lt;/</span>li&gt;</span><br><span class="line">        &lt;li&gt;<span class="number">9</span>&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">        &lt;li&gt;10&lt;/</span>li&gt;</span><br><span class="line">    &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ul = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'ul'</span>)[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">var</span> liList = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'li'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>,len = liList.length;i &lt; len;i++) &#123;</span><br><span class="line">        liList[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            alert(<span class="keyword">this</span>.innerHTML);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>这样我们就为每个li添加了监听事件了。<br><br>显然，我们通过循环为每个li添加监听事件是不优化的。这样不仅浪费了内存，在新的li加入的时候我们还要重新为它添加监听事件。<br><br>我们可以这样写：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;<span class="number">1</span>&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">        &lt;li&gt;2&lt;/</span>li&gt;</span><br><span class="line">        &lt;li&gt;<span class="number">3</span>&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">        &lt;li&gt;4&lt;/</span>li&gt;</span><br><span class="line">        &lt;li&gt;<span class="number">5</span>&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">        &lt;li&gt;6&lt;/</span>li&gt;</span><br><span class="line">        &lt;li&gt;<span class="number">7</span>&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">        &lt;li&gt;8&lt;/</span>li&gt;</span><br><span class="line">        &lt;li&gt;<span class="number">9</span>&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">        &lt;li&gt;10&lt;/</span>li&gt;</span><br><span class="line">    &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ul = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'ul'</span>)[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">var</span> liList = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'li'</span>);</span><br><span class="line"></span><br><span class="line">    ul.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> e = e || <span class="built_in">window</span>.event;</span><br><span class="line">        <span class="keyword">var</span> target = e.target || e.srcElement;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(target.nodeName.toLowerCase() == <span class="string">"li"</span>) &#123;</span><br><span class="line">            alert(target.innerHTML);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>这样写的好处：<br><br>只添加一个监听事件，节省了内存；新加入li的时候我们也不用为它单独添加监听事件；在页面中添加事件处理程序所需的时候更少，因为我们只需要为一个DOM元素添加事件处理程序。</p><h3 id="使用typescript"><a href="#使用typescript" class="headerlink" title="使用typescript"></a>使用typescript</h3><p>使用typescript来提高性能我实在一本关于nodejs的书里看到的，主要还是用在chrome的V8引擎上，这本书里写的比如<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 两个数相加的函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;<span class="number">10000</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(add(i + i*<span class="number">3</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>书里说，如果V8引擎发现一个函数使用频率很高，而且参数传入的都是同一种类型的，好像是在内存寻址的时候书都很快，因为引擎认为传入的参数就是int型。<br><br>再来看一个例子<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 两个数相加的函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;<span class="number">10000</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span>(i % <span class="number">8</span> === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(add(i + i*<span class="number">0.3</span>)); <span class="comment">// 这里出现了浮点数</span></span><br><span class="line">  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(add(i + i*<span class="number">3</span>)); <span class="comment">// 这里是整数</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上边的代码可以看到，在使用整形参数的时候突然传入浮点数，V8引擎寻址机制突然变化，丢弃之前的函数，使用新的来计算，性能下降。<br><br>所以，如果使用typescript，类型固定，这样性能就会提高哦。</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vue双向绑定的简单实现</title>
      <link href="/2018/08/30/vue%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/"/>
      <url>/2018/08/30/vue%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>参考网上vue实现教程简单整理<br><a id="more"></a></p><h2 id="vue双向绑定的简单实现"><a href="#vue双向绑定的简单实现" class="headerlink" title="vue双向绑定的简单实现"></a>vue双向绑定的简单实现</h2><p>&emsp;&emsp;首先，这篇文章并非我的原创，在网上看到了很多写vue原理的文章，感觉这篇写的层次结构清晰，容易理解，所以留作收藏。<br>废话不多说，开始。</p><h3 id="1-原理"><a href="#1-原理" class="headerlink" title="1.原理"></a>1.原理</h3><p>&emsp;&emsp;Vue的双向数据绑定的原理相信大家也都十分了解了，主要是通过 Object对象的defineProperty属性，重写data的set和get函数来实现的,这里对原理不做过多描述，主要还是来实现一个实例。为了使代码更加的清晰，这里只会实现最基本的内容，主要实现v-model，v-bind 和v-click三个命令，其他命令也可以自行补充。<br><br>添加网上的一张图<br><br><img src="https://mmbiz.qpic.cn/mmbiz_jpg/aVp1YC8UV0f0zE1BuK03NMJDibwUmypG8icoXmEwXflpO3TQh4CiaKx0VRTHWlyRQbmX5I3USiaHtSoibZ8yvX98jtg/640?wx_fmt=jpeg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></p><h3 id="2-实现"><a href="#2-实现" class="headerlink" title="2.实现"></a>2.实现</h3><p>页面结构很简单，如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"number"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">ype</span>=<span class="string">"button"</span> <span class="attr">v-click</span>=<span class="string">"increment"</span>&gt;</span>增加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-bind</span>=<span class="string">"number"</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>包含：<br><br>1.一个input，使用v-model指令<br><br>2.一个button，使用v-click指令<br><br>3.一个h3，使用v-bind指令。<br><br>我们最后会通过类似于vue的方式来使用我们的双向数据绑定，结合我们的数据结构添加注释：<br><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> myVue(&#123;</span><br><span class="line">            el:<span class="string">'#app'</span>,</span><br><span class="line">            data:&#123;</span><br><span class="line">              number:<span class="number">0</span>    </span><br><span class="line">            &#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line">              increment:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.number++;</span><br><span class="line">              &#125;,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure></p><p>首先我们需要定义一个myVue构造函数：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myVue</span>(<span class="params">options</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>为了初始化这个构造函数，给它添加一 个_init属性<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myVue</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>._init(options);</span><br><span class="line">&#125;</span><br><span class="line">myVue.prototype._init = <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.$options = options;  <span class="comment">// options 为上面使用时传入的结构体，包括el,data,methods</span></span><br><span class="line">    <span class="keyword">this</span>.$el = <span class="built_in">document</span>.querySelector(options.el); <span class="comment">// el是 #app, this.$el是id为app的Element元素</span></span><br><span class="line">    <span class="keyword">this</span>.$data = options.data; <span class="comment">// this.$data = &#123;number: 0&#125;</span></span><br><span class="line">    <span class="keyword">this</span>.$methods = options.methods;  <span class="comment">// this.$methods = &#123;increment: function()&#123;&#125;&#125;</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>接下来实现_obverse函数，对data进行处理，重写data的set和get函数<br><br>并改造_init函数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">myVue.prototype._obverse = <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123; <span class="comment">// obj = &#123;number: 0&#125;</span></span><br><span class="line">   <span class="keyword">var</span> value;</span><br><span class="line">   <span class="keyword">for</span> (key <span class="keyword">in</span> obj) &#123;  <span class="comment">//遍历obj对象</span></span><br><span class="line">     <span class="keyword">if</span> (obj.hasOwnProperty(key)) &#123;</span><br><span class="line">       value = obj[key]; </span><br><span class="line">       <span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="string">'object'</span>) &#123;  <span class="comment">//如果值还是对象，则遍历处理</span></span><br><span class="line">         <span class="keyword">this</span>._obverse(value);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="built_in">Object</span>.defineProperty(<span class="keyword">this</span>.$data, key, &#123;  <span class="comment">//关键</span></span><br><span class="line">         enumerable: <span class="literal">true</span>,</span><br><span class="line">         configurable: <span class="literal">true</span>,</span><br><span class="line">         get: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">           <span class="built_in">console</span>.log(<span class="string">`获取<span class="subst">$&#123;value&#125;</span>`</span>);</span><br><span class="line">           <span class="keyword">return</span> value;</span><br><span class="line">         &#125;,</span><br><span class="line">         set: <span class="function"><span class="keyword">function</span> (<span class="params">newVal</span>) </span>&#123;</span><br><span class="line">           <span class="built_in">console</span>.log(<span class="string">`更新<span class="subst">$&#123;newVal&#125;</span>`</span>);</span><br><span class="line">           <span class="keyword">if</span> (value !== newVal) &#123;</span><br><span class="line">             value = newVal;</span><br><span class="line">           &#125;</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;)</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">myVue.prototype._init = <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">this</span>.$options = options;</span><br><span class="line">   <span class="keyword">this</span>.$el = <span class="built_in">document</span>.querySelector(options.el);</span><br><span class="line">   <span class="keyword">this</span>.$data = options.data;</span><br><span class="line">   <span class="keyword">this</span>.$methods = options.methods;</span><br><span class="line">  </span><br><span class="line">   <span class="keyword">this</span>._obverse(<span class="keyword">this</span>.$data);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>接下来我们写一个指令类Watcher，用来绑定更新函数，实现对DOM元素的更新<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Watcher</span>(<span class="params">name, el, vm, exp, attr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;         <span class="comment">//指令名称，例如文本节点，该值设为"text"</span></span><br><span class="line">    <span class="keyword">this</span>.el = el;             <span class="comment">//指令对应的DOM元素</span></span><br><span class="line">    <span class="keyword">this</span>.vm = vm;             <span class="comment">//指令所属myVue实例</span></span><br><span class="line">    <span class="keyword">this</span>.exp = exp;           <span class="comment">//指令对应的值，本例如"number"</span></span><br><span class="line">    <span class="keyword">this</span>.attr = attr;         <span class="comment">//绑定的属性值，本例为"innerHTML"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.update();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Watcher.prototype.update = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.el[<span class="keyword">this</span>.attr] = <span class="keyword">this</span>.vm.$data[<span class="keyword">this</span>.exp]; <span class="comment">//比如 H3.innerHTML = this.data.number; 当number改变时，会触发这个update函数，保证对应的DOM内容进行了更新。</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>更新_init函数以及_obverse函数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">myVue.prototype._init = <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">this</span>._binding = &#123;&#125;;   <span class="comment">//_binding保存着model与view的映射关系，也就是我们前面定义的Watcher的实例。当model改变时，我们会触发其中的指令类更新，保证view也能实时更新</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  myVue.prototype._obverse = <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">      <span class="keyword">if</span> (obj.hasOwnProperty(key)) &#123;</span><br><span class="line">        <span class="keyword">this</span>._binding[key] = &#123;    <span class="comment">// 按照前面的数据，_binding = &#123;number: _directives: []&#125;                                                                                                                                                  </span></span><br><span class="line">          _directives: []</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="keyword">var</span> binding = <span class="keyword">this</span>._binding[key];</span><br><span class="line">        <span class="built_in">Object</span>.defineProperty(<span class="keyword">this</span>.$data, key, &#123;</span><br><span class="line">          <span class="comment">//...</span></span><br><span class="line">          set: <span class="function"><span class="keyword">function</span> (<span class="params">newVal</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">`更新<span class="subst">$&#123;newVal&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">if</span> (value !== newVal) &#123;</span><br><span class="line">              value = newVal;</span><br><span class="line">              binding._directives.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;  <span class="comment">// 当number改变时，触发_binding[number]._directives 中的绑定的Watcher类的更新</span></span><br><span class="line">                item.update();</span><br><span class="line">              &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>  那么如何将view与model进行绑定呢？接下来我们定义一个_compile函数，用来解析我们的指令（v-bind,v-model,v-clickde）等，并在这个过程中对view与model进行绑定。<br>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">   myVue.prototype._init = <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">   <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">this</span>._complie(<span class="keyword">this</span>.$el);</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">myVue.prototype._complie = <span class="function"><span class="keyword">function</span> (<span class="params">root</span>) </span>&#123; root 为 id为app的Element元素，也就是我们的根元素</span><br><span class="line">    <span class="keyword">var</span> _this = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">var</span> nodes = root.children;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; nodes.length; i++) &#123;</span><br><span class="line">      <span class="keyword">var</span> node = nodes[i];</span><br><span class="line">      <span class="keyword">if</span> (node.children.length) &#123;  <span class="comment">// 对所有元素进行遍历，并进行处理</span></span><br><span class="line">        <span class="keyword">this</span>._complie(node);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (node.hasAttribute(<span class="string">'v-click'</span>)) &#123;  <span class="comment">// 如果有v-click属性，我们监听它的onclick事件，触发increment事件，即number++</span></span><br><span class="line">        node.onclick = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">var</span> attrVal = nodes[i].getAttribute(<span class="string">'v-click'</span>);</span><br><span class="line">          <span class="keyword">return</span> _this.$methods[attrVal].bind(_this.$data);  <span class="comment">//bind是使data的作用域与method函数的作用域保持一致</span></span><br><span class="line">        &#125;)();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (node.hasAttribute(<span class="string">'v-model'</span>) &amp;&amp; (node.tagName == <span class="string">'INPUT'</span> || node.tagName == <span class="string">'TEXTAREA'</span>)) &#123; <span class="comment">// 如果有v-model属性，并且元素是INPUT或者TEXTAREA，我们监听它的input事件</span></span><br><span class="line">        node.addEventListener(<span class="string">'input'</span>, (<span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;  </span><br><span class="line">          <span class="keyword">var</span> attrVal = node.getAttribute(<span class="string">'v-model'</span>);</span><br><span class="line">           <span class="comment">//_this._binding['number']._directives = [一个Watcher实例]</span></span><br><span class="line">           <span class="comment">// 其中Watcher.prototype.update = function () &#123;</span></span><br><span class="line">           <span class="comment">//    node['vaule'] = _this.$data['number'];  这就将node的值保持与number一致</span></span><br><span class="line">           <span class="comment">// &#125;</span></span><br><span class="line">          _this._binding[attrVal]._directives.push(<span class="keyword">new</span> Watcher(  </span><br><span class="line">            <span class="string">'input'</span>,</span><br><span class="line">            node,</span><br><span class="line">            _this,</span><br><span class="line">            attrVal,</span><br><span class="line">            <span class="string">'value'</span></span><br><span class="line">          ))</span><br><span class="line"></span><br><span class="line">          <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            _this.$data[attrVal] =  nodes[key].value; <span class="comment">// 使number 的值与 node的value保持一致，已经实现了双向绑定</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)(i));</span><br><span class="line">      &#125; </span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (node.hasAttribute(<span class="string">'v-bind'</span>)) &#123; <span class="comment">// 如果有v-bind属性，我们只要使node的值及时更新为data中number的值即可</span></span><br><span class="line">        <span class="keyword">var</span> attrVal = node.getAttribute(<span class="string">'v-bind'</span>);</span><br><span class="line">        _this._binding[attrVal]._directives.push(<span class="keyword">new</span> Watcher(</span><br><span class="line">          <span class="string">'text'</span>,</span><br><span class="line">          node,</span><br><span class="line">          _this,</span><br><span class="line">          attrVal,</span><br><span class="line">          <span class="string">'innerHTML'</span></span><br><span class="line">        ))</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>  至此，我们已经实现了一个简单vue的双向绑定功能，包括v-bind, v-model, v-click三个指令。效果如下图<br>  <img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fq7aw6sl3hg30go072qva.gif" alt="img"><br>  附上全部代码，不到150行<br>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line">  &lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;title&gt;myVue&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">  #app &#123;</span><br><span class="line">    text-align: center;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp">  &lt;div id="app"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;form&gt;</span></span><br><span class="line"><span class="regexp">      &lt;input type="text"  v-model="number"&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button type="button" v-click="increment"&gt;增加&lt;/</span>button&gt;</span><br><span class="line">    &lt;<span class="regexp">/form&gt;</span></span><br><span class="line"><span class="regexp">    &lt;h3 v-bind="number"&gt;&lt;/</span>h3&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">myVue</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>._init(options);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  myVue.prototype._init = <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.$options = options;</span><br><span class="line">    <span class="keyword">this</span>.$el = <span class="built_in">document</span>.querySelector(options.el);</span><br><span class="line">    <span class="keyword">this</span>.$data = options.data;</span><br><span class="line">    <span class="keyword">this</span>.$methods = options.methods;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>._binding = &#123;&#125;;</span><br><span class="line">    <span class="keyword">this</span>._obverse(<span class="keyword">this</span>.$data);</span><br><span class="line">    <span class="keyword">this</span>._complie(<span class="keyword">this</span>.$el);</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  myVue.prototype._obverse = <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> value;</span><br><span class="line">    <span class="keyword">for</span> (key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">      <span class="keyword">if</span> (obj.hasOwnProperty(key)) &#123;</span><br><span class="line">        <span class="keyword">this</span>._binding[key] = &#123;                                                                                                                                                          </span><br><span class="line">          _directives: []</span><br><span class="line">        &#125;;</span><br><span class="line">        value = obj[key];</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="string">'object'</span>) &#123;</span><br><span class="line">          <span class="keyword">this</span>._obverse(value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> binding = <span class="keyword">this</span>._binding[key];</span><br><span class="line">        <span class="built_in">Object</span>.defineProperty(<span class="keyword">this</span>.$data, key, &#123;</span><br><span class="line">          enumerable: <span class="literal">true</span>,</span><br><span class="line">          configurable: <span class="literal">true</span>,</span><br><span class="line">          get: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">`获取<span class="subst">$&#123;value&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">          &#125;,</span><br><span class="line">          set: <span class="function"><span class="keyword">function</span> (<span class="params">newVal</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">`更新<span class="subst">$&#123;newVal&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">if</span> (value !== newVal) &#123;</span><br><span class="line">              value = newVal;</span><br><span class="line">              binding._directives.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">                item.update();</span><br><span class="line">              &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  myVue.prototype._complie = <span class="function"><span class="keyword">function</span> (<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _this = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">var</span> nodes = root.children;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; nodes.length; i++) &#123;</span><br><span class="line">      <span class="keyword">var</span> node = nodes[i];</span><br><span class="line">      <span class="keyword">if</span> (node.children.length) &#123;</span><br><span class="line">        <span class="keyword">this</span>._complie(node);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (node.hasAttribute(<span class="string">'v-click'</span>)) &#123;</span><br><span class="line">        node.onclick = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">var</span> attrVal = nodes[i].getAttribute(<span class="string">'v-click'</span>);</span><br><span class="line">          <span class="keyword">return</span> _this.$methods[attrVal].bind(_this.$data);</span><br><span class="line">        &#125;)();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (node.hasAttribute(<span class="string">'v-model'</span>) &amp;&amp; (node.tagName == <span class="string">'INPUT'</span> || node.tagName == <span class="string">'TEXTAREA'</span>)) &#123;</span><br><span class="line">        node.addEventListener(<span class="string">'input'</span>, (<span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">var</span> attrVal = node.getAttribute(<span class="string">'v-model'</span>);</span><br><span class="line">          _this._binding[attrVal]._directives.push(<span class="keyword">new</span> Watcher(</span><br><span class="line">            <span class="string">'input'</span>,</span><br><span class="line">            node,</span><br><span class="line">            _this,</span><br><span class="line">            attrVal,</span><br><span class="line">            <span class="string">'value'</span></span><br><span class="line">          ))</span><br><span class="line"></span><br><span class="line">          <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            _this.$data[attrVal] =  nodes[key].value;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)(i));</span><br><span class="line">      &#125; </span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (node.hasAttribute(<span class="string">'v-bind'</span>)) &#123;</span><br><span class="line">        <span class="keyword">var</span> attrVal = node.getAttribute(<span class="string">'v-bind'</span>);</span><br><span class="line">        _this._binding[attrVal]._directives.push(<span class="keyword">new</span> Watcher(</span><br><span class="line">          <span class="string">'text'</span>,</span><br><span class="line">          node,</span><br><span class="line">          _this,</span><br><span class="line">          attrVal,</span><br><span class="line">          <span class="string">'innerHTML'</span></span><br><span class="line">        ))</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Watcher</span>(<span class="params">name, el, vm, exp, attr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;         <span class="comment">//指令名称，例如文本节点，该值设为"text"</span></span><br><span class="line">    <span class="keyword">this</span>.el = el;             <span class="comment">//指令对应的DOM元素</span></span><br><span class="line">    <span class="keyword">this</span>.vm = vm;             <span class="comment">//指令所属myVue实例</span></span><br><span class="line">    <span class="keyword">this</span>.exp = exp;           <span class="comment">//指令对应的值，本例如"number"</span></span><br><span class="line">    <span class="keyword">this</span>.attr = attr;         <span class="comment">//绑定的属性值，本例为"innerHTML"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.update();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Watcher.prototype.update = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.el[<span class="keyword">this</span>.attr] = <span class="keyword">this</span>.vm.$data[<span class="keyword">this</span>.exp];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> app = <span class="keyword">new</span> myVue(&#123;</span><br><span class="line">      el:<span class="string">'#app'</span>,</span><br><span class="line">      data: &#123;</span><br><span class="line">        number: <span class="number">0</span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        increment: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">this</span>.number ++;</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>以上就是所有内容，这个代码不是我创造的，我只是代码的搬运工。</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>webSocket</title>
      <link href="/2018/08/29/webSocket%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2018/08/29/webSocket%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>在项目中使用websocket的小心得<br><a id="more"></a></p><h2 id="webSocket在项目中的使用"><a href="#webSocket在项目中的使用" class="headerlink" title="webSocket在项目中的使用"></a>webSocket在项目中的使用</h2><p>&emsp;&emsp;webSocket,这个技术相信大家都已经很熟悉了，就是前端浏览器与后端服务器一直保持连通状态，我们在项目中，经常会遇到这样的需求，一个数据图表展示页面，产品的需求是每隔5秒钟页面刷新一次，传统的做法是请求轮询机制，也就是setInterval这个定时器，一遍又一遍的请求后端接口，这个方法简单（特别是后端简单），但是如果前端页面有大量的这种需求，会影响性能，所以，webSocket是现在最好的选择。<br>&emsp;&emsp;其实webSocket现在还是比较重要的，一般在面试的时候，被问到的几率还是很大的。我之前在项目中没有用到过，但是自己写过webSocket的demo，浏览器配合nodejs来写，也是参考了网上的代码，还是很简单的<a href="https://github.com/jinux7/study-collections/tree/master/websocket-test" target="_blank" rel="noopener">webSocket详细代码看这里</a>。在面试时被问到的时候，也是实话实说，有可能面试官也是小白，基本上都没往下问，但是，确实是这么简单吗？答案显然不是，待我慢慢道来。<br>&emsp;&emsp;首先，我在最近两个项目中，都用到了webSocket，所以还是有发言权的。如果，产品提出了webSocket的需求，对于我们前端来说，并不是直接写个原生的webSocket就可以，而是需要看后端小伙伴们的脸色，什么意思？就是说得看后端用的是什么webSocket库，我接触的有两种，第一个是stomp,说是webSocket的子协议，后端选了这个库之后，我们前端也得相应的选择与后端相配合的前端库，一般情况下，官网很明确的给出了后端和前端相配合写法，当然，写法也是很简单，跟原生差不多。第二个是，sockjs这个库，当然，也是后端小伙伴选好了之后，告诉我，我相应的在前端也用的跟后端一样库。<br>&emsp;&emsp;最后总结一下，webSocket技术并不难（对于我们前端来说，当然，nodejs的后端也很简单，java就不知道了，每次调起来看他们都是一脸懵逼的样子），无论是面试还是在实际工作中，问道这个问题时，我们首先想到的应该是，后端选择的是什么库，我们前端应该跟后端小伙伴保持一致，可别需求以来，觉得简单直接开些，等联调的时候，我靠，为什么连不上呢？你们前后端不在一个频道上，怎么连接啊。所以，我们要说，我做过的项目是这样这样滴，不知道这次我们后端小伙伴用到的webSocket库是什么呢？</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
            <tag> webSocket </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>nodejs代理服务器</title>
      <link href="/2018/08/27/nodejs%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2018/08/27/nodejs%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>nodejs代理服务器简单实现<br><a id="more"></a></p><h2 id="nodejs代理服务"><a href="#nodejs代理服务" class="headerlink" title="nodejs代理服务"></a>nodejs代理服务</h2><p> 最近在与后台同事联调的时候，出现了点故障，跨域，这个经常碰到很好解决的问题，但是一般情况下需要前后端一起配合来解决，比如jsonp，或者h5后端在返回头加上允许跨域的头设置，但是如果后台同事是个小白，问啥啥不明白，也是没招了。我之前还用过将chrome的跨域设置给禁掉的方法，但是这次不知道为啥，也不好使了。最后，只能是用代理这种方式，我现在用的是vue框架，其实vue的脚手架已经集成了跨域功能，只需要配置一下就可以，但是，现在框架这么多，前一阵子还react，angular的项目，最近有换成vue，配置的话，肯定要去查看api，记不住啊，而且，版本不同，设置方法也不同，不如自己写一个，这样多简单，需要的时候把代理服务开启就搞定了。于是乎，自己写一个，当然，稍微想一下就知道，代理的原理，就是利用nodejs在中间做一次请求以及数据返回，不过自己写还得思考，上网找一下多简单，baidu一搜索，哇靠，第一个映入眼帘的就是nodejs代理服务8行代码，嗯，就是这么简单，废话不多说，上代码,当然，自己还得加工一下哦。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> request = <span class="built_in">require</span>(<span class="string">'request'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> proxyUrl = process.argv[<span class="number">2</span>] || <span class="string">'http://127.0.0.1:8888'</span>; <span class="comment">// 如果有传入的代理url，使用它</span></span><br><span class="line">app.all(<span class="string">'*'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    res.header(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"*"</span>);</span><br><span class="line">    res.header(<span class="string">"Access-Control-Allow-Headers"</span>, <span class="string">"Content-Type,Content-Length, Authorization, Accept,X-Requested-With"</span>);</span><br><span class="line">    res.header(<span class="string">"Access-Control-Allow-Methods"</span>,<span class="string">"PUT,POST,GET,DELETE,OPTIONS"</span>);</span><br><span class="line">    res.header(<span class="string">"X-Powered-By"</span>,<span class="string">' 3.2.1'</span>)</span><br><span class="line">    <span class="keyword">if</span>(req.method==<span class="string">"OPTIONS"</span>) res.send(<span class="number">200</span>); <span class="comment">// 让options请求快速返回</span></span><br><span class="line">    <span class="keyword">else</span>  next();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> url = proxyUrl + req.url;</span><br><span class="line">    req.pipe(request(url)).pipe(res);</span><br><span class="line">&#125;);</span><br><span class="line">app.listen(process.env.PORT || <span class="number">3000</span>, ()=&gt;&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'代理服务器，在3000端口已经开启'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p> 再把package.json文件内容贴出来<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;node-proxy&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;index.js&quot;,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;serve&quot;: &quot;node server http://127.0.0.1:9000&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;keywords&quot;: [],</span><br><span class="line">  &quot;author&quot;: &quot;&quot;,</span><br><span class="line">  &quot;license&quot;: &quot;ISC&quot;,</span><br><span class="line">  &quot;dependencies&quot;: &#123;</span><br><span class="line">    &quot;express&quot;: &quot;^4.16.3&quot;,</span><br><span class="line">    &quot;request&quot;: &quot;^2.88.0&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><a href="https://github.com/jinux7/study-collections/tree/master/node-proxy-代理服务器" target="_blank" rel="noopener">源码在这里</a></p>]]></content>
      
      
      <categories>
          
          <category> nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端代理服务 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
